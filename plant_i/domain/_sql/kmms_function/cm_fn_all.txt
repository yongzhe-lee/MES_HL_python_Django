-- DROP FUNCTION public.cm_fn_dateadd(date, varchar, numeric);

CREATE OR REPLACE FUNCTION public.cm_fn_dateadd(target_date date, date_type character varying, date_val numeric)
 RETURNS date
 LANGUAGE sql
AS $function$
	select target_date + (date_val || ' ' || date_type)::INTERVAL 
$function$
;

-- DROP FUNCTION public.cm_fn_datediff(timestamp, timestamp);

CREATE OR REPLACE FUNCTION public.cm_fn_datediff(date1 timestamp without time zone, date2 timestamp without time zone)
 RETURNS integer
 LANGUAGE sql
AS $function$
SELECT cast(date1 as date) - cast(date2 as date) as DateDifference
$function$
;

-- DROP FUNCTION public.cm_fn_get_dept_business_cd(int8);

CREATE OR REPLACE FUNCTION public.cm_fn_get_dept_business_cd(cm_v_dept_pk bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
declare
	t_business_cd character varying(20);
begin
	with x as (
		select unnest(path_info_pk) as path_pk from cm_v_dept where dept_pk = cm_v_dept_pk
	)
	select max(case when d.business_yn = 'Y' then d.dept_cd else null end) as business_cd
	into t_business_cd
	from x
	inner join cm_dept d on x.path_pk = d.dept_pk;
	
	RETURN t_business_cd;
	
end;
$function$
;

-- DROP FUNCTION public.cm_fn_get_dept_business_nm(int8);

CREATE OR REPLACE FUNCTION public.cm_fn_get_dept_business_nm(cm_v_dept_pk bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
declare
	t_business_nm varchar;
begin
	with x as (
		select unnest(path_info_pk) as path_pk from cm_v_dept where dept_pk = cm_v_dept_pk
	)
	select max(case when d.business_yn = 'Y' then d.dept_nm else '' end) as business_nm
	into t_business_nm
	from x
	inner join cm_dept d on x.path_pk = d.dept_pk;
	
	RETURN t_business_nm;
	
end;
$function$
;

-- DROP FUNCTION public.cm_fn_get_dept_business_pk(int8);

CREATE OR REPLACE FUNCTION public.cm_fn_get_dept_business_pk(cm_v_dept_pk bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
declare
	t_business_pk bigint;
begin
	with x as (
		select unnest(path_info_pk) as path_pk from cm_v_dept where dept_pk = cm_v_dept_pk
	)
	select max(case when d.business_yn = 'Y' then d.dept_pk else null end) as business_pk
	into t_business_pk
	from x
	inner join cm_dept d on x.path_pk = d.dept_pk;
	
	RETURN t_business_pk;
	
end;
$function$
;

-- DROP FUNCTION public.cm_fn_get_dept_cd_business_nm(text, int4);

CREATE OR REPLACE FUNCTION public.cm_fn_get_dept_cd_business_nm(cm_v_dept_cd text, v_factory_pk integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
declare
	business_nm text;
begin
	select "Name" 
	into business_nm 
	from dept 
	where upper("Code") = upper(cm_v_dept_cd)
	 and "Factory_id" = v_factory_pk
	;

	return business_nm;
end;
$function$
;

-- DROP FUNCTION public.cm_fn_get_dept_cd_business_nm(text, varchar);

CREATE OR REPLACE FUNCTION public.cm_fn_get_dept_cd_business_nm(cm_v_dept_cd text, v_site_id character varying)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
declare
	business_nm text;
begin
	select dept_nm 
	into business_nm 
	from cm_dept 
	where upper(dept_cd) = upper(cm_v_dept_cd)
	and upper(site_id) = upper(v_site_id);
	
	return business_nm;
end;
$function$
;

-- DROP FUNCTION public.cm_fn_get_dept_path(varchar, varchar);

CREATE OR REPLACE FUNCTION public.cm_fn_get_dept_path(v_site_id character varying, v_team_yn character varying)
 RETURNS TABLE(dept_pk bigint, dept_cd character varying, dept_nm character varying, site_id character varying, path_info character varying, path_info_pk bigint)
 LANGUAGE plpgsql
AS $function$
declare 
    v_rec record;
begin
	for v_rec in(
		WITH cte AS (
			select d.dept_pk
				, d.dept_cd
				, d.dept_nm
				, d.site_id
				, x.path_info 
				, x.path_info_pk 
			from cm_v_dept_path x
			inner join (
				select d.*
				from cm_dept d
				where d.use_yn = 'Y' and d.del_yn = 'N'
				and d.site_id = (CASE WHEN v_site_id IS NULL THEN d.site_id ELSE UPPER(v_site_id) END)
				and d.team_yn = (CASE WHEN coalesce(v_team_yn, UPPER('N')) = UPPER('Y') THEN UPPER(v_team_yn) ELSE d.team_yn END)
			) d on x.dept_pk = d.dept_pk
        )
		 SELECT cte.dept_pk,
		    cte.dept_cd,
		    cte.dept_nm,
		    cte.site_id,
		    cte.path_info,
		    cte.path_info_pk
		   from cte
        ) loop  
	       	dept_pk := v_rec.dept_pk; 
	       	dept_cd := v_rec.dept_cd; 
	       	dept_nm := v_rec.dept_nm; 
	       	site_id := v_rec.site_id; 
	       	path_info := v_rec.path_info; 
	       	path_info_pk := v_rec.path_info_pk; 
       		return next;
	end loop;
end; $function$
;

-- DROP FUNCTION public.cm_fn_get_dept_path_names(int8);

CREATE OR REPLACE FUNCTION public.cm_fn_get_dept_path_names(cm_v_dept_pk bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
declare
	t_business_nm varchar;
	t_team_nm varchar;
	t_ban_nm varchar;
begin
	with x as (
		select unnest(path_info_pk) as path_pk from cm_v_dept where dept_pk = cm_v_dept_pk
	)
	select max(case when d.business_yn = 'Y' then d.dept_nm else '' end) as business_nm
	, max(case when d.team_yn = 'Y' then d.dept_nm else '' end) as team_nm
	, max(case when coalesce(d.business_yn, 'N') = 'N' and  coalesce(d.team_yn, 'N') = 'N' then d.dept_nm else '' end) as ban_nm
	into t_business_nm, t_team_nm, t_ban_nm
	from x
	inner join cm_dept d on x.path_pk = d.dept_pk;
	
	RETURN concat(t_business_nm, ',', t_team_nm, ',', t_ban_nm);
	
end;
$function$
;

-- DROP FUNCTION public.cm_fn_get_dept_pk(varchar, varchar);

CREATE OR REPLACE FUNCTION public.cm_fn_get_dept_pk(cm_v_dept_cd character varying, v_site_id character varying)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
	cm_v_dept_pk integer;
begin

	select dept_pk 
	into cm_v_dept_pk
	from cm_dept 
	where upper(dept_cd) = upper(cm_v_dept_cd)
	and upper(site_id) = upper(v_site_id)
	;
	
	RETURN cm_v_dept_pk;
	
end;
$function$
;

-- DROP FUNCTION public.cm_fn_get_dept_team_busi_yn(int8);

CREATE OR REPLACE FUNCTION public.cm_fn_get_dept_team_busi_yn(cm_v_dept_pk bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
declare
	t_team_busi_yn varchar;
begin
	with x as (
		select unnest(path_info_pk) as path_pk from cm_v_dept where dept_pk = cm_v_dept_pk
	)
	select max(case when d.team_yn = 'Y' then d.team_busi_yn else 'N' end) as team_busi_yn
	into t_team_busi_yn
	from x
	inner join cm_dept d on x.path_pk = d.dept_pk;
	
	RETURN t_team_busi_yn;
	
end;
$function$
;

-- DROP FUNCTION public.cm_fn_get_dept_team_nm(int8);

CREATE OR REPLACE FUNCTION public.cm_fn_get_dept_team_nm(cm_v_dept_pk bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
declare
	t_team_nm varchar;
begin
	with x as (
		select unnest(path_info_pk) as path_pk from cm_v_dept where dept_pk = cm_v_dept_pk
	)
	select max(case when d.team_yn = 'Y' then d.dept_nm else '' end) as team_nm
	into t_team_nm
	from x
	inner join cm_dept d on x.path_pk = d.dept_pk;
	
	RETURN t_team_nm;
	
end;
$function$
;

-- DROP FUNCTION public.cm_fn_get_dept_team_pk(int8);

CREATE OR REPLACE FUNCTION public.cm_fn_get_dept_team_pk(cm_v_dept_pk bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
declare
	t_team_pk bigint;
begin
	with x as (
		select unnest(path_info_pk) as path_pk from cm_v_dept where dept_pk = cm_v_dept_pk
	)
	select max(case when d.team_yn = 'Y' then d.dept_pk else null end) as team_nm
	into t_team_pk
	from x
	inner join cm_dept d on x.path_pk = d.dept_pk;
	
	RETURN t_team_pk;
	
end;
$function$
;

-- DROP FUNCTION public.cm_fn_get_equip(varchar);

CREATE OR REPLACE FUNCTION public.cm_fn_get_equip(v_site_id character varying)
 RETURNS TABLE(equip_pk bigint, up_equip_pk bigint, equip_category_id character varying, dept_pk bigint, equip_nm character varying, site_id character varying, environ_equip_yn character, indent_equip_nm character varying, equip_status_cd character varying, equip_status_nm character varying, lvl integer, path_info bigint[], equip_cd character varying)
 LANGUAGE plpgsql
AS $function$
declare 
    v_rec record;
begin
	for v_rec in(
		WITH RECURSIVE ep2 AS (
		         SELECT t1.equip_pk,
		            t1.up_equip_pk,
		            t1.equip_category_id,
		            t1.dept_pk,
		            t1.equip_nm,
		            t1.site_id,
		            t1.environ_equip_yn,
		            t1.equip_status AS equip_status_cd,
		                CASE t1.equip_status
		                    WHEN 'EQUIP_STATUS_O'::text THEN '      '::text
		                    WHEN 'EQUIP_STATUS_B'::text THEN '      '::text
		                    WHEN 'EQUIP_STATUS_D'::text THEN ' ҿ   '::text
		                    ELSE '      '::text
		                END AS equip_status_nm,
		            concat('', t1.equip_nm) AS indent_equip_nm,
		            1 AS lvl,
		            ARRAY[t1.equip_pk] AS path_info,
		            t1.equip_cd
		           FROM cm_equipment t1
		          WHERE t1.up_equip_pk IS NULL AND t1.del_yn::text = 'N'::text
		          AND t1.site_id = v_site_id
		        UNION ALL
		         SELECT t2.equip_pk,
		            t2.up_equip_pk,
		            t2.equip_category_id,
		            t2.dept_pk,
		            t2.equip_nm,
		            t2.site_id,
		            t2.environ_equip_yn,
		            t2.equip_status AS equip_status_cd,
		                CASE t2.equip_status
		                    WHEN 'EQUIP_STATUS_O'::text THEN '      '::text
		                    WHEN 'EQUIP_STATUS_B'::text THEN '      '::text
		                    WHEN 'EQUIP_STATUS_D'::text THEN ' ҿ   '::text
		                    ELSE '      '::text
		                END AS equip_status_nm,
		            concat(rpad(''::text, s.lvl * 2, '  '::text), t2.equip_nm) AS indent_equip_nm,
		            s.lvl + 1,
		            s.path_info || t2.equip_pk,
		            t2.equip_cd
		           FROM cm_equipment t2
		             JOIN cm_ep2 s ON s.equip_pk = t2.up_equip_pk
		          WHERE t2.del_yn::text = 'N'::text
		          AND t2.site_id = v_site_id
		        )
		 SELECT ep2.equip_pk,
		    ep2.up_equip_pk,
		    ep2.equip_category_id,
		    ep2.dept_pk,
		    ep2.equip_nm,
		    ep2.site_id,
		    ep2.environ_equip_yn,
		    ep2.indent_equip_nm,
		    ep2.equip_status_cd,
		    ep2.equip_status_nm,
		    ep2.lvl,
		    ep2.path_info,
		    ep2.equip_cd
		   FROM cm_ep2
		  ORDER BY ep2.path_info
        ) loop  
	       	equip_pk := v_rec.equip_pk; 
	       	up_equip_pk := v_rec.up_equip_pk; 
	       	equip_category_id := v_rec.equip_category_id; 
	       	dept_pk := v_rec.dept_pk; 
	       	equip_nm := v_rec.equip_nm; 
	       	site_id := v_rec.site_id; 
	       	environ_equip_yn := v_rec.environ_equip_yn; 
	       	indent_equip_nm := v_rec.indent_equip_nm; 
	       	equip_status_cd := v_rec.equip_status_cd; 
	       	equip_status_nm := v_rec.equip_status_nm; 
	       	lvl := v_rec.lvl; 
	       	path_info := v_rec.path_info; 
	       	equip_cd := v_rec.equip_cd; 
       		return next;
	end loop;
end; $function$
;

-- DROP FUNCTION public.cm_fn_get_equip(varchar, varchar);

CREATE OR REPLACE FUNCTION public.cm_fn_get_equip(v_site_id character varying, v_equip_cd character varying)
 RETURNS TABLE(equip_pk bigint, up_equip_pk bigint, equip_category_id character varying, dept_pk bigint, equip_nm character varying, site_id character varying, environ_equip_yn character, indent_equip_nm character varying, equip_status_cd character varying, equip_status_nm character varying, lvl integer, path_info bigint[], equip_cd character varying)
 LANGUAGE plpgsql
AS $function$
declare 
    v_rec record;
begin
	for v_rec in(
		WITH RECURSIVE ep2 AS (
		         SELECT t1.equip_pk,
		            t1.up_equip_pk,
		            t1.equip_category_id,
		            t1.dept_pk,
		            t1.equip_nm,
		            t1.site_id,
		            t1.environ_equip_yn,
		            t1.equip_status AS equip_status_cd,
		                CASE t1.equip_status
		                    WHEN 'EQUIP_STATUS_O'::text THEN '      '::text
		                    WHEN 'EQUIP_STATUS_B'::text THEN '      '::text
		                    WHEN 'EQUIP_STATUS_D'::text THEN ' ҿ   '::text
		                    ELSE '      '::text
		                END AS equip_status_nm,
		            concat('', t1.equip_nm) AS indent_equip_nm,
		            1 AS lvl,
		            ARRAY[t1.equip_pk] AS path_info,
		            t1.equip_cd
		           FROM cm_equipment t1
		          WHERE t1.up_equip_pk IS NULL AND t1.del_yn::text = 'N'::text
		          AND t1.site_id = v_site_id
		        UNION ALL
		         SELECT t2.equip_pk,
		            t2.up_equip_pk,
		            t2.equip_category_id,
		            t2.dept_pk,
		            t2.equip_nm,
		            t2.site_id,
		            t2.environ_equip_yn,
		            t2.equip_status AS equip_status_cd,
		                CASE t2.equip_status
		                    WHEN 'EQUIP_STATUS_O'::text THEN '      '::text
		                    WHEN 'EQUIP_STATUS_B'::text THEN '      '::text
		                    WHEN 'EQUIP_STATUS_D'::text THEN ' ҿ   '::text
		                    ELSE '      '::text
		                END AS equip_status_nm,
		            concat(rpad(''::text, s.lvl * 2, '  '::text), t2.equip_nm) AS indent_equip_nm,
		            s.lvl + 1,
		            s.path_info || t2.equip_pk,
		            t2.equip_cd
		           FROM cm_equipment t2
		             JOIN ep2 s ON s.equip_pk = t2.up_equip_pk
		          WHERE t2.del_yn::text = 'N'::text
		          AND t2.site_id = v_site_id
		        )
		 SELECT ep2.equip_pk,
		    ep2.up_equip_pk,
		    ep2.equip_category_id,
		    ep2.dept_pk,
		    ep2.equip_nm,
		    ep2.site_id,
		    ep2.environ_equip_yn,
		    ep2.indent_equip_nm,
		    ep2.equip_status_cd,
		    ep2.equip_status_nm,
		    ep2.lvl,
		    ep2.path_info,
		    ep2.equip_cd
		   FROM ep2
		   where ep2.equip_cd = v_equip_cd
		  ORDER BY ep2.path_info
        ) loop  
	       	equip_pk := v_rec.equip_pk; 
	       	up_equip_pk := v_rec.up_equip_pk; 
	       	equip_category_id := v_rec.equip_category_id; 
	       	dept_pk := v_rec.dept_pk; 
	       	equip_nm := v_rec.equip_nm; 
	       	site_id := v_rec.site_id; 
	       	environ_equip_yn := v_rec.environ_equip_yn; 
	       	indent_equip_nm := v_rec.indent_equip_nm; 
	       	equip_status_cd := v_rec.equip_status_cd; 
	       	equip_status_nm := v_rec.equip_status_nm; 
	       	lvl := v_rec.lvl; 
	       	path_info := v_rec.path_info; 
	       	equip_cd := v_rec.equip_cd; 
       		return next;
	end loop;
end; $function$
;

-- DROP FUNCTION public.cm_fn_get_equip_classify(int4);

CREATE OR REPLACE FUNCTION public.cm_fn_get_equip_classify(v_factory_pk integer)
 RETURNS TABLE(id character varying, up_id character varying, equip_class_id character varying, equip_class_desc character varying, parent_id character varying, equip_class_pk integer, up_equip_class_pk integer, hierarchy_path character varying, path_info character varying, lvl integer, class_type character varying, factory_pk integer)
 LANGUAGE plpgsql
AS $function$
declare 
    v_rec record;
begin
	for v_rec in(
		WITH RECURSIVE cte AS (
         SELECT (t1.class_type::text || '_'::text) || t1.equip_class_id::text AS id,
         	(case when coalesce(t1.parent_id, '') = '' then null else (ut1.class_type::text || '_'::text) || ut1.equip_class_id::text end) AS up_id,
            t1.equip_class_id,
            t1.equip_class_desc,
            ut1.equip_class_id AS parent_id,
            t1.equip_class_pk,
            NULL::bigint AS up_equip_class_pk,
            t1.hierarchy_path,
            ARRAY[t1.equip_class_id::text] AS path_info,
            1 AS lvl,
            t1.class_type,
            t1.factory_pk as factory_pk
           FROM cm_equip_classify t1
           left outer join cm_equip_classify ut1 ON t1.parent_id::text = ut1.equip_class_id::text 
			and t1.factory_pk = ut1.factory_pk
          WHERE t1.parent_id IS NULL 
          AND t1.class_type::text = 'CLASS'::text
          AND t1.factory_pk = v_factory_pk
        UNION ALL
         SELECT (t2.class_type::text || '_'::text) || t2.equip_class_id::text AS id,
         	(case when coalesce(t2.parent_id, '') = '' then null else (s.class_type::text || '_'::text) || s.equip_class_id::text end) AS up_id,
            t2.equip_class_id,
            t2.equip_class_desc,
            s.equip_class_id AS parent_id,
            t2.equip_class_pk,
            s.equip_class_pk AS up_equip_class_pk,
            t2.hierarchy_path,
            s.path_info || t2.equip_class_id::text AS path_info,
            s.lvl + 1,
            t2.class_type,
            t2.factory_pk
           from cte s
           left outer join cm_equip_classify t2 ON t2.parent_id::text = s.equip_class_id::text
          AND t2.class_type::text = 'TYPES'::text 
          AND t2.factory_pk = v_factory_pk
          AND t2.parent_id IS NOT NULL 
          AND array_to_string(s.path_info || t2.equip_class_id::text, '\'::text) = t2.hierarchy_path::text
          where s.factory_pk is not null 
          and t2.equip_class_id is not null 
        )
		 SELECT cte.id,
		    cte.up_id,
		    cte.equip_class_id,
		    cte.equip_class_desc,
		    cte.parent_id,
		    cte.equip_class_pk,
		    cte.up_equip_class_pk,
		    cte.hierarchy_path,
		    cte.path_info,
		    cte.lvl,
		    cte.class_type,
		    cte.factory_pk
		   from cte
		  ORDER BY cte.path_info
        ) loop  
	       	id := v_rec.id; 
	       	up_id := v_rec.up_id; 
	       	equip_class_id := v_rec.equip_class_id; 
	       	equip_class_desc := v_rec.equip_class_desc; 
	       	parent_id := v_rec.parent_id; 
	       	equip_class_pk := v_rec.equip_class_pk; 
	       	up_equip_class_pk := v_rec.up_equip_class_pk; 
	       	hierarchy_path := v_rec.hierarchy_path; 
	       	path_info := v_rec.path_info; 
	       	lvl := v_rec.lvl; 
	       	class_type := v_rec.class_type; 
	       	factory_pk := v_rec.factory_pk;  
       		return next;
	end loop;
end; $function$
;

-- DROP FUNCTION public.cm_fn_get_equip_classify_ctg(int4, varchar);

CREATE OR REPLACE FUNCTION public.cm_fn_get_equip_classify_ctg(v_factory_pk integer, v_category_id character varying)
 RETURNS TABLE(id character varying, up_id character varying, equip_class_id character varying, equip_class_desc character varying, parent_id character varying, equip_class_pk integer, up_equip_class_pk integer, hierarchy_path character varying, path_info character varying, lvl integer, class_type character varying, factory_pk integer, category_id character varying)
 LANGUAGE plpgsql
AS $function$
declare 
    v_rec record;
begin
	for v_rec in(
		WITH recursive CTE AS (
		SELECT
				(T1.CLASS_TYPE || '_' || T1.EQUIP_CLASS_ID) AS ID,
				CASE WHEN T1.PARENT_ID IS NULL THEN NULL ELSE  (UT1.CLASS_TYPE || '_' || UT1.EQUIP_CLASS_ID)  END AS UP_ID,
				T1.EQUIP_CLASS_ID,
				T1.EQUIP_CLASS_DESC,
				UT1.EQUIP_CLASS_ID AS PARENT_ID,
				T1.EQUIP_CLASS_PK,
				null::smallint AS UP_EQUIP_CLASS_PK,
				T1.HIERARCHY_PATH,
				T1.EQUIP_CLASS_ID::text AS PATH_INFO,
				1 AS LVL,
				T1.CLASS_TYPE,
				T1.factory_pk as factory_pk,
				T1.CATEGORY_ID
			FROM cm_EQUIP_CLASSIFY T1
			LEFT JOIN cm_EQUIP_CLASSIFY UT1 ON T1.PARENT_ID = UT1.EQUIP_CLASS_ID AND T1.factory_pk = UT1.factory_pk
			WHERE T1.PARENT_ID IS NULL
				AND T1.CLASS_TYPE = 'CLASS'
				AND T1.factory_pk = v_factory_pk
				AND T1.CATEGORY_ID = V_CATEGORY_ID
			UNION ALL
			SELECT
				(T2.CLASS_TYPE || '_' || T2.EQUIP_CLASS_ID) AS ID,
				CASE WHEN T2.PARENT_ID IS NULL THEN NULL ELSE  (S.CLASS_TYPE || '_' || S.EQUIP_CLASS_ID)  END AS UP_ID,
				T2.EQUIP_CLASS_ID,
				T2.EQUIP_CLASS_DESC,
				S.EQUIP_CLASS_ID AS PARENT_ID,
				T2.EQUIP_CLASS_PK,
				S.EQUIP_CLASS_PK AS UP_EQUIP_CLASS_PK,
				T2.HIERARCHY_PATH,
				concat(S.PATH_INFO || ',' || T2.EQUIP_CLASS_ID) AS PATH_INFO,
				S.LVL + 1,
				T2.CLASS_TYPE,
				T2.factory_pk,
				S.CATEGORY_ID
			from cte S
			LEFT JOIN cm_EQUIP_CLASSIFY T2 ON T2.PARENT_ID = S.EQUIP_CLASS_ID
				AND T2.CLASS_TYPE = 'TYPES'
				AND T2.factory_pk = v_factory_pk
				AND T2.PARENT_ID IS NOT NULL
				AND concat(S.PATH_INFO || ',' || T2.EQUIP_CLASS_ID) = REPLACE(T2.HIERARCHY_PATH, '\', ',')
			WHERE S.factory_pk IS NOT NULL AND T2.EQUIP_CLASS_ID IS NOT NULL
		)
		 SELECT CTE.ID AS ID,
			CTE.UP_ID AS UP_ID,
			CTE.EQUIP_CLASS_ID AS EQUIP_CLASS_ID,
			CTE.EQUIP_CLASS_DESC AS EQUIP_CLASS_DESC,
			CTE.PARENT_ID AS PARENT_ID,
			CTE.EQUIP_CLASS_PK AS EQUIP_CLASS_PK,
			CTE.UP_EQUIP_CLASS_PK AS UP_EQUIP_CLASS_PK,
			CTE.HIERARCHY_PATH AS HIERARCHY_PATH,
			CTE.PATH_INFO AS PATH_INFO,
			CTE.LVL AS LVL,
			CTE.CLASS_TYPE AS CLASS_TYPE,
			CTE.factory_pk AS factory_pk,
			CTE.CATEGORY_ID AS CATEGORY_ID
			from cte
			ORDER BY CTE.PATH_INFO
    ) loop  
	        id := v_rec.id; 
	        UP_ID := v_rec.UP_ID; 
	        EQUIP_CLASS_ID := v_rec.EQUIP_CLASS_ID; 
	        EQUIP_CLASS_DESC := v_rec.EQUIP_CLASS_DESC; 
	        PARENT_ID := v_rec.PARENT_ID; 
	        EQUIP_CLASS_PK := v_rec.EQUIP_CLASS_PK; 
	        UP_EQUIP_CLASS_PK := v_rec.UP_EQUIP_CLASS_PK; 
	        HIERARCHY_PATH := v_rec.HIERARCHY_PATH; 
	        PATH_INFO := v_rec.PATH_INFO; 
	        LVL := v_rec.LVL; 
	        CLASS_TYPE := v_rec.CLASS_TYPE; 
	        factory_pk := v_rec.factory_pk; 
	        CATEGORY_ID := v_rec.CATEGORY_ID;
       		return next;
	end loop;
end; $function$
;

-- DROP FUNCTION public.cm_fn_get_if_dept(varchar, varchar, varchar, int8, int8);

CREATE OR REPLACE FUNCTION public.cm_fn_get_if_dept(startdate character varying, enddate character varying, searchtext character varying, p_page bigint, p_size bigint)
 RETURNS TABLE(if_dept_code character varying, if_dept_name character varying, if_dept_uper character varying, if_column_1 character varying, if_column_2 character varying, if_column_3 character varying, if_column_4 character varying, if_column_5 character varying, total_rows integer)
 LANGUAGE plpgsql
AS $function$

declare 
    v_rec record;
begin
	for v_rec in ( 
		WITH CTE AS (
			select dept_cd as DEPT_CODE,
				   dept_nm as DEPT_NAME,
				   up_dept_pk as DEPT_UPER,
				   '' as IF_COLUMN_1,
				   '' as IF_COLUMN_2,
				   '' as IF_COLUMN_3,
				   '' as IF_COLUMN_4,
				   '' as IF_COLUMN_5
			from cm_dept d 
			where to_char(cast(d.insert_ts as date), 'YYYY-MM-DD') BETWEEN startDate and endDate
			and (searchText = null OR UPPER(d.dept_cd) LIKE CONCAT('%',UPPER(searchText),'%') OR UPPER(d.dept_nm) LIKE CONCAT('%',UPPER(searchText),'%'))
		)
		select COUNT(*) OVER() AS total_rows, *
		from (
			table cte
		) sub
		limit p_size offset (p_page-1)*p_size
	) loop
		if_DEPT_CODE := v_rec.DEPT_CODE;
		if_DEPT_NAME := v_rec.DEPT_NAME; 
		if_DEPT_UPER := v_rec.DEPT_UPER; 
		IF_COLUMN_1 := v_rec.IF_COLUMN_1; 
		IF_COLUMN_2 := v_rec.IF_COLUMN_2; 
		IF_COLUMN_3 := v_rec.IF_COLUMN_3;
		IF_COLUMN_4 := v_rec.IF_COLUMN_4;
		IF_COLUMN_5 := v_rec.IF_COLUMN_5;
		total_rows  := v_rec.total_rows;
       	return next;		
	end loop;
END;
$function$
;

-- DROP FUNCTION public.cm_fn_get_if_userinfo(varchar, varchar, varchar, int8, int8);

CREATE OR REPLACE FUNCTION public.cm_fn_get_if_userinfo(startdate character varying, enddate character varying, searchtext character varying, p_page bigint, p_size bigint)
 RETURNS TABLE(if_user_id character varying, if_sabun character varying, if_user_name character varying, if_dept_code character varying, if_column_1 character varying, if_column_2 character varying, if_column_3 character varying, if_column_4 character varying, if_column_5 character varying, if_column_6 character varying, if_column_7 character varying, if_column_8 character varying, if_column_9 character varying, if_column_10 character varying, if_column_11 character varying, if_column_12 character varying, if_column_13 character varying, if_column_14 character varying, if_column_15 character varying, if_column_16 character varying, if_column_17 character varying, if_column_18 character varying, if_column_19 character varying, total_rows integer)
 LANGUAGE plpgsql
AS $function$

declare 
    v_rec record;
begin
	for v_rec in ( 
		WITH CTE AS (
			select login_id		AS IF_USER_ID
				 , emp_no 		AS IF_SABUN
				 , user_nm 		AS IF_USER_NAME
				 , dept_pk 		AS IF_DEPT_CODE
				 , '' 			AS IF_COLUMN_1
				 , ''  			AS IF_COLUMN_2
				 , ''  			AS IF_COLUMN_3
				 , ''  			AS IF_COLUMN_4
				 , ''  			AS IF_COLUMN_5
				 , ''  			AS IF_COLUMN_6
				 , ''  			AS IF_COLUMN_7
				 , ''  			AS IF_COLUMN_8
				 , ''  			AS IF_COLUMN_9
				 , ''  			AS IF_COLUMN_10
				 , ''  			AS IF_COLUMN_11
				 , ''  			AS IF_COLUMN_12
				 , ''  			AS IF_COLUMN_13
				 , ''  			AS IF_COLUMN_14
				 , ''  			AS IF_COLUMN_15
				 , ''  			AS IF_COLUMN_16
				 , ''  			AS IF_COLUMN_17
				 , ''  			AS IF_COLUMN_18
				 , '' 			AS IF_COLUMN_19
			from cm_user_info ui 
			WHERE TO_CHAR(insert_ts, 'YYYY-MM-DD') BETWEEN startDate AND endDate
			AND (coalesce(searchText, '') = '' OR UPPER(ui.emp_no) LIKE '%' || UPPER(coalesce(searchText, '')) || '%' OR UPPER(ui.user_nm) LIKE '%' || UPPER(coalesce(searchText, '')) || '%')
		)
		select COUNT(*) OVER() AS total_rows, *
		from (
			table cte
		) sub
		limit p_size offset (p_page-1)*p_size
	) loop
		IF_USER_ID := v_rec.IF_USER_ID;
		IF_SABUN := v_rec.IF_SABUN; 
		IF_USER_NAME := v_rec.IF_USER_NAME; 
		IF_DEPT_CODE := v_rec.IF_DEPT_CODE; 
		IF_COLUMN_1 := v_rec.IF_COLUMN_1; 
		IF_COLUMN_2 := v_rec.IF_COLUMN_2; 
		IF_COLUMN_3 := v_rec.IF_COLUMN_3;
		IF_COLUMN_4 := v_rec.IF_COLUMN_4;
		IF_COLUMN_5 := v_rec.IF_COLUMN_5;
		IF_COLUMN_6 := v_rec.IF_COLUMN_6; 
		IF_COLUMN_7 := v_rec.IF_COLUMN_7; 
		IF_COLUMN_8 := v_rec.IF_COLUMN_8;
		IF_COLUMN_9 := v_rec.IF_COLUMN_9;
		IF_COLUMN_10 := v_rec.IF_COLUMN_10;
		IF_COLUMN_11 := v_rec.IF_COLUMN_11; 
		IF_COLUMN_12 := v_rec.IF_COLUMN_12; 
		IF_COLUMN_13 := v_rec.IF_COLUMN_13;
		IF_COLUMN_14 := v_rec.IF_COLUMN_14;
		IF_COLUMN_15 := v_rec.IF_COLUMN_15;
		IF_COLUMN_16 := v_rec.IF_COLUMN_16; 
		IF_COLUMN_17 := v_rec.IF_COLUMN_17; 
		IF_COLUMN_18 := v_rec.IF_COLUMN_18;
		IF_COLUMN_19 := v_rec.IF_COLUMN_19;
		total_rows  := v_rec.total_rows;
       	return next;		
	end loop;
END;
$function$
;

-- DROP FUNCTION public.cm_fn_get_img_url(varchar, varchar, varchar, varchar, varchar, varchar);

CREATE OR REPLACE FUNCTION public.cm_fn_get_img_url(v_file_stre_cours character varying, v_root_path character varying, v_file_stre_nm character varying, v_file_ext character varying, v_static_url character varying, v_site_id character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
declare
	v_return character varying;
begin

	IF (coalesce(v_file_stre_cours, '') = '' OR 
	coalesce(v_root_path, '') = '' OR 
	coalesce(v_file_stre_nm, '') = '' OR 
	coalesce(v_file_ext, '') = '' OR 
	coalesce(v_static_url, '') = '' OR 
	coalesce(v_site_id, '') = '') THEN
		v_return := '';
	else
		SELECT v_static_url  || '/' || COALESCE(v_site_id, 'WEZON')
			|| REPLACE(REPLACE(
					REPLACE(UPPER(v_file_stre_cours::text), UPPER(v_root_path::text), ''), '\\', '/'), '\', '/')
			|| '/THUMBNAIL/' || v_file_stre_nm || '.' || v_file_ext
		into v_return
		;
	END IF;
	
	RETURN v_return;
	
end;
$function$
;

-- DROP FUNCTION public.cm_fn_get_incineration(int8);

CREATE OR REPLACE FUNCTION public.cm_fn_get_incineration(v_loc_pk bigint)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
declare
	t_business_cd character varying(20);
begin
	with x as (
		select unnest(path_info_pk) as path_pk from cm_v_dept where dept_pk = v_loc_pk
	)
	select max(case when d.business_yn = 'Y' then d.dept_cd else null end) as business_cd
	into t_business_cd
	from x
	inner join cm_dept d on x.path_pk = d.dept_pk;
	
	RETURN t_business_cd;
	
end;
$function$
;

-- DROP FUNCTION public.cm_fn_get_last_insp_date(int8);

CREATE OR REPLACE FUNCTION public.cm_fn_get_last_insp_date(p_chk_mast_pk bigint)
 RETURNS date
 LANGUAGE plpgsql
AS $function$
declare
	v_last_date date;
	v_sched_start_dt date;
	v_next_chk_date date;
	v_next_date date;
	v_cycle_type character varying;
	v_per_number numeric;
begin
	
	/**
	 * select cm_fn_get_last_insp_date(chk_mast_pk)
	 * from cm_chk_mast_pk
	 */
	
	
	select max(t.chk_sche_dt)
	into v_last_date
	from cm_equip_chk_sche t
	inner join cm_chk_equip ce on t.chk_mast_pk = ce.chk_mast_pk 
	inner join cm_equipment eq on ce.equip_pk = eq.equip_pk
	where t.chk_mast_pk = p_chk_mast_pk 
	and t.chk_sche_type = 'A'
	;


	select (case when cycle_type = 'CYCLE_TYPE_Y' then 'year' 
			   	when cycle_type = 'CYCLE_TYPE_M' then 'month' 
			   	when cycle_type = 'CYCLE_TYPE_W' then 'week'
			   	when cycle_type = 'CYCLE_TYPE_D' then 'day' else '' end)
	, per_number, next_chk_date, sched_start_date
	into v_cycle_type, v_per_number, v_next_chk_date, v_sched_start_dt
	from cm_equip_chk_mast
	where chk_mast_pk = p_chk_mast_pk 
	;	

	if v_next_chk_date is null and v_last_date is null then 
		--      ֱ   ,  ֱٻ               :  ֱ     Ϸ           
		select cm_fn_get_next_sche_date(v_sched_start_dt
			, date(current_date + interval '1 day')
			, cm_fn_dateadd(date(current_date + interval '1 day'), v_cycle_type, v_per_number) 
			, v_cycle_type
			, v_per_number) into v_next_date;
	elsif v_next_chk_date is null and v_last_date is not null then 
		--      ֱ        ,  ֱٻ                   ƴѰ   :  ֱٻ                                        
		select cm_fn_get_next_sche_date(v_last_date
			, date(current_date + interval '1 day')
			, cm_fn_dateadd(date(current_date + interval '1 day'), v_cycle_type, v_per_number) 
			, v_cycle_type
			, v_per_number) into v_next_date;	
	elsif v_next_chk_date is not null and v_next_chk_date < current_date then 
		--      ֱ         ú           :  ֱٻ                                          
		select cm_fn_get_next_sche_date(v_last_date
			, date(current_date + interval '1 day')
			, cm_fn_dateadd(date(current_date + interval '1 day'), v_cycle_type, v_per_number) 
			, v_cycle_type
			, v_per_number) into v_next_date;
	
	elsif v_next_chk_date is not null and v_next_chk_date >= current_date then 
		--      ֱ         ú    ũ ų           
		select cm_fn_get_next_sche_date(v_next_chk_date
			, date(current_date + interval '1 day')
			, cm_fn_dateadd(date(current_date + interval '1 day'), v_cycle_type, v_per_number) 
			, v_cycle_type
			, v_per_number) into v_next_date;	
	else 
		v_next_date = v_next_chk_date;
	end if;

	RETURN coalesce(v_next_date, v_next_chk_date);

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	-- insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	-- values('FUNCTION', 'cm_fn_get_last_pm', concat(' [MESSAGE] : ', SQLERRM));
	RETURN coalesce(v_next_chk_date, null);
  END;
  
end;
$function$
;

-- DROP FUNCTION public.cm_fn_get_last_pm_date(int8);

CREATE OR REPLACE FUNCTION public.cm_fn_get_last_pm_date(p_pm_pk bigint)
 RETURNS date
 LANGUAGE plpgsql
AS $function$
declare
	v_last_date date;
	v_sched_start_dt date;
	v_next_chk_date date;
	v_next_date date;
	v_cycle_type character varying;
	v_per_number numeric;
begin
	
	select max(t.plan_start_dt) 
	into v_last_date
	from cm_work_order t
	inner join cm_equipment eq on t.equip_pk = eq.equip_pk 
	where t.pm_pk = p_pm_pk 
	and t.pm_req_type = 'A' 
	and t.wo_type = 'PM' 
	and t.pm_pk is not null
	;		

	select (case when cycle_type = 'CYCLE_TYPE_Y' then 'year' 
			   	when cycle_type = 'CYCLE_TYPE_M' then 'month' 
			   	when cycle_type = 'CYCLE_TYPE_W' then 'week'
			   	when cycle_type = 'CYCLE_TYPE_D' then 'day' else '' end)
	, per_number, next_chk_date, sched_start_dt
	into v_cycle_type, v_per_number, v_next_chk_date, v_sched_start_dt
	from cm_pm 
	where pm_pk = p_pm_pk 
	;	

	if v_next_chk_date is null and v_last_date is null then 

		select cm_fn_get_next_sche_date(v_sched_start_dt
			, date(current_date + interval '1 day')
			, cm_fn_dateadd(date(current_date + interval '1 day'), v_cycle_type, v_per_number) 
			, v_cycle_type
			, v_per_number) into v_next_date;
	elsif v_next_chk_date is null and v_last_date is not null then 
                                    
		select cm_fn_get_next_sche_date(v_last_date
			, date(current_date + interval '1 day')
			, cm_fn_dateadd(date(current_date + interval '1 day'), v_cycle_type, v_per_number) 
			, v_cycle_type
			, v_per_number) into v_next_date;	
	elsif v_next_chk_date is not null and v_next_chk_date < current_date then 
	                                    
		select cm_fn_get_next_sche_date(v_last_date
			, date(current_date + interval '1 day')
			, cm_fn_dateadd(date(current_date + interval '1 day'), v_cycle_type, v_per_number) 
			, v_cycle_type
			, v_per_number) into v_next_date;
	
	elsif v_next_chk_date is not null and v_next_chk_date >= current_date then 
	        
		select cm_fn_get_next_sche_date(v_next_chk_date
			, date(current_date + interval '1 day')
			, cm_fn_dateadd(date(current_date + interval '1 day'), v_cycle_type, v_per_number) 
			, v_cycle_type
			, v_per_number) into v_next_date;	
	else 
		v_next_date = v_next_chk_date;
	end if;

	RETURN coalesce(v_next_date, v_next_chk_date);

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN
	RETURN coalesce(v_next_chk_date, null);
  END;
  
end;
$function$
;

-- DROP FUNCTION public.cm_fn_get_loc_area_line(int4, varchar);

CREATE OR REPLACE FUNCTION public.cm_fn_get_loc_area_line(v_factory_pk integer, v_lvl_type character varying)
 RETURNS TABLE(cd character varying, up_cd character varying, id bigint, up_id bigint, label character varying, lvl bigint, path_info character varying, path_info_desc character varying, path_info_pk character varying, lvl_type character varying, sub_count bigint, status_cd character varying, status_nm character varying, factory_pk integer, factory_name character varying, use_yn character varying)
 LANGUAGE plpgsql
AS $function$
declare 
    v_rec record;
begin
	for v_rec in(
		WITH RECURSIVE CTE AS (
	        SELECT l.LOC_PK, l.LOC_CD, l.LOC_NM, l.UP_LOC_PK
	        , l.ISA95_CLASS    
	        , 1 AS LVL
	        , l.LOC_PK::text AS PATH_INFO_PK
	        , l.OUT_ORDER::text AS PATH_INFO_ORDR
	        , (SELECT COUNT(*) AS COUNT
	            FROM cm_LOCATION X1
	            WHERE X1.factory_pk = v_factory_pk 
				AND X1.DEL_YN = 'N' 
				AND X1.UP_LOC_PK = l.LOC_PK) AS SUB_COUNT
	        FROM cm_location l
	        WHERE upper(l.ISA95_CLASS) = CASE WHEN COALESCE(V_LVL_TYPE, '-') = '-' THEN upper('area') ELSE upper(V_LVL_TYPE) END
	        AND l.DEL_YN = 'N'
	        AND l.USE_YN = 'Y'
	        AND l.factory_pk = v_factory_pk
	        UNION ALL
	        SELECT L.LOC_PK, L.LOC_CD, L.LOC_NM, L.UP_LOC_PK, L.ISA95_CLASS,
	            CTE_1.LVL + 1 as LVL,
	            (CTE_1.PATH_INFO_PK || ',' || L.LOC_PK)::text AS PATH_INFO_PK,
	            (CTE_1.PATH_INFO_ORDR || ',' || L.OUT_ORDER || '-' ||L.LOC_CD)::text AS PATH_INFO_ORDR,
	            (SELECT COUNT(*) AS COUNT
	                FROM cm_LOCATION X1
	                WHERE X1.factory_pk = v_factory_pk 
					AND X1.DEL_YN = 'N' 
					AND X1.UP_LOC_PK = CTE_1.LOC_PK) AS SUB_COUNT
	        from cte CTE_1
	        LEFT JOIN cm_LOCATION L ON L.UP_LOC_PK = CTE_1.LOC_PK
	        WHERE (
	        	(
	        		upper(L.ISA95_CLASS) = CASE WHEN COALESCE(V_LVL_TYPE, '-') = '-' THEN upper('area') ELSE upper(V_LVL_TYPE) END
        		)
        		OR upper(L.ISA95_CLASS)  = upper(COALESCE(V_LVL_TYPE, L.ISA95_CLASS))
        		OR (
        			upper(L.ISA95_CLASS) IS NULL AND upper(CTE_1.ISA95_CLASS) = upper('line')
        		)
        	)
	        AND L.DEL_YN = 'N'
	        AND L.USE_YN = 'Y'
	        AND L.factory_pk = v_factory_pk
	    )
	    SELECT
	        CTE.LOC_CD AS CD,
	        NULL AS UP_CD,
	        CTE.LOC_PK AS ID,
	        CTE.UP_LOC_PK AS UP_ID,
	        CTE.LOC_NM AS LABEL,
	        CTE.LVL AS LVL,
	        NULL AS PATH_INFO,
	        NULL AS PATH_INFO_DESC,
	        CTE.PATH_INFO_PK AS PATH_INFO_PK,
	        CTE.ISA95_CLASS AS LVL_TYPE,
	        CTE.SUB_COUNT AS SUB_COUNT,
	        NULL AS STATUS_CD,
	        NULL AS STATUS_NM,
	        v_factory_pk AS FACTORY_PK,
	        NULL AS FACTORY_NAME,
	        NULL AS USE_YN
	    from cte
	    ORDER BY
	        CTE.PATH_INFO_ORDR
    ) loop  
	       	CD := v_rec.CD; 
	        UP_CD := v_rec.UP_CD; 
	        ID := v_rec.ID; 
	        UP_ID := v_rec.UP_ID; 
	        LABEL := v_rec.LABEL; 
	        LVL := v_rec.LVL; 
	        PATH_INFO := v_rec.PATH_INFO; 
	        PATH_INFO_DESC := v_rec.PATH_INFO_DESC; 
	        PATH_INFO_PK := v_rec.PATH_INFO_PK; 
	        LVL_TYPE := v_rec.LVL_TYPE; 
	        SUB_COUNT := v_rec.SUB_COUNT; 
	        STATUS_CD := v_rec.STATUS_CD; 
	        STATUS_NM := v_rec.STATUS_NM; 
	        FACTORY_PK := v_rec.FACTORY_PK; 
	        FACTORY_NAME := v_rec.FACTORY_NAME; 
	        USE_YN := v_rec.USE_YN; 
       		return next;
	end loop;
end; $function$
;

-- DROP FUNCTION public.cm_fn_get_loc_area_line(varchar, varchar);

CREATE OR REPLACE FUNCTION public.cm_fn_get_loc_area_line(v_site_id character varying, v_lvl_type character varying)
 RETURNS TABLE(cd character varying, up_cd character varying, id bigint, up_id bigint, label character varying, lvl bigint, path_info character varying, path_info_desc character varying, path_info_pk character varying, lvl_type character varying, sub_count bigint, status_cd character varying, status_nm character varying, site_id character varying, site_desc character varying, use_yn character varying)
 LANGUAGE plpgsql
AS $function$
declare 
    v_rec record;
begin
	for v_rec in(
		WITH RECURSIVE CTE AS (
	        SELECT l.LOC_PK, l.LOC_CD, l.LOC_NM, l.UP_LOC_PK
	        , l.ISA95_CLASS    
	        , 1 AS LVL
	        , l.LOC_PK::text AS PATH_INFO_PK
	        , l.OUT_ORDER::text AS PATH_INFO_ORDR
	        , (SELECT COUNT(*) AS COUNT
	            FROM cm_LOCATION X1
	            WHERE X1.SITE_ID = v_site_id AND X1.DEL_YN = 'N' AND X1.UP_LOC_PK = l.LOC_PK) AS SUB_COUNT
	        FROM cm_location l
	        WHERE upper(l.ISA95_CLASS) = CASE WHEN COALESCE(V_LVL_TYPE, '-') = '-' THEN upper('area') ELSE upper(V_LVL_TYPE) END
	        AND l.DEL_YN = 'N'
	        AND l.USE_YN = 'Y'
	        AND l.SITE_ID = V_SITE_ID
	        UNION ALL
	        SELECT L.LOC_PK, L.LOC_CD, L.LOC_NM, L.UP_LOC_PK, L.ISA95_CLASS,
	            CTE_1.LVL + 1 as LVL,
	            (CTE_1.PATH_INFO_PK || ',' || L.LOC_PK)::text AS PATH_INFO_PK,
	            (CTE_1.PATH_INFO_ORDR || ',' || L.OUT_ORDER || '-' ||L.LOC_CD)::text AS PATH_INFO_ORDR,
	            (SELECT COUNT(*) AS COUNT
	                FROM cm_LOCATION X1
	                WHERE X1.SITE_ID = v_site_id AND X1.DEL_YN = 'N' AND X1.UP_LOC_PK = CTE_1.LOC_PK) AS SUB_COUNT
	        from cte CTE_1
	        LEFT OUTER JOIN cm_LOCATION L ON L.UP_LOC_PK = CTE_1.LOC_PK
	        WHERE (
	        	(
	        		upper(L.ISA95_CLASS) = CASE WHEN COALESCE(V_LVL_TYPE, '-') = '-' THEN upper('area') ELSE upper(V_LVL_TYPE) END
        		)
        		OR upper(L.ISA95_CLASS)  = upper(COALESCE(V_LVL_TYPE, L.ISA95_CLASS))
        		OR (
        			upper(L.ISA95_CLASS) IS NULL AND upper(CTE_1.ISA95_CLASS) = upper('line')
        		)
        	)
	        AND L.DEL_YN = 'N'
	        AND L.USE_YN = 'Y'
	        AND L.SITE_ID = V_SITE_ID
	    )
	    SELECT
	        CTE.LOC_CD AS CD,
	        NULL AS UP_CD,
	        CTE.LOC_PK AS ID,
	        CTE.UP_LOC_PK AS UP_ID,
	        CTE.LOC_NM AS LABEL,
	        CTE.LVL AS LVL,
	        NULL AS PATH_INFO,
	        NULL AS PATH_INFO_DESC,
	        CTE.PATH_INFO_PK AS PATH_INFO_PK,
	        CTE.ISA95_CLASS AS LVL_TYPE,
	        CTE.SUB_COUNT AS SUB_COUNT,
	        NULL AS STATUS_CD,
	        NULL AS STATUS_NM,
	        V_SITE_ID AS SITE_ID,
	        NULL AS SITE_DESC,
	        NULL AS USE_YN
	    from cte
	    ORDER BY
	        CTE.PATH_INFO_ORDR
    ) loop  
	       	CD := v_rec.CD; 
	        UP_CD := v_rec.UP_CD; 
	        ID := v_rec.ID; 
	        UP_ID := v_rec.UP_ID; 
	        LABEL := v_rec.LABEL; 
	        LVL := v_rec.LVL; 
	        PATH_INFO := v_rec.PATH_INFO; 
	        PATH_INFO_DESC := v_rec.PATH_INFO_DESC; 
	        PATH_INFO_PK := v_rec.PATH_INFO_PK; 
	        LVL_TYPE := v_rec.LVL_TYPE; 
	        SUB_COUNT := v_rec.SUB_COUNT; 
	        STATUS_CD := v_rec.STATUS_CD; 
	        STATUS_NM := v_rec.STATUS_NM; 
	        SITE_ID := v_rec.SITE_ID; 
	        SITE_DESC := v_rec.SITE_DESC; 
	        USE_YN := v_rec.USE_YN; 
       		return next;
	end loop;
end; $function$
;

-- DROP FUNCTION public.cm_fn_get_loc_path(int4);

CREATE OR REPLACE FUNCTION public.cm_fn_get_loc_path(v_factory_pk integer)
 RETURNS TABLE(loc_pk bigint, path_info_pk bigint, loc_cd character varying, path_info_cd character varying, factory_pk integer)
 LANGUAGE plpgsql
AS $function$
declare 
    v_rec record;
begin
	for v_rec in(
		WITH cte AS (
			SELECT x.id AS loc_pk,
			    unnest(x.path_info_pk) AS path_info_pk,
			    x.cd AS loc_cd,
			    unnest(x.path_info) AS path_info_cd,
			    x.factory_pk
			FROM (SELECT * FROM cm_fn_get_loc_tree (v_factory_pk)) x
			ORDER BY x.id
        )
		 SELECT cte.loc_pk,
		    cte.path_info_pk,
		    cte.loc_cd,
		    cte.path_info_cd,
		    cte.factory_pk
		   from cte
        ) loop  
	       	loc_pk := v_rec.loc_pk; 
	       	path_info_pk := v_rec.path_info_pk; 
	       	loc_cd := v_rec.loc_cd; 
	       	path_info_cd := v_rec.path_info_cd; 
	       	factory_pk := v_rec.factory_pk; 
       		return next;
	end loop;
end; $function$
;

-- DROP FUNCTION public.cm_fn_get_loc_plant_nm(int8, int4);

CREATE OR REPLACE FUNCTION public.cm_fn_get_loc_plant_nm(v_loc_pk bigint, v_factory_pk integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
declare
	t_nm varchar;
begin

	with recursive cte as  ( 
		select loc_pk, up_loc_pk, plant_yn
		from cm_location
		where loc_pk = v_loc_pk
		union all
		select l.loc_pk, l.up_loc_pk, l.plant_yn
		from cte
		left outer join cm_location l on cte.up_loc_pk = l.loc_pk
		where l.loc_pk is not null
	)
	select max(case when d.plant_yn = 'Y' then d.loc_nm else '' end) as loc_nm
	into t_nm
	from cte
	inner join cm_location d on cte.loc_pk = d.loc_pk;
	
	RETURN coalesce(t_nm, '');
	
end;
$function$
;

-- DROP FUNCTION public.cm_fn_get_loc_plant_nm_code(varchar, int4);

CREATE OR REPLACE FUNCTION public.cm_fn_get_loc_plant_nm_code(v_loc_cd character varying, v_factory_pk integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
declare
	t_nm varchar;
begin

	WITH recursive cte as (
		SELECT LOC_PK, UP_LOC_PK, PLANT_YN
		FROM cm_LOCATION
		WHERE LOC_CD = v_loc_cd 
		AND factory_pk = v_factory_pk
		UNION ALL
		SELECT L.LOC_PK, L.UP_LOC_PK, L.PLANT_YN
		from cte
		LEFT OUTER JOIN cm_LOCATION L ON CTE.UP_LOC_PK = L.LOC_PK
		WHERE L.LOC_PK IS NOT NULL
	)
	select max(case when d.plant_yn = 'Y' then d.loc_nm else '' end) as loc_nm
	into t_nm
	from cte
	inner join cm_location d on cte.loc_pk = d.loc_pk;
	

	RETURN t_nm;
	
end;
$function$
;

-- DROP FUNCTION public.cm_fn_get_loc_tree(int4);

CREATE OR REPLACE FUNCTION public.cm_fn_get_loc_tree(v_factory_pk integer)
 RETURNS TABLE(cd character varying, up_cd character varying, id bigint, up_id bigint, label character varying, lvl integer, path_info text[], path_info_desc text[], path_info_pk bigint[], lvl_type character varying, sub_count integer, status_cd character varying, status_nm character varying, factory_pk integer, factory_name character varying, use_yn character)
 LANGUAGE plpgsql
AS $function$
declare 
    v_rec record;
begin
	for v_rec in(
		WITH cte AS (
			SELECT t.cd,
			        CASE
			            WHEN t.up_id is NULL THEN NULL::text
			            ELSE t.up_cd
			        END AS up_cd,
			    t.id,
			    t.up_id,
			    t.label as "label",
			    t.lvl - 1 AS lvl,
			    array_remove(t.path_info, t.factory_pk::text) AS path_info,
			    array_remove(t.path_info_desc, t.factory_name::text) AS path_info_desc,
			    array_remove(t.path_info_pk, 0::bigint) AS path_info_pk,
			    t.lvl_type,
			    t.sub_count,
			    t.status_cd,
			    t.status_nm,
			    t.factory_pk,
			    t.factory_name,
			    t.use_yn
			FROM (SELECT * FROM cm_fn_get_site_loc_tree (v_factory_pk)) t
			WHERE upper(t.lvl_type) = upper('location')::text
        )
		 SELECT cte.cd,
		    cte.up_cd,
		    cte.id,
		    cte.up_id,
		    cte.label as "label",
		    cte.lvl,
		    cte.path_info,
		    cte.path_info_desc,
		    cte.path_info_pk,
		    cte.lvl_type,
		    cte.sub_count,
		    cte.status_cd,
		    cte.status_nm,
		    cte.factory_pk,
		    cte.factory_name,
		    cte.use_yn
		   from cte
        ) loop  
	       	cd := v_rec.cd; 
	       	up_cd := v_rec.up_cd; 
	       	id := v_rec.id; 
	       	up_id := v_rec.up_id; 
	       	label := v_rec.label; 
	       	lvl := v_rec.lvl; 
	       	path_info := v_rec.path_info; 
	       	path_info_desc := v_rec.path_info_desc; 
	       	path_info_pk := v_rec.path_info_pk; 
	       	lvl_type := v_rec.lvl_type; 
	       	sub_count := v_rec.sub_count; 
	       	status_cd := v_rec.status_cd; 
	       	status_nm := v_rec.status_nm; 
	       	factory_pk := v_rec.factory_pk; 
	       	factory_name := v_rec.factory_name; 
	       	use_yn := v_rec.use_yn; 
       		return next;
	end loop;
end; $function$
;

-- DROP FUNCTION public.cm_fn_get_next_sche_date(date, date, date, varchar, numeric);

CREATE OR REPLACE FUNCTION public.cm_fn_get_next_sche_date(p_sche_date date, p_make_start_date date, p_make_end_date date, p_cycle_type_code character varying, p_per_number numeric)
 RETURNS date
 LANGUAGE plpgsql
AS $function$
declare
	v_curr_date date;
	v_next_date date;
    i integer;
begin
	
	v_next_date = null;
	v_curr_date = p_sche_date;
	i := 1;
	LOOP
	
		if v_curr_date between p_make_start_date and p_make_end_date then
			v_next_date = v_curr_date;
			EXIT;
		elsif v_curr_date > p_make_end_date then
			v_next_date = v_curr_date;
			EXIT;
		else
			if p_cycle_type_code = 'year' THEN
				v_curr_date = (v_curr_date + concat(p_per_number, ' year')::interval);
			ELSIF p_cycle_type_code = 'month' THEN
				v_curr_date = (v_curr_date + concat(p_per_number, ' month')::interval);
			ELSIF p_cycle_type_code = 'week' THEN
				v_curr_date = (v_curr_date + concat(p_per_number, ' week')::interval);
			else
				v_curr_date = (v_curr_date + concat(p_per_number, ' day')::interval);
			end if;		
		end if;
	
		--    ѷ        
		EXIT WHEN i = 1000;

		SELECT i+1 into i;
	END LOOP;	
	
	RETURN v_next_date;

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	RETURN v_next_date;
  END;
  
end;
$function$
;

-- DROP FUNCTION public.cm_fn_get_regular_day(date, date, numeric, varchar);

CREATE OR REPLACE FUNCTION public.cm_fn_get_regular_day(p_plan_date date, p_last_date date, p_per_number numeric, p_cycle_type character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
declare
	v_cnt integer;
	v_dayofweek text;
	v_holiday_cnt integer = 0;
	v_plan_date character varying(10);
	curdata record;
	v_cycle_code character varying(20);
    i integer;
begin
	-- *********************************************************
	--  ָ ,       ,                                Ϸ    ȯ
	-- *********************************************************
	
	if p_last_date is null then
		select to_char(p_plan_date, 'YYYY-MM-DD') into v_plan_date;
	else
		--      Ϸκ     ֱ     
		if p_cycle_type = 'CYCLE_TYPE_Y' then
			v_cycle_code = 'years';
		elseif p_cycle_type = 'CYCLE_TYPE_M' then
			v_cycle_code = 'months';
		elseif p_cycle_type = 'CYCLE_TYPE_W' then
			v_cycle_code = 'weeks';
		elseif p_cycle_type = 'CYCLE_TYPE_D' then
			v_cycle_code = 'days';	
		end if;	
		
		--            ֱ       
		select to_char(cast(p_last_date as date) + (p_per_number || v_cycle_code)::INTERVAL, 'YYYY-MM-DD') into v_plan_date;
		
	end if; 
	

	--       ֱ                   ù  °    Ϸ    ȯ 
	i := 1;
	LOOP
		v_holiday_cnt = 99999;

		select to_char(to_date(v_plan_date, 'YYYY-MM-DD'), 'D') into v_dayofweek;
		
		with tx as (
			select (case when v_dayofweek = '1' or v_dayofweek = '7' then 1 else 0 end) as cnt
			union all
			select count(t.cnt) as cnt
			from (
				select 1 as cnt
				from cm_holiday_info t1
				where concat(t1.year_val, '-', t1.month_val, '-', t1.day_val) = v_plan_date
				and t1.nation_cd = 'ko'
				union
				select 1 as cnt
				from cm_holiday_custom t1
				where concat(t1.year_val, '-', t1.month_val, '-', t1.day_val) = v_plan_date
				and t1.nation_cd = 'ko'
				limit 1
			) t
			order by cnt desc limit 1
		)
		select max(tx.cnt) into v_holiday_cnt from tx;

		if coalesce(v_holiday_cnt, 99999) = 0 then
			--      ΰ   
			EXIT;
		else
			--        ΰ         
			select to_char(to_date(v_plan_date, 'YYYY-MM-DD') + INTERVAL '1 days', 'YYYY-MM-DD') into v_plan_date;
		end if;

		--    ѷ        
		EXIT WHEN i = 100;

		SELECT i+1 into i;
	END LOOP;	

	RETURN v_plan_date;

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	-- insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	-- values('FUNCTION', 'get_regular_day', concat(' [MESSAGE] : ', SQLERRM));
	RETURN null;
  END;
  
end;
$function$
;

-- DROP FUNCTION public.cm_fn_get_seq(varchar);

CREATE OR REPLACE FUNCTION public.cm_fn_get_seq(p_gubun character varying)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
declare
	V_RETURN bigint;
BEGIN	
	IF (p_gubun = 'DEPT') THEN
		SELECT SEQ_DEPT_ID.NEXTVAL 
		into v_return;
	ELSIF (p_gubun = 'USER_INFO') THEN
		SELECT SEQ_USER_INFO_ID.NEXTVAL 
		into v_return;
	ELSIF (p_gubun = 'ESH_PTW_LST') THEN
		SELECT SEQ_ESH_PTW_LST_ID.NEXTVAL 
		into v_return;
	ELSE 
		V_RETURN := NULL;
	END IF;
	
	RETURN V_RETURN;

end;
$function$
;

-- DROP FUNCTION public.cm_fn_get_site_loc_equip(varchar, varchar);

CREATE OR REPLACE FUNCTION public.cm_fn_get_site_loc_equip(v_site_id character varying, v_up_cd character varying)
 RETURNS TABLE(cd character varying, up_cd character varying, id bigint, label character varying, lvl integer, lvl_type character varying, path_info text[], equip_status_cd character varying, equip_status_nm character varying, equip_class_path character varying, equip_class_desc character varying, dept_cd character varying, dept_nm character varying, import_rank_cd character varying, import_rank_nm character varying, business_nm character varying, asset_nos character varying, sub_count integer, site_id character varying)
 LANGUAGE plpgsql
AS $function$
declare 
    v_rec record;
begin
	for v_rec in(
		WITH RECURSIVE cte AS (
		         SELECT t.cd,
		            t.up_cd,
		            t.id,
		            t.label,
		            t.lvl,
		            t.path_info,
		            t.lvl_type,
		            0::bigint AS equip_pk,
		            t.sub_count,
		            t.site_id
		           FROM (SELECT * FROM cm_fn_get_site_loc_tree (v_site_id)) t
		           WHERE UPPER(coalesce(v_up_cd, v_site_id)) = any (t.path_info)
		           AND t.cd = coalesce(v_up_cd, t.cd)
		        UNION ALL
		         SELECT eq_1.equip_cd::text AS cd,
		         	l.loc_cd::text as up_cd,
		            eq_1.equip_pk AS id,
		            eq_1.equip_nm AS label,
		            (cte_1.lvl + 1)::integer as lvl,
		            cte_1.path_info || ARRAY[eq_1.equip_cd::text] AS path_info,
		            'equipment'::text AS lvl_type,
		            eq_1.equip_pk,
		            0::integer AS sub_count,
		            eq_1.site_id
		           FROM cm_equipment eq_1
		             JOIN cm_location l ON eq_1.loc_pk = l.loc_pk
		             LEFT JOIN cm_equipment ueq ON eq_1.up_equip_pk = ueq.equip_pk
		             INNER JOIN cm_cte cte_1 ON (CASE WHEN cte_1.lvl_type = 'location' THEN eq_1.loc_pk ELSE eq_1.up_equip_pk END) = cte_1.id
					 AND cte_1.site_id = eq_1.site_id
		          WHERE eq_1.del_yn::text = 'N'::text
		          and cte_1.cd is not null
		          and eq_1.site_id = v_site_id
		        )
		 SELECT cte.cd,
		    cte.up_cd,
		    cte.id,
		    cte.label,
		    cte.lvl,
		    cte.lvl_type,
		    cte.path_info,
		    eq.equip_status AS equip_status_cd,
		    bc.code_nm AS equip_status_nm,
		    eq.equip_class_path,
		    eq.equip_class_desc,
		    d.dept_cd,
		    d.dept_nm,
		    ir.import_rank_cd,
		    ir.import_rank_cd AS import_rank_nm,
		    cm_fn_get_dept_business_nm(d.dept_pk) AS business_nm,
		    eq.asset_nos,
		        CASE
		            WHEN cte.lvl_type = 'equipment'::text THEN ( SELECT count(*) AS count
		               FROM cm_equipment x2
		              WHERE x2.up_equip_pk = cte.equip_pk AND x2.del_yn::text = 'N'::text and x2.site_id = v_site_id)
		            WHEN cte.lvl_type = 'location'::text THEN ( SELECT count(*) + cte.sub_count
		               FROM cm_equipment x2
		              WHERE x2.loc_pk = cte.id AND x2.del_yn::text = 'N'::text and x2.site_id = v_site_id)
		            ELSE cte.sub_count
		        END AS sub_count,
		   cte.site_id     
		   from cte
		     LEFT JOIN cm_equipment eq ON cte.equip_pk = eq.equip_pk
		     LEFT JOIN cm_base_code bc ON eq.equip_status::text = bc.code_cd::text AND bc.code_grp_cd::text = 'EQUIP_STATUS'::text
		     LEFT JOIN cm_dept d ON eq.dept_pk = d.dept_pk
		     LEFT JOIN cm_import_rank ir ON eq.import_rank_pk = ir.import_rank_pk
		   where cte.site_id = v_site_id
		   and eq.site_id = v_site_id
		  ORDER BY cte.path_info
    ) loop  
	       	cd := v_rec.cd; 
	        up_cd := v_rec.up_cd; 
	        id := v_rec.id; 
	        label := v_rec.label; 
	        lvl := v_rec.lvl; 
	        lvl_type := v_rec.lvl_type; 
	        path_info := v_rec.path_info; 
	        equip_status_cd := v_rec.equip_status_cd; 
	        equip_status_nm := v_rec.equip_status_nm; 
	        equip_class_path := v_rec.equip_class_path; 
	        equip_class_desc := v_rec.equip_class_desc; 
	        dept_cd := v_rec.dept_cd; 
	        dept_nm := v_rec.dept_nm; 
	        import_rank_cd := v_rec.import_rank_cd; 
	        import_rank_nm := v_rec.import_rank_nm; 
	        business_nm := v_rec.business_nm; 
	        asset_nos := v_rec.asset_nos; 
	        sub_count := v_rec.sub_count; 
	        site_id := v_rec.site_id; 
       		return next;
	end loop;
end; $function$
;

-- DROP FUNCTION public.cm_fn_get_site_loc_tree(int4);

CREATE OR REPLACE FUNCTION public.cm_fn_get_site_loc_tree(v_factory_pk integer)
 RETURNS TABLE(cd character varying, up_cd character varying, id bigint, up_id bigint, label character varying, lvl integer, path_info text[], path_info_desc text[], path_info_pk bigint[], path_info_ordr text[], lvl_type character varying, sub_count integer, status_cd character varying, status_nm character varying, factory_pk integer, factory_name character varying, use_yn character)
 LANGUAGE plpgsql
AS $function$

declare 
    v_rec record;
begin
	for v_rec in(
		WITH RECURSIVE cte AS (
		         SELECT t."Code"::text AS cd,
		            ''::text AS up_cd,
		            NULL::bigint AS id,
		            NULL::bigint AS up_id,
		            t."Name" AS label,
		            1 AS lvl,
		            ARRAY[t."Code"::text] AS path_info,
		            ARRAY[t."Name" ::text] AS path_info_desc,
		            ARRAY[0::bigint] AS path_info_pk,
		            ARRAY['0'::text] AS path_info_ordr,
		            'sites'::text AS lvl_type,
		            ( SELECT count(*) AS count
		                   FROM cm_location x1
		                  WHERE x1.factory_pk = t.id
							AND x1.del_yn::text = 'N'::text) AS sub_count,
		            ''::text AS status_cd,
		            ''::text AS status_nm,
		            t.id as factory_pk,
		            t."Name" as factory_name,
		            'Y'::text AS use_yn
		           FROM factory t
		           where t.id = v_factory_pk
		        UNION ALL
		         SELECT l.loc_cd::text AS cd,
		                CASE
		                    WHEN cte_1.lvl = 1 THEN cte_1.cd
		                    ELSE ul.loc_cd::text
		                END AS up_cd,
		            l.loc_pk AS id,
		                CASE
		                    WHEN cte_1.lvl = 1 THEN cte_1.id
		                    ELSE l.up_loc_pk
		                END AS up_id,
		            l.loc_nm AS label,
		            cte_1.lvl + 1 as lvl,
		            cte_1.path_info || ARRAY[l.loc_cd::text] AS path_info,
		            cte_1.path_info_desc || ARRAY[l.loc_cd::text] AS path_info_desc,
		            cte_1.path_info_pk || ARRAY[l.loc_pk::bigint] AS path_info_pk,
		            cte_1.path_info_ordr || ARRAY[l.out_order::text || '-' || l.loc_cd::text] AS path_info_ordr,
		            'location'::text AS lvl_type,
		            ( SELECT count(*) AS count
		                   FROM cm_location x2
		                  WHERE x2.up_loc_pk = l.loc_pk 
					AND x2.del_yn::text = 'N'::text) AS sub_count,
		            l.loc_status AS status_cd,
		            bc.code_nm AS status_nm,
		            l.factory_pk as factory_pk,
		            s."Name" as factory_name,
		            l.use_yn::text AS use_yn
		           FROM cm_location l
		             JOIN factory s ON l.factory_pk = s.id
		             JOIN cm_base_code bc ON l.loc_status::text = bc.code_cd::text 
					AND bc.code_grp_cd::text = 'LOC_STATUS'::text
		             LEFT JOIN cm_location ul ON l.up_loc_pk = ul.loc_pk
		             JOIN cte cte_1 ON cte_1.cd =
		                CASE
		                    WHEN cte_1.lvl = 1 AND l.up_loc_pk IS NULL THEN l.loc_cd
		                    ELSE ul.loc_cd
		                END::text
		          WHERE l.del_yn::text = 'N'::text
		          and cte_1.cd is not null
		          and l.factory_pk = v_factory_pk
		        )
		 SELECT cte.cd,
		    cte.up_cd,
		    cte.id,
		    cte.up_id,
		    cte.label,
		    cte.lvl,
		    cte.path_info,
		    cte.path_info_desc,
		    cte.path_info_pk,
		    cte.path_info_ordr,
		    cte.lvl_type,
		    cte.sub_count,
		    cte.status_cd,
		    cte.status_nm,
		    cte.factory_pk,
		    cte.factory_name,
		    cte.use_yn
		   from cte
		  ORDER BY cte.path_info_ordr
        ) loop  
	       	cd := v_rec.cd; 
	       	up_cd := v_rec.up_cd; 
	       	id := v_rec.id; 
	       	up_id := v_rec.up_id; 
	       	label := v_rec.label; 
	       	lvl := v_rec.lvl; 
	       	path_info := v_rec.path_info; 
	       	path_info_desc := v_rec.path_info_desc; 
	       	path_info_pk := v_rec.path_info_pk; 
	        path_info_ordr := v_rec.path_info_ordr; 
	       	lvl_type := v_rec.lvl_type; 
	       	sub_count := v_rec.sub_count; 
	       	status_cd := v_rec.status_cd; 
	       	status_nm := v_rec.status_nm; 
	       	factory_pk := v_rec.factory_pk; 
	       	factory_name := v_rec.factory_name; 
	       	use_yn := v_rec.use_yn; 
       		return next;
	end loop;
end; 
$function$
;

-- DROP FUNCTION public.cm_fn_get_thumb_img(varchar, int8, varchar, varchar);

CREATE OR REPLACE FUNCTION public.cm_fn_get_thumb_img(v_attach_type character varying, v_attach_pk bigint, v_static_url character varying, v_site_id character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
declare
	t_result varchar;
begin
	--             
	
	t_result = '';
	select concat(v_static_url, '/', COALESCE(v_site_id, 'WEZON') 
		, replace(replace(replace(upper(af.file_stre_cours), upper(af.root_path), ''), '\\', '/'), '\', '/'), '/THUMBNAIL/'
	  , case when upper(reverse(split_part(reverse(af.file_stre_nm), '.', 1))) = upper(af.file_ext) then af.file_stre_nm else concat(af.file_stre_nm, '.', af.file_ext) end)	
	into t_result
	from cm_attach_file af
	where upper(af.attach_type) = upper(v_attach_type)
	and af.attach_pk = v_attach_pk
	order by af.file_pk desc
	limit 1;
	
	if t_result is null then
		t_result = '';
	end if;
	
	
	RETURN t_result;
	
end;
$function$
;

-- DROP FUNCTION public.cm_fn_get_workdays(varchar, varchar);

CREATE OR REPLACE FUNCTION public.cm_fn_get_workdays(v_startdate character varying, v_enddate character varying)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
    t_result integer;
begin
	
	
	SELECT COUNT(1) 
	into t_result
	FROM
	    (
			WITH RECURSIVE date_record AS (
			   SELECT TO_DATE(v_startDate,'YYYYMMDD') AS dates
			   UNION ALL
			   SELECT DATE(dates + interval '1 day') as dates
			   FROM cm_date_record WHERE dates < TO_DATE(v_endDate,'YYYYMMDD')
			)
			SELECT to_char(dates, 'YYYYMMDD') dates, to_char(dates, 'D') d
			FROM cm_date_record
	    ) a
	 left outer join (
	        SELECT year_val||month_val||day_val AS holiday_dt
	        FROM cm_HOLIDAY_INFO hi 
	        WHERE year_val||month_val||day_val BETWEEN v_startDate AND v_endDate	--    ,        
	        UNION ALL 
	        SELECT year_val||month_val||day_val AS holiday_dt
	        FROM cm_HOLIDAY_CUSTOM 
	        WHERE year_val||month_val||day_val BETWEEN v_startDate AND v_endDate	--    ,                
	    ) b	--         ̺      Ⱓ      Ѵ .
	 on a.dates = b.holiday_dt
	 WHERE a.d NOT IN ('1', '7') --1:  Ͽ    7:     
	 AND b.holiday_dt IS null
	;
	
	RETURN t_result;
	
end;
$function$
;

-- DROP FUNCTION public.cm_fn_get_work_day(varchar);

CREATE OR REPLACE FUNCTION public.cm_fn_get_work_day(p_plan_date character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
declare
    i integer;
	v_plan_date character varying(10);
	v_dayofweek text;
	v_holiday_cnt integer = 0;
begin
	-- p_plan_date             ,                 ƴ         ȯ 
	v_plan_date = p_plan_date;

	--       ֱ                   ù  °    Ϸ    ȯ 
	i := 1;
	LOOP
		v_holiday_cnt = 99999;

		select to_char(to_date(v_plan_date, 'YYYY-MM-DD'), 'D') into v_dayofweek;
		
		with tx as (
			select (case when v_dayofweek = '1' or v_dayofweek = '7' then 1 else 0 end) as cnt
			union all
			select count(t.cnt) as cnt
			from (
				select 1 as cnt
				from cm_holiday_info t1
				where concat(t1.year_val, '-', t1.month_val, '-', t1.day_val) = v_plan_date
				and t1.nation_cd = 'ko'
				union
				select 1 as cnt
				from cm_holiday_custom t1
				where concat(t1.year_val, '-', t1.month_val, '-', t1.day_val) = v_plan_date
				and t1.nation_cd = 'ko'
				limit 1
			) t
			order by cnt desc limit 1
		)
		select max(tx.cnt) into v_holiday_cnt from tx;

		if coalesce(v_holiday_cnt, 99999) = 0 then
			--      ΰ   
			EXIT;
		else
			--        ΰ         
			select to_char(to_date(v_plan_date, 'YYYY-MM-DD') + INTERVAL '1 days', 'YYYY-MM-DD') into v_plan_date;
		end if;

		--    ѷ        
		EXIT WHEN i = 100;

		SELECT i+1 into i;
	END LOOP;		
	
	RETURN v_plan_date;
	
end;
$function$
;

-- DROP FUNCTION public.cm_fn_isnumeric(text);

CREATE OR REPLACE FUNCTION public.cm_fn_isnumeric(text)
 RETURNS boolean
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
DECLARE x NUMERIC;
BEGIN
    x = $1::NUMERIC;
    RETURN TRUE;
EXCEPTION WHEN others THEN
    RETURN FALSE;
END;
$function$
;

-- DROP FUNCTION public.cm_fn_last_day(date);

CREATE OR REPLACE FUNCTION public.cm_fn_last_day(conv_date date)
 RETURNS date
 LANGUAGE plpgsql
AS $function$
declare
begin

	RETURN (date_trunc('MONTH', conv_date) + INTERVAL '1 MONTH - 1 day')::date;
	
end;
$function$
;

-- DROP FUNCTION public.cm_fn_last_str(varchar, varchar);

CREATE OR REPLACE FUNCTION public.cm_fn_last_str(p_full_str character varying, p_find_str character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
declare
	t_result character varying = '';
begin
	
	select substr(p_full_str, position(p_find_str in p_full_str) + 1, length(p_full_str))
	into t_result;

	RETURN t_result;
	
end;
$function$
;

-- DROP FUNCTION public.cm_fn_make_schedule_insp(varchar, int8, date, date, int4);

CREATE OR REPLACE FUNCTION public.cm_fn_make_schedule_insp(p_sche_type character varying, p_chk_mast_pk bigint, p_make_start_date date, p_make_end_date date, p_factory_pk integer)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
declare
	v_cycle_type character varying(20); 
	v_cycle_type_code character varying(10); 
	v_per_number numeric;
	v_sched_start_date date;
	v_next_chk_date date;
	v_exists_cnt integer = 0;
	v_start_date date;
	v_curr_date date;
	v_plan_date date;
	v_next_date date;
    i integer;
	v_chk_sche_pk bigint;
	v_exe_cnt integer = 0;
	v_chk_sche_no bigint;
	v_last_plan_dt date;
	v_next_insp_date date;
	v_error_message varchar(1000);
	v_holiday_use_yn varchar(1);
	p_exec_cnt varchar(20);
begin
	--                   ֱ            Ʈ       ʴ´ .

	-- *********************************************************
	--           ٻ   
	-- 1.    ˻    Ⱓ : p_make_start_date ~ p_make_end_date
	-- 2.    ˸             ֱ ,      ֱ      ,      ֱ             ȸ
	-- 3.  ֱ              ϱ .
	-- 4.  ڵ  ΰ 쿡                 ֱ   ,        ֱ          Ʈ
	-- 5.  ڵ  ΰ 쿡    ̹    ϵ        Ұ .
	-- 220329 :  ڵ /           ¥+   ˸    Ͱ   ̹                   ʴ´ .
	-- 230714 : chk_yn        Ⱦ .AND CHK_YN = 'Y'      
	-- 230727 :    ʰ       ,  ֱ     Ͽ              ǵ   ,  ֱ     Ͽ              Ѱ         ֱ          Ͽ      
	-- 230808 : SITE_CONFIG.SCHE_OPS.inspHolidayScheUse        о                        θ  Ȯ      ó  
	-- 230817 :    ʰ       , 230727    ǵ     
	-- *********************************************************
	
	v_exe_cnt = 0;
	v_cycle_type = null;
	v_cycle_type_code = null;
	v_per_number = null;
	v_sched_start_date = null;
	v_next_chk_date = null;
	v_start_date = null;
	v_curr_date = null;
	v_last_plan_dt = null;
	

	select cycle_type, per_number, sched_start_date, next_chk_date
		, (CASE WHEN cycle_type = 'CYCLE_TYPE_Y' THEN 'year'
		   	WHEN cycle_type = 'CYCLE_TYPE_M' THEN 'month' WHEN CYCLE_TYPE = 'CYCLE_TYPE_W' THEN 'week'
		   	WHEN cycle_type = 'CYCLE_TYPE_D' THEN 'day' ELSE '' END)
		, cm_fn_get_last_insp_date(chk_mast_pk) AS next_insp_date
	into v_cycle_type, v_per_number, v_sched_start_date, v_next_chk_date, v_cycle_type_code, v_next_insp_date
	from cm_equip_chk_mast
	where chk_mast_pk = p_chk_mast_pk
	and use_yn = 'Y' and del_yn = 'N' 
	;

	if v_cycle_type is null then
		--  ش Ǵ         ó             Ƿ  END
		v_exe_cnt = 0;
		p_exec_cnt = '0';
		return '0';
	end if;
	
	
	--  ڵ            ִ         Ȯ  .
	select count(*) into v_exists_cnt
	from cm_equip_chk_sche t
	inner join cm_chk_equip ce on t.chk_mast_pk = ce.chk_mast_pk 
	inner join cm_equipment eq on ce.equip_pk = eq.equip_pk
	where t.chk_mast_pk = p_chk_mast_pk 
	and t.chk_sche_type = 'A'
	and eq.factory_pk = p_factory_pk
	;	
	
	--              
	select max(t.chk_sche_dt) into v_last_plan_dt
	from cm_equip_chk_sche t
	inner join cm_chk_equip ce on t.chk_mast_pk = ce.chk_mast_pk 
	inner join cm_equipment eq on ce.equip_pk = eq.equip_pk
	where t.chk_mast_pk = p_chk_mast_pk 
	and t.chk_sche_type = 'A'
	and eq.factory_pk = p_factory_pk
	;	
	
	
	if p_sche_type = 'A' then
	
		if v_next_chk_date is null and coalesce(v_exists_cnt, 0) = 0 AND date(V_SCHED_START_DATE) BETWEEN date(P_MAKE_START_DATE) AND date(P_MAKE_END_DATE)  THEN
			--      ֱ          ,  ֱٻ                 ,  ֱ              Ⱓ      ԵǾ         
			v_start_date = v_sched_start_date;
		elsif v_next_chk_date is null and coalesce(v_exists_cnt, 0) = 0 and date(v_sched_start_date) < date(p_make_start_date) then
			--         ֱⰡ  Ѱǵ     µ ,  ֱⰡ    ú                            ֱ          Ͽ ,  ش   ֱ  Ͽ     Կ  θ  Ȯ   ϰ  ó   Ѵ .
			select cm_fn_get_next_sche_date(v_sched_start_date, p_make_start_date, p_make_end_date, v_cycle_type_code, v_per_number) into v_start_date;		
		elsif v_next_chk_date is null and coalesce(v_exists_cnt, 0) > 0  then
			--      ֱ          ,  ֱٻ              ִ       ֱٻ                       Ⱓ      Ե             
			select cm_fn_get_next_sche_date(v_last_plan_dt, p_make_start_date, p_make_end_date, v_cycle_type_code, v_per_number) into v_start_date; 
		elsif v_next_chk_date is not null and coalesce(v_exists_cnt, 0) > 0 and  date(v_next_chk_date) < date(p_make_start_date) then
			--      ֱ       ְ ,  ֱٻ                   ,    ú         ֱ                  ֱٻ                            
			select cm_fn_get_next_sche_date(v_last_plan_dt, p_make_start_date, p_make_end_date, v_cycle_type_code, v_per_number) into v_start_date;	
		elsif v_next_chk_date is not null and coalesce(v_exists_cnt, 0) > 0 and  date(v_next_chk_date) >= date(p_make_start_date) then
			--      ֱ       ְ ,  ֱٻ                   ,    ú         ֱ                          ֱ                       
			v_start_date = v_next_chk_date;
		end if;
	else
		v_start_date = p_make_start_date;
	end if;
	
	if v_start_date is null then
		--     ó          ϴ              Ƿ  END
		v_exe_cnt = 0;
		p_exec_cnt = '0';
		return '0';
	end if;
	
	--   ȸ Ⱓ    , v_start_date        Ϸ     ݺ     ֱ       ϱ .
	--             :   ȸ Ⱓ     .
	v_curr_date = v_start_date;
	i := 1;
	LOOP

		if v_curr_date > p_make_end_date then
			--   ¥        Ѱ  
			EXIT;
		else
			/*
			select (case when cast(sche_opts -> 'inspHolidayScheUse' as text) = 'true' then 'Y' else 'N' end) as inspHolidayScheUse
			into v_holiday_use_yn
			from cm_site_config
			where site = p_factory_pk;	
			*/

			v_holiday_use_yn = 'N';
		
			select case when v_holiday_use_yn = 'Y' then v_curr_date else to_date(cm_fn_get_work_day(TO_CHAR(v_curr_date,'YYYY-MM-DD')),'YYYY-MM-DD') end
				 , (v_curr_date + concat(v_per_number, ' ', v_cycle_type_code)::interval)
			into v_plan_date, v_next_date
			;		
		
			v_exists_cnt = 0;
		
			--  ڵ         ̹   ߺ          ִ    Ȯ   (   ˸      +    ˰ ȹ  )
			-- 220329.  ڵ /          ߺ    Ȯ  
			select count(*) into v_exists_cnt
			from cm_equip_chk_sche t
			inner join cm_chk_equip ce on t.chk_mast_pk = ce.chk_mast_pk 
			inner join cm_equipment eq on ce.equip_pk = eq.equip_pk
			where t.chk_mast_pk = p_chk_mast_pk 
			and t.chk_sche_type = 'A'
			and to_char(t.chk_sche_dt, 'YYYY-MM-DD') = to_char(v_plan_date,'YYYY-MM-DD')
			and eq.factory_pk = p_factory_pk
			;	
			
			v_chk_sche_pk = 0;
		
			if coalesce(v_exists_cnt, 0) = 0 then
				--      ٸ     .
				select nextval('equip_chk_sche_chk_sche_pk_seq') into v_chk_sche_pk;

			
				select coalesce(MAX((
					select chk_sche_no from (
						select max(cast(t1.chk_sche_no as integer)) as chk_sche_no 
						from cm_equip_chk_sche t1
						inner join cm_equip_chk_mast t2 on t1.chk_mast_pk = t2.chk_mast_pk
						where t2.site_id = p_site_id
					) as sub_table)) + 1, '1') into v_chk_sche_no
				from cm_equip_chk_sche;			
			
				insert into cm_equip_chk_sche(chk_sche_pk, chk_sche_dt, chk_sche_no, chk_status, chk_user_pk
				, dept_pk, chk_mast_pk, chk_sche_type, site_id, insert_ts, inserter_id, inserter_nm) 
				select v_chk_sche_pk, v_plan_date
				, v_chk_sche_no
				, 'CHK_STATUS_N'
				, chk_user_pk, dept_pk, chk_mast_pk, p_sche_type
				, p_site_id
				, current_timestamp, 'system', ' ý   '
				from cm_equip_chk_mast where chk_mast_pk = p_chk_mast_pk;

				insert into cm_equip_chk_item_mst (chk_item_nm, chk_item_unit_pk, item_idx, lcl, ucl, chk_item_pk, chk_sche_pk) 
				select chk_item_nm, chk_item_unit_pk, item_idx, lcl, ucl, chk_item_pk, v_chk_sche_pk
				from cm_equip_chk_item where chk_mast_pk = p_chk_mast_pk;

				insert into cm_equip_chk_rslt(chk_req_type, chk_sche_pk, equip_pk, insert_ts, inserter_id, inserter_nm)
				select p_sche_type, v_chk_sche_pk, equip_pk, current_timestamp, 'system', ' ý   '
				from cm_chk_equip where chk_mast_pk = p_chk_mast_pk;

				--  ֱ⸶           Ʈ (last_chk_date, next_chk_date) ,  ڵ  ΰ 쿡  
				--  ڵ      쿡        ֱ          Ʈ  Ѵ .
				if p_sche_type = 'A' then
					update cm_equip_chk_mast
					set last_chk_date = v_plan_date
					, next_chk_date = v_next_date
					where chk_mast_pk = p_chk_mast_pk;
				end if;

				v_exe_cnt = v_exe_cnt + 1;
			
			end if;
			
		end if;

		--    ѷ        
		EXIT WHEN i = 1000;

		v_curr_date = v_next_date;
		SELECT i+1 into i;
	END LOOP;	
			
	RETURN cast(v_exe_cnt as text);

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('FUNCTION', 'make_schedule_insp', concat('[sche_type] ',  p_sche_type, ' [chk_mast_pk] ',  cast(p_chk_mast_pk as text), ' [MESSAGE] : ', SQLERRM));
	RETURN null;
  END;
  
end;
$function$
;

-- DROP FUNCTION public.cm_fn_make_schedule_pm(varchar, int8, date, date, varchar);

CREATE OR REPLACE FUNCTION public.cm_fn_make_schedule_pm(p_sche_type character varying, p_pm_pk bigint, p_make_start_date date, p_make_end_date date, p_site_id character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
declare
	v_cycle_type character varying(20); 
	v_cycle_type_code character varying(10); 
	v_per_number numeric;
	v_sched_start_dt date;
	v_next_chk_date date;
	v_exists_cnt integer = 0;
	v_start_date date;
	v_curr_date date;
	v_plan_date date;
	v_next_date date;
    i integer;
	v_work_order_pk bigint;
	v_work_order_approval_pk bigint;
	v_accept_yn character varying(1); 
	v_approval_yn character varying(1); 
	v_holiday_use_yn character varying(1);
	v_pm_dept_pk bigint;
	v_pm_user_pk bigint;
	v_pm_login_id character varying(50);
	v_pm_user_nm character varying(50);
	v_work_order_no character varying(40);
	v_req_dept_pk bigint;
	v_exe_cnt integer = 0;
	v_last_plan_dt date;
	v_next_pm_date date;
	p_exec_cnt varchar(20);
	v_error_message varchar(1000);
	v_error_log varchar(1000);
begin

	-- *********************************************************
	-- PM      ٻ   
	-- 1. PM     Ⱓ : p_make_start_date ~ p_make_end_date
	-- 2. PM              ֱ ,      ֱ      ,      ֱ             ȸ
	-- 3.  ֱ              ϱ .
	-- 4.  ڵ  ΰ 쿡                 ֱ   ,        ֱ          Ʈ
	-- 5.  ڵ  ΰ 쿡    ̹    ϵ        Ұ .
	-- 220329 :  ڵ /           ¥+PM     Ͱ   ̹                   ʴ´ .
	-- 230626 :  ۾  μ     ۾          μ     Ѵ .
	-- 230727 :    ʰ       ,  ֱ     Ͽ              ǵ   ,  ֱ     Ͽ              Ѱ         ֱ          Ͽ      
	-- 230807 : WORK_ORDER_NO     Ʈ   ̵        ߰  
	-- 230808 : SITE_CONFIG.SCHE_OPS.inspHolidayScheUse        о                        θ  Ȯ      ó   
	-- 230817 :    ʰ       , 230727    ǵ     
	-- *********************************************************
	v_exe_cnt = 0;
	v_cycle_type = null;
	v_cycle_type_code = null;
	v_per_number = null;
	v_sched_start_dt = null;
	v_next_chk_date = null;
	v_start_date = null;
	v_curr_date = null;
	v_accept_yn = '';
	v_approval_yn = '';
	v_last_plan_dt = null;
	v_error_log = '';
	

	select t.cycle_type, t.per_number, t.sched_start_dt, t.next_chk_date
	, (case when t.cycle_type = 'CYCLE_TYPE_Y' then 'year' 
	   	when t.cycle_type = 'CYCLE_TYPE_M' then 'month' when t.cycle_type = 'CYCLE_TYPE_W' then 'week'
	   	when t.cycle_type = 'CYCLE_TYPE_D' then 'day' else '' end)
	, coalesce(u.dept_pk, t.dept_pk) as dept_pk
	, t.pm_user_pk, u.login_id, u.user_nm, eq.dept_pk
	, cm_fn_get_last_pm_date(t.pm_pk) as next_pm_data
	into v_cycle_type, v_per_number, v_sched_start_dt, v_next_chk_date, v_cycle_type_code
	, v_pm_dept_pk, v_pm_user_pk, v_pm_login_id, v_pm_user_nm, v_req_dept_pk, v_next_pm_date
	from cm_pm t
	inner join cm_equipment eq on t.equip_pk = eq.equip_pk
	left outer join cm_dept d on t.dept_pk = d.dept_pk
	left outer join cm_user_info u on t.pm_user_pk = u.user_pk
	where t.pm_pk = p_pm_pk and t.use_yn = 'Y' and t.del_yn = 'N' 
	and eq.site_id = p_site_id
	;
	
	if v_cycle_type is null then
		--  ش Ǵ         ó             Ƿ  END
		v_exe_cnt = 0;
		p_exec_cnt = '0';
		return '0';
	end if;
	
	
	--  ڵ            ִ         Ȯ  .
	select count(*) into v_exists_cnt
	from cm_work_order t
	inner join cm_equipment eq on t.equip_pk = eq.equip_pk 
	where t.pm_pk = p_pm_pk 
	and t.pm_req_type = 'A' 
	and t.wo_type = 'PM' 
	and t.pm_pk is not null
	and eq.site_id = p_site_id
	;	
	
	--         ֱ         ڱ  ϱ 
	select max(t.plan_start_dt) into v_last_plan_dt
	from cm_work_order t
	inner join cm_equipment eq on t.equip_pk = eq.equip_pk 
	where t.pm_pk = p_pm_pk 
	and t.pm_req_type = 'A' 
	and t.wo_type = 'PM' 
	and t.pm_pk is not null
	and eq.site_id = p_site_id
	;			


	if p_sche_type = 'A' then
		
		if v_next_chk_date is null and coalesce(v_exists_cnt, 0) = 0 and date(v_sched_start_dt) BETWEEN  date(p_make_start_date) AND date(p_make_end_date)  then
			--      ֱ          ,  ֱٻ                 ,  ֱ              Ⱓ      ԵǾ         
			v_start_date = v_sched_start_dt;
		elsif v_next_chk_date is null and coalesce(v_exists_cnt, 0) = 0 and date(v_sched_start_dt) < date(p_make_start_date) then
			--         ֱⰡ  Ѱǵ     µ ,  ֱⰡ    ú                            ֱ          Ͽ ,  ش   ֱ  Ͽ     Կ  θ  Ȯ   ϰ  ó   Ѵ .
			select cm_fn_get_next_sche_date(v_sched_start_dt, p_make_start_date, p_make_end_date, v_cycle_type_code, v_per_number) into v_start_date;		
		elsif v_next_chk_date is null and coalesce(v_exists_cnt, 0) > 0  then
			--      ֱ          ,  ֱٻ              ִ       ֱٻ                       Ⱓ      Ե             
			select cm_fn_get_next_sche_date(v_last_plan_dt, p_make_start_date, p_make_end_date, v_cycle_type_code, v_per_number) into v_start_date; 
		elsif v_next_chk_date is not null and coalesce(v_exists_cnt, 0) > 0 and  date(v_next_chk_date) < date(p_make_start_date) then
			--      ֱ       ְ ,  ֱٻ                   ,    ú         ֱ                  ֱٻ                            
			select cm_fn_get_next_sche_date(v_last_plan_dt, p_make_start_date, p_make_end_date, v_cycle_type_code, v_per_number) into v_start_date;	
		elsif v_next_chk_date is not null and coalesce(v_exists_cnt, 0) > 0 and  date(v_next_chk_date) >= date(p_make_start_date) then
			--      ֱ       ְ ,  ֱٻ                   ,    ú         ֱ                          ֱ                       
			v_start_date = v_next_chk_date;
		end if;
	else
		v_start_date = p_make_start_date;
	end if;
	
	if v_start_date is null then
		-- ó          ϴ              Ƿ  END
		v_exe_cnt = 0;
		return '0';
	end if;
	
	select (case when cast(proc_opts -> 'acceptYn' as text) = 'true' then 'Y' else 'N' end) as accept_yn
	, (case when cast(proc_opts -> 'approvalYn' as text) = 'true' then 'Y' else 'N' end) as approval_yn
	, (case when cast(sche_opts -> 'pmHolidayScheUse' as text) = 'true' then 'Y' else 'N' end) as holiday_use_yn
	into v_accept_yn, v_approval_yn, v_holiday_use_yn
	from cm_site_config
	where site_id = p_site_id;
	
	--   ȸ Ⱓ    , v_start_date        Ϸ     ݺ     ֱ       ϱ .
	--             :   ȸ Ⱓ     .
	v_curr_date = v_start_date;
	i := 1;
	LOOP

		if v_curr_date > p_make_end_date then
			--   ¥        Ѱ  
			EXIT;
		else
			SELECT CASE WHEN v_holiday_use_yn = 'Y' THEN v_curr_date ELSE TO_DATE(cm_fn_get_work_day(TO_CHAR(v_curr_date,'YYYY-MM-DD')),'YYYY-MM-DD') END
			, (v_curr_date + concat(v_per_number, ' ', v_cycle_type_code)::interval)
			into v_plan_date, v_next_date
			;
		
			v_exists_cnt = 0;
			
			--  ڵ         ̹   ߺ          ִ    Ȯ   (   ˸      +    ˰ ȹ  )
			--  ڵ /          ߺ    Ȯ  
			select count(*) into v_exists_cnt
			from cm_work_order t
			inner join cm_equipment eq on t.equip_pk = eq.equip_pk 
			where t.pm_pk = p_pm_pk 
			and t.pm_req_type = 'A' 
			and t.wo_type = 'PM' 
			and t.pm_pk is not null
			and to_char(t.plan_start_dt, 'YYYY-MM-DD') = to_char(v_plan_date,'YYYY-MM-DD')
			and eq.site_id = p_site_id
			;	
		
			if coalesce(v_exists_cnt, 0) = 0 then
				v_work_order_pk = 0;
				v_work_order_approval_pk = 0;

				select nextval('work_order_approval_work_order_approval_pk_seq') into v_work_order_approval_pk;
			
				insert into cm_work_order_approval (work_order_approval_pk, wo_status
				, reg_dt, reg_user_nm, reg_user_pk, rqst_dt, rqst_user_nm, rqst_user_pk
				, accept_dt, accept_user_nm, accept_user_pk, appr_dt, appr_user_nm, appr_user_pk)
				values(v_work_order_approval_pk, 'WOS_AP'
				, current_timestamp, ' ý   ', 1, current_timestamp, coalesce(v_pm_user_nm, ' ý   '), coalesce(v_pm_user_pk, 1)
				, current_timestamp, coalesce(v_pm_user_nm, ' ý   '), coalesce(v_pm_user_pk, 1)
				, current_timestamp, coalesce(v_pm_user_nm, ' ý   '), coalesce(v_pm_user_pk, 1)
				);

				--      ٸ     .
				select nextval('work_order_work_order_pk_seq') into v_work_order_pk;

				select coalesce(MAX((select work_order_no from (select max(cast(work_order_no as integer)) as work_order_no 
					from cm_work_order WHERE (work_order_no ~ E'^[0-9]+$') = true and site_id = p_site_id) as sub_table)) + 1, '1') into v_work_order_no
				from cm_work_order;

				insert into cm_work_order(work_order_pk, equip_pk, work_order_no, work_title, wo_status, maint_type_cd, wo_type, want_dt
				, plan_start_dt, plan_end_dt, start_dt, end_dt, dept_pk, work_charger_pk, pm_pk, work_order_approval_pk, appr_line, appr_line_next
				, req_dept_pk, work_order_sort, pm_req_type, insert_ts, inserter_id, inserter_nm, site_id)
				select v_work_order_pk, p.equip_pk, v_work_order_no, p.pm_nm, 'WOS_AP', 'MAINT_TYPE_PM', 'PM', v_plan_date
				, v_plan_date, v_plan_date, v_plan_date, v_plan_date, p.dept_pk, p.pm_user_pk, p.pm_pk, v_work_order_approval_pk, 'AP,CM,CL', 'CM'
				, v_req_dept_pk, cast(v_work_order_no as integer), p_sche_type, current_timestamp, 'system', ' ý   ', p_site_id
				from cm_pm p
				where p.pm_pk = p_pm_pk
				;

				update cm_work_order
				set req_dept_busi_cd = cm_fn_get_dept_business_cd(cast(v_req_dept_pk as integer))
				where work_order_pk = v_work_order_pk
				;

				--  ۾  η 
				insert into cm_wo_labor(work_order_pk, job_class_pk, work_hr)
				select v_work_order_pk, t1.job_class_pk, t1.work_hr
				from cm_pm_labor t1
				where t1.pm_pk = p_pm_pk;

				--  ۾     
				insert into cm_wo_mtrl(work_order_pk, mtrl_pk, plan_amt, unit_price)
				select v_work_order_pk, t.mtrl_pk, t.amt, m.unit_price
				from cm_pm_mtrl t
				inner join cm_material m on t.mtrl_pk = m.mtrl_pk
				where t.pm_pk = p_pm_pk
				;

				--  ̷ 
				insert into cm_work_order_hist(work_order_pk, before_status, after_status, change_ts, changer_pk, changer_nm, change_reason)
				values(v_work_order_pk, 'WOS_OC', 'WOS_OC', current_timestamp, 1, ' ý   ', ' ý    ڵ     ');
				insert into cm_work_order_hist(work_order_pk, before_status, after_status, change_ts, changer_pk, changer_nm, change_reason)
				values(v_work_order_pk, 'WOS_OC', 'WOS_AP', current_timestamp, 1, ' ý   ', ' ý    ڵ     ');

				-- PM ֱ⸶           Ʈ (last_work_dt, next_chk_date) ,  ڵ  ΰ 쿡  
				if p_sche_type = 'A' then
					update cm_pm
					set last_work_dt = v_plan_date
					, next_chk_date = v_next_date
					where pm_pk = p_pm_pk;
				end if;			

				v_exe_cnt = v_exe_cnt + 1;
			end if;
			
		end if;

		--    ѷ        
		EXIT WHEN i = 1000;

		v_curr_date = v_next_date;
		SELECT i+1 into i;
	END LOOP;	
	
	RETURN cast(v_exe_cnt as text);

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('FUNCTION', 'make_schedule_pm', concat('[sche_type] ',  p_sche_type, ' [p_pm_pk] ',  cast(p_pm_pk as text), ' [MESSAGE] : ', SQLERRM));
	RETURN null;
  END;
  
end;
$function$
;

-- DROP FUNCTION public.cm_fn_minutediff(timestamp, timestamp);

CREATE OR REPLACE FUNCTION public.cm_fn_minutediff(date1 timestamp without time zone, date2 timestamp without time zone)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
begin

	RETURN (EXTRACT(EPOCH FROM cm_date2) - EXTRACT(EPOCH FROM cm_date1))/60;
	
end;
$function$
;

-- DROP FUNCTION public.cm_fn_round_val(float8, int4);

CREATE OR REPLACE FUNCTION public.cm_fn_round_val(val1 double precision, val2 integer)
 RETURNS numeric
 LANGUAGE sql
AS $function$
SELECT round(cast(val1 as numeric), val2)
$function$
;

-- DROP FUNCTION public.cm_fn_timestampdiff(timestamp, timestamp);

CREATE OR REPLACE FUNCTION public.cm_fn_timestampdiff(date1 timestamp without time zone, date2 timestamp without time zone)
 RETURNS numeric
 LANGUAGE plpgsql
AS $function$
declare
begin

	RETURN (EXTRACT(EPOCH FROM cm_date2) - EXTRACT(EPOCH FROM cm_date1))/3600;
	
end;
$function$
;

-- DROP FUNCTION public.cm_fn_user_nm(varchar, varchar);

CREATE OR REPLACE FUNCTION public.cm_fn_user_nm(v_user_nm character varying, v_del_yn character varying)
 RETURNS character varying
 LANGUAGE plpgsql
AS $function$
declare
	t_nm character varying;
begin
	
	select
		case when t.del_yn = 'Y' then 
		    CASE WHEN CHAR_LENGTH(t.user_nm) > 2 THEN 
	        	CONCAT(SUBSTRING(t.user_nm, 1, 1),LPAD('*', CHAR_LENGTH(t.user_nm) - 2, '*')
	            ,SUBSTRING(t.user_nm, CHAR_LENGTH(t.user_nm), CHAR_LENGTH(t.user_nm)))
	        ELSE CONCAT(SUBSTRING(t.user_nm, 1, 1),LPAD('*', CHAR_LENGTH(t.user_nm) - 1, '*'))
	    	end
	    else t.user_nm end as user_nm	
	into t_nm	    
	FROM  (
	    select v_user_nm as user_nm, v_del_yn as del_yn
	) t
	;

	RETURN t_nm;
	
end;
$function$
;

-- DROP FUNCTION public.cm_fn_week(timestamp, int4);

CREATE OR REPLACE FUNCTION public.cm_fn_week(conv_date timestamp without time zone, opts integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
begin

	RETURN CAST(EXTRACT(WEEK FROM cm_conv_date) as integer);
	
end;
$function$
;

-- DROP PROCEDURE public.cm_prc_ic_if_tag_data_ins(json);

CREATE OR REPLACE PROCEDURE public.cm_prc_ic_if_tag_data_ins(jsontag json)
 LANGUAGE plpgsql
AS $procedure$
declare
	v_cnt bigint;
	curdata record;
begin
-- raise notice 'fntrans';

	for curdata in
		SELECT x->>'P_RESULT_ID' as P_RESULT_ID, x->>'P_ASSET_ID' as P_ASSET_ID, x->>'P_MEAS_DT' as P_MEAS_DT
		, x->>'P_VEL' as P_VEL, x->>'P_ACC' as P_ACC, x->>'P_TEMP' as P_TEMP
		FROM cm_json_array_elements(jsontag) as x
	loop
		raise notice 'TARGET %', curdata;	

		INSERT INTO cm_tag_data(tag_pk, data_dt, data_val, data_id)
		select tag_pk
		, to_timestamp(curdata.P_MEAS_DT, 'YYYY-MM-DD HH24:MI:SS')
		, (case when tag.src_tag = 'A' then cast(curdata.P_ACC as double precision)
			   when tag.src_tag = 'V' then cast(curdata.P_VEL as double precision)
			   when tag.src_tag = 'TEMP' then cast(curdata.P_TEMP as double precision)
			   else null end)
		, curdata.P_RESULT_ID
		from cm_tag 
		where tag.src_ip_addr = curdata.P_ASSET_ID
		and tag.src_tag in ('A', 'V', 'TEMP')
		and not exists (select 1 from cm_tag_data where tag_pk = tag.tag_pk 
						and data_id = curdata.P_RESULT_ID and data_dt = to_timestamp(curdata.P_MEAS_DT, 'YYYY-MM-DD HH24:MI:SS'))		
		;

		v_cnt = v_cnt + 1;		
		
		/*
		--    ӵ 
		-- INSERT INTO cm_tag_data_icare(tag_pk, data_dt, data_val, data_id)
		INSERT INTO cm_tag_data(tag_pk, data_dt, data_val, data_id)
		select tag_pk
		, to_timestamp(curdata.P_MEAS_DT, 'YYYY-MM-DD HH24:MI:SS')
		, cast(curdata.P_ACC as double precision)
		, curdata.P_RESULT_ID
		from cm_tag where tag.src_ip_addr = curdata.P_ASSET_ID and tag.src_tag = 'A'
		and not exists (select 1 from cm_tag_data where tag_pk = tag.tag_pk 
		 				and data_id = curdata.P_RESULT_ID and data_dt = to_timestamp(curdata.P_MEAS_DT, 'YYYY-MM-DD HH24:MI:SS'))		
		;
				  
		--  ӵ 
		INSERT INTO cm_tag_data(tag_pk, data_dt, data_val, data_id)
		select tag_pk
		, to_timestamp(curdata.P_MEAS_DT, 'YYYY-MM-DD HH24:MI:SS')
		, cast(curdata.P_VEL as double precision)		  
		, curdata.P_RESULT_ID
		from cm_tag where tag.src_ip_addr = curdata.P_ASSET_ID and tag.src_tag = 'V'
		and not exists (select 1 from cm_tag_data where tag_pk = tag.tag_pk 
						and data_id = curdata.P_RESULT_ID and data_dt = to_timestamp(curdata.P_MEAS_DT, 'YYYY-MM-DD HH24:MI:SS'))
		;
				  
		--  µ 
		INSERT INTO cm_tag_data(tag_pk, data_dt, data_val, data_id)
		select tag_pk
		, to_timestamp(curdata.P_MEAS_DT, 'YYYY-MM-DD HH24:MI:SS')
		, cast(curdata.P_TEMP as double precision)		  
		, curdata.P_RESULT_ID
		from cm_tag where tag.src_ip_addr = curdata.P_ASSET_ID and tag.src_tag = 'TEMP'
		and not exists (select 1 from cm_tag_data where tag_pk = tag.tag_pk 
						and data_id = curdata.P_RESULT_ID and data_dt = to_timestamp(curdata.P_MEAS_DT, 'YYYY-MM-DD HH24:MI:SS'))
		;
		*/
		
	end loop;	
	
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('system', 'cm_prc_ic_if_tag_data_ins', concat(' [MESSAGE] : ', v_cnt::text, '               Ǿ    ϴ .'));

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('system', 'cm_prc_ic_if_tag_data_ins', concat(' [MESSAGE] : ', SQLERRM));
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_if_dept_code();

CREATE OR REPLACE PROCEDURE public.cm_prc_if_dept_code()
 LANGUAGE plpgsql
AS $procedure$
declare
	V_ERROR_MESSAGE varchar(1000);
	v_cnt bigint;
BEGIN
	-- *******************************************************************
	--  μ              ̽ 
	-- *******************************************************************
	-- 
	-- *******************************************************************
	--** if    ̺                ʿ  start
	create temp table if_dept_code
	(
		dept_code varchar(30) NOT NULL,
		dept_name varchar(200) NOT NULL,
		dept_uper varchar(30) NULL,
		dept_act_code varchar(5) NULL,
		isrt_date varchar(15) NULL,
		updt_date varchar(15) NULL,
		if_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
		if_flag varchar(1) NOT NULL DEFAULT 'N'::character varying
	);
	insert into cm_if_dept_code
	select 'ZZ001' as dept_code,
		'   ߺ ' as dept_name,
		'      Ʈ' as dept_uper,
		'I' as dept_act_code,
		'2023-09-19' as isrt_date,
		'2023-09-19' as updt_date,
		CURRENT_TIMESTAMP as if_date,
		'Y' as if_flag;
	--** if    ̺                ʿ  end
	
	INSERT INTO cm_ERROR_LOG (ERROR_LOG_TYPE, ERROR_LOG_TITLE, ERROR_LOG_DESC, INSERT_TS)
	SELECT 'INTERFACE', 'cm_prc_IF_DEPT_CODE', 'START cm_prc_IF_DEPT_CODE ', current_timestamp ;

	-- IF    ̺            ̺              
	WITH UPSERT as (
		UPDATE cm_dept d
		   SET dept_nm = t.dept_name
  			 , use_yn = CASE WHEN t.dept_act_code = 'D' THEN 'N'	/*    °  D        μ        "      " ó   */
  			 				   ELSE d.use_yn
  			 			  END
  			 , update_ts = current_timestamp  
  			 , updater_nm = 'system'
  			 , updater_id = 'system'
  		from cm_if_dept_code t
		LEFT OUTER JOIN cm_dept ud ON t.dept_code = ud.dept_cd AND ud.use_yn = 'Y' AND ud.del_yn = 'N'
	  	WHERE d.dept_cd = t.dept_code
	  	and IF_FLAG = 'N'/* and (d.dept_nm <> t.dept_name OR d.up_dept_pk <> ud.up_dept_pk OR t.dept_act_code = 'D') */ 
	  	RETURNING d.*
	 )
	insert into cm_dept(dept_cd, dept_nm, up_dept_pK, business_yn, team_yn, ccenter_cd, tpm_yn, use_yn, del_yn, insert_ts, inserter_id, inserter_nm, team_busi_yn, site_id)
  	select t.dept_code, t.dept_name, NULL, 'N', 'N', NULL, 'N', 'Y', 'N', current_timestamp, 'system', 'system', 'N', null
  	from cm_if_dept_code t
	LEFT OUTER JOIN cm_dept ud ON t.dept_code = ud.dept_cd AND ud.use_yn = 'Y' AND ud.del_yn = 'N'
	WHERE NOT EXISTS(SELECT dept_code from UPSERT);

--	v_cnt := SQL%ROWCOUNT;
	INSERT INTO cm_ERROR_LOG (ERROR_LOG_TYPE, ERROR_LOG_TITLE, ERROR_LOG_DESC, INSERT_TS)
	VALUES ('INTERFACE', 'cm_prc_IF_DEPT_CODE', 'Affected Rows = ' || v_cnt, current_timestamp);

	--      ڵ        Ʈ
	  WITH s AS (SELECT idc.DEPT_CODE,
					idc.DEPT_NAME,
					idc.DEPT_UPER,
					ud.DEPT_PK AS up_dept_pk,
					idc.DEPT_ACT_CODE,
					idc.ISRT_DATE
			   FROM cm_IF_DEPT_CODE idc
			   LEFT OUTER JOIN cm_dept d ON idc.DEPT_CODE = d.DEPT_CD AND d.USE_YN = 'Y' AND d.DEL_YN = 'N'
			   LEFT OUTER JOIN cm_dept ud ON idc.DEPT_UPER = ud.DEPT_CD AND ud.USE_YN = 'Y' AND ud.DEL_YN = 'N'
		  	  WHERE idc.IF_FLAG = 'N')
		update cm_dept d
		   set UP_DEPT_PK = uud.DEPT_PK
		from cm_if_dept_code t
		LEFT OUTER JOIN cm_dept ud ON t.dept_code = ud.dept_cd AND ud.use_yn = 'Y' AND ud.del_yn = 'N'
		LEFT OUTER JOIN cm_dept uud ON t.DEPT_UPER = ud.DEPT_CD AND uud.USE_YN = 'Y' AND uud.DEL_YN = 'N'
	  	WHERE d.dept_cd = t.dept_code
	  	and IF_FLAG = 'N';

	--       ̺         Ʈ    IF_FLAG   'Y'         Ʈ
	WITH s AS (
	    select t.dept_code 
	     from cm_if_dept_code t
		LEFT OUTER JOIN cm_dept ud ON t.dept_code = ud.dept_cd AND ud.use_yn = 'Y' AND ud.del_yn = 'N'
	  	WHERE ud.dept_cd = t.dept_code
	  	and IF_FLAG = 'N'
	 )
	 update cm_if_dept_code
	 set IF_FLAG = 'Y'
	 from s
	 where if_dept_code.dept_code = s.dept_code
	;

	INSERT INTO cm_ERROR_LOG (ERROR_LOG_TYPE, ERROR_LOG_TITLE, ERROR_LOG_DESC, INSERT_TS)
	SELECT 'INTERFACE', 'cm_prc_IF_DEPT_CODE', 'END cm_prc_IF_DEPT_CODE ', current_timestamp;

truncate if_dept_code;
EXCEPTION
  WHEN OTHERS THEN
  BEGIN

	V_ERROR_MESSAGE := SQLERRM;

	INSERT INTO cm_ERROR_LOG (ERROR_LOG_TYPE, ERROR_LOG_TITLE, ERROR_LOG_DESC, INSERT_TS)
	SELECT 'INTERFACE ERROR', 'cm_prc_IF_DEPT_CODE', ' [MESSAGE] : ' || V_ERROR_MESSAGE, CURRENT_TIMESTAMP ;
	
	Commit;

  END;
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_if_mail_send();

CREATE OR REPLACE PROCEDURE public.cm_prc_if_mail_send()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_cnt integer;
	curdata record;
	cursite record;
	v_mail_sndr_yn varchar(10); 
	v_site_id varchar(10); 
	v_anoti_mail_hist_pk bigint;
	v_mail_rcvr_addr varchar(40); 
	v_mail_title varchar(100); 
	v_mail_content varchar(4000); 
	v_error_message varchar(1000);
begin
-- raise notice 'fntrans';
	
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('IF', 'cm_prc_if_mail_send', 'start!');

	-- 2023.04.11     Ʈ     ó  
	for cursite in
		select s.site_id
		from cm_sites s 
		where s.status = UPPER('A')
	loop
		-- raise notice 'TARGET %', cursite;	
	
		v_site_id = cursite.site_id;
	
		--        (2022.03.25, seokjun.choi)
		--    :      I/F    ۿ  δ   ý  ۿɼ      üũ 
		select (svc_opts -> 'mailSndrYn')::text as mailSndrYn 
		into v_mail_sndr_yn
		from cm_site_config
		where site_id = v_site_id;
		
		if coalesce(v_mail_sndr_yn, '') <> 'true' then
			return;
		end if;
		
		v_cnt = 1; 
		
		for curdata in
			select anoti_mail_hist_pk, mail_rcvr_addr, mail_title, mail_content
			from cm_anoti_mail_hist
			where result_type = UPPER('W') and send_ts is null
			and site_id = v_site_id
		loop
			-- raise notice 'TARGET %', curdata;	
			v_anoti_mail_hist_pk = curdata.anoti_mail_hist_pk;
			v_mail_rcvr_addr = curdata.mail_rcvr_addr;
			v_mail_title = curdata.mail_title;
			v_mail_content = curdata.mail_content;
		
			/*
			INSERT INTO cm_XXXXX(gubun
					, seq
					, emno, from_info
					, to_info, cc_info
					, title
					, coment, send_yn, sys_date)
			VALUES ('CMMS'
					, v_anoti_mail_hist_pk
					, 'CMMS', 'xware@hsmetal.co.kr'
					, v_mail_rcvr_addr, null
					, v_mail_title
					, v_mail_content, 'N', current_date);
			*/
		
			update cm_anoti_mail_hist
			set result_type = UPPER('S')
			, send_ts = current_timestamp
			where anoti_mail_hist_pk = v_anoti_mail_hist_pk;

			v_cnt = v_cnt + 1;		
		end loop;		
	end loop;

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('IF', 'cm_prc_if_mail_send', concat(' [MESSAGE] : ', SQLERRM));
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_if_sms_send();

CREATE OR REPLACE PROCEDURE public.cm_prc_if_sms_send()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_cnt integer;
	curdata record;
	cursite record;
	v_sms_sndr_yn varchar(10); 
	v_site_id varchar(10); 
	v_anoti_sms_hist_pk bigint;
	v_sms_rcvr_no varchar(15); 
	v_sms_sndr_no varchar(15); 
	v_sms_content varchar(200); 
	v_error_message varchar(1000);

begin
-- raise notice 'fntrans';

	-- 2023.04.11     Ʈ     ó   
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('IF', 'cm_prc_if_sms_send', 'start!');
	
	for cursite in
		select s.site_id
		from cm_sites s 
		where s.status = UPPER('A')
	loop
		-- raise notice 'TARGET %', cursite;	
		
		v_site_id = cursite.site_id;
	
		--        (2022.03.25, seokjun.choi)
		--    :      I/F    ۿ  δ   ý  ۿɼ      üũ 
		select (svc_opts -> 'smsSndrYn')::text as smsSndrYn 
		into v_sms_sndr_yn
		from cm_site_config
		where site_id = cursite.site_id;
		
		if coalesce(v_sms_sndr_yn, '') <> 'true' then
			return;
		end if;
		
		v_cnt = 1; 
		
		for curdata in
			select anoti_sms_hist_pk, sms_rcvr_no, sms_sndr_no, sms_content
			from cm_anoti_sms_hist
			where result_type = UPPER('W') and send_ts is null
			and site_id = v_site_id
		loop

			v_anoti_sms_hist_pk = curdata.anoti_sms_hist_pk;
			v_sms_rcvr_no = curdata.sms_rcvr_no;
			v_sms_sndr_no = curdata.sms_sndr_no;
			v_sms_content = curdata.sms_content;
		
			/*
			INSERT INTO cm_XXXXXX(interface_id
					, tr_phone
					, tr_callback
					, tr_msg
					, target_system, crt_id, crt_dt, updt_id, updt_dt)
			VALUES (-1
					, v_sms_rcvr_no
					, v_sms_sndr_no
					, v_sms_content
					, 'CMMS'
					, 1, TO_CHAR(CURRENT_DATE,'YYYYMMDD')
					, 1, TO_CHAR(CURRENT_DATE,'YYYYMMDD'));
			*/

			update cm_anoti_sms_hist
			set result_type = UPPER('S')
			, send_ts = current_timestamp
			where anoti_sms_hist_pk = v_anoti_sms_hist_pk;
			
			v_cnt = v_cnt + 1;		
		end loop;	

	end loop;


EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('IF', 'cm_prc_if_sms_send', concat(' [MESSAGE] : ', SQLERRM));
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_if_user_info();

CREATE OR REPLACE PROCEDURE public.cm_prc_if_user_info()
 LANGUAGE plpgsql
AS $procedure$
declare
	V_ERROR_MESSAGE varchar(1000);
	v_cnt bigint;
BEGIN
	-- *******************************************************************
	--	                 ̽ 
	-- *******************************************************************
	-- 
	-- *******************************************************************
	-- IF  ӽ    ̹ .       ӽ    ̺          ӽ    ̺        ʿ  start
	create temp table if_user_info
	( 
		SA_USER varchar(100) NOT NULL,
		SA_SABUN varchar(100) NOT NULL,
		SA_NAME varchar(100) NOT NULL,
		SA_PASS varchar(100)  NULL,
		SA_DEPT_NEW varchar(100) NULL,
		SA_DEPT_NAME varchar(100) NULL,
		SA_JOBX varchar(100) NULL,
		SA_JOBX_NAME varchar(100) NULL,
		SA_FUNC varchar(100) NULL,
		SA_FUNC_NAME varchar(100) NULL,
		SA_GNMU_NAME varchar(100) NULL,
		SA_LOCATE varchar(100) NULL,
		SSO_LOCATE varchar(100) NULL,
		SA_SABUN_LEADER varchar(100) NULL,
		SA_TEMP varchar(100) NULL,
		SA_TEMP_NAME varchar(100) NULL,
		SA_TEMP_DATE varchar(100) NULL,
		SA_HAND varchar(100) NULL,
		SA_EMAIL varchar(100) NULL,
		ISRT_DATE varchar(100) NULL,
		UPDT_DATE varchar(100)  NULL DEFAULT CURRENT_TIMESTAMP,
		IF_DATE timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
		IF_FLAG varchar(100) NULL DEFAULT 'N'::character varying
	);
	-- IF  ӽ    ̹ .       ӽ    ̺          ӽ    ̺        ʿ  end

	INSERT INTO cm_ERROR_LOG (ERROR_LOG_TYPE, ERROR_LOG_TITLE, ERROR_LOG_DESC, INSERT_TS)
	SELECT 'INTERFACE', 'cm_prc_IF_USER_INFO', 'START cm_prc_IF_USER_INFO ', current_timestamp ;

	-- IF    ̺            ̺              
	WITH UPSERT as (
		UPDATE cm_USER_INFO ui
		   SET DEPT_PK = d.DEPT_PK
  			 , USER_PASSWORD = t.SA_PASS
  			 , JOB_POS = t.SA_JOBX_NAME
  		  	 , USER_PHONE = t.SA_HAND
  		  	 , DEL_YN = CASE WHEN t.SA_TEMP = '71' THEN 'Y' ELSE ui.DEL_YN END
  		  	 , USE_YN = CASE WHEN t.SA_TEMP = '01' THEN 'N' ELSE ui.USE_YN END
  			 , UPDATE_TS = current_timestamp
  			 , UPDATER_ID = 'system'
		FROM cm_if_user_info t
		INNER JOIN cm_dept d ON t.SA_DEPT_NEW = d.DEPT_CD
		LEFT OUTER JOIN cm_USER_INFO uu ON t.SA_USER = uu.LOGIN_ID
		LEFT OUTER JOIN cm_dept ud ON uu.DEPT_PK = ud.DEPT_PK
		WHERE ui.LOGIN_ID = t.SA_USER
		and t.IF_FLAG = 'N' 
		RETURNING d.*
	 )
  	insert into cm_user_info
  			(USER_NM, DEPT_PK, USER_TYPE, LOGIN_ID, USER_PASSWORD, USE_LANG_CD, JOB_CLASS_PK, TEMP_PASSWORD_YN, USER_MAIL,
			 USER_PHONE, SALT, ADMIN_YN, EMP_NO, JOB_POS, LEADER_YN, DEL_YN, USE_YN, INSERT_TS, INSERTER_ID,
			 INSERTER_NM, SITE_ID, ALLOW_LOGIN, NOTIFY_WO_REJECTED, NOTIFY_WO_CLOSED, NOTIFY_WO_ASSIGNED, SITE_CHANGE_YN)
		select iui.SA_NAME, uu.DEPT_PK, 'UC', iui.SA_USER, iui.SA_PASS, 'ko', NULL, 'N', iui.SA_EMAIL,
				 iui.SA_HAND, null, 'N', iui.SA_USER, iui.SA_JOBX_NAME, 'N', CASE WHEN iui.SA_TEMP = '71' THEN 'Y' ELSE 'N' END, CASE WHEN iui.SA_TEMP = '01' THEN 'N' ELSE 'Y' END, current_timestamp, 'system',
				 'system', NULL, 'N', 'Y', 'Y', 'Y', 'N' 
		FROM cm_if_user_info iui
		INNER JOIN cm_dept d ON iui.SA_DEPT_NEW = d.DEPT_CD
		LEFT OUTER JOIN cm_USER_INFO uu ON iui.SA_USER = uu.LOGIN_ID
		LEFT OUTER JOIN cm_dept ud ON uu.DEPT_PK = ud.DEPT_PK
		WHERE iui.IF_FLAG = 'N' 
	and NOT EXISTS(SELECT LOGIN_ID from UPSERT);
			 

--	v_cnt := SQL%ROWCOUNT;
	INSERT INTO cm_ERROR_LOG (ERROR_LOG_TYPE, ERROR_LOG_TITLE, ERROR_LOG_DESC, INSERT_TS)
	VALUES ('INTERFACE', 'cm_prc_IF_USER_INFO', 'Affected Rows = ' || v_cnt, current_timestamp);

	--       ̺         Ʈ    IF_FLAG   'Y'         Ʈ
	WITH s AS (
		SELECT iui.SA_USER
		FROM cm_if_user_info iui
		INNER JOIN cm_dept d ON iui.SA_DEPT_NEW = d.DEPT_CD
		LEFT OUTER JOIN cm_USER_INFO uu ON iui.SA_USER = uu.LOGIN_ID
		LEFT OUTER JOIN cm_dept ud ON uu.DEPT_PK = ud.DEPT_PK
		WHERE iui.IF_FLAG = 'N'
	 )
	 update cm_if_user_info
	 set IF_FLAG = 'Y'
	 from s
	 where if_user_info.SA_USER = s.SA_USER
	;
		
	--       (USER_ROLE    ̺    DEL_YN = 'Y'         )       ROLE      ( ű      ڴ       ڿ       Role    ߰  Ǿ   ڵ ó       )
	DELETE FROM cm_USER_ROLE
	WHERE USER_PK IN (
		SELECT UI.USER_PK FROM cm_USER_INFO UI
	    INNER JOIN cm_USER_ROLE UR ON UI.USER_PK = UR.USER_PK
  		WHERE UI.DEL_YN = 'Y' 
	);

	INSERT INTO cm_ERROR_LOG (ERROR_LOG_TYPE, ERROR_LOG_TITLE, ERROR_LOG_DESC, INSERT_TS)
	SELECT 'INTERFACE', 'cm_prc_IF_USER_INFO', 'END cm_prc_IF_USER_INFO ', current_timestamp;

	truncate if_user_info;

EXCEPTION
  WHEN OTHERS THEN
  BEGIN

	V_ERROR_MESSAGE := SQLERRM;

	INSERT INTO cm_ERROR_LOG ( ERROR_LOG_TYPE, ERROR_LOG_TITLE, ERROR_LOG_DESC, INSERT_TS)
	SELECT 'INTERFACE ERROR', 'cm_prc_IF_USER_INFO', ' [MESSAGE] : ' || V_ERROR_MESSAGE, current_timestamp ;
	
	Commit;

  END;
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_insp_notdone_alarm_ins();

CREATE OR REPLACE PROCEDURE public.cm_prc_insp_notdone_alarm_ins()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_user_pk bigint;
	v_user_nm varchar(50);
	v_login_id varchar(50);
	v_site_id varchar(20);
	v_contents text;
	v_template text;
	v_exists boolean;
	v_tot_cnt integer;
	cur_charger record;
	curdata record;
begin
	-- **************************************************
	--      ٸ  :                    ˹̽ǽ        ˶   ߼ 
	----------------------------------------------------------------
	-- 2022.06.09 :  ˸     ڸ  PM WO    ڷ      , 
	--				 ˸               ǿ            , PLAN_START_DT           
	-- **************************************************
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('system', 'cm_prc_insp_notdone_alarm_ins', 'start!');

	v_exists = false;
	
	v_template = '<br><hr>
	       ȣ : #CHK_NO#<br>
	   ˸  : #CHK_NM#<br>
	       ȹ   : #START_DATE#<br>
	      : #EQUIP_NM#
	';
	
	--        (2022.03.25, seokjun.choi)
	--    :           /      ߼     δ       ׷     ɼ           . 
	--     sys_opt       /      ߼ۿ  δ        ߼   ÿ   Ǵܿ          ؾ    .
	--  ý  ۰    ڸ  ó   ڷ 
	select user_pk, user_nm, login_id
	into v_user_pk, v_user_nm, v_login_id
	from cm_user_info where login_id = 'system' limit 1;
	
	for cur_charger in 
		select ecs.chk_user_pk, ui.user_nm, ui.login_id, ui.user_phone
		, ui.user_mail, count(distinct ecs.chk_sche_pk) as cnt, ecm.site_id
		from cm_equip_chk_sche ecs
		inner join cm_equip_chk_mast ecm on ecs.chk_mast_pk = ecm.chk_mast_pk
		inner join cm_chk_equip ce on ecm.chk_mast_pk = ce.chk_mast_pk
		inner join cm_equipment eq on ce.equip_pk = eq.equip_pk
		inner join cm_user_info ui on ecs.chk_user_pk = ui.user_pk 
		where ecs.chk_status = 'CHK_STATUS_N' and ecs.chk_dt is null 
		and eq.environ_equip_yn = 'Y'
		and to_char(ecs.chk_sche_dt, 'YYYY-MM') = to_char(now(), 'YYYY-MM')
		and to_char(ecs.chk_sche_dt, 'YYYY-MM-DD') <= to_char(now() + ' -1 days', 'YYYY-MM-DD')
		group by ecs.chk_user_pk, ui.user_nm, ui.login_id, ui.user_phone, ui.user_mail, ecm.site_id
	LOOP
		v_tot_cnt = cur_charger.cnt;
		v_exists = false;
		v_contents = '';
	
		--       ̽ǽð  
		--           ø      ó  .
		for curdata in
			select  ecm.chk_mast_nm as chk_nm, ecm.chk_mast_no as chk_no
			, to_char(ecs.chk_sche_dt, 'YYYY   MM   DD  ') as start_date
			, array_to_string(array_agg(eq.equip_nm), ',') as equip_nm 
			from cm_equip_chk_sche ecs
			inner join cm_equip_chk_mast ecm on ecs.chk_mast_pk = ecm.chk_mast_pk
			inner join cm_chk_equip ce on ecm.chk_mast_pk = ce.chk_mast_pk
			inner join cm_equipment eq on ce.equip_pk = eq.equip_pk
			where ecs.chk_status = 'CHK_STATUS_N' and ecs.chk_dt is null 
			and eq.environ_equip_yn = 'Y'
			and ecs.chk_user_pk = cur_charger.chk_user_pk
			and to_char(ecs.chk_sche_dt, 'YYYY-MM') = to_char(now(), 'YYYY-MM')
			and to_char(ecs.chk_sche_dt, 'YYYY-MM-DD') <= to_char(now() + ' -1 days', 'YYYY-MM-DD')
			and ecm.site_id = cur_charger.site_id
			and eq.site_id = cur_charger.site_id
			group by ecm.chk_mast_nm, ecm.chk_mast_no, ecs.chk_sche_dt
			order by ecm.chk_mast_nm, ecs.chk_sche_dt
			limit 20
		loop
			raise notice 'TARGET %', curdata;	
			v_contents = concat(v_contents, replace(replace(replace(replace(v_template
								, '#CHK_NO#', curdata.chk_no), '#CHK_NM#', curdata.chk_nm)
							, '#START_DATE#', curdata.start_date), '#EQUIP_NM#', curdata.equip_nm));
			v_exists = true;		
		end loop;	
	
		--           Ǽ  ǥ  
		v_contents = concat('<h3>[ ̽ǽ          ', v_tot_cnt, '  ]</h3><span style="font-size: 10pt; font-weight: normal;"><i>(                 ִ  20   ǥ õ˴ϴ .)</i></span>', v_contents);
		
		if v_exists then
			--  ˶         (sms)
			INSERT INTO cm_anoti_sms_hist(alarm_noti_grp_pk, sms_content, sms_sndr_no
			, sms_rcvr_no, sms_rcvr_id
			, result_type, insert_ts, inserter_id, inserter_nm, site_id)
			select ang.alarm_noti_grp_pk
			, substring(replace(ang.sms_content, '@contents', v_contents), 1, 150)
			, ang.sms_sndr_no
			, cur_charger.user_phone, cur_charger.login_id
			, 'W', current_timestamp, v_login_id, v_user_nm, cur_charger.site_id
			from cm_alarm_noti_grp ang
			where ang.noti_grp_type = 'NGT-C01'
			and ang.sms_snd_yn = 'Y'
			and cur_charger.user_phone is not null ;		
		end if;
	
		if v_exists then
			--  ˶         (mail)
			INSERT INTO cm_anoti_mail_hist(alarm_noti_grp_pk, mail_title, mail_content
			, mail_sndr_addr, mail_rcvr_addr, mail_rcvr_id 
			, result_type, insert_ts, inserter_id, inserter_nm, site_id)
			select ang.alarm_noti_grp_pk, ang.mail_title
			, substring(replace(ang.mail_content, '@contents', v_contents), 1, 4000)
			, ang.mail_sndr_addr, cur_charger.user_mail, cur_charger.login_id
			, 'W', current_timestamp, v_login_id, v_user_nm, cur_charger.site_id
			from cm_alarm_noti_grp ang
			where ang.noti_grp_type = 'NGT-C01'
			and ang.mail_snd_yn = 'Y'
			and cur_charger.user_mail is not null ;	
		end if;	
	end loop;

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('system', 'cm_prc_insp_notdone_alarm_ins', concat(' [MESSAGE] : ', SQLERRM));
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_insp_plan_alarm_ins();

CREATE OR REPLACE PROCEDURE public.cm_prc_insp_plan_alarm_ins()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_user_pk bigint;
	v_user_nm varchar(50);
	v_login_id varchar(50);
	v_site_id varchar(20);
	v_contents text;
	v_template text;
	v_exists boolean;
	v_tot_cnt integer;
	v_insp_plan_out varchar(10); 
	v_insp_plan_out_day integer;
	cur_charger record;
	curdata record;
	cursite record;
begin
	-- **************************************************
         
	-- **************************************************
	
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('system', 'cm_prc_insp_plan_alarm_ins', 'start!');

	-- 2023.04.11     Ʈ     ó  
	for cursite in
		select s.site_id
		from cm_sites s 
		where s.status = 'A'
	loop
		raise notice 'TARGET %', cursite;	
	
		v_site_id = cursite.site_id;
		v_exists = false;
		v_insp_plan_out = '';
		v_insp_plan_out_day = 3;
		v_user_pk = null;
		v_user_nm = ''; 
		v_login_id = '';
		v_tot_cnt = 0;
		v_contents = '';
	
		v_template = '<br><hr>
		       ȣ : #CHK_NO#<br>
		   ˸  : #CHK_NM#<br>
		       ȹ   : #START_DATE#<br>
		      : #EQUIP_NM#
		';
	
		select (sche_opts -> 'pmPlanOutOfDate')
		into v_insp_plan_out
		from cm_site_config 
		where site_id = cursite.site_id;
		
		v_insp_plan_out_day = cast(replace(v_insp_plan_out, '"', '') as integer);
	
		--  ý  ۰    ڸ  ó   ڷ 
		select user_pk, user_nm, login_id
		into v_user_pk, v_user_nm, v_login_id
		from cm_user_info where login_id = 'system' limit 1;
		
		for cur_charger in 
			select ecs.chk_user_pk, ui.user_nm, ui.login_id, ui.user_phone, ui.user_mail
			, count(distinct ecs.chk_sche_pk) as cnt, ecm.site_id
			from cm_equip_chk_sche ecs
			inner join cm_equip_chk_mast ecm on ecs.chk_mast_pk = ecm.chk_mast_pk
			inner join cm_chk_equip ce on ecm.chk_mast_pk = ce.chk_mast_pk
			inner join cm_equipment eq on ce.equip_pk = eq.equip_pk
			inner join cm_user_info ui on ecs.chk_user_pk = ui.user_pk 
			where ecs.chk_status = 'CHK_STATUS_N' and ecs.chk_dt is null
			and ecm.site_id = cursite.site_id
			and to_char(ecs.chk_sche_dt, 'YYYY-MM-DD') = to_char(now() - (v_insp_plan_out_day || ' ' || 'days')::INTERVAL, 'YYYY-MM-DD')
			group by ecs.chk_user_pk, ui.user_nm, ui.login_id, ui.user_phone, ui.user_mail, ecm.site_id
		LOOP
			v_tot_cnt = cur_charger.cnt;
			v_exists = false;
			v_contents = '';
		
			--       ̽ǽð  
			--           ø      ó  .
			for curdata in
				select  ecm.chk_mast_nm as chk_nm, ecm.chk_mast_no as chk_no
				, to_char(ecs.chk_sche_dt, 'YYYY   MM   DD  ') as start_date
				, array_to_string(array_agg(eq.equip_nm), ',') as equip_nm 
				from cm_equip_chk_sche ecs
				inner join cm_equip_chk_mast ecm on ecs.chk_mast_pk = ecm.chk_mast_pk
				inner join cm_chk_equip ce on ecm.chk_mast_pk = ce.chk_mast_pk
				inner join cm_equipment eq on ce.equip_pk = eq.equip_pk
				where ecs.chk_status = 'CHK_STATUS_N' and ecs.chk_dt is null 
				and ecs.chk_user_pk = cur_charger.chk_user_pk
				and to_char(ecs.chk_sche_dt, 'YYYY-MM-DD') = to_char(now() - (v_insp_plan_out_day || ' ' || 'days')::INTERVAL, 'YYYY-MM-DD')
				and ecm.site_id = cursite.site_id
				and eq.site_id = cursite.site_id
				group by ecm.chk_mast_nm, ecm.chk_mast_no, ecs.chk_sche_dt
				order by ecm.chk_mast_nm, ecs.chk_sche_dt
				limit 20
			loop
				raise notice 'TARGET %', curdata;	
				v_contents = concat(v_contents, replace(replace(replace(replace(v_template
									, '#CHK_NO#', curdata.chk_no), '#CHK_NM#', curdata.chk_nm), '#START_DATE#', curdata.start_date), '#EQUIP_NM#', curdata.equip_nm));
				v_exists = true;		
			end loop;	
		
			--           Ǽ  ǥ  
			v_contents = concat('<h3>[ ̽ǽ          ', v_tot_cnt, '  ]</h3><span style="font-size: 10pt; font-weight: normal;"><i>(                 ִ  20   ǥ õ˴ϴ .)</i></span>', v_contents);
			
			if v_exists then
				--  ˶         (sms)
				INSERT INTO cm_anoti_sms_hist(alarm_noti_grp_pk, sms_content, sms_sndr_no
				, sms_rcvr_no, sms_rcvr_id
				, result_type, insert_ts, inserter_id, site_id)
				select ang.alarm_noti_grp_pk
				, substring(replace(ang.sms_content, '@contents', v_contents), 1, 150)
				, ang.sms_sndr_no
				, cur_charger.user_phone, cur_charger.login_id
				, 'W', current_timestamp, v_login_id, cursite.site_id
				from cm_alarm_noti_grp ang
				where ang.noti_grp_type = 'NGT-C02'
				and ang.sms_snd_yn = 'Y'
				and cur_charger.user_phone is not null ;		
			end if;
		
			if v_exists then
				--  ˶         (mail)
				INSERT INTO cm_anoti_mail_hist(alarm_noti_grp_pk, mail_title, mail_content
				, mail_sndr_addr, mail_rcvr_addr, mail_rcvr_id 
				, result_type, insert_ts, inserter_id, site_id)
				select ang.alarm_noti_grp_pk, ang.mail_title
				, substring(replace(ang.mail_content, '@contents', v_contents), 1, 4000)
				, ang.mail_sndr_addr, cur_charger.user_mail, cur_charger.login_id
				, 'W', current_timestamp, v_login_id, cursite.site_id
				from cm_alarm_noti_grp ang
				where ang.noti_grp_type = 'NGT-C02'
				and ang.mail_snd_yn = 'Y'
				and cur_charger.user_mail is not null ;	
			end if;	
		end loop;	
	
	end loop;




EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('system', 'cm_prc_insp_plan_alarm_ins', concat(' [MESSAGE] : ', SQLERRM));
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_job_call_pre_month_stock(inout int4);

CREATE OR REPLACE PROCEDURE public.cm_prc_job_call_pre_month_stock(INOUT o_ret integer)
 LANGUAGE plpgsql
AS $procedure$
declare
	v_yearmon character varying(6);
begin
raise notice 'fntrans';

	insert into cm_error_log(error_log_type, error_log_title, error_log_desc, insert_ts)
	values('SCH_PRE_MONTH_STOCK_JOB', ' ſ  1   1  30  ', 'START!', current_timestamp);
   
	--  ̿          ν    ȣ  
	-- p_preyearmon : p_mode        ΰ     ¥      (yyyymm)
	-- p_mode :  ڵ (a),     (m)
	o_ret = 0;
	select to_char(current_timestamp, 'YYYYMM') into v_yearmon;
	CALL cm_prc_job_mat_pre_mon_stock(v_yearmon, 'a', o_ret);
	
	return;

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('system', 'cm_prc_JOB_CALL_PRE_MONTH_STOCK', concat('ERROR [MESSAGE] : ', SQLERRM));
	o_ret = 0;
	return;
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_job_insp_schedule(inout int4);

CREATE OR REPLACE PROCEDURE public.cm_prc_job_insp_schedule(INOUT o_ret integer)
 LANGUAGE plpgsql
AS $procedure$
declare
	cur_site record;
	cur_data record;
	v_insp_auto_sche_use varchar(10);
	v_insp_sche_cycle_type varchar(15);
	v_insp_sche_cycle_day varchar(10);
	v_sche_opts varchar(4000);
	v_start_date varchar(8);
	v_end_date varchar(8);
	v_return_val varchar(30);
	v_exe_count integer;
begin
raise notice '   ˽    ٸ      ';
	o_ret = 0;

	-- 1.     Ʈ       ȸ
	for cur_site in
		select s.site_id
		from cm_sites s 
		where s.status = 'A'
	loop
		-- 2.     Ʈ       Ʈ config   ȸ	
		select coalesce(sc.sche_opts ->> 'inspAutoScheUse', 'false')
		, coalesce(sc.sche_opts ->> 'inspScheCycleType', 'X')
		, coalesce(sc.sche_opts ->> 'inspScheCycleDay', '0')
		, sc.sche_opts::text
		into v_insp_auto_sche_use, v_insp_sche_cycle_type, v_insp_sche_cycle_day, v_sche_opts
		from cm_site_config sc where site_id = cur_site.site_id
		;
		
		--      ٸ    뿩   Ȯ  
		if lower(v_insp_auto_sche_use) = lower('true') then
		
			v_exe_count = 0;
			--      ٸ   α       
			INSERT INTO cm_swing_schedule.equip_chk_sche_send_log(send_dt, send_log) VALUES (CURRENT_TIMESTAMP , '[   ˽    ٸ     ][' || cur_site.site_id || '] ' || v_sche_opts);
			
			--          ħ      ϱ 
			select to_char(now(), 'YYYYMMDD') as start_date
				, case when v_insp_sche_cycle_type = 'CYCLE_TYPE_D' then to_char(now() + (v_insp_sche_cycle_day || ' day')::interval, 'YYYYMMDD')
						when v_insp_sche_cycle_type = 'CYCLE_TYPE_W' then to_char(now() + (v_insp_sche_cycle_day || ' week')::interval - '1 day '::interval, 'YYYYMMDD') 
						when v_insp_sche_cycle_type = 'CYCLE_TYPE_M' then to_char(now() + (v_insp_sche_cycle_day || ' month')::interval - '1 day '::interval, 'YYYYMMDD') 
						when v_insp_sche_cycle_type = 'CYCLE_TYPE_Y' then to_char(now() + (v_insp_sche_cycle_day || ' year')::interval - '1 day '::interval, 'YYYYMMDD') 
						else to_char(now(), 'YYYYMMDD') end as end_date
			into v_start_date, v_end_date						
			;		
			--      ٸ                ȸ
			for cur_data in
	            select  distinct t.chk_mast_pk
	            from cm_equip_chk_mast t
	            inner join cm_chk_equip ce on t.chk_mast_pk = ce.chk_mast_pk
	            inner join cm_equipment eq on ce.equip_pk = eq.equip_pk
	            where t.use_yn = 'Y'
	            and t.del_yn = 'N'
	            and eq.site_id = cur_site.site_id and t.site_id = cur_site.site_id
			loop
				v_return_val = '';
				--    ˺       ٸ  Լ  ȣ  .
				select cm_fn_make_schedule_insp('A'
					, cur_data.chk_mast_pk
					, to_date(v_start_date, 'YYYYMMDD')
					, to_date(v_end_date, 'YYYYMMDD')
					, cur_site.site_id) into v_return_val;	
				
				if v_return_val is not null and v_return_val <> '' and cm_fn_isnumeric(v_return_val) then
					v_exe_count = v_exe_count + v_return_val::integer;
				end if; 
				
			end loop;	
		
			--      α       
			INSERT INTO cm_swing_schedule.equip_chk_sche_send_log(send_dt, send_log) VALUES (CURRENT_TIMESTAMP , '[   ˽    ٸ  Ϸ ][' || cur_site.site_id || ']    ' || v_exe_count::text || '          Ǿ    ϴ .');
	
		end if;
		
	end loop;

	o_ret = 1;
	return;

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('system', 'cm_prc_job_insp_schedule', concat('ERROR [MESSAGE] : ', SQLERRM));
	o_ret = 0;
	return;
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_job_mat_pre_mon_stock(in varchar, in varchar, inout int4);

CREATE OR REPLACE PROCEDURE public.cm_prc_job_mat_pre_mon_stock(p_preyearmon character varying, p_mode character varying, INOUT v_result integer)
 LANGUAGE plpgsql
AS $procedure$
declare
	v_result integer;
	v_user_pk bigint;
	v_login_id character varying(50);
	v_user_nm character varying(50);
	v_yearmon character varying(6);
	v_cnt integer;

	stmt varchar(65535);
	cur_mtrl_pk bigint;
	cur_mtrl_cd varchar(255);
	cur_dept_cd varchar(255);
	cur_loc_cd varchar(255);
	cur_inout_uprice bigint;
	cur_ab_grade varchar(255);
	cur_loc_cell_addr varchar(255);
	cur_supplier_pk bigint;
	cur_stocked_dt date;
	cur_in_qty bigint;
	cur_out_qty bigint;
	cur_curr_stock_qty bigint;
	cur_site_id varchar(20);
	err_msg varchar(255);


	curdata record;
begin
raise notice 'fntrans';

	v_result = 0;

	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('system', 'PRC_JOB_MAT_PRE_MON_STOCK', 'start!');

	--  ̿          ν   
	--                           Ͽ ,                ԰     .	
	-- p_preyearmon : p_mode        ΰ     ¥      (yyyymm)
	-- p_mode :  ڵ (a),     (m)
	
	if (lower(p_mode) = lower('M')) then
		v_yearmon = p_preyearmon;
	else
		--  ſ 1              ǹǷ ,               ͸   ̿ ó     ش .
		select to_char(current_timestamp + INTERVAL '-1 months', 'YYYYMM') into v_yearmon;
	end if;
	
	
	select user_pk, login_id, user_nm
	into v_user_pk, v_login_id, v_user_nm
	from cm_user_info
	where login_id = 'system'
	limit 1;
	
	drop table if exists temp_mi_table;
	create temp table if not exists temp_mi_table (mtrl_pk, mtrl_cd, dept_cd, loc_cd, inout_uprice
		, ab_grade, loc_cell_addr, supplier_pk, stocked_dt, in_qty, out_qty, curr_stock_qty, site_id)
	as values(0::bigint
				, ''::character varying
				, ''::character varying
				, ''::character varying
				, 0::bigint
				, ''::character varying
				, ''::character varying
				, 0::bigint
				, null::date
				, 0::bigint
				, 0::bigint
				, 0::bigint
				, ''::character varying);

	truncate temp_mi_table;	

	with mtrlstock as (
		select mi.mtrl_pk, m.mtrl_cd, d.dept_cd, l.loc_cd, mi.inout_uprice
		, mi.ab_grade, mi.loc_cell_addr, max(mi.supplier_pk) as supplier_pk, mi.stocked_dt
		, sum(case when mi.inout_div = 'INOUT_DIV_IN' then mi.inout_qty else 0 end) as in_qty
		, sum(case when mi.inout_div = 'INOUT_DIV_OUT' then mi.inout_qty else 0 end) as out_qty
		, mi.site_id
		from cm_mtrl_inout mi
		inner join cm_material m on mi.mtrl_pk = m.mtrl_pk
		left outer join cm_dept d on mi.own_dept_cd = d.dept_cd
		inner join cm_location l on mi.inout_loc_cd = l.loc_cd
		where to_char(mi.inout_dt, 'YYYYMM') = v_yearmon
		and coalesce(mi.inout_cx_yn, 'N') = 'N'
		group by mi.mtrl_pk, m.mtrl_cd, d.dept_cd, l.loc_cd, mi.inout_uprice
		, mi.ab_grade, mi.loc_cell_addr , mi.stocked_dt, mi.site_id
	), 
	insertdata as (
		select msk.*
		, msk.in_qty - msk.out_qty as curr_stock_qty
		from cm_mtrlstock msk
		where msk.in_qty - msk.out_qty <> 0
	)
	insert into temp_mi_table(mtrl_pk, mtrl_cd, dept_cd, loc_cd, inout_uprice
		, ab_grade, loc_cell_addr, supplier_pk, stocked_dt, in_qty, out_qty, curr_stock_qty, site_id)	
	select t.mtrl_pk, t.mtrl_cd
	, t.dept_cd, t.loc_cd, t.inout_uprice, t.ab_grade, t.loc_cell_addr
	, t.supplier_pk, t.stocked_dt, t.in_qty, t.out_qty, t.curr_stock_qty, t.site_id
	from insertdata t
	;
	
	--  ̹    ϵ   ̿           ,       Ʈ  ʿ .
	for curdata in
        select mtrl_pk, mtrl_cd, dept_cd, loc_cd, inout_uprice
		, ab_grade, loc_cell_addr, supplier_pk, stocked_dt, in_qty, out_qty, curr_stock_qty
		, site_id
        from temp_mi_table
	loop
		raise notice 'fntrans  %', curdata;		
		v_cnt = 0;
		
		cur_mtrl_pk = curdata.mtrl_pk;
		cur_mtrl_cd = curdata.mtrl_cd;
		cur_dept_cd = curdata.dept_cd;
		cur_loc_cd = curdata.loc_cd;
		cur_inout_uprice = curdata.inout_uprice;
		cur_ab_grade = curdata.ab_grade;
		cur_loc_cell_addr = curdata.loc_cell_addr;
		cur_supplier_pk = curdata.supplier_pk;
		cur_stocked_dt = curdata.stocked_dt;
		cur_in_qty = curdata.in_qty;
		cur_out_qty = curdata.out_qty;
		cur_curr_stock_qty = curdata.curr_stock_qty;
		cur_site_id = curdata.site_id;
	
		--    (2022.03.01, seokjun.choi) ȭ 鿡        ԰   (stocked_dt)                Ϸ Ǹ  group by    ǿ     ԵǾ    Ѵ .
		select count(*) into v_cnt
		from cm_mtrl_inout mi
		inner join cm_material m on mi.mtrl_pk = m.mtrl_pk
		left outer join cm_dept d on mi.own_dept_cd = d.dept_cd
		inner join cm_location l on mi.inout_loc_cd = l.loc_cd
		where to_char(mi.inout_dt, 'YYYYMM') = to_char(to_date(concat(v_yearmon,'01'),'YYYYMMDD') + INTERVAL '1 months', 'YYYYMM')
		and mi.mtrl_pk = cur_mtrl_pk
		and coalesce(d.dept_cd, '!@#') = coalesce(cur_dept_cd, '!@#')
		and l.loc_cd = cur_loc_cd
		and mi.inout_uprice = cur_inout_uprice
		and mi.ab_grade = cur_ab_grade
		and mi.loc_cell_addr = cur_loc_cell_addr
		and TO_CHAR(mi.stocked_dt, 'YYYY-MM-DD') = TO_CHAR(cur_stocked_dt, 'YYYY-MM-DD')
		and mi.site_id = cur_site_id
		group by mi.mtrl_pk, m.mtrl_cd, d.dept_cd, l.loc_cd, mi.inout_uprice
		, mi.ab_grade, mi.loc_cell_addr, mi.stocked_dt;
		
		if v_cnt > 0 then
			--   ׼   (2022.03.01),   ¥                                    Ʈ   .
			update cm_mtrl_inout
			set inout_qty = cur_curr_stock_qty
			, stocked_dt = cur_stocked_dt
			, mtrl_remark = ' ̿      ڵ     '
			, update_ts = current_timestamp
			, updater_id = v_login_id
			, updater_nm = v_user_nm
			where to_char(inout_dt, 'YYYYMM') = to_char(to_date(concat(v_yearmon,'01'),'YYYYMMDD') + INTERVAL '1 months', 'YYYYMM') 
			and mtrl_pk = CUR_MTRL_PK
			AND coalesce(TRIM(own_dept_cd), '!@#') = coalesce(TRIM(cur_dept_cd), '!@#')
			and inout_loc_cd = cur_loc_cd
			and ab_grade = cur_ab_grade
			and loc_cell_addr = cur_loc_cell_addr
			and inout_uprice = cur_inout_uprice
			and stocked_dt = cur_stocked_dt
			and site_id = cur_site_id
			;
		else 
			INSERT INTO cm_mtrl_inout(mtrl_pk
			, inout_div, inout_type, inout_dt, inputer_pk, mtrl_remark
			, own_dept_cd, inout_loc_cd	, ab_grade, loc_cell_addr, inout_uprice
			, inout_qty, supplier_pk, stocked_dt
			, site_id
			, insert_ts, inserter_id, inserter_nm)	
			values(curdata.mtrl_pk, 'INOUT_DIV_IN', 'IT_CO'
			, to_date(concat(to_char(to_date(concat(v_yearmon,'01'),'YYYYMMDD') + INTERVAL '1 months', 'YYYYMM'), to_char(current_timestamp, 'DD')), 'YYYYMMDD')
			, v_user_pk, ' ̿      ڵ     '	   
			, curdata.dept_cd, curdata.loc_cd, curdata.ab_grade, curdata.loc_cell_addr
			, curdata.inout_uprice, curdata.curr_stock_qty, curdata.supplier_pk, curdata.stocked_dt
			, cur_site_id
			, current_timestamp, v_login_id, v_user_nm);
		end if;
		
	end loop;		
	
	select 1 into v_result;
	return;

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
    raise notice 'fntrans exception';
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('system', 'PRC_JOB_MAT_PRE_MON_STOCK', concat('[p_preyearmon]:',p_preyearmon , ', [p_mode]:', p_mode, ' [MESSAGE] : ', SQLERRM));
    select 0 into v_result;
	return;
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_job_mat_pre_mon_stock_mtrl(in varchar, in int8, inout int4);

CREATE OR REPLACE PROCEDURE public.cm_prc_job_mat_pre_mon_stock_mtrl(p_preyearmon character varying, v_mtrl_pk bigint, INOUT v_result integer)
 LANGUAGE plpgsql
AS $procedure$
declare
	v_result integer;
	v_user_pk bigint;
	v_login_id character varying(50);
	v_user_nm character varying(50);
	v_yearmon character varying(6);
	v_cnt int;

	stmt varchar(65535);
	cur_mtrl_pk bigint;
	cur_mtrl_cd varchar(255);
	cur_dept_cd varchar(255);
	cur_loc_cd varchar(255);
	cur_inout_uprice bigint;
	cur_ab_grade varchar(255);
	cur_loc_cell_addr varchar(255);
	cur_supplier_pk bigint;
	cur_stocked_dt date;
	cur_in_qty bigint;
	cur_out_qty bigint;
	cur_curr_stock_qty bigint;
	cur_site_id varchar(20);

	v_error_message varchar(1000);

	curdata record;
begin
raise notice 'fntrans';

	
	v_yearmon = p_preyearmon;
	v_result = 0;
		
	select user_pk, login_id, user_nm
	into v_user_pk, v_login_id, v_user_nm
	from cm_user_info
	where login_id = 'system'
	limit 1;
	
	drop table if exists temp_mi_table;
	create temp table if not exists temp_mi_table (mtrl_pk, mtrl_cd, dept_cd, loc_cd, inout_uprice
		, ab_grade, loc_cell_addr, supplier_pk, stocked_dt, in_qty, out_qty, curr_stock_qty, site_id)
	as values(0::bigint
			 , ''::character varying
			 , ''::character varying
			 , ''::character varying
			 , 0::bigint
			 , ''::character varying
			 , ''::character varying
			 , 0::bigint, null::date
			 , 0::bigint
			 , 0::bigint, 0::bigint
			 , ''::character varying);

	truncate temp_mi_table;

	-- raise notice 'temp_mi_table v_yearmon %', v_yearmon;
	
	-- 2022.02.01     (m.supplier_pk -> max(mi.supplier_pk)),  ߰ (     ԰    mi.stocked_dt)
	with mtrlstock as (
		select mi.mtrl_pk, m.mtrl_cd, d.dept_cd, l.loc_cd, mi.inout_uprice
		, mi.ab_grade, mi.loc_cell_addr, max(mi.supplier_pk) as supplier_pk, mi.stocked_dt
		, sum(case when mi.inout_div = 'INOUT_DIV_IN' then mi.inout_qty else 0 end) as in_qty
		, sum(case when mi.inout_div = 'INOUT_DIV_OUT' then mi.inout_qty else 0 end) as out_qty
		, mi.site_id
		from cm_mtrl_inout mi
		inner join cm_material m on mi.mtrl_pk = m.mtrl_pk
		left outer join cm_dept d on mi.own_dept_cd = d.dept_cd
		inner join cm_location l on mi.inout_loc_cd = l.loc_cd
		where to_char(mi.inout_dt, 'YYYYMM') = v_yearmon
		and coalesce(mi.inout_cx_yn, 'N') = 'N'
		and mi.mtrl_pk = v_mtrl_pk
		group by mi.mtrl_pk, m.mtrl_cd, d.dept_cd, l.loc_cd, mi.inout_uprice
		, mi.ab_grade, mi.loc_cell_addr /*, mi.supplier_pk*/ , mi.stocked_dt
	), 
	insertdata as (
		select msk.*
		, msk.in_qty - msk.out_qty as curr_stock_qty
		from mtrlstock msk
		where msk.in_qty - msk.out_qty <> 0
	)
	insert into cm_temp_mi_table(mtrl_pk, mtrl_cd, dept_cd, loc_cd, inout_uprice
		, ab_grade, loc_cell_addr, supplier_pk, stocked_dt, in_qty, out_qty, curr_stock_qty, site_id)	
	select t.mtrl_pk, t.mtrl_cd
	, t.dept_cd, t.loc_cd, t.inout_uprice, t.ab_grade, t.loc_cell_addr
	, t.supplier_pk, t.stocked_dt, t.in_qty, t.out_qty, t.curr_stock_qty
	, t.site_id
	from cm_insertdata t
	;

	select count(*) into v_cnt from cm_temp_mi_table;
	-- raise notice 'temp_mi_table v_cnt %', v_cnt;	

	
	--  ̹    ϵ   ̿           ,       Ʈ  ʿ .
	for curdata in
        select mtrl_pk, mtrl_cd, dept_cd, loc_cd, inout_uprice
		, ab_grade, loc_cell_addr, supplier_pk, stocked_dt, in_qty, out_qty, curr_stock_qty
        from cm_temp_mi_table
	loop
		raise notice 'fntrans curdata %', curdata;		
		v_cnt = 0;
		
		cur_mtrl_pk = curdata.mtrl_pk;
		cur_mtrl_cd = curdata.mtrl_cd;
		cur_dept_cd = curdata.dept_cd;
		cur_loc_cd = curdata.loc_cd;
		cur_inout_uprice = curdata.inout_uprice;
		cur_ab_grade = curdata.ab_grade;
		cur_loc_cell_addr = curdata.loc_cell_addr;
		cur_supplier_pk = curdata.supplier_pk;
		cur_stocked_dt = curdata.stocked_dt;
		cur_in_qty = curdata.in_qty;
		cur_out_qty = curdata.out_qty;
		cur_curr_stock_qty = curdata.curr_stock_qty;
		cur_site_id = curdata.site_id;
		
    	-- raise notice 'fntrans inoutdtyymm %',  to_char(to_date(concat(v_yearmon,'01'),'YYYYMMDD') + INTERVAL '1 months', 'YYYYMM');
    
		--    (2022.03.01, seokjun.choi) ȭ 鿡        ԰   (stocked_dt)                Ϸ Ǹ  group by    ǿ     ԵǾ    Ѵ .
		select count(*) into v_cnt
		from cm_mtrl_inout mi
		inner join cm_material m on mi.mtrl_pk = m.mtrl_pk
		left outer join cm_dept d on mi.own_dept_cd = d.dept_cd
		inner join cm_location l on mi.inout_loc_cd = l.loc_cd
		where to_char(mi.inout_dt, 'YYYYMM') = to_char(to_date(concat(v_yearmon,'01'),'YYYYMMDD') + INTERVAL '1 months', 'YYYYMM')
		and mi.mtrl_pk = cur_mtrl_pk
		and coalesce(d.dept_cd, '') = coalesce(cur_dept_cd, '')
		and l.loc_cd = cur_loc_cd
		and mi.inout_uprice = cur_inout_uprice
		and mi.ab_grade = cur_ab_grade
		and mi.loc_cell_addr = cur_loc_cell_addr
		and TO_CHAR(mi.stocked_dt, 'YYYY-MM-DD') = TO_CHAR(cur_stocked_dt, 'YYYY-MM-DD')
		and mi.mtrl_pk = v_mtrl_pk
		and mi.inout_type = 'IT_CO'
		and mi.inout_div = 'INOUT_DIV_IN'
		group by mi.mtrl_pk, m.mtrl_cd, d.dept_cd, l.loc_cd, mi.inout_uprice
		, mi.ab_grade, mi.loc_cell_addr, mi.stocked_dt;
		
    
		if coalesce(v_cnt, 0) > 0 then
    		-- raise notice 'fntrans update %',  v_cnt;
    	
			--   ׼   (2022.03.01),   ¥                                    Ʈ   .
			update cm_mtrl_inout
			set inout_qty = cur_curr_stock_qty
			, stocked_dt = cur_stocked_dt
			, mtrl_remark = ' ̿      ڵ     '
			, update_ts = current_timestamp
			, updater_id = v_login_id
			, updater_nm = v_user_nm
			where to_char(inout_dt, 'YYYYMM') = to_char(to_date(concat(v_yearmon,'01'),'YYYYMMDD') + INTERVAL '1 months', 'YYYYMM') 
			and mtrl_pk = cur_mtrl_pk
			and coalesce(own_dept_cd, '') = coalesce(cur_dept_cd, '')
			and inout_loc_cd = cur_loc_cd
			and ab_grade = cur_ab_grade
			and loc_cell_addr = cur_loc_cell_addr
			and inout_uprice = cur_inout_uprice
			and stocked_dt = cur_stocked_dt
			;
		else 
    		-- raise notice 'fntrans insert %',  v_cnt;
    	
			INSERT INTO cm_mtrl_inout(mtrl_pk
			, inout_div, inout_type, inout_dt, inputer_pk, mtrl_remark
			, own_dept_cd, inout_loc_cd	, ab_grade, loc_cell_addr, inout_uprice
			, inout_qty, supplier_pk, stocked_dt
			, site_id
			, insert_ts, inserter_id, inserter_nm)	
			values(curdata.mtrl_pk, 'INOUT_DIV_IN', 'IT_CO'
			, to_date(concat(to_char(to_date(concat(v_yearmon,'01'),'YYYYMMDD') + INTERVAL '1 months', 'YYYYMM'), '01'), 'YYYYMMDD')
			, v_user_pk, ' ̿      ڵ     '	   
			, cur_dept_cd, cur_loc_cd, cur_ab_grade, cur_loc_cell_addr
			, cur_inout_uprice, cur_curr_stock_qty, cur_supplier_pk, cur_stocked_dt
			, cur_site_id
			, current_timestamp, v_login_id, v_user_nm);
		end if;
		
	end loop;		
	
	select 1 into v_result;
	return;

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
    raise notice 'fntrans exception';
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('system', 'cm_prc_JOB_MAT_PRE_MON_STOCK', concat('[p_preyearmon]:',p_preyearmon , ', [p_mode]:', p_mode, ' [MESSAGE] : ', SQLERRM));
    select 0 into v_result;
	return;
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_job_pm_schedule(inout int4);

CREATE OR REPLACE PROCEDURE public.cm_prc_job_pm_schedule(INOUT o_ret integer)
 LANGUAGE plpgsql
AS $procedure$
declare
	cur_site record;
	cur_data record;
	v_pm_auto_sche_use varchar(10);
	v_pm_sche_cycle_type varchar(15);
	v_pm_sche_cycle_day varchar(10);
	v_sche_opts varchar(4000);
	v_start_date varchar(8);
	v_end_date varchar(8);
	v_return_val varchar(30);
	v_exe_count integer;
begin
raise notice 'pm     ٸ      ';
	o_ret = 0;

	-- 1.     Ʈ       ȸ
	for cur_site in
		select s.site_id
		from cm_sites s 
		where s.status = 'A'
	loop
		-- 2.     Ʈ       Ʈ config   ȸ	
		select coalesce(sc.sche_opts ->> 'pmAutoScheUse', 'false')
		, coalesce(sc.sche_opts ->> 'pmScheCycleType', 'X')
		, coalesce(sc.sche_opts ->> 'pmScheCycleDay', '0')
		, sc.sche_opts::text
		into v_pm_auto_sche_use, v_pm_sche_cycle_type, v_pm_sche_cycle_day, v_sche_opts
		from cm_site_config sc where site_id = cur_site.site_id
		;
		
		--      ٸ    뿩   Ȯ  
		if lower(v_pm_auto_sche_use) = lower('true') then
		
			v_exe_count = 0;
			--      ٸ   α       
			INSERT INTO cm_swing_schedule.pm_sche_send_log(send_dt, send_log) VALUES (CURRENT_TIMESTAMP , '[PM     ٸ     ][' || cur_site.site_id || '] ' || v_sche_opts);
			
			--          ħ      ϱ 
			select to_char(now(), 'YYYYMMDD') as start_date
				, case when v_pm_sche_cycle_type = 'CYCLE_TYPE_D' then to_char(now() + (v_pm_sche_cycle_day || ' day')::interval, 'YYYYMMDD')
						when v_pm_sche_cycle_type = 'CYCLE_TYPE_W' then to_char(now() + (v_pm_sche_cycle_day || ' week')::interval - '1 day '::interval, 'YYYYMMDD') 
						when v_pm_sche_cycle_type = 'CYCLE_TYPE_M' then to_char(now() + (v_pm_sche_cycle_day || ' month')::interval - '1 day '::interval, 'YYYYMMDD') 
						when v_pm_sche_cycle_type = 'CYCLE_TYPE_Y' then to_char(now() + (v_pm_sche_cycle_day || ' year')::interval - '1 day '::interval, 'YYYYMMDD') 
						else to_char(now(), 'YYYYMMDD') end as end_date
			into v_start_date, v_end_date						
			;		
			--      ٸ     PM       ȸ
			for cur_data in
				SELECT 	distinct p.pm_pk
				from cm_pm p
				inner join cm_equipment e on p.equip_pk = e.equip_pk
				WHERE p.use_yn = 'Y'
				AND p.del_yn = 'N'
				AND e.site_id = cur_site.site_id
			loop
				v_return_val = '';
				-- PM_PK        ٸ  Լ  ȣ  .
				select cm_fn_make_schedule_pm('A'
					, cur_data.pm_pk
					, to_date(v_start_date, 'YYYYMMDD')
					, to_date(v_end_date, 'YYYYMMDD')
					, cur_site.site_id) into v_return_val;	
				
				if v_return_val is not null and v_return_val <> '' and cm_fn_isnumeric(v_return_val) then
					v_exe_count = v_exe_count + v_return_val::integer;
				end if; 
				
			end loop;	
		
			--      α       
			INSERT INTO cm_swing_schedule.pm_sche_send_log(send_dt, send_log) VALUES (CURRENT_TIMESTAMP , '[PM     ٸ  Ϸ ][' || cur_site.site_id || ']    ' || v_exe_count::text || '          Ǿ    ϴ .');
	
		end if;
		
	end loop;

	o_ret = 1;
	return;

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('system', 'cm_prc_job_pm_schedule', concat('ERROR [MESSAGE] : ', SQLERRM));
	o_ret = 0;
	return;
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_job_smtp();

CREATE OR REPLACE PROCEDURE public.cm_prc_job_smtp()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_content varchar(400);
begin


/*
2023.10.30 
     ٸ     񽺿    SMTP   񽺸  ȣ   ϴ      , DB        񽺸  ȣ   ϵ        .
  ƽ ȯ 濡          ٸ     񽺸              . 
*/

SELECT content 
	into v_content
  FROM cm_http((
          'GET',
           'http://10.10.10.100:6064/api/sche/smtp/mail/',
           ARRAY[http_header('X-Authorization','Bearer eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiZGlyIn0..H_tUz-wzg-WedQtOuAxo5Q.7UqF28alRpx5hGHx7OgOmZMOAtHqLpI2NFVP-2JXjwJGNolXBjE4Dbc0GpD8fjyfBNX57IeA__MieAP1qESLjxlnSwZY0PzFdFGcWE8ECakuOpmtLV6key9D6xi-uP8Lk9XzdoT6CeUVHXSc1FE1naumIzPfYjPcTp0bK67tm8rylvZkdTCx5cYyAIccTqJgrTqCPa4TW1fV5mqOhZgNVOvGi2wqfv2AtuxLzr15izmsrIKI43DFSsMUFh8Ip5CiSTREDdqPPwlQHQbhO6K1JG-ca9tusgjRYRPqnp1plGBK1CwPCv72Ip_q62D2ZyaMpQCa-UExnUN-gEZoARtGrg.-qo5Hax5QPvkGbsIK26eQQ')],
           NULL,
           NULL
        )::http_request);


	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('dbmsjob', 'cm_prc_job_smtp', concat(' [MESSAGE] : SUCCESS'));	
	
EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('dbmsjob', 'cm_prc_job_smtp', concat(' [MESSAGE] : ', SQLERRM));
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_logs_delete();

CREATE OR REPLACE PROCEDURE public.cm_prc_logs_delete()
 LANGUAGE plpgsql
AS $procedure$
declare
begin

	--  α  ηα  1            
	delete from cm_logins_log ll where date(event_ts) < (current_date - interval '1 year');

	--   α  1            
	delete from cm_operations_log where date(action_ts) < (current_date - interval '1 year');

	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('stat', 'cm_prc_logs_delete', concat(' [MESSAGE] :            ó   Ǿ    ϴ .'));	
	
EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('stat', 'cm_prc_logs_delete', concat(' [MESSAGE] : ', SQLERRM));
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_mig_base_code();

CREATE OR REPLACE PROCEDURE public.cm_prc_mig_base_code()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_cnt integer;
	v_pk bigint;
	v_up_dept_pk bigint;
	v_exist_cnt integer;
	v_user_nm varchar(30);
	v_grp_cnt integer;
	v_exe_type char(1);
	v_error_message varchar(1000);
	curdata record;
begin
-- raise notice 'fntrans';
	-- #############################
	-- BASE_CODE    ̱׷  ̼  ó  
	-- call cm_prc_mig_base_code()
	-- select count(*) from cm_mig_base_code
	-- select * from cm_mig_base_code where msg = 'error'
	-- select count(*) from cm_base_code
	-- select * from cm_error_log where error_log_title  = 'cm_prc_mig_base_code'
	-- delete from cm_error_log where error_log_title  = 'cm_prc_mig_base_code'
	-- delete from cm_base_code
	-- update cm_mig_base_code set insert_ts = null, msg = null
	-- #############################
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_mig_base_code', concat(' [MESSAGE] : ', 'BASE_CODE    ̱׷  ̼  ó       '));
	
	v_cnt = 1; 
	
	for curdata in
		select pk, action_type, code_grp_cd, code_cd, code_nm, code_dsc
		, disp_order
		, coalesce(use_yn, 'N') as use_yn
		, grp_cd
		, user_id, insert_ts, msg
		from cm_mig_base_code
		where (msg is null or upper(msg) = upper('error'))
		ORDER BY pk, insert_ts
	loop
		raise notice 'TARGET %', curdata;	
		
		v_exe_type = curdata.action_type;
		v_user_nm = null;
		v_grp_cnt = 0;
		v_pk = curdata.pk;

		BEGIN		
			
			--  ׷  ڵ 
			select count(*) into v_grp_cnt from cm_base_code_grp where code_grp_cd = curdata.code_grp_cd;
			if (coalesce(v_grp_cnt, 0) = 0) then
				insert into cm_base_code_grp(code_grp_cd, code_grp_nm, code_grp_dsc, edit_yn, code_pk_yn, disp_order)
				values(curdata.code_grp_cd, curdata.code_grp_cd, curdata.code_grp_cd, 'Y', 'N', 1);
			end if;
		
		
			--            ش   ڵ尡  ̹   ִ                   .
			select count(*) into v_exist_cnt from cm_base_code
			where code_cd = curdata.code_cd and code_grp_cd = curdata.code_grp_cd;
			if (v_exe_type = 'A' and coalesce(v_exist_cnt, 0) > 0) then
				v_exe_type = 'U';
			end if;
			v_exist_cnt = 0;
		
			--      
			if (curdata.user_id is not null) then
				select user_nm into v_user_nm from cm_user_info where login_id = curdata.user_id;
				if coalesce(v_user_nm, '') = '' then
					v_user_nm = 'system';
				end if;
			end if;

			if (v_exe_type = 'U') then
				--     
				update cm_base_code
				set code_nm = curdata.code_nm
				, code_dsc = curdata.code_dsc
				, disp_order = curdata.disp_order
				, use_yn = curdata.use_yn
				, grp_cd = curdata.grp_cd
				, update_ts = current_timestamp
				, updater_id = curdata.user_id
				, updater_nm = v_user_nm
				where code_cd = curdata.code_cd and code_grp_cd = curdata.code_grp_cd;

				update cm_mig_base_code set msg = 'updated!' where pk = curdata.pk;
			
			elseif (v_exe_type = 'A') then
				--    
				insert into cm_base_code(code_grp_cd, code_cd, code_nm, code_dsc
					, disp_order, use_yn, grp_cd
					, insert_ts, inserter_id, inserter_nm)
				values (curdata.code_grp_cd, curdata.code_cd, curdata.code_nm, curdata.code_dsc
					, curdata.disp_order, curdata.use_yn, curdata.grp_cd
					, current_timestamp, curdata.user_id, v_user_nm);

				update cm_mig_base_code set msg = 'inserted!' where pk = curdata.pk;
			end if;
        EXCEPTION
            WHEN others then
            	v_error_message := SQLERRM;
				update cm_mig_dept set msg = 'error' where pk = v_pk;
                insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
				values('MIGRATION', 'cm_prc_mig_base_code', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
        END; 
		
		
		v_cnt = v_cnt + 1;		
	end loop;	
	

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_mig_base_code', concat(' [MESSAGE] : ', SQLERRM));
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_mig_chk_equip();

CREATE OR REPLACE PROCEDURE public.cm_prc_mig_chk_equip()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_cnt integer;
	v_pk bigint;
	v_exist_cnt integer;
	v_user_nm varchar(30);
	v_exe_type char(1);
	v_error_message varchar(1000);
	v_chk_mast_pk integer;
	v_equip_pk  integer;
	cm_v_dept_pk integer;
	v_equip_cd varchar(100);
	v_chk_mast_no varchar(20);
	v_chk_user_pk integer;

	curdata record;
begin
-- raise notice 'fntrans';
	-- #############################
	--    ˸         ̱׷  ̼  ó  
	-- call cm_prc_mig_chk_equip()
	-- select count(*) from cm_mig_chk_equip
	-- select * from cm_mig_chk_equip where msg = 'error'
	-- select count(*) from cm_chk_equip 
	-- select * from cm_error_log where error_log_title  = 'cm_prc_mig_chk_equip'
	-- delete from cm_error_log where error_log_title  = 'cm_prc_mig_chk_equip'
	-- delete from cm_chk_equip
	-- update cm_mig_chk_equip set insert_ts = null, msg = null	
	-- #############################
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_CHK_EQUIP', concat(' [MESSAGE] : ', '   ˺          ̱׷  ̼  ó       '));
	
	v_cnt = 1; 
	
	for curdata in
		select pk, action_type, chk_mast_no, chk_mast_nm, equip_cd, equip_nm
		, user_id, insert_ts, msg, site_id
		from cm_mig_chk_equip
		where (msg is null or upper(msg) = upper('error'))
		order by pk, insert_ts 
	loop
		raise notice 'TARGET %', curdata;	
		
		v_pk = curdata.pk;
		v_exe_type = curdata.action_type;
		v_user_nm = null;
		v_chk_mast_pk = null;
		v_equip_pk = null;
		cm_v_dept_pk = null;
		v_chk_user_pk = null;
		v_equip_cd = curdata.equip_cd;
		v_chk_mast_no = curdata.chk_mast_no;
		
        BEGIN
			
	        --     
			select chk_mast_pk into v_chk_mast_pk from cm_equip_chk_mast 
			where chk_mast_no = curdata.chk_mast_no and site_id = curdata.site_id;
		
			--     
			select equip_pk into v_equip_pk from cm_equipment 
			where equip_cd = curdata.equip_cd and site_id = curdata.site_id;
		
			--     
			if (coalesce(curdata.equip_cd, '') <> '') then
				select equip_pk into v_equip_pk from cm_equipment
				where equip_cd = curdata.equip_cd and site_id = curdata.site_id;
			
				if (v_equip_pk is null) then
					v_equip_pk := null;
					update cm_mig_chk_equip set msg = 'EQUIP NOT FOUND!' where pk = curdata.pk;
					raise exception using message = 'EQUIP NOT FOUND!',errcode = 'P0001';
				end if;
			end if;		
		
			select count(*) into v_exist_cnt 
			from cm_chk_equip ce where chk_mast_pk = v_chk_mast_pk
			and equip_pk = v_equip_pk;
		
			if (v_exe_type = 'A' and coalesce(v_exist_cnt, 0) > 0) then
				v_exe_type = 'U';
			end if;
			v_exist_cnt = 0;

			--      
			if (coalesce(curdata.user_id, '') <> '') then
				select user_nm into v_user_nm from cm_user_info
				where login_id = curdata.user_id;
				v_user_nm = coalesce(v_user_nm, 'system');
			end if;		
		
			if (v_exe_type = 'A') then
				--    
				INSERT INTO cm_chk_equip(chk_mast_pk, equip_pk)
				VALUES (v_chk_mast_pk, v_equip_pk);
					
				update cm_mig_chk_equip set msg = 'INSERTED!' where pk = curdata.pk;
			end if;
			if (v_exe_type = 'U') then
				update cm_mig_chk_equip set msg = 'exists!' where pk = curdata.pk;
			end if;
        EXCEPTION
            WHEN others THEN
				update cm_mig_chk_equip set msg = 'error' where pk = curdata.pk;
                insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
				values('MIGRATION', 'cm_prc_mig_chk_equip', concat(curdata.equip_cd::text, ' - ',  SQLERRM));
        END; 
		
		
		v_cnt = v_cnt + 1;		
	end loop;	
	

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	v_error_message := SQLERRM;
	update cm_mig_chk_equip set msg = 'error' where pk = v_pk;
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_mig_chk_equip', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_mig_dept();

CREATE OR REPLACE PROCEDURE public.cm_prc_mig_dept()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_cnt integer;
	v_up_dept_pk bigint;
	v_exist_cnt integer;
	v_user_nm varchar(30);
	v_exe_type char(1);
	v_error_message varchar(1000);
	curdata record;
begin
-- raise notice 'fntrans';
	-- #############################
	--  μ     ̱׷  ̼  ó  
	-- call cm_prc_mig_dept()
	-- #############################
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_DEPT', concat(' [MESSAGE] : ', ' μ     ̱׷  ̼  ó       '));
	
	v_cnt = 1; 
	
	for curdata in
		select pk, action_type, dept_cd, dept_nm, up_dept_cd, up_dept_nm
		, coalesce(business_yn, 'N') as business_yn
		, coalesce(team_yn, 'N') as team_yn
		, coalesce(tpm_yn, 'N') as tpm_yn
		, cc_cd, site_id, user_id, insert_ts, msg
		from cm_mig_dept
		where (msg is null or upper(msg) = upper('error'))
		order by pk, insert_ts 
	loop
		raise notice 'TARGET %', curdata;	
		
		v_exe_type = curdata.action_type;
		v_up_dept_pk = null;
		v_user_nm = null;

		BEGIN		
			--            ش   ڵ尡  ̹   ִ                   .
			select count(*) into v_exist_cnt from cm_dept where dept_cd = curdata.dept_cd;
			if (v_exe_type = 'A' and coalesce(v_exist_cnt, 0) > 0) then
				v_exe_type = 'U';
			end if;
			v_exist_cnt = 0;
		
			--      μ 
			select dept_pk into v_up_dept_pk from cm_dept where dept_cd = curdata.up_dept_cd;
			
			--      
			if (coalesce(curdata.user_id, '') <> '') then
				select user_nm into v_user_nm from cm_user_info
				where login_id = curdata.user_id;
				v_user_nm = coalesce(v_user_nm, 'system');
			end if;	

			if (v_exe_type = 'U') then
				--     
				update cm_dept
				set dept_nm = curdata.dept_nm
				, up_dept_pk = v_up_dept_pk
				, team_yn = case when trim(curdata.team_yn)  = '' then 'N' else curdata.team_yn end 
				, business_yn = case when trim(curdata.business_yn)  = '' then 'N' else curdata.business_yn end 
				, tpm_yn = case when trim(curdata.tpm_yn)  = '' then 'N' else curdata.tpm_yn end 
				, ccenter_cd = curdata.cc_cd
				, site_id = curdata.site_id
				, update_ts = current_timestamp
				, updater_id = curdata.user_id
				, updater_nm = v_user_nm
				where dept_pk = (select dept_pk from cm_dept where dept_cd = curdata.dept_cd limit 1);
			
				update cm_mig_dept set msg = 'UPDATED!' where pk = curdata.pk;
			
			elseif (v_exe_type = 'A') then
				--    
				INSERT INTO cm_dept(dept_cd, dept_nm, up_dept_pk
					, team_yn
					, business_yn
					, tpm_yn
					, ccenter_cd
					, site_id
					, insert_ts, inserter_id, inserter_nm, del_yn, use_yn)
				VALUES (curdata.dept_cd, curdata.dept_nm, v_up_dept_pk
					, case when trim(curdata.team_yn)  = '' then 'N' else curdata.team_yn end 
					, case when trim(curdata.business_yn)  = '' then 'N' else curdata.business_yn end 
					, case when trim(curdata.tpm_yn)  = '' then 'N' else curdata.tpm_yn end 
					, curdata.cc_cd
					, curdata.site_id
					, current_timestamp, curdata.user_id, v_user_nm, 'N', 'Y');
				update cm_mig_dept set msg = 'INSERTED!' where pk = curdata.pk;
			end if;
        EXCEPTION
            WHEN others THEN
				v_error_message := SQLERRM;
				update cm_mig_dept set msg = 'error' where pk = v_pk;
                insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
				values('MIGRATION', 'cm_prc_MIG_DEPT', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
        END; 
		
		
		v_cnt = v_cnt + 1;		
	end loop;	
	

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	v_error_message := SQLERRM;
	update cm_mig_dept set msg = 'error' where pk = v_pk;
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_mig_dept', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_mig_equip();

CREATE OR REPLACE PROCEDURE public.cm_prc_mig_equip()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_cnt integer;
	v_pk bigint;
	v_exist_cnt integer;
	v_user_nm varchar(30);
	v_exe_type char(1);
	v_error_message varchar(1000);
	v_loc_pk integer;
	v_import_rank_pk integer;
	v_up_equip_pk integer;
	v_supplier_pk integer;
	v_maker_pk integer;
	v_cost_center_cd_pk integer;
	v_mtrl_pk integer;
	cm_v_dept_pk integer;
	v_equip_status varchar(20);
	v_disposed_type varchar(50);
	v_hierarchy_path varchar(20);
	v_equip_class_desc varchar(120);
	v_disposed_date timestamp without time zone;
	curdata record;
begin
-- raise notice 'fntrans';
	-- #############################
	--         ̱׷  ̼  ó  
	-- call cm_prc_mig_equip()
	-- select count(*) from cm_mig_equip
	-- select count(*) from cm_equipment
	-- select * from cm_error_log where error_log_title  = 'cm_prc_mig_equip'
	-- delete from cm_error_log where error_log_title  = 'cm_prc_mig_equip'
	-- delete from cm_equipment
	-- update cm_mig_equip set insert_ts = null, msg = null	
	-- #############################
	
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_EQUIP', concat(' [MESSAGE] : ', '        ̱׷  ̼  ó       '));
	
	v_cnt = 1; 
	
	for curdata in
		select pk, action_type, site_id, equip_cd, equip_nm
		, equip_category_id, equip_category_desc
		, loc_cd, loc_nm, up_equip_cd, up_equip_nm
		, asset_nos, import_rank_cd, equip_status, disposed_type
		, dept_cd, dept_nm, cc_cd, install_dt
		, equip_type_cd, equip_class, equip_type_nm
		, supplier_cd, supplier_nm, buy_cost, warranty_dt
		, maker_cd, maker_nm, model_number, part_no, serial_number
		, make_dt, mtrl_cd, environ_yn, equip_dsc
		, user_id, insert_ts, msg
		from cm_mig_equip
		where (msg is null or msg = 'ERROR')
		order by pk, insert_ts
	loop
		raise notice 'TARGET %', curdata;	
		
		v_pk = curdata.pk;
		v_exe_type = curdata.action_type;
		v_user_nm = null;
		v_loc_pk = null;
		v_import_rank_pk = null;
		v_up_equip_pk = null;
		v_supplier_pk = null;
		v_maker_pk = null;
		v_cost_center_cd_pk = null;
		v_mtrl_pk = null;
		cm_v_dept_pk = null;
		v_equip_status = null;
		v_disposed_type = null;
		v_hierarchy_path = null;
		v_equip_class_desc = null;
		v_disposed_date = null;
		
		begin
			
			
			v_exist_cnt := 0;		
			SELECT (case when curdata.equip_cd ~ E'^[A-Za-z0-9_-]*$' = true then 1 else 0 end)
			into v_exist_cnt; 
		
			if (coalesce(v_exist_cnt, 0) = 0) then
				update cm_mig_equip set msg = 'ERROR(EQUIP_CD_NOT_VALID)' where pk = curdata.pk;
				
				insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
				values('MIGRATION', 'cm_prc_MIG_EQUIP'
					, ' [MESSAGE : ' || v_pk || ', CODE:' || curdata.equip_cd || '] : EQUIP_CD_NOT_VALID');
				continue;
			end if;
		
		
			v_exist_cnt := 0;
		
			--            ش   ڵ尡  ̹   ִ                   .
			select count(*) into v_exist_cnt from cm_equipment 
			where equip_cd = curdata.equip_cd
			and site_id = curdata.site_id;
		
			if (v_exe_type = 'A' and coalesce(v_exist_cnt, 0) > 0) then
				v_exe_type = 'U';
			end if;
			v_exist_cnt = 0;
			v_equip_status = null;
			v_disposed_type = null;
			v_disposed_date = null;
			
			--      
			if (coalesce(curdata.user_id, '') <> '') then
				select user_nm into v_user_nm from cm_user_info
				where login_id = curdata.user_id;
				v_user_nm = coalesce(v_user_nm, 'system');
			end if;	
		
			--       ġ
			select loc_pk into v_loc_pk from cm_location 
			where loc_cd = curdata.loc_cd and site_id = curdata.site_id;
		
			--  ߿䵵    
			select import_rank_pk into v_import_rank_pk from cm_import_rank 
			where import_rank_cd = curdata.import_rank_cd;
		
			--         
			select equip_pk into v_up_equip_pk from cm_equipment 
			where equip_cd = curdata.up_equip_cd and site_id = curdata.site_id;
		
			--    ޾ ü
			select supplier_pk into v_supplier_pk from cm_supplier 
			where comp_type = 'CP_S' and supplier_cd = curdata.supplier_cd and site_id = curdata.site_id;
		
			--       
			select supplier_pk into v_maker_pk from cm_supplier 
			where comp_type = 'CP_M' and supplier_cd = curdata.maker_cd and site_id = curdata.site_id;		

			--      󼳺 
			select mtrl_pk into v_mtrl_pk from cm_material 
			where mtrl_cd = curdata.mtrl_cd and site_id = curdata.site_id;
		
			--  μ 
			select dept_pk into cm_v_dept_pk from cm_dept where dept_cd = curdata.dept_cd;
		
			--       °  (S: Ű  , A:   )  ΰ  ,       ¸   ҿ ó  Ÿ        Ұ 
			--  ׸   ,  ҿ Ÿ                Ʈ  Ұ . DISPOSED TYPE :  Ű -DP1,    -DP4
			if (curdata.equip_status = 'A') then
				v_equip_status = concat('ES_DISP');
				v_disposed_type = 'DP1';
				v_disposed_date = to_date('20201231','YYYYMMDD')::timestamp;
			elsif (curdata.equip_status = 'S') then
				v_equip_status = concat('ES_DISP');
				v_disposed_type = 'DP4';
				v_disposed_date = to_date('20201231','YYYYMMDD')::timestamp;
			elsif (curdata.equip_status = 'O') then
				v_equip_status = 'ES_OPER';
			elsif (curdata.equip_status = 'B') then
				v_equip_status = 'ES_BKDN';
			elsif (curdata.equip_status = 'I') then
				v_equip_status = 'ES_IDLE';
			elsif (curdata.equip_status = 'D') then
				v_equip_status = 'ES_DISP';
			else 
				v_equip_status = 'ES_OPER';
			end if;
			
	
			if (v_exe_type = 'U' and coalesce(v_loc_pk, 0) > 0 and coalesce(cm_v_dept_pk, 0) > 0) then
				--     
				update cm_equipment
				set equip_nm = curdata.equip_nm
				, up_equip_pk = v_up_equip_pk
				, loc_pk = v_loc_pk
				, equip_status = v_equip_status
				, dept_pk = cm_v_dept_pk
				, asset_nos = curdata.asset_nos
				, make_dt = (case when curdata.make_dt is null then null else to_date(curdata.make_dt, 'YYYY-MM-DD') end)
				, install_dt = (case when curdata.install_dt is null then null else to_date(curdata.install_dt, 'YYYY-MM-DD') end)
				, warranty_dt = (case when curdata.warranty_dt is null then null else to_date(curdata.warranty_dt, 'YYYY-MM-DD') end)
				, buy_cost = (case when curdata.buy_cost is null then null else cast(curdata.buy_cost as bigint) end)
				, model_number = curdata.model_number
				, serial_number = curdata.serial_number
				, import_rank_pk = v_import_rank_pk
				, mtrl_pk = v_mtrl_pk
				, supplier_pk = v_supplier_pk
				, ccenter_cd = curdata.cc_cd
				, environ_equip_yn = case when trim(curdata.environ_yn)  = '' then null else coalesce(curdata.environ_yn, 'N') end
				, disposed_type = v_disposed_type
				, disposed_date = v_disposed_date
				, equip_dsc = curdata.equip_dsc
				, maker_pk = v_maker_pk
				, equip_category_id = curdata.equip_category_id
				, equip_class_path = curdata.equip_type_cd
				, equip_class_desc = curdata.equip_type_nm
				, update_ts = current_timestamp
				, updater_id = curdata.user_id
				, updater_nm = v_user_nm
				where equip_cd = curdata.equip_cd
				and site_id = curdata.site_id;

				update cm_mig_equip set msg = 'UPDATED!' where pk = curdata.pk;
			elseif (v_exe_type = 'A' and coalesce(v_loc_pk, 0) > 0 and coalesce(cm_v_dept_pk, 0) > 0) then
				--    
				INSERT INTO cm_equipment(equip_cd, equip_nm, up_equip_pk, loc_pk
				, equip_status, dept_pk, asset_nos, make_dt, install_dt, warranty_dt, buy_cost
				, model_number, serial_number, import_rank_pk, mtrl_pk, supplier_pk, ccenter_cd
				, environ_equip_yn, disposed_type, disposed_date, equip_dsc, maker_pk
				, equip_category_id, site_id, equip_class_path, equip_class_desc
				, insert_ts, inserter_id, inserter_nm, use_yn, del_yn)
				VALUES (curdata.equip_cd, curdata.equip_nm
						, v_up_equip_pk, v_loc_pk
						, v_equip_status, cm_v_dept_pk, curdata.asset_nos
						, (case when curdata.make_dt is null then null else to_date(curdata.make_dt, 'YYYY-MM-DD') end)
						, (case when curdata.install_dt is null then null else to_date(curdata.install_dt, 'YYYY-MM-DD') end)
						, (case when curdata.warranty_dt is null then null else to_date(curdata.warranty_dt, 'YYYY-MM-DD') end)
						, (case when curdata.buy_cost is null then null else cast(curdata.buy_cost as bigint) end)
						, curdata.model_number, curdata.serial_number, v_import_rank_pk, v_mtrl_pk, v_supplier_pk
						, curdata.cc_cd
						, case when trim(curdata.environ_yn)  = '' then null else coalesce(curdata.environ_yn, 'N') end 
						, v_disposed_type
						, v_disposed_date
						, curdata.equip_dsc
						, v_maker_pk
						, curdata.equip_category_id, curdata.site_id
						, curdata.equip_type_cd, curdata.equip_type_nm
						, current_timestamp, curdata.user_id, v_user_nm, 'Y', 'N');
				
				update cm_mig_equip set msg = 'INSERTED!' where pk = curdata.pk;
			end if;
        EXCEPTION
            WHEN others THEN
				v_error_message := SQLERRM;
				update cm_mig_equip set msg = 'error' where pk = v_pk;
                insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
				values('MIGRATION', 'cm_prc_MIG_EQUIP', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
        END; 
		
		
		v_cnt = v_cnt + 1;		
	end loop;	
	

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	v_error_message := SQLERRM;
	update cm_mig_equip set msg = 'error' where pk = v_pk;
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_EQUIP', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_mig_equip_bom();

CREATE OR REPLACE PROCEDURE public.cm_prc_mig_equip_bom()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_cnt integer;
	v_pk bigint;
	v_exist_cnt integer;
	v_user_nm varchar(30);
	v_exe_type char(1);
	v_error_message varchar(1000);
	v_loc_pk integer;
	v_equip_pk integer;
	v_mtrl_pk integer;
	curdata record;
begin
-- raise notice 'fntrans';
	-- #############################
	--         ̱׷  ̼  ó  
	-- call cm_prc_mig_equip_bom()
	-- select count(*) from cm_mig_equip_bom
	-- select * from cm_mig_equip_bom where msg = 'error'
	-- select count(*) from cm_equip_part_mtrl
	-- select * from cm_error_log where error_log_title  = 'cm_prc_mig_equip_bom'
	-- delete from cm_error_log where error_log_title  = 'cm_prc_mig_equip_bom'
	-- delete from cm_equip_part_mtrl
	-- update cm_mig_equip_bom set insert_ts = null, msg = null	
	-- #############################
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_EQUIP_BOM', concat(' [MESSAGE] : ', '    BOM    ̱׷  ̼  ó       '));
	
	v_cnt = 1; 
	
	for curdata in
		SELECT PK, ACTION_TYPE, EQUIP_CD, EQUIP_NM, MTRL_CD, MTRL_NM, AMT, SITE_ID, USER_ID, INSERT_TS, MSG
		FROM cm_MIG_EQUIP_BOM
		WHERE (MSG IS NULL OR MSG = 'ERROR')
		ORDER BY PK, INSERT_TS
	loop
		raise notice 'TARGET %', curdata;	
		
		v_pk = curdata.pk;
		v_exe_type = curdata.action_type;
		v_user_nm = null;
		
        BEGIN
			--      
			if (coalesce(curdata.user_id, '') <> '') then
				select user_nm into v_user_nm from cm_user_info
				where login_id = curdata.user_id;
				v_user_nm = coalesce(v_user_nm, 'system');
			end if;		
		
			--     
			select equip_pk into v_equip_pk from cm_equipment 
			where equip_cd = curdata.equip_cd
			and site_id = curdata.site_id;
		
			--     
			select mtrl_pk into v_mtrl_pk from cm_material 
			where mtrl_cd = curdata.mtrl_cd
			and site_id = curdata.site_id;


			--            ش   ڵ尡  ̹   ִ                   .
			select count(*) into v_exist_cnt from cm_equip_part_mtrl where equip_pk = v_equip_pk and mtrl_pk = v_mtrl_pk;
		
			if (v_exe_type = 'A' and coalesce(v_exist_cnt, 0) > 0) then
				v_exe_type = 'U';
			end if;
		
			v_exist_cnt = 0;

			if (v_exe_type = 'U' and coalesce(v_equip_pk, 0) > 0 and coalesce(v_mtrl_pk, 0) > 0) then
				--     
				update cm_equip_part_mtrl
				set amt = (case when curdata.amt is null then null else cast(curdata.amt as bigint) end)
				, update_ts = current_timestamp
				, updater_id = curdata.user_id
				, updater_nm = v_user_nm
				where equip_pk = v_equip_pk and mtrl_pk = v_mtrl_pk;

				update cm_mig_equip_bom set msg = 'UPDATED!' where pk = curdata.pk;
			elseif (v_exe_type = 'A' and coalesce(v_equip_pk, 0) > 0 and coalesce(v_mtrl_pk, 0) > 0) then
				--    
				INSERT INTO cm_equip_part_mtrl(equip_pk, mtrl_pk, amt
				, insert_ts, inserter_id, inserter_nm)
				VALUES (v_equip_pk, v_mtrl_pk
						, (case when curdata.amt is null then null else cast(curdata.amt as bigint) end)
						, current_timestamp, curdata.user_id, v_user_nm);

				update cm_mig_equip_bom set msg = 'INSERTED!' where pk = curdata.pk;
			end if;
        EXCEPTION
            WHEN others THEN
				v_error_message := SQLERRM;
				update cm_mig_equip_bom set msg = 'error' where pk = v_pk;
                insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
				values('MIGRATION', 'cm_prc_MIG_EQUIP_BOM', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
        END; 
		
		
		v_cnt = v_cnt + 1;		
	end loop;	
	

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	v_error_message := SQLERRM;
	update cm_mig_equip_bom set msg = 'error' where pk = v_pk;
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_EQUIP_BOM', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_mig_equip_chk_mst();

CREATE OR REPLACE PROCEDURE public.cm_prc_mig_equip_chk_mst()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_cnt integer;
	v_pk bigint;
	v_exist_cnt integer;
	v_user_nm varchar(30);
	v_exe_type char(1);
	v_error_message varchar(1000);
	v_chk_user_pk integer;
	cm_v_dept_pk integer;
	curdata record;
begin
-- raise notice 'fntrans';
	-- #############################
	--    ˸         ̱׷  ̼  ó  
	-- call cm_prc_mig_equip_chk_mst()
	-- select count(*) from cm_mig_equip_chk_mst
	-- select * from cm_mig_equip_chk_mst where msg = 'error'
	-- select count(*) from cm_equip_chk_mast
	-- select * from cm_error_log where error_log_title  = 'cm_prc_mig_equip_chk_mst'
	-- delete from cm_error_log where error_log_title  = 'cm_prc_mig_equip_chk_mst'
	-- delete from cm_equip_chk_mast
	-- update cm_mig_equip_chk_mst set insert_ts = null, msg = null	
	-- #############################
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_EQUIP_CHK_MST', concat(' [MESSAGE] : ', '   ˸         ̱׷  ̼  ó       '));
	
	v_cnt = 1; 
	
	for curdata in
		SELECT pk, action_type, site_id, chk_mast_no, chk_mast_nm, per_number
		, ('CYCLE_TYPE_' || cycle_type) as cycle_type, sched_start_dt
		, trim(dept_cd) as dept_cd, dept_nm
		, trim(chk_user_id) as chk_user_id, chk_user_nm, work_text 
		, user_id, insert_ts, msg
		from cm_mig_equip_chk_mst
		where (msg is null or msg = 'ERROR')
		ORDER BY PK, INSERT_TS
	loop
		raise notice 'TARGET %', curdata;	
		
		v_pk = curdata.pk;
		v_exe_type = curdata.action_type;
		v_user_nm = null;
		v_chk_user_pk = null;
		cm_v_dept_pk = null;
		
        BEGIN
			--            ش   ڵ尡  ̹   ִ                   .
			select count(*) into v_exist_cnt 
			from cm_equip_chk_mast where chk_mast_no = curdata.chk_mast_no
			and site_id = curdata.site_id;
		
			if (v_exe_type = 'A' and coalesce(v_exist_cnt, 0) > 0) then
				v_exe_type = 'U';
			end if;
			v_exist_cnt = 0;

			--      
			if (coalesce(curdata.user_id, '') <> '') then
				select user_nm into v_user_nm from cm_user_info
				where login_id = curdata.user_id;
				v_user_nm = coalesce(v_user_nm, 'system');
			end if;		
		
			--  μ 
			select dept_pk into cm_v_dept_pk from cm_dept where dept_cd = curdata.dept_cd;
		
			--      
			select user_pk into v_chk_user_pk from cm_user_info where login_id = curdata.chk_user_id;

			if (v_exe_type = 'A') then
				--    
				INSERT INTO cm_equip_chk_mast(chk_mast_no, chk_mast_nm
					, site_id
					, cycle_type, dept_pk
			     	, per_number, chk_user_pk
			     	, sched_start_date
			     	, work_text
				 	, insert_ts, inserter_id, inserter_nm, use_yn, del_yn)
				VALUES (curdata.chk_mast_no, curdata.chk_mast_nm
					, curdata.site_id
					, curdata.cycle_type, cm_v_dept_pk
					, curdata.per_number, v_chk_user_pk
					, (case when curdata.sched_start_dt is null then null else to_date(curdata.sched_start_dt, 'YYYY-MM-DD') end)
					, curdata.work_text
					, current_timestamp, curdata.user_id, v_user_nm, 'Y', 'N');
					
				update cm_mig_equip_chk_mst set msg = 'INSERTED!' where pk = curdata.pk;
			end if;
        EXCEPTION
            WHEN others THEN
				v_error_message := SQLERRM;
				update cm_mig_equip_chk_mst set msg = 'error' where pk = v_pk;
                insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
				values('MIGRATION', 'cm_prc_MIG_EQUIP_CHK_MST', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
        END; 
		
		
		v_cnt = v_cnt + 1;		
	end loop;	
	

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	v_error_message := SQLERRM;
	update cm_mig_equip_chk_mst set msg = 'error' where pk = v_pk;
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_EQUIP_CHK_MST', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_mig_equip_chk_mst_item();

CREATE OR REPLACE PROCEDURE public.cm_prc_mig_equip_chk_mst_item()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_cnt integer;
	v_pk bigint;
	v_exist_cnt integer;
	v_user_nm varchar(30);
	v_exe_type char(1);
	v_error_message varchar(1000);
	v_chk_mast_pk  integer;
	v_chk_item_unit_pk  integer;
	curdata record;
begin
-- raise notice 'fntrans';
	-- #############################
	--    ˸      ׸     ̱׷  ̼  ó  
	-- call cm_prc_mig_equip_chk_mst_item()
	-- select count(*) from cm_mig_equip_chk_mst_item
	-- select * from cm_mig_equip_chk_mst_item where msg = 'error'
	-- select count(*) from cm_equip_chk_item
	-- select * from cm_error_log where error_log_title  = 'cm_prc_mig_equip_chk_mst_item'
	-- delete from cm_error_log where error_log_title  = 'cm_prc_mig_equip_chk_mst_item'
	-- delete from cm_equip_chk_item
	-- update cm_mig_equip_chk_mst_item set insert_ts = null, msg = null	
	-- #############################
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_EQUIP_CHK_MST_ITEM', concat(' [MESSAGE] : ', '   ˸      ׸     ̱׷  ̼  ó       '));
	
	v_cnt = 1; 
	
	for curdata in
		SELECT pk, action_type, chk_mast_no, chk_mast_nm, item_idx
		, chk_item_nm, lcl, ucl, chk_item_unit, method, guide
		, user_id, insert_ts, msg, site_id
		from cm_mig_equip_chk_mst_item
		where (msg is null or msg = 'ERROR')
		ORDER BY PK, INSERT_TS
	loop
		raise notice 'TARGET %', curdata;	

		v_pk = curdata.pk;
		v_exe_type = curdata.action_type;
		v_user_nm = null;
		v_chk_mast_pk = null;
		v_chk_item_unit_pk = null;
		
        BEGIN
			--    ˸     
			select chk_mast_pk into v_chk_mast_pk 
			from cm_equip_chk_mast 
			where chk_mast_no = curdata.chk_mast_no
			and site_id = curdata.site_id;
		
			--            ش   ڵ尡  ̹   ִ                   .
			select count(*) into v_exist_cnt 
			from cm_equip_chk_item 
			where chk_mast_pk = v_chk_mast_pk
			and chk_item_nm = curdata.chk_item_nm;
		
			select code_pk into v_chk_item_unit_pk
			from cm_base_code bc where bc.code_grp_cd = 'CHK_ITEM_UNIT' and code_cd = curdata.chk_item_unit;
			
			if (v_exe_type = 'A' and coalesce(v_exist_cnt, 0) > 0) then
				v_exe_type = 'U';
			end if;
			v_exist_cnt = 0;

			--      
			if (coalesce(curdata.user_id, '') <> '') then
				select user_nm into v_user_nm from cm_user_info
				where login_id = curdata.user_id;
				v_user_nm = coalesce(v_user_nm, 'system');
			end if;		

			if (v_exe_type = 'U') then
				--     
				UPDATE cm_equip_chk_item
				SET chk_item_nm=curdata.chk_item_nm
				, lcl=curdata.lcl
				, ucl=curdata.ucl
				, chk_item_unit_pk=v_chk_item_unit_pk
				, "method" = curdata.method
				, guide = curdata.guide
				, update_ts = current_timestamp
				, updater_id = curdata.user_id
				, updater_nm = v_user_nm				
				WHERE chk_mast_pk = v_chk_mast_pk and item_idx=curdata.item_idx;
			
				update cm_mig_equip_chk_mst_item set msg = 'UPDATED!' where pk = curdata.pk;
			
			elseif (v_exe_type = 'A') then
				--    
				INSERT INTO cm_equip_chk_item(chk_mast_pk
			     	, chk_item_nm, item_idx
					, lcl, ucl
				    , chk_item_unit_pk
				    , "method" , guide 
				 	, insert_ts, inserter_id, inserter_nm)
				VALUES (v_chk_mast_pk
					, curdata.chk_item_nm, curdata.item_idx
					, curdata.lcl, curdata.ucl
					, v_chk_item_unit_pk
					, curdata.method, curdata.guide
					, current_timestamp, curdata.user_id, v_user_nm);

				update cm_mig_equip_chk_mst_item set msg = 'INSERTED!' where pk = curdata.pk;
			
			end if;
        EXCEPTION
            WHEN others THEN
				v_error_message := SQLERRM;
				update cm_mig_equip_chk_mst_item set msg = 'error' where pk = v_pk;
                insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
				values('MIGRATION', 'cm_prc_MIG_EQUIP_CHK_MST_ITEM', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
        END; 
		
		
		v_cnt = v_cnt + 1;		
	end loop;	
	

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	v_error_message := SQLERRM;
	update cm_mig_equip_chk_mst_item set msg = 'error' where pk = v_pk;
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_EQUIP_CHK_MST_ITEM', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_mig_equip_class();

CREATE OR REPLACE PROCEDURE public.cm_prc_mig_equip_class()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_cnt integer;
	v_up_equip_class_pk bigint;
	v_exist_cnt integer;
	v_user_nm varchar(30);
	v_exe_type char(1);
	v_error_message varchar(1000);
	v_pk bigint;
	curdata record;
begin
-- raise notice 'fntrans';
	-- #############################
	--             ̱׷  ̼  ó  
	-- call cm_prc_mig_equip_class()
	-- select count(*) from cm_mig_equip_class;
	-- select count(*) from cm_equip_classify where class_type = 'CLASS';
	-- delete from cm_error_log where error_log_title = 'cm_prc_mig_equip_class'
	-- select * from cm_error_log where error_log_title = 'cm_prc_mig_equip_class'
	-- #############################
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_EQUIP_CLASS', concat(' [MESSAGE] : ', '            ̱׷  ̼  ó       '));
	
	v_cnt = 1; 
	
	for curdata in
		select pk, action_type
		, equip_category_id, equip_category_desc
		, equip_class_id, equip_class_desc
		, coalesce(use_yn, 'Y') as use_yn
		, site_id 
		, user_id, insert_ts, msg
		from cm_mig_equip_class
		where (msg is null OR MSG = 'ERROR')
		ORDER BY PK, INSERT_TS
	loop
		raise notice 'TARGET %', curdata;	
		
		v_exe_type = curdata.action_type;
		v_user_nm = null;
		v_pk = curdata.pk;
		
        BEGIN
			--            ش   ڵ尡  ̹   ִ                   .
			select count(*) into v_exist_cnt 
			from cm_equip_classify 
			where class_type = 'CLASS' 
			and site_id = curdata.site_id
			and equip_class_id = curdata.equip_class_id
			and category_id = curdata.equip_category_id;
		
			if (v_exe_type = 'A' and coalesce(v_exist_cnt, 0) > 0) then
				v_exe_type = 'U';
			end if;
			v_exist_cnt = 0;
			
			--      
			if (coalesce(curdata.user_id, '') <> '') then
				select user_nm into v_user_nm from cm_user_info
				where login_id = curdata.user_id;
				v_user_nm = coalesce(v_user_nm, 'system');
			end if;	

			if (v_exe_type = 'U') then
				--     
				update cm_equip_classify
				set equip_class_desc = curdata.equip_class_desc
				, hierarchy_path = curdata.equip_class_id
				, use_yn = curdata.use_yn
				, update_ts = current_timestamp
				, updater_id = curdata.user_id
				where class_type = 'CLASS' 
				and site_id = curdata.site_id
				and equip_class_id = curdata.equip_class_id
				and category_id = curdata.equip_category_id;
			
				update cm_mig_equip_class set msg = 'UPDATED!' where pk = curdata.pk;

			elseif (v_exe_type = 'A') then
				--    
				INSERT INTO cm_equip_classify(equip_class_id, equip_class_desc
					, hierarchy_path, category_id
					, class_type, site_id, use_yn
				 	, insert_ts, inserter_id)
				VALUES (curdata.equip_class_id, curdata.equip_class_desc
						, curdata.equip_class_id, curdata.equip_category_id
						, 'CLASS', curdata.site_id, curdata.use_yn
						, current_timestamp, curdata.user_id);

				update cm_mig_equip_class set msg = 'INSERTED!' where pk = curdata.pk;
			end if;
        EXCEPTION
            WHEN others THEN
				v_error_message := SQLERRM;
				update cm_mig_equip_class set msg = 'error' where pk = v_pk;
                insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
				values('MIGRATION', 'cm_prc_MIG_EQUIP_CLASS', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
        END; 
		
		
		v_cnt = v_cnt + 1;		
	end loop;	
	

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	v_error_message := SQLERRM;
	update cm_mig_equip_class set msg = 'error' where pk = v_pk;
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_EQUIP_CLASS', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_mig_equip_file();

CREATE OR REPLACE PROCEDURE public.cm_prc_mig_equip_file()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_cnt integer;
	v_pk bigint;
	v_exist_cnt integer;
	v_user_nm varchar(30);
	v_exe_type char(1);
	v_error_message varchar(1000);
	v_file_grp_cd varchar(100);
	v_equip_pk bigint;
	v_user_pk integer;
	curdata record;
begin
-- raise notice 'fntrans';
	-- #############################
	--               ̱׷  ̼  ó  
	-- call cm_prc_mig_equip_file()
	-- select count(*) from cm_mig_equip_file
	-- select * from cm_mig_equip_file where msg = 'error'
	-- select count(*) from cm_attach_file where attach_type = 'EQUIP_FILE'
	-- select * from cm_error_log where error_log_title  = 'cm_prc_mig_equip_file'
	-- delete from cm_error_log where error_log_title  = 'cm_prc_mig_equip_file'
	-- delete from cm_attach_file where attach_type = 'EQUIP_FILE'
	-- update cm_mig_equip_file set insert_ts = null, msg = null
	-- #############################
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_EQUIP_FILE', concat(' [MESSAGE] : ', '              ̱׷  ̼  ó       '));
	
	v_cnt = 1; 
	for curdata in
		select pk, action_type, equip_cd, equip_nm, file_loc, file_nm, file_org_nm
		, site_id
		, user_id, insert_ts, msg
		, file_ext as file_ext
		, cast(file_size as bigint) as file_size
		, file_loc as file_stre_cours
		, file_nm as file_stre_nm
		, root_path as root_path
		from cm_mig_equip_file
		where (msg is null or MSG = 'ERROR')
		ORDER BY PK, INSERT_TS
	loop
		raise notice 'TARGET %', curdata;	
	
		v_pk = curdata.pk;
		v_exe_type = curdata.action_type;
		v_user_nm = null;
		v_file_grp_cd = null;
		v_equip_pk = null;
		v_user_pk = null;
		
        BEGIN
			
			--      
			select user_pk into v_user_pk from cm_user_info where login_id = curdata.user_id;
			if (v_user_pk is null) then
				select user_pk into v_user_pk from cm_user_info where login_id = 'system';
			end if;
		
			--     
			select equip_pk into v_equip_pk from cm_equipment 
			where equip_cd = curdata.equip_cd and site_id = curdata.site_id;
			
			if (curdata.file_ext is null or curdata.msg = 'FILE_NOT_FOUND') then
				update cm_mig_equip_file set msg = 'NOT EXISTS FILE.' where pk = curdata.pk;
			else
				if (v_exe_type = 'D') then		
					--     
					delete from cm_attach_file where attach_type = 'EQUIP_FILE' and attach_pk = v_equip_pk;
					update cm_mig_equip_file set msg = 'DELETED!' where pk = curdata.pk;

				else
					--    
					select max(file_grp_cd) into v_file_grp_cd from cm_attach_file where attach_type = 'EQUIP_FILE' and attach_pk = v_equip_pk;
					if (v_file_grp_cd is null or coalesce(v_file_grp_cd, '') = '' ) then
						v_file_grp_cd = concat(to_char(current_timestamp, 'YYYYMMDDHH24:MI:SS'), 'EQUIP_FILE_MIG', v_equip_pk::text);
						insert into cm_attach_file_grp(attach_file_grp_cd, insert_ts, use_yn)
						values(v_file_grp_cd, current_timestamp, 'Y');
					end if;

					INSERT INTO cm_attach_file(file_grp_cd, attach_pk, attach_type
							, file_ext, file_org_nm
							, file_size, file_stre_cours
							, file_stre_nm, root_path
							, insert_ts, inserter_pk)
					VALUES (v_file_grp_cd, v_equip_pk, 'EQUIP_FILE'
							, curdata.file_ext, curdata.file_org_nm
							, curdata.file_size, curdata.file_stre_cours
							, curdata.file_stre_nm, curdata.root_path
							, current_timestamp, v_user_pk);

					update cm_mig_equip_file set msg = 'INSERTED!' where pk = curdata.pk;
				end if;
			end if;
        EXCEPTION
            WHEN others THEN
				v_error_message := SQLERRM;
				update cm_mig_equip_file set msg = 'error' where pk = v_pk;
                insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
				values('MIGRATION', 'cm_prc_MIG_EQUIP_FILE', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
        END; 
		
		v_cnt = v_cnt + 1;		
	end loop;	
	

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	v_error_message := SQLERRM;
	update cm_mig_equip_file set msg = 'error' where pk = v_pk;
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_EQUIP_FILE', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_mig_equip_photo();

CREATE OR REPLACE PROCEDURE public.cm_prc_mig_equip_photo()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_cnt integer;
	v_pk bigint;
	v_exist_cnt integer;
	v_user_nm varchar(30);
	v_exe_type char(1);
	v_error_message varchar(1000);
	v_file_grp_cd varchar(100);
	v_equip_pk bigint;
	v_user_pk integer;
	curdata record;
begin
-- raise notice 'fntrans';
	-- #############################
	--            ̱׷  ̼  ó  
	-- call cm_prc_mig_equip_photo()
	-- select count(*) from cm_mig_equip_photo
	-- select * from cm_mig_equip_photo where msg = 'error'
	-- select count(*) from cm_attach_file where attach_type = 'EQUIP_PHOTO'
	-- select * from cm_error_log where error_log_title  = 'cm_prc_mig_equip_photo'
	-- delete from cm_error_log where error_log_title  = 'cm_prc_mig_equip_photo'
	-- delete from cm_attach_file where attach_type = 'EQUIP_PHOTO'
	-- update cm_mig_equip_photo set insert_ts = null, msg = null
	-- #############################
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_EQUIP_PHOTO', concat(' [MESSAGE] : ', '           ̱׷  ̼  ó       '));
	
	v_cnt = 1; 
	for curdata in
		select pk, action_type, equip_cd, equip_nm, file_loc, file_nm, file_org_nm
		, site_id
		, user_id, insert_ts, msg
		, file_ext as file_ext
		, cast(file_size as number) as file_size
		, file_loc as file_stre_cours
		, file_nm as file_stre_nm
		, root_path as root_path
		, photo_desc
		from cm_mig_equip_photo
		where (msg is null or msg = 'error')
		order by pk, insert_ts
	loop
		raise notice 'TARGET %', curdata;	
		
		v_pk = curdata.pk;
		v_exe_type = curdata.action_type;
		v_user_nm = null;
		v_file_grp_cd = null;
		v_equip_pk = null;
		v_user_pk = null;
		
        BEGIN
			
			--      
			select user_pk into v_user_pk from cm_user_info where login_id = curdata.user_id;
			if (v_user_pk is null) then
				select user_pk into v_user_pk from cm_user_info where login_id = 'system';
			end if;
			--     
			select equip_pk into v_equip_pk from cm_equipment 
			where equip_cd = curdata.equip_cd and site_id = curdata.site_id;
			
			if (curdata.file_ext is null or curdata.msg = 'FILE_NOT_FOUND') then
				update cm_mig_equip_photo set msg = 'NOT EXISTS FILE.' where pk = curdata.pk;
			else
				if (v_exe_type = 'D') then		
					--     
					delete from cm_attach_file where attach_type = 'EQUIP_PHOTO' and attach_pk = v_equip_pk;
					update cm_mig_equip_photo set msg = 'DELETED!' where pk = curdata.pk;

				else
					--    
					select max(file_grp_cd) into v_file_grp_cd from cm_attach_file where attach_type = 'EQUIP_PHOTO' and attach_pk = v_equip_pk;
					if (v_file_grp_cd is null or coalesce(v_file_grp_cd, '') = '' ) then
						v_file_grp_cd = concat(to_char(current_timestamp, 'YYYYMMDDHH24MISS'), 'EQUIPPHOTOMIG', v_equip_pk::text);
						insert into cm_attach_file_grp(attach_file_grp_cd, insert_ts, use_yn)
						values(v_file_grp_cd, current_timestamp, 'Y');
					end if;

					INSERT INTO cm_attach_file(file_grp_cd, attach_pk, attach_type
							, file_ext, file_org_nm
							, file_size, file_stre_cours
							, file_stre_nm, root_path
							, insert_ts, inserter_pk)
					VALUES (v_file_grp_cd, v_equip_pk, 'EQUIP_PHOTO'
							, curdata.file_ext, curdata.file_org_nm
							, curdata.file_size, curdata.file_stre_cours
							, curdata.file_stre_nm, curdata.root_path
							, current_timestamp, v_user_pk);

					update cm_mig_equip_photo set msg = 'INSERTED!' where pk = curdata.pk;
				end if;
			end if;
        EXCEPTION
            WHEN others THEN
				v_error_message := SQLERRM;
				update cm_mig_equip_photo set msg = 'error' where pk = v_pk;
                insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
				values('MIGRATION', 'cm_prc_MIG_EQUIP_PHOTO', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
        END; 
		
		v_cnt = v_cnt + 1;		
	end loop;	
	

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	v_error_message := SQLERRM;
	update cm_mig_equip_photo set msg = 'error' where pk = v_pk;
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_EQUIP_PHOTO', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_mig_equip_spec();

CREATE OR REPLACE PROCEDURE public.cm_prc_mig_equip_spec()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_cnt integer;
	v_pk bigint;
	v_exist_cnt integer;
	v_user_nm varchar(30);
	v_exe_type char(1);
	v_error_message varchar(1000);
	v_equip_pk integer;
	v_exist_cnt1 integer;
	v_exist_cnt2 integer;
	v_exist_cnt3 integer;
	v_exist_cnt4 integer;
	v_exist_cnt5 integer;
	v_exist_cnt6 integer;
	v_exist_cnt7 integer;
	v_exist_cnt8 integer;
	v_exist_cnt9 integer;
	v_exist_cnt10 integer;
	v_line varchar(30);
	curdata record;
begin
-- raise notice 'fntrans';
	-- #############################
	--           ̱׷  ̼  ó  
	-- call cm_prc_mig_equip_spec()
	-- select count(*) from cm_mig_equip_spec
	-- select * from cm_mig_equip_spec where msg = 'error'
	-- select count(*) from cm_equip_spec
	-- select * from cm_error_log where error_log_title  = 'cm_prc_mig_equip_spec'
	-- delete from cm_error_log where error_log_title  = 'cm_prc_mig_equip_spec'
	-- delete from cm_equip_spec
	-- update cm_mig_equip_spec set insert_ts = null, msg = null	
	-- #############################
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_EQUIP_SPEC', concat(' [MESSAGE] : ', '          ̱׷  ̼  ó       '));
	
	v_cnt = 1; 
	
	for curdata in
		select pk, action_type, equip_cd, equip_nm
		, equip_spec_nm1, equip_spec_unit1, equip_spec_value1
		, equip_spec_nm2, equip_spec_unit2, equip_spec_value2
		, equip_spec_nm3, equip_spec_unit3, equip_spec_value3
		, equip_spec_nm4, equip_spec_unit4, equip_spec_value4
		, equip_spec_nm5, equip_spec_unit5, equip_spec_value5
		, equip_spec_nm6, equip_spec_unit6, equip_spec_value6
		, equip_spec_nm7, equip_spec_unit7, equip_spec_value7
		, equip_spec_nm8, equip_spec_unit8, equip_spec_value8
		, equip_spec_nm9, equip_spec_unit9, equip_spec_value9
		, equip_spec_nm10, equip_spec_unit10, equip_spec_value10
		, site_id
		, user_id, insert_ts, msg
		from cm_mig_equip_spec
		where (msg is null or msg = 'ERROR')
		order by pk, insert_ts
	loop
		raise notice 'TARGET %', curdata;	
		

		v_pk = curdata.pk;
		v_exe_type = curdata.action_type;
		v_user_nm = null;
		v_exist_cnt1 = null;
		v_exist_cnt2 = null;
		v_exist_cnt3 = null;
		v_exist_cnt4 = null;
		v_exist_cnt5 = null;
		v_exist_cnt6 = null;
		v_exist_cnt7 = null;
		v_exist_cnt8 = null;
		v_exist_cnt9 = null;
		v_exist_cnt10 = null;

		
        BEGIN

			--      
			if (coalesce(curdata.user_id, '') <> '') then
				select user_nm into v_user_nm from cm_user_info
				where login_id = curdata.user_id;
				v_user_nm = coalesce(v_user_nm, 'system');
			end if;	
			--     
			select equip_pk into v_equip_pk 
			from cm_equipment where equip_cd = curdata.equip_cd and site_id = curdata.site_id;

			if coalesce(v_equip_pk, 0)  = 0 then
				v_exe_type = 'X';
			end if;


			--            ش   ڵ尡  ̹   ִ                   .
			select count(*) into v_exist_cnt1 from cm_equip_spec where equip_pk = v_equip_pk and equip_spec_nm = coalesce(curdata.equip_spec_nm1, '');
			select count(*) into v_exist_cnt2 from cm_equip_spec where equip_pk = v_equip_pk and equip_spec_nm = coalesce(curdata.equip_spec_nm2, '');
			select count(*) into v_exist_cnt3 from cm_equip_spec where equip_pk = v_equip_pk and equip_spec_nm = coalesce(curdata.equip_spec_nm3, '');
			select count(*) into v_exist_cnt4 from cm_equip_spec where equip_pk = v_equip_pk and equip_spec_nm = coalesce(curdata.equip_spec_nm4, '');
			select count(*) into v_exist_cnt5 from cm_equip_spec where equip_pk = v_equip_pk and equip_spec_nm = coalesce(curdata.equip_spec_nm5, '');
			select count(*) into v_exist_cnt6 from cm_equip_spec where equip_pk = v_equip_pk and equip_spec_nm = coalesce(curdata.equip_spec_nm6, '');
			select count(*) into v_exist_cnt7 from cm_equip_spec where equip_pk = v_equip_pk and equip_spec_nm = coalesce(curdata.equip_spec_nm7, '');
			select count(*) into v_exist_cnt8 from cm_equip_spec where equip_pk = v_equip_pk and equip_spec_nm = coalesce(curdata.equip_spec_nm8, '');
			select count(*) into v_exist_cnt9 from cm_equip_spec where equip_pk = v_equip_pk and equip_spec_nm = coalesce(curdata.equip_spec_nm9, '');
			select count(*) into v_exist_cnt10 from cm_equip_spec where equip_pk = v_equip_pk and equip_spec_nm = coalesce(curdata.equip_spec_nm10, '');

			if (v_exe_type = 'U') then
				--     
				update cm_equip_spec
				set equip_spec_unit = curdata.equip_spec_unit1, equip_spec_value = curdata.equip_spec_value1
				, update_ts = current_timestamp, updater_id = curdata.user_id, updater_nm = v_user_nm
				where equip_pk = v_equip_pk and equip_spec_nm = curdata.equip_spec_nm1 and coalesce(v_exist_cnt1, 0) > 0;

				update cm_equip_spec
				set equip_spec_unit = curdata.equip_spec_unit2, equip_spec_value = curdata.equip_spec_value2
				, update_ts = current_timestamp, updater_id = curdata.user_id, updater_nm = v_user_nm
				where equip_pk = v_equip_pk and equip_spec_nm = curdata.equip_spec_nm2 and coalesce(v_exist_cnt2, 0) > 0;

				update cm_equip_spec
				set equip_spec_unit = curdata.equip_spec_unit3, equip_spec_value = curdata.equip_spec_value3
				, update_ts = current_timestamp, updater_id = curdata.user_id, updater_nm = v_user_nm
				where equip_pk = v_equip_pk and equip_spec_nm = curdata.equip_spec_nm3 and coalesce(v_exist_cnt3, 0) > 0;

				update cm_equip_spec
				set equip_spec_unit = curdata.equip_spec_unit4, equip_spec_value = curdata.equip_spec_value4
				, update_ts = current_timestamp, updater_id = curdata.user_id, updater_nm = v_user_nm
				where equip_pk = v_equip_pk and equip_spec_nm = curdata.equip_spec_nm4 and coalesce(v_exist_cnt4, 0) > 0;

				update cm_equip_spec
				set equip_spec_unit = curdata.equip_spec_unit5, equip_spec_value = curdata.equip_spec_value5
				, update_ts = current_timestamp, updater_id = curdata.user_id, updater_nm = v_user_nm
				where equip_pk = v_equip_pk and equip_spec_nm = curdata.equip_spec_nm5 and coalesce(v_exist_cnt5, 0) > 0;

				update cm_equip_spec
				set equip_spec_unit = curdata.equip_spec_unit6, equip_spec_value = curdata.equip_spec_value6
				, update_ts = current_timestamp, updater_id = curdata.user_id, updater_nm = v_user_nm
				where equip_pk = v_equip_pk and equip_spec_nm = curdata.equip_spec_nm6 and coalesce(v_exist_cnt6, 0) > 0;

				update cm_equip_spec
				set equip_spec_unit = curdata.equip_spec_unit7, equip_spec_value = curdata.equip_spec_value7
				, update_ts = current_timestamp, updater_id = curdata.user_id, updater_nm = v_user_nm
				where equip_pk = v_equip_pk and equip_spec_nm = curdata.equip_spec_nm7 and coalesce(v_exist_cnt7, 0) > 0;

				update cm_equip_spec
				set equip_spec_unit = curdata.equip_spec_unit8, equip_spec_value = curdata.equip_spec_value8
				, update_ts = current_timestamp, updater_id = curdata.user_id, updater_nm = v_user_nm
				where equip_pk = v_equip_pk and equip_spec_nm = curdata.equip_spec_nm8 and coalesce(v_exist_cnt8, 0) > 0;

				update cm_equip_spec
				set equip_spec_unit = curdata.equip_spec_unit9, equip_spec_value = curdata.equip_spec_value9
				, update_ts = current_timestamp, updater_id = curdata.user_id, updater_nm = v_user_nm
				where equip_pk = v_equip_pk and equip_spec_nm = curdata.equip_spec_nm9 and coalesce(v_exist_cnt9, 0) > 0;

				update cm_equip_spec
				set equip_spec_unit = curdata.equip_spec_unit10, equip_spec_value = curdata.equip_spec_value10
				, update_ts = current_timestamp, updater_id = curdata.user_id, updater_nm = v_user_nm
				where equip_pk = v_equip_pk and equip_spec_nm = curdata.equip_spec_nm10 and coalesce(v_exist_cnt10, 0) > 0;

				update cm_mig_equip_spec set msg = 'UPDATED!' where pk = curdata.pk;
			elseif (v_exe_type = 'A') then
				--    
				v_line = '1';
				if (coalesce(v_exist_cnt1, 0) = 0) then
					if (coalesce(curdata.equip_spec_nm1, '') <> '') then
						INSERT INTO cm_equip_spec(equip_pk, equip_spec_nm, equip_spec_unit, equip_spec_value, insert_ts, inserter_id, inserter_nm)
						VALUES (v_equip_pk, curdata.equip_spec_nm1, curdata.equip_spec_unit1, curdata.equip_spec_value1, current_timestamp, curdata.user_id, v_user_nm);
					end if;
				else
					if (coalesce(curdata.equip_spec_nm1, '') <> '') then
						update cm_equip_spec
						set equip_spec_unit = curdata.equip_spec_unit1, equip_spec_value = curdata.equip_spec_value1
						, update_ts = current_timestamp, updater_id = curdata.user_id, updater_nm = v_user_nm
						where equip_pk = v_equip_pk and equip_spec_nm = curdata.equip_spec_nm1 and coalesce(v_exist_cnt1, 0) > 0;			
					end if;
				end if;
			
				v_line = '2';
				if (coalesce(v_exist_cnt2, 0) = 0) then
					if (coalesce(curdata.equip_spec_nm2, '') <> '') then
						INSERT INTO cm_equip_spec(equip_pk, equip_spec_nm, equip_spec_unit, equip_spec_value, insert_ts, inserter_id, inserter_nm)
						VALUES (v_equip_pk, curdata.equip_spec_nm2, curdata.equip_spec_unit2, curdata.equip_spec_value2, current_timestamp, curdata.user_id, v_user_nm);
					end if;	
				else
					if (coalesce(curdata.equip_spec_nm2, '') <> '') then
						update cm_equip_spec
						set equip_spec_unit = curdata.equip_spec_unit2, equip_spec_value = curdata.equip_spec_value2
						, update_ts = current_timestamp, updater_id = curdata.user_id, updater_nm = v_user_nm
						where equip_pk = v_equip_pk and equip_spec_nm = curdata.equip_spec_nm2 and coalesce(v_exist_cnt2, 0) > 0;						
					end if;
				end if;

				v_line = '3';
				if (coalesce(v_exist_cnt3, 0) = 0) then
					if (coalesce(curdata.equip_spec_nm3, '') <> '') then
						INSERT INTO cm_equip_spec(equip_pk, equip_spec_nm, equip_spec_unit, equip_spec_value, insert_ts, inserter_id, inserter_nm)
						VALUES (v_equip_pk, curdata.equip_spec_nm3, curdata.equip_spec_unit3, curdata.equip_spec_value3, current_timestamp, curdata.user_id, v_user_nm);
					end if;
				else
					if (coalesce(curdata.equip_spec_nm3, '') <> '') then
						update cm_equip_spec
						set equip_spec_unit = curdata.equip_spec_unit3, equip_spec_value = curdata.equip_spec_value3
						, update_ts = current_timestamp, updater_id = curdata.user_id, updater_nm = v_user_nm
						where equip_pk = v_equip_pk and equip_spec_nm = curdata.equip_spec_nm3 and coalesce(v_exist_cnt3, 0) > 0;
					end if;
				end if;

				v_line = '4';
				if (coalesce(v_exist_cnt4, 0) = 0) then
					if (coalesce(curdata.equip_spec_nm4, '') <> '') then
						INSERT INTO cm_equip_spec(equip_pk, equip_spec_nm, equip_spec_unit, equip_spec_value, insert_ts, inserter_id, inserter_nm)
						VALUES (v_equip_pk, curdata.equip_spec_nm4, curdata.equip_spec_unit4, curdata.equip_spec_value4, current_timestamp, curdata.user_id, v_user_nm);
					end if;
				else
					if (coalesce(curdata.equip_spec_nm4, '') <> '') then
						update cm_equip_spec
						set equip_spec_unit = curdata.equip_spec_unit4, equip_spec_value = curdata.equip_spec_value4
						, update_ts = current_timestamp, updater_id = curdata.user_id, updater_nm = v_user_nm
						where equip_pk = v_equip_pk and equip_spec_nm = curdata.equip_spec_nm4 and coalesce(v_exist_cnt4, 0) > 0;
					end if;
				end if;

				v_line = '5';
				if (coalesce(v_exist_cnt5, 0) = 0) then
					if (coalesce(curdata.equip_spec_nm5, '') <> '') then
						INSERT INTO cm_equip_spec(equip_pk, equip_spec_nm, equip_spec_unit, equip_spec_value, insert_ts, inserter_id, inserter_nm)
						VALUES (v_equip_pk, curdata.equip_spec_nm5, curdata.equip_spec_unit5, curdata.equip_spec_value5, current_timestamp, curdata.user_id, v_user_nm);
					end if;
				else
					if (coalesce(curdata.equip_spec_nm5, '') <> '') then
						update cm_equip_spec
						set equip_spec_unit = curdata.equip_spec_unit5, equip_spec_value = curdata.equip_spec_value5
						, update_ts = current_timestamp, updater_id = curdata.user_id, updater_nm = v_user_nm
						where equip_pk = v_equip_pk and equip_spec_nm = curdata.equip_spec_nm5 and coalesce(v_exist_cnt5, 0) > 0;
					end if;
				end if;

				v_line = '6';
				if (coalesce(v_exist_cnt6, 0) = 0) then
					if (coalesce(curdata.equip_spec_nm6, '') <> '') then
						INSERT INTO cm_equip_spec(equip_pk, equip_spec_nm, equip_spec_unit, equip_spec_value, insert_ts, inserter_id, inserter_nm)
						VALUES (v_equip_pk, curdata.equip_spec_nm6, curdata.equip_spec_unit6, curdata.equip_spec_value6, current_timestamp, curdata.user_id, v_user_nm);
					end if;
				else
					if (coalesce(curdata.equip_spec_nm6, '') <> '') then
						update cm_equip_spec
						set equip_spec_unit = curdata.equip_spec_unit6, equip_spec_value = curdata.equip_spec_value6
						, update_ts = current_timestamp, updater_id = curdata.user_id, updater_nm = v_user_nm
						where equip_pk = v_equip_pk and equip_spec_nm = curdata.equip_spec_nm6 and coalesce(v_exist_cnt6, 0) > 0;
					end if;
				end if;

				v_line = '7';
				if (coalesce(v_exist_cnt7, 0) = 0) then
					if (coalesce(curdata.equip_spec_nm7, '') <> '') then
						INSERT INTO cm_equip_spec(equip_pk, equip_spec_nm, equip_spec_unit, equip_spec_value, insert_ts, inserter_id, inserter_nm)
						VALUES (v_equip_pk, curdata.equip_spec_nm7, curdata.equip_spec_unit7, curdata.equip_spec_value7, current_timestamp, curdata.user_id, v_user_nm);
					end if;
				else
					if (coalesce(curdata.equip_spec_nm7, '') <> '') then
						update cm_equip_spec
						set equip_spec_unit = curdata.equip_spec_unit7, equip_spec_value = curdata.equip_spec_value7
						, update_ts = current_timestamp, updater_id = curdata.user_id, updater_nm = v_user_nm
						where equip_pk = v_equip_pk and equip_spec_nm = curdata.equip_spec_nm7 and coalesce(v_exist_cnt7, 0) > 0;
					end if;
				end if;

				v_line = '8';
				if (coalesce(v_exist_cnt8, 0) = 0) then
					if (coalesce(curdata.equip_spec_nm8, '') <> '') then
						INSERT INTO cm_equip_spec(equip_pk, equip_spec_nm, equip_spec_unit, equip_spec_value, insert_ts, inserter_id, inserter_nm)
						VALUES (v_equip_pk, curdata.equip_spec_nm8, curdata.equip_spec_unit8, curdata.equip_spec_value8, current_timestamp, curdata.user_id, v_user_nm);
					end if;
				else
					if (coalesce(curdata.equip_spec_nm8, '') <> '') then
						update cm_equip_spec
						set equip_spec_unit = curdata.equip_spec_unit8, equip_spec_value = curdata.equip_spec_value8
						, update_ts = current_timestamp, updater_id = curdata.user_id, updater_nm = v_user_nm
						where equip_pk = v_equip_pk and equip_spec_nm = curdata.equip_spec_nm8 and coalesce(v_exist_cnt8, 0) > 0;
					end if;
				end if;

				v_line = '9';
				if (coalesce(v_exist_cnt9, 0) = 0) then
					if (coalesce(curdata.equip_spec_nm9, '') <> '') then
						INSERT INTO cm_equip_spec(equip_pk, equip_spec_nm, equip_spec_unit, equip_spec_value, insert_ts, inserter_id, inserter_nm)
						VALUES (v_equip_pk, curdata.equip_spec_nm9, curdata.equip_spec_unit9, curdata.equip_spec_value9, current_timestamp, curdata.user_id, v_user_nm);
					end if;
				else
					if (coalesce(curdata.equip_spec_nm9, '') <> '') then
						update cm_equip_spec
						set equip_spec_unit = curdata.equip_spec_unit9, equip_spec_value = curdata.equip_spec_value9
						, update_ts = current_timestamp, updater_id = curdata.user_id, updater_nm = v_user_nm
						where equip_pk = v_equip_pk and equip_spec_nm = curdata.equip_spec_nm9 and coalesce(v_exist_cnt9, 0) > 0;
					end if;
				end if;

				v_line = '10';
				if (coalesce(v_exist_cnt10, 0) = 0) then
					if (coalesce(curdata.equip_spec_nm10, '') <> '') then
						INSERT INTO cm_equip_spec(equip_pk, equip_spec_nm, equip_spec_unit, equip_spec_value, insert_ts, inserter_id, inserter_nm)
						VALUES (v_equip_pk, curdata.equip_spec_nm10, curdata.equip_spec_unit10, curdata.equip_spec_value10, current_timestamp, curdata.user_id, v_user_nm);
					end if;
				else
					if (coalesce(curdata.equip_spec_nm10, '') <> '') then
						update cm_equip_spec
						set equip_spec_unit = curdata.equip_spec_unit10, equip_spec_value = curdata.equip_spec_value10
						, update_ts = current_timestamp, updater_id = curdata.user_id, updater_nm = v_user_nm
						where equip_pk = v_equip_pk and equip_spec_nm = curdata.equip_spec_nm10 and coalesce(v_exist_cnt10, 0) > 0;
					end if;
				end if;

				update cm_mig_equip_spec set msg = 'INSERTED!' where pk = curdata.pk;
			end if;
        EXCEPTION
            WHEN others THEN
				v_error_message := SQLERRM;
				update cm_mig_equip_spec set msg = 'error' where pk = v_pk;
                insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
				values('MIGRATION', 'cm_prc_MIG_EQUIP_SPEC', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
        END; 
		
		
		v_cnt = v_cnt + 1;		
	end loop;	
	

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	v_error_message := SQLERRM;
	update cm_mig_equip_spec set msg = 'error' where pk = v_pk;
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_EQUIP_SPEC', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_mig_equip_type();

CREATE OR REPLACE PROCEDURE public.cm_prc_mig_equip_type()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_cnt integer;
	v_pk bigint;
	v_exist_cnt integer;
	v_user_nm varchar(30);
	v_exe_type char(1);
	v_error_message varchar(1000);
	curdata record;
begin
-- raise notice 'fntrans';
	-- #############################
	--             ̱׷  ̼  ó  
	-- call cm_prc_mig_equip_type()
	-- select count(*) from cm_mig_equip_type;
	-- select count(*) from cm_equip_classify where class_type = 'TYPES';
	-- delete from cm_error_log where error_log_title = 'cm_prc_mig_equip_type'
	-- select * from cm_error_log where error_log_title = 'cm_prc_mig_equip_type'
	-- select * from cm_equip_classify where class_type = 'TYPES';
	-- #############################
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_EQUIP_TYPE', concat(' [MESSAGE] : ', '            ̱׷  ̼  ó       '));
	
	v_cnt = 1; 
	
	for curdata in
		select pk, action_type
		, equip_class_id, equip_class_desc
		, hierarchy_path
		, equip_type_id, equip_type_desc
		, coalesce(use_yn, 'Y') as use_yn
		, site_id
		, user_id, insert_ts, msg
		from cm_mig_equip_type
		where (msg is null or msg = 'ERROR')
		order by pk, insert_ts
	loop
		raise notice 'TARGET %', curdata;	
		
		v_exe_type = curdata.action_type;
		v_user_nm = null;
		v_pk = curdata.pk;
		
        BEGIN
			--            ش   ڵ尡  ̹   ִ                   .
			select count(*) into v_exist_cnt 
			from cm_equip_classify 
			where class_type = 'TYPES' 
			and site_id = curdata.site_id
			and parent_id = curdata.equip_class_id
			and equip_class_id = curdata.equip_type_id;
		
			if (v_exe_type = 'A' and coalesce(v_exist_cnt, 0) > 0) then
				v_exe_type = 'U';
			end if;
			v_exist_cnt = 0;
			
			--      
			if (coalesce(curdata.user_id, '') <> '') then
				select user_nm into v_user_nm from cm_user_info
				where login_id = curdata.user_id;
				v_user_nm = coalesce(v_user_nm, 'system');
			end if;	

			if (v_exe_type = 'U') then
				--     
				update cm_equip_classify
				set equip_class_desc = curdata.equip_type_desc
				, hierarchy_path = curdata.hierarchy_path
				, parent_id = curdata.equip_class_id
				, use_yn = curdata.use_yn
				, update_ts = current_timestamp
				, updater_id = curdata.user_id
				where class_type = 'TYPES' 
				and site_id = curdata.site_id
				and parent_id = curdata.equip_class_id
				and equip_class_id = curdata.equip_type_id;
			
				update cm_mig_equip_type set msg = 'UPDATED!' where pk = curdata.pk;

			elseif (v_exe_type = 'A') then
				--    
				INSERT INTO cm_equip_classify(equip_class_id, equip_class_desc
					, hierarchy_path, parent_id
					, class_type, site_id, use_yn
				 	, insert_ts, inserter_id)
				VALUES (curdata.equip_type_id, curdata.equip_type_desc
						, curdata.hierarchy_path, curdata.equip_class_id
						, 'TYPES', curdata.site_id, curdata.use_yn
						, current_timestamp, curdata.user_id);

				update cm_mig_equip_type set msg = 'INSERTED!' where pk = curdata.pk;
			end if;
        EXCEPTION
            WHEN others THEN
				v_error_message := SQLERRM;
				update cm_mig_equip_type set msg = 'error' where pk = v_pk;
                insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
				values('MIGRATION', 'cm_prc_MIG_EQUIP_TYPE', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
        END; 
		
		
		v_cnt = v_cnt + 1;		
	end loop;	
	

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	v_error_message := SQLERRM;
	update cm_mig_equip_type set msg = 'error' where pk = v_pk;
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_EQUIP_TYPE', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_mig_loc();

CREATE OR REPLACE PROCEDURE public.cm_prc_mig_loc()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_cnt integer;
	v_pk bigint;
	v_up_loc_pk bigint;
	v_exist_cnt integer;
	v_user_nm varchar(30);
	v_exe_type char(1);
	v_error_message varchar(1000);
	curdata record;
begin
-- raise notice 'fntrans';
	-- #############################
	--   ġ    ̱׷  ̼  ó  
	-- call cm_prc_mig_loc()
	-- select count(*) from cm_mig_loc;
	-- select count(*) from cm_location;
	-- delete from cm_error_log where error_log_title = 'cm_prc_mig_loc'
	-- select * from cm_error_log where error_log_title = 'cm_prc_mig_loc'
	-- #############################
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_LOC', concat(' [MESSAGE] : ', '  ġ    ̱׷  ̼  ó       '));
	
	v_cnt = 1; 
	
	for curdata in
		select pk, action_type, loc_cd, loc_nm, up_loc_cd, up_loc_nm
		, coalesce(plant_yn, 'N') as plant_yn
		, coalesce(building_yn, 'N') as building_yn
		, coalesce(spshop_yn, 'N') as spshop_yn
		, isa95class, site_id
		, out_order
		, user_id, insert_ts, msg
		from cm_mig_loc
		where (msg is null or msg = 'ERROR')
		order by pk, insert_ts
	loop
		raise notice 'TARGET %', curdata;	
		
		v_pk = curdata.pk;
		v_exe_type = curdata.action_type;
		v_up_loc_pk = null;
		v_user_nm = null;
	
        begin
	        
			v_exist_cnt := 0;		
			SELECT (case when curdata.loc_cd ~ E'^[A-Za-z0-9_-]*$' = true then 1 else 0 end)
			into v_exist_cnt; 
		
			if (coalesce(v_exist_cnt, 0) = 0) then
				update cm_mig_loc set msg = 'ERROR(LOC_CD_NOT_VALID)' where pk = curdata.pk;
				
				insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
				values('MIGRATION', 'cm_prc_MIG_LOC'
					, ' [message : ' || v_pk || ', code:' || curdata.loc_cd || '] : loc_cd_not_valid');
				continue;
			end if;
			v_exist_cnt := 0;
		
		
			--            ش   ڵ尡  ̹   ִ                   .
			select count(*) into v_exist_cnt from cm_location where loc_cd = curdata.loc_cd and site_id = curdata.site_id;
			if (v_exe_type = 'A' and coalesce(v_exist_cnt, 0) > 0) then
				v_exe_type = 'U';
			end if;
			v_exist_cnt = 0;

			--       ġ
			select loc_pk into v_up_loc_pk from cm_location where loc_cd = curdata.up_loc_cd;
			--      
			if (coalesce(curdata.user_id, '') <> '') then
				select user_nm into v_user_nm from cm_user_info
				where login_id = curdata.user_id;
				v_user_nm = coalesce(v_user_nm, 'system');
			end if;	

			if (v_exe_type = 'U') then
				--     
				update cm_location
				set loc_nm = curdata.loc_nm
				, up_loc_pk = v_up_loc_pk
				, plant_yn = case when trim(curdata.plant_yn)  = '' then null else curdata.plant_yn end
				, building_yn = case when trim(curdata.building_yn)  = '' then null else curdata.building_yn end
				, spshop_yn = case when trim(curdata.spshop_yn)  = '' then null else curdata.spshop_yn end
				, site_id = curdata.site_id
				, isa95_class = curdata.isa95class
				, update_ts = current_timestamp
				, updater_id = curdata.user_id
				, updater_nm = v_user_nm
				, out_order = coalesce(out_order, 0)
				where loc_cd = curdata.loc_cd
				and site_id = curdata.site_id;
			
				update cm_mig_loc set msg = 'UPDATED!' where pk = curdata.pk;

			elseif (v_exe_type = 'A') then
				--    
				INSERT INTO cm_location(loc_cd, loc_nm, up_loc_pk
				 , plant_yn, building_yn, spshop_yn, out_order
				 , isa95_class, site_id, loc_status
				 , insert_ts, inserter_id, inserter_nm, del_yn, use_yn)
				VALUES (curdata.loc_cd, curdata.loc_nm, v_up_loc_pk
						, case when trim(curdata.plant_yn)  = '' then null else curdata.plant_yn end
						, case when trim(curdata.building_yn)  = '' then null else curdata.building_yn end
						, case when trim(curdata.spshop_yn)  = '' then null else curdata.spshop_yn end
						, 0
						, curdata.isa95class, curdata.site_id, 'OPERATING'
						, current_timestamp, curdata.user_id, v_user_nm, 'N', 'Y');

				update cm_mig_loc set msg = 'INSERTED!' where pk = curdata.pk;
			end if;
        EXCEPTION
            WHEN others THEN
				v_error_message := SQLERRM;
				update cm_mig_loc set msg = 'error' where pk = v_pk;
                insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
				values('MIGRATION', 'cm_prc_MIG_LOC', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
        END; 
		
		
		v_cnt = v_cnt + 1;		
	end loop;	
	

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	v_error_message := SQLERRM;
	update cm_mig_loc set msg = 'error' where pk = v_pk;
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_LOC', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_mig_mtrl();

CREATE OR REPLACE PROCEDURE public.cm_prc_mig_mtrl()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_cnt integer;
	v_pk bigint;
	v_exist_cnt integer;
	v_user_nm varchar(30);
	v_exe_type char(1);
	v_error_message varchar(1000);
	v_mtrl_class_cd_pk  integer;
	v_amt_unit_pk integer;
	v_supplier_pk integer;
	v_maker_pk integer;
	v_line varchar(10);
	curdata record;
begin
-- raise notice 'fntrans';
	-- #############################
	--         ̱׷  ̼  ó  
	-- call cm_prc_mig_mtrl()
	-- select count(*) from cm_mig_mtrl
	-- select count(*) from cm_material
	-- select * from cm_error_log where error_log_title  = 'cm_prc_mig_mtrl'
	-- delete from cm_error_log where error_log_title  = 'cm_prc_mig_mtrl'
	-- #############################
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_MTRL', concat(' [MESSAGE] : ', '        ̱׷  ̼  ó       '));
	
	v_cnt = 1; 
	v_line = '1';

	for curdata in
		select pk, action_type, site_id, mtrl_cd, mtrl_nm, mtrl_cls_cd, mtrl_cls_nm, amt_unit
		, safety_stock_amt, unit_price, unit_price_dt, mtrl_dsc
		, maker_cd, maker_nm, supplier_cd, supplier_nm
		, delivery_days, delivery_type, user_id, insert_ts, msg
		from cm_mig_mtrl
		where (msg is null or msg = 'ERROR')
		order by pk, insert_ts
	loop
		raise notice 'TARGET %', curdata;	
	
		v_pk = curdata.pk;
		v_exe_type = curdata.action_type;
		v_user_nm = null;
		v_mtrl_class_cd_pk = null;
		v_amt_unit_pk = null;
		v_supplier_pk = null;
		v_maker_pk = null;
	
		v_line = '2';
	
        begin
	        
			v_exist_cnt := 0;		
			SELECT (case when curdata.mtrl_cd ~ E'^[A-Za-z0-9_-]*$' = true then 1 else 0 end)
			into v_exist_cnt; 
		
			if (coalesce(v_exist_cnt, 0) = 0) then
				update cm_mig_mtrl set msg = 'ERROR(MTRL_CD_NOT_VALID)' where pk = curdata.pk;
				
				insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
				values('MIGRATION', 'cm_prc_MIG_MTRL'
					, ' [message : ' || v_pk || ', code:' || curdata.mtrl_cd || '] : mtrl_cd_not_valid');
				continue;
			end if;
			v_exist_cnt := 0;
		
		
			--            ش   ڵ尡  ̹   ִ                   .
			select count(*) into v_exist_cnt from cm_material where mtrl_cd = curdata.mtrl_cd and site_id = curdata.site_id;
			if (v_exe_type = 'A' and coalesce(v_exist_cnt, 0) > 0) then
				v_exe_type = 'U';
			end if;
			v_exist_cnt = 0;
		
			v_line = '3';
			--      
			if (coalesce(curdata.user_id, '') <> '') then
				select user_nm into v_user_nm from cm_user_info
				where login_id = curdata.user_id;
				v_user_nm = coalesce(v_user_nm, 'system');
			end if;	
		
			v_line = '4';
			--         
			select code_pk into v_mtrl_class_cd_pk from cm_base_code where code_grp_cd = 'MTRL_CLASS' and code_cd = curdata.mtrl_cls_cd;
		
			v_line = '5';
			--     
			select code_pk into v_amt_unit_pk from cm_base_code where code_grp_cd = 'AMT_UNIT' and code_cd = curdata.amt_unit;
			
			v_line = '6';
			--    ޾ ü
			select supplier_pk into v_supplier_pk from cm_supplier where comp_type = 'CP_S' 
				and supplier_cd = curdata.supplier_cd and site_id = curdata.site_id;
			
			v_line = '7';
			--       
			select supplier_pk into v_maker_pk from cm_supplier where comp_type = 'CP_M' 
				and supplier_nm = curdata.maker_nm and site_id = curdata.site_id;
			
			v_line = '8';		
		
			if v_mtrl_class_cd_pk is null and trim(curdata.mtrl_cls_cd) is not null and trim(curdata.mtrl_cls_nm) is not null  then
				
				INSERT INTO cm_base_code(code_cd, code_nm, code_grp_cd
				, code_nm_ch, code_nm_en, code_nm_jp, disp_order
				, insert_ts, inserter_id, inserter_nm, use_yn)
				VALUES (curdata.mtrl_cls_cd, curdata.mtrl_cls_nm, 'MTRL_CLASS'
				, curdata.mtrl_cls_nm, curdata.mtrl_cls_nm, curdata.mtrl_cls_nm, 0
				, current_timestamp, curdata.user_id, v_user_nm, 'Y');

				select code_pk into v_mtrl_class_cd_pk 
				from cm_base_code where code_grp_cd = 'MTRL_CLASS' and code_cd = curdata.mtrl_cls_cd;
			end if;
		
			v_line = '9';
			
			if (v_exe_type = 'U') then
				--     
				update cm_material
				set mtrl_nm = curdata.mtrl_nm
				, mtrl_class_cd_pk = v_mtrl_class_cd_pk
				, amt_unit_pk = v_amt_unit_pk
				, safety_stock_amt = coalesce(curdata.safety_stock_amt,0)
				, unit_price = (case when curdata.unit_price is null then null else cast(curdata.unit_price as bigint) end)
				, unit_price_dt = (case when curdata.unit_price_dt is null then null else to_date(curdata.unit_price_dt, 'YYYY-MM-DD') end)
				, delivery_days = curdata.delivery_days
				, delivery_type = curdata.delivery_type
				, mtrl_dsc = curdata.mtrl_dsc
				, supplier_pk = v_supplier_pk
				, maker_pk = v_maker_pk
				, update_ts = current_timestamp
				, updater_id = curdata.user_id
				, updater_nm = v_user_nm
				where mtrl_cd = curdata.mtrl_cd and site_id = curdata.site_id;
				v_line = '10';
				update cm_mig_mtrl set msg = 'UPDATED!' where pk = curdata.pk;
			elseif (v_exe_type = 'A') then
				--    
				INSERT INTO cm_material(mtrl_cd, mtrl_nm, mtrl_class_cd_pk, amt_unit_pk
				 , safety_stock_amt
				 , unit_price, unit_price_dt, delivery_days, delivery_type
				 , mtrl_dsc, supplier_pk, maker_pk
				 , site_id
				 , insert_ts, inserter_id, inserter_nm, use_yn, del_yn)
				VALUES (curdata.mtrl_cd, curdata.mtrl_nm
						, v_mtrl_class_cd_pk, v_amt_unit_pk
						, coalesce(curdata.safety_stock_amt,0)
						, (case when coalesce(curdata.unit_price, '') = '' then null else cast(curdata.unit_price as bigint) end)
						, (case when curdata.unit_price_dt is null then null else to_date(curdata.unit_price_dt, 'YYYY-MM-DD') end)
						, curdata.delivery_days, curdata.delivery_type
						, curdata.mtrl_dsc, v_supplier_pk, v_maker_pk
						, curdata.site_id
						, current_timestamp, curdata.user_id, v_user_nm, 'Y', 'N');
				v_line = '11';
				update cm_mig_mtrl set msg = 'INSERTED!' where pk = curdata.pk;
			end if;
        EXCEPTION
            WHEN others THEN
				v_error_message := SQLERRM;
				update cm_mig_mtrl set msg = 'error' where pk = v_pk;
                insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
				values('MIGRATION', 'cm_prc_MIG_MTRL', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
        END; 
		
		v_line = '12';
		v_cnt = v_cnt + 1;		
	end loop;	
	

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	v_error_message := SQLERRM;
	update cm_mig_mtrl set msg = 'error' where pk = v_pk;
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_MTRL', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_mig_mtrl_inout();

CREATE OR REPLACE PROCEDURE public.cm_prc_mig_mtrl_inout()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_cnt integer;
	v_pk bigint;
	v_exist_cnt integer;
	v_user_nm varchar(30);
	v_exe_type char(1);
	v_error_message varchar(1000);
	v_inout_div varchar(30);
	v_inout_type varchar(30);
	v_supplier_pk integer;
	v_mtrl_pk integer;
	curdata record;
begin
-- raise notice 'fntrans';
	-- #############################
	--         ̱׷  ̼  ó  
	-- call cm_prc_mig_mtrl_inout()
	-- select count(*) from cm_mig_mtrl_inout
	-- select count(*) from cm_mtrl_inout
	-- select * from cm_error_log where error_log_title  = 'cm_prc_mig_mtrl_inout'
	-- delete from cm_error_log where error_log_title  = 'cm_prc_mig_mtrl_inout'
	-- update cm_mig_mtrl_inout set insert_ts = null, msg = null
	-- #############################
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_MTRL_INOUT', concat(' [MESSAGE] : ', '        ̱׷  ̼  ó       '));
	
	v_cnt = 1; 
	
	for curdata in
		select pk, action_type, mtrl_cd, mtrl_nm
		, inout_loc_cd, loc_cell_addr, own_dept_cd, own_dept_nm
		, inout_div, inout_type, inout_dt
		, ab_grade, inout_qty, inout_uprice
		, supplier_cd, supplier_nm
		, site_id, user_id, insert_ts, msg
		from cm_mig_mtrl_inout
		where (msg is null or msg = 'ERROR')
		order by pk, insert_ts
	loop
		raise notice 'TARGET %', curdata;	
	
		v_pk = curdata.pk;
		v_exe_type = curdata.action_type;
		v_user_nm = null;
		v_inout_div = null;
		v_inout_type = null;
		v_supplier_pk = null;
		v_mtrl_pk = null;
		
        begin
	        
	        v_mtrl_pk = null;
	        v_user_nm = null;
	       	v_inout_div = null;
 	        v_inout_type = null;

			--      
			if (coalesce(curdata.user_id, '') <> '') then
				select user_nm into v_user_nm from cm_user_info
				where login_id = curdata.user_id;
				v_user_nm = coalesce(v_user_nm, 'system');
			end if;	
		
			--     
			select mtrl_pk into v_mtrl_pk from cm_material where mtrl_cd = curdata.mtrl_cd and site_id = curdata.site_id;
		
			--    ޾ ü
			select supplier_pk into v_supplier_pk from cm_supplier where comp_type = 'CP_S' 
				and supplier_cd = curdata.supplier_cd and site_id = curdata.site_id;
			
			--         
			select bc.code_cd into v_inout_div 
			from cm_base_code bc where bc.code_grp_cd = 'INOUT_DIV' and bc.code_nm = curdata.inout_div;
		
			--  ԰     
			select bc.code_cd into v_inout_type
			from cm_base_code bc  
			where bc.code_grp_cd = (case when v_inout_div = 'INOUT_DIV_IN' then 'IN_TYPE' else 'OUT_TYPE' end)
			and bc.code_nm = curdata.inout_type;
		
			
			if (v_exe_type = 'A') then
				--    
				INSERT INTO cm_mtrl_inout(mtrl_pk
					, own_dept_cd, inout_loc_cd
					, inout_div, inout_type
				 	, inout_uprice, inout_qty
				 	, inout_dt, stocked_dt
				 	, ab_grade, loc_cell_addr
				 	, supplier_pk
				 	, site_id
				 	, insert_ts, inserter_id, inserter_nm)
				VALUES (v_mtrl_pk
						, curdata.own_dept_cd, curdata.inout_loc_cd
						, v_inout_div, v_inout_type
						, (case when curdata.inout_uprice is null then null else cast(curdata.inout_uprice as bigint) end)
						, (case when curdata.inout_qty is null then 1 else cast(curdata.inout_qty as int4) end)
						, (case when curdata.inout_dt is null then null else to_date(curdata.inout_dt, 'YYYY-MM-DD') end)
						, (case when curdata.inout_dt is null then null else to_date(curdata.inout_dt, 'YYYY-MM-DD') end)
						, curdata.ab_grade, curdata.loc_cell_addr
						, v_supplier_pk
						, curdata.site_id
						, current_timestamp, curdata.user_id, v_user_nm);

				update cm_mig_mtrl_inout set msg = 'INSERTED!' where pk = curdata.pk;
			
			
			end if;
        EXCEPTION
            WHEN others THEN
				v_error_message := SQLERRM;
				update cm_mig_mtrl_inout set msg = 'error' where pk = v_pk;
                insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
				values('MIGRATION', 'cm_prc_MIG_MTRL_INOUT', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
        END; 
		
		
		v_cnt = v_cnt + 1;		
	end loop;	
	

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	v_error_message := SQLERRM;
	update cm_mig_mtrl_inout set msg = 'error' where pk = v_pk;
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_MTRL_INOUT', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_mig_mtrl_photo();

CREATE OR REPLACE PROCEDURE public.cm_prc_mig_mtrl_photo()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_cnt integer;
	v_pk bigint;
	v_exist_cnt integer;
	v_user_nm varchar(30);
	v_exe_type char(1);
	v_error_message varchar(1000);
	v_file_grp_cd varchar(100);
	v_mtrl_pk bigint;
	v_user_pk integer;
	curdata record;
begin
-- raise notice 'fntrans';
	-- #############################
	--            ̱׷  ̼  ó  
	-- call cm_prc_mig_mtrl_photo()
	-- select count(*) from cm_mig_mtrl_photo
	-- select * from cm_mig_mtrl_photo where msg = 'error'
	-- select count(*) from cm_attach_file where attach_type = 'MTRL_PHOTO'
	-- select * from cm_error_log where error_log_title  = 'cm_prc_mig_mtrl_photo'
	-- delete from cm_error_log where error_log_title  = 'cm_prc_mig_mtrl_photo'
	-- delete from cm_attach_file where attach_type = 'MTRL_PHOTO'
	-- update cm_mig_mtrl_photo set insert_ts = null, msg = null
	-- #############################
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_MTRL_PHOTO', concat(' [MESSAGE] : ', '           ̱׷  ̼  ó       '));
	
	v_cnt = 1; 

	for curdata in
		select pk, action_type, mtrl_cd, mtrl_nm
		, file_loc, file_nm, file_org_nm
		, site_id
		, user_id, insert_ts, msg
		, file_ext as file_ext
		, cast(file_size as bigint) as file_size
		, file_loc as file_stre_cours
		, file_nm as file_stre_nm
		, root_path as root_path
		, photo_desc
		from cm_mig_mtrl_photo
		where (msg is null or msg = 'ERROR')
		order by pk, insert_ts
	loop
		raise notice 'TARGET %', curdata;	
		
		v_pk = curdata.pk;
		v_exe_type = curdata.action_type;
		v_user_nm = null;
		v_file_grp_cd = null;
		v_mtrl_pk = null;
		v_user_pk = null;
		
        BEGIN
			
			--      
			if (coalesce(curdata.user_id, '') <> '') then
				select user_nm into v_user_nm from cm_user_info
				where login_id = curdata.user_id;
				v_user_nm = coalesce(v_user_nm, 'system');
			end if;		
		
			--     
			select mtrl_pk into v_mtrl_pk from cm_material where mtrl_cd = curdata.mtrl_cd and site_id = curdata.site_id;
			
			if (curdata.file_ext is null or curdata.msg = 'FILE_NOT_FOUND') then
				update cm_mig_mtrl_photo set msg = 'NOT EXISTS FILE.' where pk = curdata.pk;
			else
				if (v_exe_type = 'D') then		
					--     
					delete from cm_attach_file where attach_type = 'MTRL_PHOTO' and attach_pk = v_mtrl_pk;
					update cm_mig_mtrl_photo set msg = 'DELETED!' where pk = curdata.pk;

				else
					--    
					select max(file_grp_cd) into v_file_grp_cd from cm_attach_file where attach_type = 'MTRL_PHOTO' and attach_pk = v_mtrl_pk;
					if (v_file_grp_cd is null or coalesce(v_file_grp_cd, '') = '' ) then
						v_file_grp_cd = concat(to_char(current_timestamp, 'YYYYMMDDHH24MISS'), 'MTRLPHOTOMIG', v_mtrl_pk::text);
						insert into cm_attach_file_grp(attach_file_grp_cd, insert_ts, use_yn)
						values(v_file_grp_cd, current_timestamp, 'Y');
					end if;

					insert into cm_attach_file (file_grp_cd, file_org_nm, file_stre_nm
						, file_ext, file_size, file_stre_cours
						, attach_type, attach_pk
						, insert_ts, inserter_pk, root_path)
					values(v_file_grp_cd, curdata.file_org_nm, curdata.file_stre_nm
						, curdata.file_ext, curdata.file_size, curdata.file_stre_cours
						, 'MTRL_PHOTO', v_mtrl_pk
						, current_timestamp, v_user_pk, curdata.root_path
					);
				
					update cm_mig_mtrl_photo set msg = 'INSERTED!' where pk = curdata.pk;
				end if;
			end if;
        EXCEPTION
            WHEN others THEN
				v_error_message := SQLERRM;
				update cm_mig_mtrl_photo set msg = 'error' where pk = v_pk;
                insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
				values('MIGRATION', 'cm_prc_MIG_MTRL_PHOTO', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
        END; 
		
		v_cnt = v_cnt + 1;		
	end loop;	
	

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	v_error_message := SQLERRM;
	update cm_mig_mtrl_photo set msg = 'error' where pk = v_pk;
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_MTRL_PHOTO', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_mig_pm();

CREATE OR REPLACE PROCEDURE public.cm_prc_mig_pm()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_cnt integer;
	v_pk bigint;
	v_exist_cnt integer;
	v_user_nm varchar(30);
	v_exe_type char(1);
	v_error_message varchar(1000);
	v_equip_pk  integer;
	cm_v_dept_pk integer;
	v_pm_user_pk integer;
	curdata record;
begin
-- raise notice 'fntrans';
	-- #############################
	-- PM    ̱׷  ̼  ó  
	-- call cm_prc_mig_pm()
	-- select count(*) from cm_mig_pm
	-- select * from cm_mig_pm where msg = 'error'
	-- select count(*) from cm_pm
	-- select * from cm_error_log where error_log_title  = 'cm_prc_mig_pm'
	-- delete from cm_error_log where error_log_title  = 'cm_prc_mig_pm'
	-- delete from cm_pm
	-- update cm_mig_pm set insert_ts = null, msg = null	
	-- #############################
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_PM', concat(' [MESSAGE] : ', 'PM    ̱׷  ̼  ó       '));
	
	v_cnt = 1; 
	
	for curdata in
		select pk, action_type, site_id
		, pm_no, pm_nm, equip_cd, equip_nm, import_rank_cd
		, concat('PM_TYPE_', pm_type) as pm_type, per_number
		, concat('CYCLE_TYPE_', cycle_type) as cycle_type, sched_start_dt
		, trim(dept_cd) as dept_cd, dept_nm
		, trim(pm_user_id) as pm_user_id
		, pm_user_nm, work_expect_hr, work_text, user_id, insert_ts, msg
		from cm_mig_pm
		where (msg is null or msg = 'ERROR')
		ORDER BY pk, insert_ts
	loop
		raise notice 'TARGET %', curdata;	
		
		v_pk = curdata.pk;
		v_exe_type = curdata.action_type;
		v_user_nm = null;
		v_equip_pk = null;
		cm_v_dept_pk = null;
		v_pm_user_pk = null;
		
        BEGIN
			--            ش   ڵ尡  ̹   ִ                   .
	        
			select count(*) into v_exist_cnt from cm_pm 
			where pm_no = curdata.pm_no
			and site_id = curdata.site_id;
		
			if (v_exe_type = 'A' and coalesce(v_exist_cnt, 0) > 0) then
				v_exe_type = 'U';
			end if;
			v_exist_cnt = 0;

			--      
			if (coalesce(curdata.user_id, '') <> '') then
				select user_nm into v_user_nm from cm_user_info
				where login_id = curdata.user_id;
				v_user_nm = coalesce(v_user_nm, 'system');
			end if;		
		
			--     
			select equip_pk into v_equip_pk from cm_equipment 
			where equip_cd = curdata.equip_cd and site_id = curdata.site_id;
		
			--  μ 
			select dept_pk into cm_v_dept_pk from cm_dept where dept_cd = curdata.dept_cd;
		
			--      
			select user_pk into v_pm_user_pk from cm_user_info where login_id = curdata.pm_user_id;

			if (v_exe_type = 'U') then
				--     
				UPDATE cm_pm
				SET pm_nm=curdata.pm_nm
				, equip_pk=v_equip_pk
				, pm_type=curdata.pm_type
				, per_number=curdata.per_number
				, cycle_type=curdata.cycle_type
				, sched_start_dt=(case when curdata.sched_start_dt is null then null else to_date(curdata.sched_start_dt, 'YYYY-MM-DD') end)				
				, dept_pk=cm_v_dept_pk
				, pm_user_pk=v_pm_user_pk
				, work_expect_hr=curdata.work_expect_hr
				, work_text=curdata.work_text				
				, update_ts = current_timestamp
				, updater_id = curdata.user_id
				, updater_nm = v_user_nm				
				WHERE pm_no = curdata.pm_no;
				update cm_mig_pm set msg = 'UPDATED!' where pk = curdata.pk;
			
			elseif (v_exe_type = 'A') then
				--    
				INSERT INTO cm_pm(pm_nm, pm_no, pm_no_sort, site_id
					, equip_pk, pm_type, per_number, cycle_type
					, sched_start_dt, dept_pk, pm_user_pk
			     	, work_expect_hr, work_text
				 	, insert_ts, inserter_id, inserter_nm, use_yn, del_yn)
				VALUES (curdata.pm_nm, curdata.pm_no, cast(curdata.pm_no as bigint), curdata.site_id
					, v_equip_pk, curdata.pm_type, curdata.per_number, curdata.cycle_type
					, (case when curdata.sched_start_dt is null then null else to_date(curdata.sched_start_dt, 'YYYY-MM-DD') end)
					, cm_v_dept_pk, v_pm_user_pk
					, curdata.work_expect_hr, curdata.work_text
					, current_timestamp, curdata.user_id, v_user_nm, 'Y', 'N');

				update cm_mig_pm set msg = 'INSERTED!' where pk = curdata.pk;
			
			end if;
        EXCEPTION
            WHEN others THEN
				v_error_message := SQLERRM;
				update cm_mig_pm set msg = 'error' where pk = v_pk;
                insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
				values('MIGRATION', 'cm_prc_mig_pm', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
        END; 
		
		
		v_cnt = v_cnt + 1;		
	end loop;	
	

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	v_error_message := SQLERRM;
	update cm_mig_pm set msg = 'error' where pk = v_pk;
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_mig_pm', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_mig_stor_loc_addr();

CREATE OR REPLACE PROCEDURE public.cm_prc_mig_stor_loc_addr()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_cnt integer;
	v_pk bigint;
	v_up_loc_pk bigint;
	v_exist_cnt integer;
	v_user_nm varchar(30);
	v_exe_type char(1);
	v_error_message varchar(1000);
	v_stor_loc_addr_pk integer;
	curdata record;
begin
-- raise notice 'fntrans';
	-- #############################
	--   ġ    ̱׷  ̼  ó  
	-- call cm_prc_mig_stor_loc_addr()
	-- select count(*) from cm_mig_stor_loc_addr;
	-- select count(*) from cm_stor_loc_addr;
	-- delete from cm_error_log where error_log_title = 'cm_prc_mig_stor_loc_addr'
	-- select * from cm_error_log where error_log_title = 'cm_prc_mig_stor_loc_addr'
	-- update cm_mig_stor_loc_addr set insert_ts = null, msg = null	
	-- #############################
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_STOR_LOC_ADDR', concat(' [MESSAGE] : ', '  ġ    ̱׷  ̼  ó       '));
	
	v_cnt = 1; 
	
	for curdata in
		select pk, action_type, site_id, loc_cd, loc_nm
		, loc_cell_addr, rack_no, level_no, col_no
		, user_id, insert_ts, msg
		from cm_mig_stor_loc_addr
		where (msg is null or msg = 'ERROR')
		order by pk, insert_ts
	loop
		raise notice 'TARGET %', curdata;	
		
		v_pk = curdata.pk;
		v_exe_type = curdata.action_type;
		v_user_nm = null;
		v_stor_loc_addr_pk = null;
		
        begin
	        
	        v_exist_cnt = null;
	       	v_stor_loc_addr_pk = null;
	        
			--            ش   ڵ尡  ̹   ִ                   .
			select count(*) into v_exist_cnt
			from cm_stor_loc_addr t1
			inner join cm_location t2 on t1.loc_cd = t2.loc_cd
			where t1.loc_cd = curdata.loc_cd
			and t1.loc_cell_addr = curdata.loc_cell_addr
			and t1.rack_no = curdata.rack_no
			and t1.level_no = curdata.level_no
			and t1.col_no = curdata.col_no
			and t2.site_id = curdata.site_id;
		

			select max(t1.stor_loc_addr_pk) into v_stor_loc_addr_pk
			from cm_stor_loc_addr t1
			inner join cm_location t2 on t1.loc_cd = t2.loc_cd
			where t1.loc_cd = curdata.loc_cd
			and t1.loc_cell_addr = curdata.loc_cell_addr
			and t1.rack_no = curdata.rack_no
			and t1.level_no = curdata.level_no
			and t1.col_no = curdata.col_no
			and t2.site_id = curdata.site_id;	
		
			if (v_exe_type = 'A' and coalesce(v_exist_cnt, 0) > 0) then
				v_exe_type = 'U';
			end if;
			v_exist_cnt = 0;

			--      
			if (coalesce(curdata.user_id, '') <> '') then
				select user_nm into v_user_nm from cm_user_info
				where login_id = curdata.user_id;
				v_user_nm = coalesce(v_user_nm, 'system');
			end if;	

			if (v_exe_type = 'U') then
				--     
				update cm_stor_loc_addr
				set loc_cd = curdata.loc_cd
				, loc_cell_addr = curdata.loc_cell_addr
				, level_no = curdata.level_no
				, col_no = curdata.col_no
				, update_ts = current_timestamp
				, updater_id = curdata.user_id
				, updater_nm = v_user_nm
				where stor_loc_addr_pk = v_stor_loc_addr_pk;
			
				update cm_mig_stor_loc_addr set msg = 'UPDATED!' where pk = curdata.pk;

			elseif (v_exe_type = 'A') then
				--    
				INSERT INTO cm_stor_loc_addr(loc_cd, loc_cell_addr
				 , rack_no, level_no, col_no
				 , insert_ts, inserter_id, inserter_nm, use_yn)
				VALUES (curdata.loc_cd, curdata.loc_cell_addr
						, curdata.rack_no, curdata.level_no, curdata.col_no
						, current_timestamp, curdata.user_id, v_user_nm, 'Y');

				update cm_mig_stor_loc_addr set msg = 'INSERTED!' where pk = curdata.pk;
			end if;
        EXCEPTION
            WHEN others THEN
				v_error_message := SQLERRM;
				update cm_mig_loc set msg = 'error' where pk = v_pk;
                insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
				values('MIGRATION', 'cm_prc_MIG_STOR_LOC_ADDR', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
        END; 
		
		
		v_cnt = v_cnt + 1;		
	end loop;	
	

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	v_error_message := SQLERRM;
	update cm_mig_loc set msg = 'error' where pk = v_pk;
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_STOR_LOC_ADDR', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_mig_supplier();

CREATE OR REPLACE PROCEDURE public.cm_prc_mig_supplier()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_cnt integer;
	v_pk bigint;
	v_exist_cnt integer;
	v_user_nm varchar(30);
	v_exe_type char(1);
	v_error_message varchar(1000);
	curdata record;
begin
-- raise notice 'fntrans';
	-- #############################
	--    ޾ ü    ̱׷  ̼  ó  
	-- call cm_prc_mig_supplier()
	-- select count(*) from cm_mig_supplier
	-- select count(*) from cm_supplier
	-- delete from cm_error_log where error_log_title = 'cm_prc_mig_supplier'
	-- select * from cm_error_log where error_log_title = 'cm_prc_mig_supplier'
	-- #############################
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_SUPPLIER', concat(' [MESSAGE] : ', '   ޾ ü    ̱׷  ̼  ó       '));
	
	v_cnt = 1; 
	
	for curdata in
		select t.pk, t.action_type, t.site_id, t.supplier_cd, t.supplier_nm
		, concat('CP_', coalesce(t.comp_type, 'M')) as comp_type
		, t.ceo_nm, t.phone, t.email_addr
		, t.charger_nm, t.charger_tel, t.charger2_nm, t.charger2_tel
		, t.business_class_nm, t.nation, t.local, t.homepage, t.address1, t.address2
		, coalesce(t.use_yn, 'Y') as use_yn
		, t.user_id, t.insert_ts, t.msg
		from cm_mig_supplier t
		where (t.msg is null or t.msg = 'ERROR')
		ORDER BY t.pk, t.insert_ts
	loop
		raise notice 'TARGET %', curdata;	
		
		v_pk = curdata.pk;
		v_exe_type = curdata.action_type;
		v_user_nm = null;
		
        BEGIN
			--            ش   ڵ尡  ̹   ִ                   .
			select count(*) into v_exist_cnt from cm_supplier where supplier_cd = curdata.supplier_cd and site_id = curdata.site_id;
			if (v_exe_type = 'A' and coalesce(v_exist_cnt, 0) > 0) then
				v_exe_type = 'U';
			end if;
			v_exist_cnt = 0;

			--      
			if (coalesce(curdata.user_id, '') <> '') then
				select user_nm into v_user_nm from cm_user_info
				where login_id = curdata.user_id;
				v_user_nm = coalesce(v_user_nm, 'system');
			end if;		
			
			if (v_exe_type = 'U') then
				--     
				update cm_supplier
				set supplier_nm = curdata.supplier_nm
				, site_id = curdata.site_id
				, comp_type = curdata.comp_type
				, ceo_nm = curdata.ceo_nm
				, phone = curdata.phone
				, email_addr = curdata.email_addr
				, charger_nm = curdata.charger_nm
				, charger_tel = curdata.charger_tel
				, charger2_nm = curdata.charger2_nm
				, charger2_tel = curdata.charger2_tel
				, business_class_nm = curdata.business_class_nm
				, nation = curdata.nation
				, local = curdata.local
				, homepage = curdata.homepage
				, address1 = curdata.address1
				, address2 = curdata.address2
				, use_yn = case when coalesce(curdata.use_yn, 'Y')  = '' then 'Y' else coalesce(curdata.use_yn, 'Y') end
				, update_ts = current_timestamp
				, updater_id = curdata.user_id
				, updater_nm = v_user_nm
				where supplier_cd = curdata.supplier_cd and site_id = curdata.site_id;

				update cm_mig_supplier set msg = 'UPDATED!' where pk = curdata.pk;
			
			elseif (v_exe_type = 'A') then
				--    
				INSERT INTO cm_supplier(supplier_cd, supplier_nm, site_id, comp_type
						, ceo_nm, phone, email_addr
						, charger_nm, charger_tel, charger2_nm, charger2_tel
						, business_class_nm, nation, local, homepage
						, address1, address2, use_yn
						, insert_ts, inserter_id, inserter_nm, del_yn)
				VALUES (curdata.supplier_cd, curdata.supplier_nm, curdata.site_id, curdata.comp_type
						, curdata.ceo_nm, curdata.phone, curdata.email_addr
						, curdata.charger_nm, curdata.charger_tel, curdata.charger2_nm, curdata.charger2_tel
						, curdata.business_class_nm, curdata.nation, curdata.local, curdata.homepage
						, curdata.address1, curdata.address2
						, case when coalesce(curdata.use_yn, 'Y')  = '' then 'Y' else coalesce(curdata.use_yn, 'Y') end
						, current_timestamp, curdata.user_id, v_user_nm, 'N');

				update cm_mig_supplier set msg = 'INSERTED!' where pk = curdata.pk;
			
			end if;
        EXCEPTION
            WHEN others THEN
				v_error_message := SQLERRM;
				update cm_mig_supplier set msg = 'error' where pk = v_pk;
                insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
				values('MIGRATION', 'cm_prc_MIG_SUPPLIER', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
        END; 
		
		v_cnt = v_cnt + 1;		
	end loop;	
	

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	v_error_message := SQLERRM;
	update cm_mig_supplier set msg = 'error' where pk = v_pk;
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_SUPPLIER', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_mig_user();

CREATE OR REPLACE PROCEDURE public.cm_prc_mig_user()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_cnt integer;
	v_pk bigint;
	cm_v_dept_pk bigint;
	v_new_user_pk bigint;
	v_exist_cnt integer;
	v_user_nm varchar(30);
	v_exe_type char(1);
	v_user_type varchar(10);
	v_role_cd varchar(4);
	v_error_message varchar(1000);
	curdata record;
begin
-- raise notice 'fntrans';
	-- #############################
	--          ̱׷  ̼  ó  
	-- ltmetal salt    ⺻     null   ڿ     
	-- call cm_prc_mig_user()
	-- select count(*) from cm_mig_user
	-- select count(*) from cm_user_info
	-- delete from cm_error_log where error_log_title = 'cm_prc_mig_user';
	-- select * from cm_error_log where error_log_title = 'cm_prc_mig_user' order by error_log_pk desc limit 1000
	-- SELECT nextval('user_info_user_pk_seq')
	-- #############################
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_USER', concat(' [MESSAGE] : ', '         ̱׷  ̼  ó       '));
	
	v_cnt = 1; 
	
	for curdata in
		select pk, action_type, login_id, user_nm, user_password, dept_cd, dept_nm
		, role_cd, user_mail, user_phone, emp_no, job_pos
		, coalesce(allow_login, 'N') as allow_login
		, coalesce(leader_yn, 'N') as leader_yn
		, coalesce(retire_yn, 'N') as retire_yn
		, user_id, insert_ts, msg
		from cm_mig_user
		where (msg is null or msg = 'ERROR')
		order by pk, insert_ts
	loop
		raise notice 'TARGET %', curdata;	
		
		v_pk = curdata.pk;
		v_exe_type = curdata.action_type;
		v_new_user_pk = null;
		cm_v_dept_pk = null;
		v_user_nm = null;
		v_user_type = null;
		v_role_cd = null;
	
        BEGIN
			--            ش   ڵ尡  ̹   ִ                   .
			select count(*) into v_exist_cnt from cm_user_info where login_id = curdata.login_id;
			if (v_exe_type = 'A' and coalesce(v_exist_cnt, 0) > 0) then
				v_exe_type = 'U';
			end if;
			v_exist_cnt = 0;


			--  μ 
			select dept_pk into cm_v_dept_pk from cm_dept where dept_cd = curdata.dept_cd;

			--      
			if (coalesce(curdata.user_id, '') <> '') then
				select user_nm into v_user_nm from cm_user_info
				where login_id = curdata.user_id;
				v_user_nm = coalesce(v_user_nm, 'system');
			end if;	

			--    Һ            
			select user_type, role_cd
			into v_user_type, v_role_cd
			from cm_role where role_cd = curdata.role_cd;
		
			if (v_role_cd is null or v_role_cd = '') then 
				v_role_cd = 'RUC';
			end if;
			if (v_user_type is null or v_user_type = '') then 
				v_user_type = 'UC';
			end if;
		

			if (v_exe_type = 'U') then
				--     
				update cm_user_info
				set user_nm = curdata.user_nm
				, login_id = curdata.login_id
				, user_password = curdata.user_password
				, dept_pk = cm_v_dept_pk
				, user_phone = curdata.user_phone
				, user_mail = curdata.user_mail
				, user_type = v_user_type
				, job_pos = curdata.job_pos
				, allow_login = case when trim(curdata.allow_login)  = '' then 'N' else coalesce(curdata.allow_login, 'N') end
				, leader_yn = case when trim(curdata.leader_yn)  = '' then 'N' else coalesce(curdata.leader_yn, 'N') end
				, update_ts = current_timestamp
				, updater_id = curdata.user_id
				, updater_nm = v_user_nm
				, salt = null
				, del_yn = case when trim(curdata.retire_yn)  = '' then 'N' else coalesce(curdata.retire_yn, 'N') end
				where login_id = curdata.login_id;
			
				update cm_mig_user set msg = 'UPDATED!' where pk = curdata.pk;

			elseif (v_exe_type = 'A') then
			
				SELECT nextval('user_info_user_pk_seq') into v_new_user_pk;	
				--    
				INSERT INTO cm_user_info(user_pk, emp_no, user_nm, login_id, user_password
				 , dept_pk, user_phone, user_mail, salt
				 , user_type, job_pos, leader_yn, allow_login 
				 , admin_yn, job_class_pk, use_lang_cd
				 , insert_ts, inserter_id, inserter_nm, del_yn, use_yn)
				VALUES (v_new_user_pk, curdata.emp_no, curdata.user_nm, curdata.login_id, curdata.user_password
						, cm_v_dept_pk, curdata.user_phone, curdata.user_mail, null
						, v_user_type, curdata.job_pos
						, case when trim(curdata.allow_login)  = '' then 'N' else coalesce(curdata.allow_login, 'N') end
						, case when trim(curdata.leader_yn)  = '' then 'N' else coalesce(curdata.leader_yn, 'N') end 
						, 'N', null, 'ko'
						, current_timestamp, curdata.user_id, v_user_nm
						, case when trim(curdata.retire_yn)  = '' then 'N' else coalesce(curdata.retire_yn, 'N') end
						, 'Y');

				--  ⺻    
				insert into cm_user_role(user_pk, role_cd)
				values(v_new_user_pk, v_role_cd);

				update cm_mig_user set msg = 'INSERTED!' where pk = curdata.pk;
			

			end if;
        EXCEPTION
            WHEN others THEN
				v_error_message := SQLERRM;
				update cm_mig_user set msg = 'error' where pk = v_pk;
			
                insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
				values('MIGRATION', 'cm_prc_MIG_USER', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
        END; 
		
		
		v_cnt = v_cnt + 1;		
	end loop;	
	

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	v_error_message := SQLERRM;
	update cm_mig_user set msg = 'error' where pk = v_pk;
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_USER', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_mig_wo();

CREATE OR REPLACE PROCEDURE public.cm_prc_mig_wo()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_cnt integer;
	v_pk bigint;
	v_exist_cnt integer;
	v_user_nm varchar(30);
	v_exe_type char(1);
	v_error_message varchar(1000);
	v_work_order_approval_pk bigint;
	v_work_order_pk bigint;
	v_rqst_user_pk bigint;
	v_charger_pk bigint;
	v_work_order_no varchar(30);
	v_wo_status_cd varchar(30);
	v_maint_type_cd varchar(30);
	v_temp_wo_no varchar(100);
	v_wo_type varchar(10);
	v_rqst_dpr_yn char(1);
	curdata record;
begin
-- raise notice 'fntrans';
	-- #############################
	--  ۾         ̱׷  ̼  ó  
	-- call cm_prc_mig_wo()
	-- select count(*) from cm_mig_wo
	-- select * from cm_mig_wo where msg = 'error'
	-- select count(*) from cm_work_order 
	-- select * from cm_error_log where error_log_title  = 'cm_prc_mig_wo'
	-- delete from cm_error_log where error_log_title  = 'cm_prc_mig_wo'
	-- delete from cm_work_order
	-- update cm_mig_wo set insert_ts = null, msg = null	
	-- #############################
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_WO', concat(' [MESSAGE] : ', ' ۾         ̱׷  ̼  ó       '));
	
	v_cnt = 1; 
	
	for curdata in
		select t1.pk, t1.action_type, t1.site_id, t1.temp_wo_no
		, t1.wo_type, t1.maint_type_cd, t1.wo_title, t1.wo_status
		, t1.equip_cd, t1.equip_nm, eq.equip_pk
		, t1.req_dt
		, t1.req_bsi_dept_cd, t1.req_bsi_dept_nm, t1.req_dept_cd, t1.req_dept_nm, rd.dept_pk as req_dept_pk
		, t1.req_user_id, t1.req_user_nm
		, t1.req_info, t1.want_dt, t1.broken_dt, t1.broken_hr
		, t1.problem_cd, t1.cause_cd , t1.remedy_cd
		, t1.plan_start_dt, t1.plan_end_dt
		, (case when t1.start_dt is null then concat(t1.plan_start_dt, ' 00:00') else t1.start_dt end) as start_dt
		, (case when t1.end_dt is null then concat(t1.plan_end_dt, ' 23:59') else t1.end_dt end) as end_dt
		, t1.finish_dt
		, t1.dept_cd, t1.dept_nm, d.dept_pk
		, t1.charger_id, t1.charger_nm, cu.user_pk as charger_pk
		, t1.work_desc, t1.tot_cost, t1.mtrl_cost, t1.labor_cost, t1.outside_cost, t1.etc_cost
		, (case when t1.work_src = ' 系' then 'WS01' when t1.work_src = '   ' then 'WS02' when t1.work_src = '    ' then 'WS03' else null end) as work_src
		, t1.user_id, t1.insert_ts, t1.msg
		from cm_mig_wo t1
		left outer join cm_dept d on t1.dept_cd = d.dept_cd
		left outer join cm_dept rd on t1.req_dept_cd = rd.dept_cd
		left outer join cm_equipment eq on t1.equip_cd = eq.equip_cd
		left outer join cm_user_info cu on t1.charger_id = cu.login_id
		left outer join cm_base_code sc on t1.work_src = sc.code_nm and sc.code_grp_cd = 'work_src'
		where (t1.msg is null or t1.msg = 'ERROR')
		and t1.req_user_nm is not null
		order by t1.plan_start_dt, t1.pk, t1.insert_ts
	loop
		raise notice 'TARGET %', curdata;	
		

		v_pk = curdata.pk;
		v_temp_wo_no = curdata.temp_wo_no;
		v_exe_type = curdata.action_type;
		v_user_nm = null;
		v_work_order_approval_pk = null;
		v_work_order_pk = null;
		v_rqst_user_pk = null;
		v_charger_pk = null;
		v_work_order_no = null;
		v_wo_status_cd = null;
		v_maint_type_cd = null;
		v_wo_type = curdata.wo_type;
		v_rqst_dpr_yn = 'N';
	
		if (v_wo_type = 'DPR') then
			v_rqst_dpr_yn = 'Y';
			v_wo_type = 'WO';
		end if;
		
        BEGIN
			--            ش   ڵ尡  ̹   ִ                   .
			select count(*) into v_exist_cnt 
			from cm_work_order where work_order_no = curdata.temp_wo_no
			and site_id = curdata.site_id;
		
			if (v_exe_type = 'A' and coalesce(v_exist_cnt, 0) > 0) then
				v_exe_type = 'U';
			end if;
			v_exist_cnt = 0;

			--      
			if (coalesce(curdata.user_id, '') <> '') then
				select user_nm into v_user_nm from cm_user_info
				where login_id = curdata.user_id;
				v_user_nm = coalesce(v_user_nm, 'system');
			end if;	
		
			--   û  
			select user_pk into v_rqst_user_pk from cm_user_info where login_id = curdata.req_user_id;
			if v_rqst_user_pk is null then
				raise exception using message = '[  û  :REQ_USER_ID NOT_FOUND]', errcode = 'P0001';
			end if;
		
			--    ¸           ã  
			select code_cd into v_wo_status_cd from cm_base_code where code_grp_cd = 'WO_STATUS' and code_nm = curdata.wo_status;
			if ((v_wo_status_cd is null or v_wo_status_cd = '') AND curdata.wo_status = ' ۾   û') then 
				v_wo_status_cd = 'WOS_RQ';
			elsif ((v_wo_status_cd is null or v_wo_status_cd = '') AND curdata.wo_status = ' Ϸ ') then  
				v_wo_status_cd = 'WOS_CL';
			elsif (v_wo_status_cd is null or v_wo_status_cd = '') then 
				v_wo_status_cd = 'WOS_CL';
			end if;
			
			--                 ڵ  ã  
			select code_cd into v_maint_type_cd from cm_base_code where code_grp_cd = 'MAINT_TYPE' and code_nm = curdata.maint_type_cd;
			if (v_maint_type_cd is null or v_maint_type_cd = '') then 
				v_maint_type_cd = 'MAINT_TYPE_BM';
			end if;
			
			if (v_exe_type = 'U') then
				--     
				update cm_mig_wo set msg = 'UPDATED!' where pk = curdata.pk;

			elseif (v_exe_type = 'A') then
				--    
				select nextval('work_order_approval_work_order_approval_pk_seq') into v_work_order_approval_pk;
				
				insert into cm_work_order_approval(work_order_approval_pk
				, rqst_dt, rqst_user_nm, rqst_user_pk
				, accept_dt, accept_user_nm, accept_user_pk
				, appr_dt, appr_user_nm, appr_user_pk
				, finish_dt, finish_user_nm, finish_user_pk
				, reg_dt, reg_user_nm, reg_user_pk, wo_status)
				values(v_work_order_approval_pk
						, to_timestamp(curdata.req_dt, 'YYYY-MM-DD HH24:MI'), curdata.req_user_nm, v_rqst_user_pk
					   , to_timestamp(curdata.finish_dt, 'YYYY-MM-DD HH24:MI'), curdata.charger_nm, curdata.charger_pk
					   , to_timestamp(curdata.finish_dt, 'YYYY-MM-DD HH24:MI'), curdata.charger_nm, curdata.charger_pk
					   , to_timestamp(curdata.finish_dt, 'YYYY-MM-DD HH24:MI'), curdata.charger_nm, curdata.charger_pk
					   , to_timestamp(curdata.req_dt, 'YYYY-MM-DD HH24:MI'), curdata.req_user_nm, v_rqst_user_pk
					   , 'WOS_RQ'
				);

				select coalesce(
					MAX(
					(
						select sub_table.work_order_no 
						from (
							select max(cast(work_order_no as integer)) as work_order_no
							from cm_work_order 
							WHERE (work_order_no ~ E'^[0-9]+$') = true
							and site_id = curdata.site_id
						) as sub_table
					)) + 1
					, '1') into v_work_order_no
				from cm_work_order;

				select nextval('work_order_work_order_pk_seq') into v_work_order_pk;
				
				insert into cm_work_order(work_order_pk, dept_pk, req_dept_pk, equip_pk, req_dept_busi_cd
				  , temp_no, work_order_no, work_title, work_order_sort
				   , work_text, maint_type_cd
				   , plan_start_dt, plan_end_dt, start_dt, end_dt, want_dt
				   , wo_status, work_charger_pk, work_src_cd, tot_cost, breakdown_dt, breakdown_min, req_info
				   , appr_line, appr_line_next, wo_type, rqst_dpr_yn
				   , work_order_approval_pk
				   , problem_cd, cause_cd, remedy_cd, site_id
				   , insert_ts, inserter_id, inserter_nm)
				VALUES (v_work_order_pk, curdata.dept_pk, curdata.req_dept_pk, curdata.equip_pk, curdata.req_bsi_dept_cd
						, curdata.temp_wo_no, v_work_order_no, curdata.wo_title, cast(v_work_order_no as bigint)
						, curdata.work_desc, v_maint_type_cd
						, to_date(curdata.plan_start_dt, 'YYYY-MM-DD')
						, to_date(curdata.plan_end_dt, 'YYYY-MM-DD')
						, to_timestamp(curdata.start_dt, 'YYYY-MM-DD HH24:MI')
						, to_timestamp(curdata.end_dt, 'YYYY-MM-DD HH24:MI')
						, to_date(curdata.want_dt, 'YYYY-MM-DD')
						, v_wo_status_cd
						, coalesce(curdata.charger_pk, v_charger_pk)
						, curdata.work_src
						, (case when curdata.tot_cost is null or curdata.tot_cost = '' then null else cast(replace(curdata.tot_cost, ',', '') as bigint) end)
						, to_timestamp(curdata.broken_dt, 'YYYY-MM-DD HH24:MI')
						, (case when curdata.broken_hr is null or curdata.broken_hr = '' then null else cast(curdata.broken_hr as numeric(10,2)) end)
						, curdata.req_info, 'RQ,AP,CL', 'CL', curdata.wo_type
						, v_work_order_approval_pk
				   		, curdata.problem_cd, curdata.cause_cd, curdata.remedy_cd, curdata.site_id
						, to_timestamp(curdata.req_dt, 'YYYY-MM-DD HH24:MI'), curdata.req_user_id, curdata.req_user_nm);

				--      ̷    û,  Ϸ 
				insert into cm_work_order_hist(after_status, before_status, change_reason, change_ts, changer_nm, changer_pk, work_order_pk)
				values('WOS_RQ', 'WOS_RQ', '  û( ý   )', to_timestamp(curdata.req_dt, 'YYYY-MM-DD HH24:MI'), curdata.req_user_nm, v_rqst_user_pk, v_work_order_pk);
				insert into cm_work_order_hist(after_status, before_status, change_reason, change_ts, changer_nm, changer_pk, work_order_pk)
				values('WOS_CL', 'WOS_RQ', ' Ϸ ( ý   )', to_timestamp(curdata.finish_dt, 'YYYY-MM-DD HH24:MI'), curdata.charger_nm, curdata.charger_pk, v_work_order_pk);

				update cm_mig_wo set msg = 'INSERTED!' where pk = curdata.pk;
			end if;
        EXCEPTION
            WHEN others THEN
				v_error_message := SQLERRM;
				update cm_mig_wo set msg = 'error' where pk = v_pk;
                insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
				values('MIGRATION', 'cm_prc_MIG_WO', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
        END; 
		
		v_cnt = v_cnt + 1;		
	end loop;	

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	v_error_message := SQLERRM;
	update cm_mig_wo set msg = 'error' where pk = v_pk;
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_WO', ' [MESSAGE : ' || v_pk::text || '] : ' || v_error_message);
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_mig_wo_fault_loc();

CREATE OR REPLACE PROCEDURE public.cm_prc_mig_wo_fault_loc()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_cnt integer;
	v_pk bigint;
	v_exist_cnt integer;
	v_exe_type char(1);
	v_error_message varchar(1000);
	v_temp_wo_no varchar(30);
	v_work_order_pk bigint;
	v_cause_count integer;
	curdata record;
begin

	-- #############################
	--    ̱׷  ̼         
	-- call cm_prc_mig_wo_fault_loc()
	-- select count(*) from cm_mig_wo_fault_loc
	-- select * from cm_mig_wo_fault_loc where msg = 'error'
	-- select count(*) from cm_wo_fault_loc
	-- select * from cm_error_log where error_log_title  = 'cm_prc_mig_wo_fault_loc'
	-- delete from cm_error_log where error_log_title  = 'cm_prc_mig_wo_fault_loc'
	-- delete from cm_wo_fault_loc
	-- update cm_mig_wo_fault_loc set insert_ts = null, msg = null
	-- #############################
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_WO_FAULT_LOC', concat(' [MESSAGE] : ', '           ̱׷  ̼  ó       '));
	
	v_cnt = 1; 
	
	for curdata in
		select pk, action_type, temp_wo_no, fault_loc_cd, fault_loc_nm
		, cause_cd, cause_nm
		, user_id, insert_ts, msg, site_id
		from cm_mig_wo_fault_loc
		where (msg is null or msg = 'error')
		order by pk,insert_ts 
	loop
		-- raise notice 'TARGET %', curdata;	
		v_pk = curdata.pk;
		v_temp_wo_no = curdata.temp_wo_no;
		v_exe_type = curdata.action_type;
		v_work_order_pk = null;
		v_cause_count = 0;
		v_exist_cnt = 0;
		
        begin
	        
			-- work_order
			select work_order_pk into v_work_order_pk
			from cm_work_order
			where temp_no = curdata.temp_wo_no
			and site_id = curdata.site_id;
			
			if v_work_order_pk is null then
				insert into cm_error_log(error_log_pk, error_log_type, error_log_title, error_log_desc)
				values(seq_error_log_id.nextval, 'migration', 'cm_prc_MIG_WO_FAULT_LOC', '[work_order_pk not_found]' || v_temp_wo_no);			
			end if;
		
		
			--            ش   ڵ尡  ̹   ִ                   .
			select count(*) into v_exist_cnt 
			from cm_wo_fault_loc 
			where work_order_pk = v_work_order_pk
			and upper(fault_loc_cd) = upper(curdata.fault_loc_cd);
		
		
			if (trim(curdata.cause_cd) is not null) then
				select count(*) into v_cause_count
				from cm_reliab_codes rc where upper(rc.types) = upper('cc') 
				and upper(reliab_cd) = upper(curdata.cause_cd) and rc.site_id = curdata.site_id;
			
				if (v_cause_count is null or v_cause_count = 0) then 
					insert into cm_error_log(error_log_pk, error_log_type, error_log_title, error_log_desc)
					values(seq_error_log_id.nextval, 'migration', 'cm_prc_mig_wo_fault_loc', '[cause_cd not_found]' || v_temp_wo_no);	
				end if;
			end if;
		
			if (v_exe_type = 'A' and coalesce(v_exist_cnt, 0) > 0) then
				v_exe_type = 'U';
			end if;
			v_exist_cnt = 0;

			if (v_exe_type = 'U') then
				--     
				update cm_wo_fault_loc 
				set cause_cd = curdata.cause_cd
				where work_order_pk = v_work_order_pk and upper(fault_loc_cd) = upper(curdata.fault_loc_cd);
			
				update cm_mig_wo_fault_loc set msg = 'updated!' where pk = curdata.pk;			
			
			elsif (v_exe_type = 'A') then
				--    
				insert into cm_wo_fault_loc(work_order_pk
					, fault_loc_cd
			     	, cause_cd
				 	, insert_dt
				 	, inserter_id)
				values (v_work_order_pk
					, curdata.fault_loc_cd
					, curdata.cause_cd
					, current_timestamp, 'system');
				update cm_mig_equip_chk_mst set msg = 'inserted!' where pk = curdata.pk;
			end if;
        EXCEPTION
            WHEN others THEN
				v_error_message := SQLERRM;
				update cm_mig_equip_chk_mst set msg = 'error' where pk = v_pk;
                insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
				values('MIGRATION', 'cm_prc_MIG_WO_FAULT_LOC', concat(' [MESSAGE] : (pk: ', v_temp_wo_no, ')',  SQLERRM));
        END; 
		
		
		v_cnt = v_cnt + 1;		
	end loop;	
	

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	v_error_message := SQLERRM;
	update cm_mig_equip_chk_mst set msg = 'error' where pk = v_pk;
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('MIGRATION', 'cm_prc_MIG_WO_FAULT_LOC', concat(' [MESSAGE] : ', SQLERRM));
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_mttr_mtbf_info_ins();

CREATE OR REPLACE PROCEDURE public.cm_prc_mttr_mtbf_info_ins()
 LANGUAGE plpgsql
AS $procedure$
declare
	curmttr record;
	curmtbf record;
begin

	INSERT INTO cm_ERROR_LOG(ERROR_LOG_TYPE, ERROR_LOG_TITLE, ERROR_LOG_DESC)
	VALUES('SCH_MTTR_MTBF_INFO_INS_JOB', '     0   30 п      ', 'START!');


	delete from cm_mttr_mtbf_info where info_year = to_char(now(), 'YYYY') and info_type = 'MTTR';
	delete from cm_mttr_mtbf_info where info_year = to_char(now(), 'YYYY') and info_type = 'MTBF';
	
	-- **************************************************
	--    ر   .
	-- MTTR(     ū        10  ), MTBF(                10  )
	-- **************************************************
	for curmttr in
		with t as (
			select to_char(now(), 'YYYY') as info_year, 'MTTR' as info_type, eq.equip_cd, eq.site_id
			, (case when count(*) = 0 then 0 else round(sum(cast(wo.breakdown_min as numeric))/count(*), 1) end) as mttr
			from cm_work_order wo
			inner join cm_equipment eq on wo.equip_pk = eq.equip_pk and wo.site_id = eq.site_id
			left outer join cm_import_rank irn on eq.import_rank_pk = irn.import_rank_pk
			inner join cm_equip_category ec on eq.equip_category_id = ec.equip_category_id
			where wo.wo_type = 'WO'
			and wo.maint_type_cd = 'MAINT_TYPE_BM'
			and wo.wo_status = 'WOS_CL'
			and to_char(wo.breakdown_dt, 'YYYY') = to_char(now(), 'YYYY')
			group by eq.equip_cd, eq.equip_nm, eq.site_id
			order by (case when count(*) = 0 then 0 else round(sum(cast(wo.breakdown_min as numeric))/count(*), 1) end) desc 
		)
		select row_number() over (order by t.mttr desc) as disp_ordr, t.info_year, t.info_type
		, t.equip_cd, t.mttr, t.site_id
		from t
	loop
		raise notice 'TARGET %', curmttr;	
		
		
		insert into cm_mttr_mtbf_info(info_year, info_type, disp_ordr, equip_cd, site_id, mt_val)
		values(curmttr.info_year, curmttr.info_type, curmttr.disp_ordr, curmttr.equip_cd, curmttr.site_id, curmttr.mttr);	
	end loop;		
	
	
	for curmtbf in
		with tt as (
			select eq.equip_cd, eq.equip_nm, eq.site_id
			, count(*) as broken_cnt, sum(wo.breakdown_min) as broken_hr
			, (case when count(*) = 0 then 0 else round(sum(cast(wo.breakdown_min as numeric))/count(*), 1) end) as mttr
			, (EXTRACT(EPOCH FROM cm_max(wo.end_dt) - 
					   (case when min(wo.breakdown_dt) < to_date(concat(to_char(now(),'YYYY'),'-01-01'),'YYYY-MM-DD') then 
						min(wo.breakdown_dt) else to_date(concat(to_char(now(),'YYYY'),'-01-01'),'YYYY-MM-DD') end))/3600) AS oper_hr			
			from cm_work_order wo
			inner join cm_equipment eq on wo.equip_pk = eq.equip_pk and wo.site_id = eq.site_id 
			where wo.wo_type = 'WO'
			and wo.maint_type_cd = 'MAINT_TYPE_BM'
			and wo.wo_status = 'WOS_CL'
			and to_char(wo.breakdown_dt, 'YYYY') = to_char(now(), 'YYYY')
			group by eq.equip_cd, eq.equip_nm, eq.install_dt, eq.site_id
		)
		, vo as (
			select tt.*
			, round(cast(tt.oper_hr - tt.broken_hr as numeric)/tt.broken_cnt, 1) as mtbf
			from tt
		)
		select to_char(now(), 'YYYY') as info_year, 'MTBF' as info_type, vo.equip_cd, vo.equip_nm, vo.mtbf, vo.site_id
		, row_number() over (order by vo.mtbf) as disp_ordr
		from cm_vo
	loop
		raise notice 'TARGET %', curmtbf;	
		
		insert into cm_mttr_mtbf_info(info_year, info_type, disp_ordr, equip_cd, site_id, mt_val)
		values(curmtbf.info_year, curmtbf.info_type, curmtbf.disp_ordr, curmtbf.equip_cd, curmtbf.site_id, curmtbf.mtbf);	
	end loop;
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('stat', 'cm_prc_mttr_mtbf_info_ins', concat(' [MESSAGE] :            ó   Ǿ    ϴ .'));	
	
EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('stat', 'cm_prc_mttr_mtbf_info_ins', concat(' [MESSAGE] : ', SQLERRM));
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_pm_insp_alarm_ins();

CREATE OR REPLACE PROCEDURE public.cm_prc_pm_insp_alarm_ins()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_yearmon character varying(6);
begin
raise notice 'fntrans';

	insert into cm_error_log(error_log_type, error_log_title, error_log_desc, insert_ts)
	values('cm_prc_pm_insp_alarm_ins', '     0   30 п      ', 'START!', current_timestamp);

    call cm_prc_pm_plan_alarm_ins();

    call cm_prc_pm_notdone_alarm_ins();

    call cm_prc_insp_plan_alarm_ins();

    call cm_prc_insp_notdone_alarm_ins();
	
	return;

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('system', 'cm_prc_pm_insp_alarm_ins', concat('ERROR [MESSAGE] : ', SQLERRM));
	return;
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_pm_notdone_alarm_ins();

CREATE OR REPLACE PROCEDURE public.cm_prc_pm_notdone_alarm_ins()
 LANGUAGE plpgsql
AS $procedure$
declare
	v_user_pk bigint;
	v_user_nm varchar(50);
	v_login_id varchar(50);
	v_contents text;
	v_template text;
	v_exists boolean;
	v_tot_cnt integer;
	v_site_id varchar(20);
	curdata record;
	cur_charger record;
begin
	-- **************************************************
	--      ٸ  :                 PM ̽ǽ        ˶   ߼ 
	----------------------------------------------------------------
	-- 2022.06.09 :  ˸     ڸ  PM WO    ڷ      , 
	--				 ˸               ǿ            , PLAN_START_DT           
	--    ν           : cm_prc_pmnotdone_alarm_ins -> cm_prc_pm_notdone_alarm_ins
	-- **************************************************
	
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('system', 'cm_prc_pm_notdone_alarm_ins', 'start!');

	v_exists = false;
	
	v_template = '<br><hr>
	PM   ȣ : #PM_NO#<br>
	PM   : #PM_NM#<br>
	PM   ȹ   : #START_DATE#<br>
	      : #EQUIP_NM#
	';
	
	--        (2022.03.25, seokjun.choi)
	--    :           /      ߼     δ       ׷     ɼ           . 
	--     sys_opt       /      ߼ۿ  δ        ߼   ÿ   Ǵܿ          ؾ    .	
	/*
	select (ext_opts -> 'smsSndrYn')::text as smsSndrYn, (ext_opts -> 'mailSndrYn')::text as mailSndrYn 
	into v_sms_sndr_yn, v_mail_sndr_yn
	from cm_sys_opt
	;*/

	--  ý  ۰    ڸ  ó   ڷ 
	select user_pk, user_nm, login_id
	into v_user_pk, v_user_nm, v_login_id
	from cm_user_info where login_id = 'system' limit 1;
	

	for cur_charger in 
		select wo.work_charger_pk, ui.user_nm, ui.login_id, ui.user_phone
		, ui.user_mail, count(wo.work_order_pk) as cnt, wo.site_id
		from cm_work_order wo
		inner join cm_pm p on wo.pm_pk = p.pm_pk
		inner join cm_equipment eq on wo.equip_pk = eq.equip_pk
		inner join cm_user_info ui on wo.work_charger_pk = ui.user_pk 
		where wo.wo_type = 'PM' and wo.pm_pk is not null
		and wo.wo_status = 'WOS_AP'
		and eq.environ_equip_yn = 'Y'
		and to_char(wo.plan_start_dt, 'YYYY-MM') = to_char(now(), 'YYYY-MM')
		and to_char(wo.plan_start_dt, 'YYYY-MM-DD') <= to_char(now() + ' -1 days', 'YYYY-MM-DD')
		group by wo.work_charger_pk, ui.user_nm, ui.login_id, ui.user_phone, ui.user_mail, wo.site_id
	LOOP
		v_tot_cnt = cur_charger.cnt;
		v_exists = false;
		v_contents = '';
	
		-- PM ̽ǽð 
		--           ø      ó  .
		for curdata in
			select p.pm_nm , p.pm_no, to_char(wo.plan_start_dt, 'YYYY   MM   DD  ') as plan_start_dt, eq.equip_nm
			from cm_work_order wo
			inner join cm_pm p on wo.pm_pk = p.pm_pk
			inner join cm_equipment eq on wo.equip_pk = eq.equip_pk
			where wo.wo_type = 'PM' and wo.pm_pk is not null
			and wo.wo_status = 'WOS_AP'
			and eq.environ_equip_yn = 'Y'
			and wo.work_charger_pk = cur_charger.work_charger_pk
			and to_char(wo.plan_start_dt, 'YYYY-MM') = to_char(now(), 'YYYY-MM')
			and to_char(wo.plan_start_dt, 'YYYY-MM-DD') <= to_char(now() + ' -1 days', 'YYYY-MM-DD')
			and wo.site_id = cur_charger.site_id
			and eq.site_id = cur_charger.site_id
			and p.site_id = cur_charger.site_id
			limit 20
		loop
			raise notice 'TARGET %', curdata;	
			v_contents = concat(v_contents, replace(replace(replace(replace(v_template
								, '#PM_NO#', curdata.pm_no), '#PM_NM#', curdata.pm_nm), '#START_DATE#', curdata.plan_start_dt), '#EQUIP_NM#', curdata.equip_nm));
			v_exists = true;		
		end loop;	
		
		--           Ǽ  ǥ  
		v_contents = concat('<h3>[ ̽ǽ  PM    ', v_tot_cnt, '  ]</h3><span style="font-size: 10pt; font-weight: normal;"><i>(                 ִ  20   ǥ õ˴ϴ .)</i></span>', v_contents);
		
	
		if v_exists then
			--  ˶         (sms)
			INSERT INTO cm_anoti_sms_hist(alarm_noti_grp_pk, sms_content, sms_sndr_no
			, sms_rcvr_no, sms_rcvr_id
			, result_type, insert_ts, inserter_id, site_id)
			select ang.alarm_noti_grp_pk
			, substring(replace(ang.sms_content, '@contents', v_contents), 1, 150)
			, ang.sms_sndr_no
			, cur_charger.user_phone, cur_charger.login_id
			, 'W', current_timestamp, v_login_id
			, cur_charger.site_id
			from cm_alarm_noti_grp ang
			where ang.noti_grp_type = 'NGT-P02'
			and ang.sms_snd_yn = 'Y'
			and cur_charger.user_phone is not null ;		
		end if;
	
		if v_exists then
			--  ˶         (mail)
			INSERT INTO cm_anoti_mail_hist(alarm_noti_grp_pk, mail_title, mail_content
			, mail_sndr_addr, mail_rcvr_addr, mail_rcvr_id
			, result_type, insert_ts, inserter_id, site_id)
			select ang.alarm_noti_grp_pk, ang.mail_title
			, substring(replace(ang.mail_content, '@contents', v_contents), 1, 4000)
			, ang.mail_sndr_addr, cur_charger.user_mail, cur_charger.login_id
			, 'W', current_timestamp, v_login_id
			, cur_charger.site_id
			from cm_alarm_noti_grp ang
			where ang.noti_grp_type = 'NGT-P02'
			and ang.mail_snd_yn = 'Y'
			and cur_charger.user_mail is not null ;	
		end if;	
	end loop;



/*
	select count(*) into v_tot_cnt
	from cm_work_order wo
	inner join cm_pm p on wo.pm_pk = p.pm_pk
	inner join cm_equipment eq on wo.equip_pk = eq.equip_pk
	where wo.wo_type = 'PM' and wo.pm_pk is not null
	and wo.wo_status = 'WOS_AP'
	and eq.environ_equip_yn = 'Y'
	and to_char(wo.end_dt, 'YYYY-MM-DD') <= to_char(now() + ' -1 days', 'YYYY-MM-DD')
	;
		
	-- PM ̽ǽð 
	--           ø      ó  .
	for curdata in
		select p.pm_nm , p.pm_no, to_char(wo.start_dt, 'YYYY   MM   DD  ') as start_date, eq.equip_nm
		from cm_work_order wo
		inner join cm_pm p on wo.pm_pk = p.pm_pk
		inner join cm_equipment eq on wo.equip_pk = eq.equip_pk
		where wo.wo_type = 'PM' and wo.pm_pk is not null
		and wo.wo_status = 'WOS_AP'
		and eq.environ_equip_yn = 'Y'
		and to_char(wo.end_dt, 'YYYY-MM-DD') <= to_char(now() + ' -1 days', 'YYYY-MM-DD')
		limit 20
	loop
		raise notice 'TARGET %', curdata;	
		v_contents = concat(v_contents, replace(replace(replace(replace(v_template
							, '#PM_NO#', curdata.pm_no), '#PM_NM#', curdata.pm_nm), '#START_DATE#', curdata.start_date), '#EQUIP_NM#', curdata.equip_nm));
		v_exists = true;		
	end loop;	
	
	--           Ǽ  ǥ  
	v_contents = concat('<h3>[ ̽ǽ  PM    ', v_tot_cnt, '  ]</h3><span style="font-size: 10pt; font-weight: normal;"><i>(                 ִ  20   ǥ õ˴ϴ .)</i></span>', v_contents);
	

	--if coalesce(v_sms_sndr_yn, '') = 'true' and v_exists then
	if v_exists then
		--  ˶         (sms)
		INSERT INTO cm_anoti_sms_hist(alarm_noti_grp_pk, sms_content, sms_sndr_no
		, sms_rcvr_no, sms_rcvr_id
		, result_type, insert_ts, inserter_id, inserter_nm)
		select ang.alarm_noti_grp_pk
		, substring(replace(ang.sms_content, '@contents', v_contents), 1, 150)
		, ang.sms_sndr_no
		, ui.user_phone, ui.login_id
		, 'W', current_timestamp, v_login_id, v_user_nm
		from cm_alarm_noti_grp ang
		inner join cm_alarm_noti_user anu on ang.alarm_noti_grp_pk = anu.alarm_noti_grp_pk
		inner join cm_user_info ui on anu.user_pk = ui.user_pk
		where ang.noti_grp_type = 'NGT-P02'
		and ang.sms_snd_yn = 'Y'
		and anu.noti_yn = 'Y' 
		and ui.user_phone is not null ;		
	end if;

	--if coalesce(v_mail_sndr_yn, '') = 'true' and v_exists then
	if v_exists then
		--  ˶         (mail)
		INSERT INTO cm_anoti_mail_hist(alarm_noti_grp_pk, mail_title, mail_content
		, mail_sndr_addr, mail_rcvr_addr
		, result_type, insert_ts, inserter_id, inserter_nm)
		select ang.alarm_noti_grp_pk, ang.mail_title
		, substring(replace(ang.mail_content, '@contents', v_contents), 1, 4000)
		, ang.mail_sndr_addr, ui.user_mail
		, 'W', current_timestamp, v_login_id, v_user_nm
		from cm_alarm_noti_grp ang
		inner join cm_alarm_noti_user anu on ang.alarm_noti_grp_pk = anu.alarm_noti_grp_pk
		inner join cm_user_info ui on anu.user_pk = ui.user_pk
		where ang.noti_grp_type = 'NGT-P02'
		and ang.mail_snd_yn = 'Y'
		and anu.noti_yn = 'Y' and ui.user_mail is not null ;	
	end if;
*/

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('system', 'cm_prc_pm_notdone_alarm_ins', concat(' [MESSAGE] : ', SQLERRM));
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_pm_plan_alarm_ins();

CREATE OR REPLACE PROCEDURE public.cm_prc_pm_plan_alarm_ins()
 LANGUAGE plpgsql
AS $procedure$
declare
	--v_sms_sndr_yn varchar(10); 
	--v_mail_sndr_yn varchar(10); 
	v_pm_plan_out varchar(10); 
	v_pm_plan_out_day integer;
	v_user_pk bigint;
	v_user_nm varchar(50);
	v_login_id varchar(50);
	v_site_id varchar(20);
	v_contents text;
	v_template text;
	v_exists boolean;
	cur_charger record;
	curdata record;
	cursite record;
	v_tot_cnt integer;
begin
	-- **************************************************
	-- PM   ȹ    ˸  :      = (PLAN_DT - 3)    PM ǿ     ؼ   ˸ ó   
	--         ش  ȹ   N     ΰ     ,  ̸    ȹ    ǿ     ؼ   ˸     ִ° 
	-- N   : SYS_OPT.SCHE_JSON.pmPlanOutOfDate
	----------------------------------------------------------------
	-- 2022.06.09 :  ˸     ڸ  PM WO    ڷ      , 
	--				 ˸               ǿ            , PLAN_START_DT           
	--    ν           : cm_prc_pmplan_out_alarm_ins -> cm_prc_pm_plan_alarm_ins
	-- **************************************************

	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('system', 'cm_prc_pm_plan_alarm_ins', 'start!');

	-- 2023.04.11     Ʈ     ó  
	for cursite in
		select s.site_id
		from cm_sites s 
		where s.status = 'A'
	loop
		raise notice 'TARGET %', cursite;	
	
		--  ⺻   3  
		v_exists = false;
		v_pm_plan_out = '';
		v_pm_plan_out_day = 3;
		v_user_pk = null;
		v_user_nm = ''; 
		v_login_id = '';
		v_tot_cnt = 0;
	
		v_contents = '';
		v_template = '<br><hr>
		PM   ȣ : #PM_NO#<br>
		PM   : #PM_NM#<br>
		PM   ȹ   : #START_DATE#<br>
		      : #EQUIP_NM#
		';
		
		--        (2022.03.25, seokjun.choi)
		--    :           /      ߼     δ       ׷     ɼ           . 
		--     site_config     /      ߼ۿ  δ        ߼   ÿ   Ǵܿ          ؾ    .
		select (sche_opts -> 'pmPlanOutOfDate')
		into v_pm_plan_out
		from cm_site_config 
		where site_id = cursite.site_id;
		
		v_pm_plan_out_day = cast(replace(v_pm_plan_out, '"', '') as integer);
	
		--  ý  ۰    ڸ  ó   ڷ 
		select user_pk, user_nm, login_id
		into v_user_pk, v_user_nm, v_login_id
		from cm_user_info where login_id = 'system' limit 1;
	
	
		for cur_charger in 
			select wo.work_charger_pk, ui.user_nm, ui.login_id, ui.user_phone, ui.user_mail
			, count(wo.work_order_pk) as cnt, wo.site_id
			from cm_work_order wo
			inner join cm_pm p on wo.pm_pk = p.pm_pk
			inner join cm_equipment eq on wo.equip_pk = eq.equip_pk 
			inner join cm_user_info ui on wo.work_charger_pk = ui.user_pk 
			where wo.wo_type = 'PM' and wo.pm_pk is not null
			and wo.wo_status = 'WOS_AP'
			and wo.site_id = cursite.site_id
			and to_char(wo.plan_start_dt, 'YYYY-MM-DD') = to_char(now() - (v_pm_plan_out_day || ' ' || 'days')::INTERVAL, 'YYYY-MM-DD')
			group by wo.work_charger_pk, ui.user_nm, ui.login_id, ui.user_phone, ui.user_mail  , wo.site_id
		LOOP
			v_tot_cnt = cur_charger.cnt;
			v_exists = false;
			v_contents = '';
		
			--     ں   ߼               
			for curdata in
				select p.pm_nm , p.pm_no, to_char(wo.plan_start_dt, 'YYYY   MM   DD  ') as plan_start_dt, eq.equip_nm
				from cm_work_order wo
				inner join cm_pm p on wo.pm_pk = p.pm_pk
				inner join cm_equipment eq on wo.equip_pk = eq.equip_pk 
				where wo.wo_type = 'PM' 
				and wo.pm_pk is not null
				and wo.wo_status = 'WOS_AP'
				and wo.work_charger_pk = cur_charger.work_charger_pk
				and to_char(wo.plan_start_dt, 'YYYY-MM-DD') = to_char(now() - (v_pm_plan_out_day || ' ' || 'days')::INTERVAL, 'YYYY-MM-DD')
				and wo.site_id = cursite.site_id
				and eq.site_id = cursite.site_id
				and p.site_id = cursite.site_id
				order by wo.plan_start_dt 	
				limit 20
			loop
				v_contents = concat(v_contents, replace(replace(replace(replace(v_template
									, '#PM_NO#', curdata.pm_no), '#PM_NM#', curdata.pm_nm)
									, '#START_DATE#', curdata.plan_start_dt), '#EQUIP_NM#', curdata.equip_nm));
				v_exists = true;							
			end loop;	
		
		
			--           Ǽ  ǥ  
			v_contents = concat('<h3>[PM  ȹ', v_pm_plan_out_day, '      ˸ ,    ', v_tot_cnt, '  ]</h3><span style="font-size: 10pt; font-weight: normal;"><i>(                 ִ  20   ǥ õ˴ϴ .)</i></span>', v_contents);
			
			if v_exists then
				--  ˶         (sms)
				INSERT INTO cm_anoti_sms_hist(alarm_noti_grp_pk, sms_content, sms_sndr_no
				, sms_rcvr_no, sms_rcvr_id
				, result_type, insert_ts, inserter_id, site_id)
				select ang.alarm_noti_grp_pk
				, substring(replace(ang.sms_content, '@contents', v_contents), 1, 150)
				, ang.sms_sndr_no
				, cur_charger.user_phone, cur_charger.login_id
				, 'W', current_timestamp, v_login_id
				, cursite.site_id
				from cm_alarm_noti_grp ang
				where ang.noti_grp_type = 'NGT-P01'
				and ang.sms_snd_yn = 'Y'
				and cur_charger.user_phone is not null ;		
			end if;
		
			if v_exists then
				--  ˶         (mail)
				INSERT INTO cm_anoti_mail_hist(alarm_noti_grp_pk, mail_title, mail_content
				, mail_sndr_addr, mail_rcvr_addr, mail_rcvr_id 
				, result_type, insert_ts, inserter_id, site_id)
				select ang.alarm_noti_grp_pk, ang.mail_title
				, substring(replace(ang.mail_content, '@contents', v_contents), 1, 4000)
				, ang.mail_sndr_addr, cur_charger.user_mail, cur_charger.login_id
				, 'W', current_timestamp, v_login_id
				, cursite.site_id
				from cm_alarm_noti_grp ang
				where ang.noti_grp_type = 'NGT-P01'
				and ang.mail_snd_yn = 'Y'
				and cur_charger.user_mail is not null ;	
			end if;	
		
		end loop;
	
	end loop;

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('system', 'cm_prc_pm_plan_alarm_ins', concat(' [MESSAGE] : ', SQLERRM));
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_safety_stock_alarm_ins(int8, varchar, varchar, varchar, varchar, varchar, varchar);

CREATE OR REPLACE PROCEDURE public.cm_prc_safety_stock_alarm_ins(v_mtrl_pk bigint, v_own_dept_cd character varying, v_inout_loc_cd character varying, v_loc_cell_addr character varying, v_inout_uprice character varying, v_ab_grade character varying, v_year_mon character varying)
 LANGUAGE plpgsql
AS $procedure$
declare
	v_user_pk bigint;
	v_user_nm varchar(50);
	v_login_id varchar(50);
	v_site_id varchar(20);
	v_equip_nm varchar(100);
	v_equip_tag_desc varchar(100);
	v_loc_nm varchar(100);
	cm_v_dept_nm varchar(100);
	v_mtrl_name varchar(100);
	v_mtrl_code varchar(100);
	v_mtrl_sstock varchar(100);
	v_mtrl_cstock varchar(100);
	v_exist_cnt integer;
	-- v_own_dept_pk bigint;
	--v_sms_sndr_yn varchar(10); 
	--v_mail_sndr_yn varchar(10); 
begin
	-- **************************************************
	--               ˸ 
	-- **************************************************
	

	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('system', 'cm_prc_safety_stock_alarm_ins', 'start!');

	--        (2022.03.25, seokjun.choi)
	--    :           /      ߼     δ       ׷     ɼ           . 
	--     sys_opt       /      ߼ۿ  δ        ߼   ÿ   Ǵܿ          ؾ    .	
	/*
	v_sms_sndr_yn = '';
	v_mail_sndr_yn = '';

	select (ext_opts -> 'smsSndrYn')::text as smsSndrYn, (ext_opts -> 'mailSndrYn')::text as mailSndrYn 
	into v_sms_sndr_yn, v_mail_sndr_yn
	from cm_sys_opt
	;*/
			
	v_equip_nm = '';
	v_equip_tag_desc = '';
	v_loc_nm = '';
	cm_v_dept_nm = '';
	v_mtrl_name = '';
	v_mtrl_code = '';
	v_mtrl_sstock = '0';
	v_mtrl_cstock = '0';
	v_exist_cnt = 0;


--	select d.dept_pk into cm_v_own_dept_pk
--	from cm_dept d 
--	where d.dept_cd = v_own_dept_cd;

	--  ߼۴      翩   Ȯ  .
	select count(*) into v_exist_cnt
	from cm_alarm_noti_grp ang 
	inner join cm_alarm_noti_user anu on ang.alarm_noti_grp_pk = anu.alarm_noti_grp_pk 
	inner join cm_an_user_ss_mtrl ausm on anu.alarm_noti_grp_pk = ausm.alarm_noti_grp_pk and anu.user_pk = ausm.user_pk
	inner join cm_user_info ui on anu.user_pk = ui.user_pk 
	where ausm.mtrl_pk = v_mtrl_pk
	and ang.noti_grp_type = 'NGT-M01'
	--             ο ,                μ        ΰ        
	-- 2023.05.23      μ                            ߼ .
	--- and cm_fn_get_dept_team_pk(ui.dept_pk) = cm_fn_get_dept_team_pk(v_own_dept_pk)
	and anu.noti_yn = 'Y';
	
	if coalesce(v_exist_cnt, 0) > 0 then

	
		select m.mtrl_nm, m.mtrl_cd, cast(m.safety_stock_amt as varchar(100)), '0', m.site_id
		into v_mtrl_name, v_mtrl_code, v_mtrl_sstock, v_mtrl_cstock, v_site_id
		from cm_material m
		where m.mtrl_pk = v_mtrl_pk;
	
		/*
		select cast(sum(case when mi.inout_div = 'INOUT_DIV_IN' then mi.inout_qty else 0 end)
		- sum(case when mi.inout_div = 'INOUT_DIV_OUT' then mi.inout_qty else 0 end) as varchar(100)) as stock_qty
		into v_mtrl_cstock
	 	from cm_mtrl_inout mi
	 	where mi.mtrl_pk = v_mtrl_pk 
	 	and coalesce(mi.own_dept_cd, '!@#') = coalesce(v_own_dept_cd, '!@#')
	 	and coalesce(mi.inout_loc_cd, '!@#') = coalesce(v_inout_loc_cd, '!@#')
	 	and coalesce(mi.loc_cell_addr, '!@#') = coalesce(v_loc_cell_addr, '!@#')
	 	and coalesce(cast(mi.inout_uprice as varchar), '!@#') = coalesce(v_inout_uprice, '!@#')
	 	and coalesce(mi.ab_grade, '!@#') = coalesce(v_ab_grade, '!@#')
	    and coalesce(mi.inout_cx_yn, 'N') = 'N'
	    and to_char(mi.inout_dt, 'YYYY-MM') = v_year_mon;
		*/
		

	   	-- 2023.11.06 :        񱳽     纰            
		WITH sq AS (
			select m.mtrl_pk
				, sum(case when t.inout_div = 'INOUT_DIV_IN' and t.inout_type = 'IT_CO' then t.inout_qty else 0 end) as carry_over_stock
				, sum(case when t.inout_div = 'INOUT_DIV_IN' and t.inout_type <> 'IT_CO' then t.inout_qty else 0 end) as in_qty
				, sum(case when t.inout_div = 'INOUT_DIV_OUT' then t.inout_qty else 0 end) as out_qty
				, m.safety_stock_amt as safety_stock_amt
			FROM cm_mtrl_inout t
			INNER JOIN cm_material m on t.mtrl_pk = m.mtrl_pk
			LEFT OUTER JOIN cm_dept owd on t.own_dept_cd = owd.dept_cd
			INNER JOIN cm_location l on t.inout_loc_cd = l.loc_cd
			where to_char(t.inout_dt, 'YYYY-MM') = v_year_mon
		    and m.mtrl_pk = v_mtrl_pk
			GROUP BY m.mtrl_pk, m.mtrl_cd, m.mtrl_nm
				, l.loc_pk, l.loc_cd, l.loc_nm
				, owd.dept_pk, owd.dept_cd, owd.dept_nm
				, t.loc_cell_addr, t.ab_grade, t.inout_uprice, m.safety_stock_amt
		), cte AS (
			SELECT sq.*
				, ((sq.carry_over_stock + sq.in_qty) - sq.out_qty) as stock_qty
			from sq
		)
		SELECT cast(sum(cte.stock_qty) AS varchar2(100)) 
		into v_mtrl_cstock
		from cte
		having sum(cte.stock_qty) < max(cte.safety_stock_amt);				
			
		--  ý  ۰    ڸ  ó   ڷ 
		select user_pk, user_nm, login_id
		into v_user_pk, v_user_nm, v_login_id
		from cm_user_info where login_id = 'system' limit 1;
	
		--if coalesce(v_sms_sndr_yn, '') = 'true'  then
		--  ˶         (sms)
		INSERT INTO cm_anoti_sms_hist(alarm_noti_grp_pk, sms_content, sms_sndr_no
		, sms_rcvr_no, sms_rcvr_id
		, result_type, insert_ts, inserter_id, site_id)
		select ang.alarm_noti_grp_pk
		, substring(replace(replace(replace(replace(replace(ang.sms_content
		  , '@alarm_date', to_char(current_timestamp, 'YYYY-MM-DD')), '@mtrl_name', v_mtrl_name), '@mtrl_sstock', v_mtrl_sstock)
		  , '@mtrl_code', v_mtrl_code)
		  , '@mtrl_cstock', v_mtrl_cstock), 1, 150)
		, ang.sms_sndr_no
		, ui.user_phone, ui.login_id
		, 'W', current_timestamp, v_login_id
		, v_site_id
		from cm_alarm_noti_grp ang
		inner join cm_alarm_noti_user anu on ang.alarm_noti_grp_pk = anu.alarm_noti_grp_pk
		inner join cm_an_user_ss_mtrl ausm on anu.alarm_noti_grp_pk = ausm.alarm_noti_grp_pk and anu.user_pk = ausm.user_pk
		inner join cm_user_info ui on anu.user_pk = ui.user_pk
		where ang.noti_grp_type = 'NGT-M01'
		and ang.sms_snd_yn = 'Y'
		and ausm.mtrl_pk = v_mtrl_pk
		--             ο ,                μ        ΰ         
		-- 2023.05.23      μ                            ߼ .
		-- and cm_fn_get_dept_team_pk(ui.dept_pk) = cm_fn_get_dept_team_pk(v_own_dept_pk)
		and anu.noti_yn = 'Y' and ui.user_phone is not null 
		AND COALESCE(v_mtrl_cstock, '-') <> '-';		
		--end if;
	
		--if coalesce(v_mail_sndr_yn, '') = 'true' then
		--  ˶         (mail)
		INSERT INTO cm_anoti_mail_hist(alarm_noti_grp_pk, mail_title, mail_content
		, mail_sndr_addr, mail_rcvr_addr
		, result_type, insert_ts, inserter_id, site_id)
		select ang.alarm_noti_grp_pk, ang.mail_title
		, substring(replace(replace(replace(replace(replace(ang.mail_content
		  , '@alarm_date', to_char(current_timestamp, 'YYYY-MM-DD')), '@mtrl_name', v_mtrl_name), '@mtrl_sstock', v_mtrl_sstock)
		  , '@mtrl_code', v_mtrl_code)
		  , '@mtrl_cstock', v_mtrl_cstock), 1, 4000)
		, ang.mail_sndr_addr, ui.user_mail
		, 'W', current_timestamp, v_login_id
		, v_site_id
		from cm_alarm_noti_grp ang
		inner join cm_alarm_noti_user anu on ang.alarm_noti_grp_pk = anu.alarm_noti_grp_pk
		inner join cm_an_user_ss_mtrl ausm on anu.alarm_noti_grp_pk = ausm.alarm_noti_grp_pk and anu.user_pk = ausm.user_pk
		inner join cm_user_info ui on anu.user_pk = ui.user_pk
		where ang.noti_grp_type = 'NGT-M01'
		and ang.mail_snd_yn = 'Y'
		and ausm.mtrl_pk = v_mtrl_pk
		--             ο ,                μ        ΰ         
		-- 2023.05.23      μ                            ߼ .
		-- and cm_fn_get_dept_team_pk(ui.dept_pk) = cm_fn_get_dept_team_pk(v_own_dept_pk)
		and anu.noti_yn = 'Y' and ui.user_mail is not null 
		AND COALESCE(v_mtrl_cstock, '-') <> '-';	
		--end if;
			
	end if;
	
EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('system', 'cm_prc_safety_stock_alarm_ins', concat(' [MESSAGE] : ', SQLERRM));
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_tag_data_alarm_ins(int8);

CREATE OR REPLACE PROCEDURE public.cm_prc_tag_data_alarm_ins(v_tag_data_pk bigint)
 LANGUAGE plpgsql
AS $procedure$
declare
	v_user_pk bigint;
	v_user_nm character varying(50);
	v_login_id character varying(50);
	v_tag_pk bigint;
	v_data_val real;
    v_warn_low real;
    v_warn_high real;
    v_danger_low real;
    v_danger_high real;
	v_alarm_disp_type character(2);
	v_alarm_type character varying(10);
	v_nofin_cnt integer;
	v_same_cnt integer;
	v_equip_status character varying(20);
	v_cnt integer;
	v_add integer;
	v_equip_nm character varying(100);
	v_tag character varying(100);
	v_loc_nm character varying(100);
	cm_v_dept_nm character varying(100);
	v_check_type varchar(50);
	v_std_nm varchar(50); 
	v_sms_sndr_yn varchar(10); 
	v_mail_sndr_yn varchar(10); 
begin
	-- **************************************************
	--  ±          ˶    ġ
	-- **************************************************

	--  ý  ۰    ڸ  ó   ڷ 
	select user_pk, user_nm, login_id
	into v_user_pk, v_user_nm, v_login_id
	from cm_user_info where login_id = 'system' limit 1;

	select tr.tag_pk, tr.data_val, tg.warn_low, tg.warn_high, tg.danger_low, tg.danger_high, tmt.alarm_disp_type, eq.equip_status
	, eq.equip_nm, tg.tag, l.loc_nm, d.dept_nm
	, (case when tg.warn_low is not null and tg.warn_high is not null and tg.danger_low is not null and tg.danger_high is not null then 'range'
	   		when tg.warn_low is not null and tg.warn_high is not null and tg.danger_low is null and tg.danger_high is null then 'w_range'
	   		when tg.warn_low is null and tg.warn_high is null and tg.danger_low is not null and tg.danger_high is not null then 'd_range'
	   		when tg.warn_low is not null and tg.danger_low is not null and tg.warn_high is null and tg.danger_high is null then 'low'
	   		when tg.warn_low is not null and tg.danger_low is null and tg.warn_high is null and tg.danger_high is null then 'w_low'
	   		when tg.warn_low is null and tg.danger_low is not null and tg.warn_high is null and tg.danger_high is null then 'd_low'
	   		when tg.warn_low is null and tg.danger_low is null and tg.warn_high is not null and tg.danger_high is not null then 'high'
	   		when tg.warn_low is null and tg.danger_low is null and tg.warn_high is not null and tg.danger_high is null then 'w_high'
	   		when tg.warn_low is null and tg.danger_low is null and tg.warn_high is null and tg.danger_high is not null then 'd_high'
	  '' end) as check_type
	into v_tag_pk, v_data_val, v_warn_low, v_warn_high, v_danger_low, v_danger_high, v_alarm_disp_type, v_equip_status
	, v_equip_nm, v_tag, v_loc_nm, cm_v_dept_nm, v_check_type
	from cm_tag_data tr
	inner join cm_tag tg on tr.tag_pk = tg.tag_pk
	inner join cm_tag_meas_type tmt on tg.tag_meas_type_pk = tmt.tag_meas_type_pk
	inner join cm_equipment eq on tg.equip_pk = eq.equip_pk
	left outer join cm_location l on eq.loc_pk = l.loc_pk
	left outer join cm_dept d on eq.dept_pk = d.dept_pk
	where tr.tag_data_pk = v_tag_data_pk
	;
	
	v_alarm_type = '';
	v_add = 0;
	v_std_nm = '';
	
	-- off-spec check
	if coalesce(v_alarm_disp_type, 'WD') = 'LK' then
		--    ⿩  
		if v_data_val > v_warn_high then
			v_alarm_type = 'LK';
		end if;
	elseif coalesce(v_alarm_disp_type, 'WD') = 'ND' then
		--  Ұ  ⿩  
		if v_data_val < v_warn_low then
			v_alarm_type = 'ND';
		end if;		
	else
		--     ,     ,                 ó  
		if v_check_type = 'range' then
			if 	v_data_val < v_danger_low  then
				v_alarm_type = 'LL';
			elseif v_data_val > v_danger_high then
				v_alarm_type = 'HH';
			elseif v_data_val < v_warn_low then
				v_alarm_type = 'LO';
			elseif v_data_val > v_warn_high then
				v_alarm_type = 'HI';
			end if;
		elseif v_check_type = 'w_range' then
			if 	v_data_val < v_warn_low then
				v_alarm_type = 'LO';
			elseif v_data_val > v_warn_high then
				v_alarm_type = 'HI';
			end if;		
		elseif v_check_type = 'd_range' then
			if 	v_data_val < v_danger_low  then
				v_alarm_type = 'LL';
			elseif v_data_val > v_danger_high then
				v_alarm_type = 'HH';
			end if;		
		elseif v_check_type = 'low' then
			if 	v_data_val < v_danger_low  then
				v_alarm_type = 'LL';
			elseif v_data_val < v_warn_low then
				v_alarm_type = 'LO';
			end if;		
		elseif v_check_type = 'd_low' then
			if 	v_data_val < v_danger_low  then
				v_alarm_type = 'LL';
			end if;		
		elseif v_check_type = 'w_low' then
			if v_data_val < v_warn_low then
				v_alarm_type = 'LO';
			end if;		
		elseif v_check_type = 'high' then
			if v_data_val > v_danger_high then
				v_alarm_type = 'HH';
			elseif v_data_val > v_warn_high then
				v_alarm_type = 'HI';
			end if;		
		elseif v_check_type = 'd_high' then
			if v_data_val > v_danger_high then
				v_alarm_type = 'HH';
			end if;		
		elseif v_check_type = 'w_high' then
			if v_data_val > v_warn_high then
				v_alarm_type = 'HI';
			end if;		
		end if;
	end if;
	
	if v_alarm_type = '' then
		--     ġ  ˶     ִ     ,  ش   ˶          ġ  Ϸ ó  
		update cm_alarm
		set alarm_status = 'C'
		, return_dt = current_timestamp
		where tag_pk = v_tag_pk 
		and alarm_status = 'A';		
	else
		--  ش   ±        ġ  ˸   Ǽ  Ȯ  
		--     ġ ˸   ,     ġ             ˸   
		select count(*)
		, coalesce(max(case when alarm_type = v_alarm_type then 1 else 0 end),0)
		into v_nofin_cnt, v_same_cnt
		from cm_alarm
		where tag_pk = v_tag_pk and alarm_status = 'A';
		
		
		if v_alarm_type = 'HI' or v_alarm_type = 'LO' then
		
			-- H -> L  ΰ   H           
			update cm_alarm
			set alarm_status = 'C'
			, return_dt = current_timestamp
			where tag_pk = v_tag_pk 
			and alarm_status = 'A' and alarm_type IN ('HH', 'HI') and v_alarm_type = 'LO';
			
			-- L -> H  ΰ   L           
			update cm_alarm
			set alarm_status = 'C'
			, return_dt = current_timestamp
			where tag_pk = v_tag_pk 
			and alarm_status = 'A' and alarm_type IN ('LL', 'LO') and v_alarm_type = 'HI';
			
			-- HH    ִ          
			update cm_alarm
			set alarm_status = 'C'
			, return_dt = current_timestamp
			where tag_pk = v_tag_pk 
			and alarm_status = 'A' and alarm_type = 'HH' and v_alarm_type = 'HI';

			-- LL    ִ          
			update cm_alarm
			set alarm_status = 'C'
			, return_dt = current_timestamp
			where tag_pk = v_tag_pk 
			and alarm_status = 'A' and alarm_type = 'LL' and v_alarm_type = 'LO'
			;
			
			-- HI/LO                
			select count(*) into v_cnt
			from cm_alarm 
			where tag_pk = v_tag_pk
			and alarm_status = 'A' and alarm_type = v_alarm_type;			
			
			if coalesce(v_cnt, 0) = 0 and v_equip_status <> 'ES_DISP' then
				v_add = 1;
			end if;				
		
		elseif v_alarm_type = 'HH' or v_alarm_type = 'LL' then
		
			-- H -> L  ΰ   H           
			update cm_alarm
			set alarm_status = 'C'
			, return_dt = current_timestamp
			where tag_pk = v_tag_pk 
			and alarm_status = 'A' and alarm_type IN ('HH', 'HI') and v_alarm_type = 'LL';
			
			-- L -> H  ΰ   L           
			update cm_alarm
			set alarm_status = 'C'
			, return_dt = current_timestamp
			where tag_pk = v_tag_pk 
			and alarm_status = 'A' and alarm_type IN ('LL', 'LO') and v_alarm_type = 'HH';
			
			-- HH/LL             
			select count(*) into v_cnt
			from cm_alarm 
			where tag_pk = v_tag_pk
			and alarm_status = 'A' and alarm_type = v_alarm_type;
			
			if coalesce(v_cnt, 0) = 0 and v_equip_status <> 'ES_DISP' then
				v_add = 1;
			end if;			
		
		elseif v_alarm_type = 'LK' then
			--      ±װ         OFFSPEC    
			select count(*) into v_cnt
			from cm_alarm 
			where tag_pk = v_tag_pk
			and alarm_status = 'A' and alarm_type = v_alarm_type;
			
			if coalesce(v_cnt, 0) = 0 and v_equip_status <> 'ES_DISP' then
				v_add = 1;
			end if;		
		
		elseif v_alarm_type = 'ND' then
			--      ±װ   Ұ      OFFSPEC    
			select count(*) into v_cnt
			from cm_alarm 
			where tag_pk = v_tag_pk
			and alarm_status = 'A' and alarm_type = v_alarm_type;
			
			if coalesce(v_cnt, 0) = 0 and v_equip_status <> 'ES_DISP' then
				v_add = 1;
			end if;	
			
		end if;
		
		if coalesce(v_add, 0) > 0 then
	
			if v_warn_low is not null and v_warn_high is not null then
				v_std_nm = concat(v_warn_low::text, '~', v_warn_high::text);			
			elseif v_warn_low is not null and v_warn_high is null then
				v_std_nm = concat('>', v_warn_low::text);
			elseif v_warn_low is null and v_warn_high is not null then
				v_std_nm = concat('<', v_warn_high::text);
			else 	
				v_std_nm = '';
			end if;
			
			v_sms_sndr_yn = '';
			v_mail_sndr_yn = '';
			
			INSERT INTO cm_alarm(tag_pk, alarm_dt, alarm_type, data_val, std_val, alarm_status, del_yn, tag_data_pk)
			VALUES (v_tag_pk, current_timestamp, v_alarm_type, v_data_val, v_std_nm, 'A', 'N', v_tag_data_pk);
			

			select (ext_opts -> 'smsSndrYn')::text as smsSndrYn, (ext_opts -> 'mailSndrYn')::text as mailSndrYn 
			into v_sms_sndr_yn, v_mail_sndr_yn
			from cm_sys_opt
			;
			
			-- HH,LL ̰ų , Normal     HI/LO             ˸ ó  
			if (v_alarm_type = 'HH' OR v_alarm_type = 'LL' 
				OR (v_alarm_type = 'HI' and coalesce(v_nofin_cnt, 0) = 0) OR (v_alarm_type = 'LO' and coalesce(v_nofin_cnt, 0) = 0)) then
				
				if coalesce(v_sms_sndr_yn, '') = 'true' then
					--  ˶         (sms)
					INSERT INTO cm_anoti_sms_hist(alarm_noti_grp_pk, sms_content, sms_sndr_no
					, sms_rcvr_no, sms_rcvr_id
					, result_type, insert_ts, inserter_id, inserter_nm)
					select ang.alarm_noti_grp_pk
					, replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(
						ang.sms_content, '@equip_name', v_equip_nm)
					  	, '@equip_tag_desc', v_tag), '@std_value', v_std_nm), '@data_value', v_data_val)
						, '@equip_loc', v_loc_nm), '@equip_dept', cm_v_dept_nm)
						, '@alarm_date', to_char(current_timestamp, 'YYYY-MM-DD'))
				  		, '@mtrl_name', ''), '@mtrl_sstock', ''), '@mtrl_code', ''), '@mtrl_cstock', ''), '@contents', '')
					, ang.sms_sndr_no
					, ui.user_phone, ui.login_id
					, 'W', current_timestamp, v_login_id, v_user_nm
					from cm_alarm_noti_grp ang
					inner join cm_alarm_noti_user anu on ang.alarm_noti_grp_pk = anu.alarm_noti_grp_pk
					inner join cm_user_info ui on anu.user_pk = ui.user_pk
					where ang.noti_grp_type = 'NGT_E01'
					and ang.sms_snd_yn = 'Y'
					and anu.noti_yn = 'Y' and ui.user_phone is not null ;	
				end if;
				
				if coalesce(v_mail_sndr_yn, '') = 'true' then
					--  ˶         (mail)
					INSERT INTO cm_anoti_mail_hist(alarm_noti_grp_pk, mail_title, mail_content
					, mail_sndr_addr, mail_rcvr_addr
					, result_type, insert_ts, inserter_id, inserter_nm)
					select ang.alarm_noti_grp_pk, ang.mail_title
					, replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(
						ang.mail_content, '@equip_name', v_equip_nm)
					  	, '@equip_tag_desc', v_tag), '@std_value', v_std_nm), '@data_value', v_data_val)
						, '@equip_loc', v_loc_nm), '@equip_dept', cm_v_dept_nm)
						, '@alarm_date', to_char(current_timestamp, 'YYYY-MM-DD'))
				  		, '@mtrl_name', ''), '@mtrl_sstock', ''), '@mtrl_code', ''), '@mtrl_cstock', ''), '@contents', '')
					, ang.mail_sndr_addr, ui.user_mail
					, 'W', current_timestamp, v_login_id, v_user_nm
					from cm_alarm_noti_grp ang
					inner join cm_alarm_noti_user anu on ang.alarm_noti_grp_pk = anu.alarm_noti_grp_pk
					inner join cm_user_info ui on anu.user_pk = ui.user_pk
					where ang.noti_grp_type = 'NGT_E01'
					and ang.mail_snd_yn = 'Y'
					and anu.noti_yn = 'Y' and ui.user_mail is not null ;		
				end if;
				
			end if;
		end if;			
	end if;
	
EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('system', 'cm_prc_tag_data_alarm_ins', concat(' [MESSAGE] : ', SQLERRM));
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_tag_data_ins(varchar, varchar, timestamp);

CREATE OR REPLACE PROCEDURE public.cm_prc_tag_data_ins(p_tag character varying, p_data_val character varying, p_data_dt timestamp without time zone)
 LANGUAGE plpgsql
AS $procedure$
declare
	v_tag_pk bigint;
	v_data_res numeric(5,4);
	v_data_val character varying;
	v_cast_val character varying;
	v_alarm_chk_yn character varying(1);
begin
-- raise notice 'fntrans';

		if cm_fn_isnumeric(p_data_val) = false then
			insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
			values('system', 'cm_prc_tag_data_ins', concat(' [MESSAGE] : tag_val     ġ      ƴմϴ . p_tag: ', p_tag, ', p_data_val: ', p_data_val, ', p_data_dt: ', to_char(p_data_dt, 'YYYY-MM-DD HH24:MI:SS')));		
		elseif p_tag = '' then
			insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
			values('system', 'cm_prc_tag_data_ins', concat(' [MESSAGE] : p_tag        ϴ . p_tag: ', p_tag, ', p_data_val: ', p_data_val, ', p_data_dt: ', to_char(p_data_dt, 'YYYY-MM-DD HH24:MI:SS')));		
		else
		
			v_tag_pk = 0;
			v_data_val = '';
			v_cast_val = '';
			v_alarm_chk_yn = '';
			
			--  ˸      ±װ˻ 
			select t.tag_pk, t.data_res, coalesce(t.alarm_chk_yn, 'N')
			into v_tag_pk, v_data_res, v_alarm_chk_yn
			from cm_tag t
			inner join cm_equipment eq on t.equip_pk = eq.equip_pk
			where upper(t.tag) = upper(p_tag)
			-- and coalesce(t.alarm_chk_yn, 'N') = 'Y'
			;
			
			if coalesce(v_tag_pk, 0) > 0 then
				
				v_data_val = p_data_val;
				if (v_data_res is not null) then
					select cast(round(cast(cast(p_data_val as real)/v_data_res as numeric), 0) as character varying) into v_cast_val;

					if (v_cast_val = '9999') then
						v_data_val = v_cast_val;
					end if;
				end if;
			
			
				insert into cm_tag_data (tag_pk, data_dt, data_val)
				values(v_tag_pk, p_data_dt, cast(v_data_val as real));
				-- values(v_tag_pk, p_data_dt, cast(p_data_val as real));

				if v_data_val <> '9999' and v_alarm_chk_yn = 'Y' then
					call cm_prc_tag_data_alarm_ins(currval('tag_data_pk_seq'));
				end if;
			end if;
			
		end if;

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('system', 'cm_prc_tag_data_ins', concat(' [MESSAGE] : ', SQLERRM));
  END;
	
end;
$procedure$
;

-- DROP PROCEDURE public.cm_prc_update_sequence(varchar, varchar, varchar);

CREATE OR REPLACE PROCEDURE public.cm_prc_update_sequence(p_table_nm character varying, p_table_pk character varying, p_seq_nm character varying)
 LANGUAGE plpgsql
AS $procedure$
declare
	stmt TEXT;
	table_nm varchar(30);
	table_pk varchar(30);
	user_nm varchar(30);
	v_pk bigint;
	v_msg varchar(100);
	curdata record;
begin
	-- =======================================================================
	-- call cm_prc_update_sequence('dept', 'dept_pk', 'dept_dept_pk_seq')
	-- select * from cm_error_log where error_log_title = 'cm_prc_update_sequence'
	-- delete from cm_error_log where error_log_title = 'cm_prc_update_sequence'
	-- =======================================================================
	
	user_nm = 'SWING_ADMIN';

	table_nm = UPPER(p_table_nm);
	table_pk = UPPER(p_table_pk);
	
	--  ִ             ȸ
	stmt = 'SELECT MAX(' || table_pk || ') + 1 as max_dept_pk FROM ' || user_nm || '.' || table_nm;
   	EXECUTE stmt into v_pk;
   
    --              
   	stmt = 'ALTER SEQUENCE ' || p_seq_nm || ' restart with ' || v_pk;
   	EXECUTE stmt;

EXCEPTION  
  WHEN OTHERS THEN 
  BEGIN 
	insert into cm_error_log(error_log_type, error_log_title, error_log_desc)
	values('IF', 'cm_prc_update_sequence', concat(' [MESSAGE] : ', SQLERRM));
  END;
	
end;
$procedure$
;