{"version":3,"sources":["raw-js/kendo.excel.js"],"names":["factory","define","amd","$","window","kendo","excel","getter","map","current","compile","template","TemplateService","Class","extend","defaultGroupHeaderTemplate","data","createArray","length","callback","result","idx","push","defaultItemId","item","id","register","userImplementation","ExcelExporter","init","options","columns","this","_trimColumns","allColumns","_leafColumns","_prepareColumn","_visibleColumns","aggregates","groups","concat","hasGroups","hierarchy","hasGroupHeaderColumn","some","column","groupHeaderColumnTemplate","collapsible","workbook","sheets","_columns","rows","_hierarchyRows","_rows","freezePane","_freezePane","filter","_filter","this$1$1","Boolean","field","value","dataItem","values","forEach","text","groupHeaderTemplate","groupFooterTemplate","footerTemplate","filterable","depth","_depth","from","to","_createPaddingCells","background","color","paddingCellOptions","_dataRow","level","cells","items","_groupHeaderCells","_dataRows","unshift","type","_footer","dataCells","cellIdx","_cell","colSpan","title","group","groupHeaderCellOptions","index","undefined","dataItems","apply","previousItemId","itemLevel","itemId","hasFooter","_hasFooterTemplate","parents","previousLevel","_hierarchyFooterRows","rootAggregate","parentId","_hierarchyFooter","_prependHeaderRows","currentLevel","parent","pop","fieldAggregates","footerCellOptions","templateData","footer","Object","keys","key","groupFooterCellOptions","_isColumnVisible","exportable","visibleInExport","hidden","visibleInExportOnly","visible","_headerRow","row","headers","cell","rowSpan","firstCell","headerPaddingCellOptions","headerRows","_prepareHeaderRows","parentCell","parentRow","childRow","totalColSpan","headerCellOptions","_headerDepth","max","temp","colSplit","locked","rowSplit","cellOptions","width","parseInt","autoWidth","deepExtend","jQuery","dataSource","DataSource","constructor","page","allPages","pageSize","groupPaging","total","sort","aggregate","isExcelExportRequest","i","expanded","shouldRestoreExpandedState","_data","transport","_isServerGrouped","create","_hierarchy","view","_restoreExpandedState","Deferred","d","fetch","then","resolve","bind","promise","ExcelMixin","proto","events","saveAsExcel","proxyURL","fileName","deferred","exporter","book","trigger","ooxml","Workbook","skipCustomHeight","toDataURLAsync","dataURI","saveAs","forceProxy"],"mappings":"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","file":"kendo.excel.min.js","sourcesContent":["(function (factory) {\n    typeof define === 'function' && define.amd ? define(['kendo.core', 'kendo.data', 'kendo.ooxml'], factory) :\n    factory();\n})((function () {\n    /***********************************************************************\n     * WARNING: this file is auto-generated.  If you change it directly,\n     * your modifications will eventually be lost.  The source code is in\n     * `kendo-ooxml` repository, you should make your changes there and\n     * run `src-modules/sync.sh` in this repository.\n     */\n\n    (function($) {\n    /* eslint-disable space-before-blocks, space-before-function-paren */\n\n    window.kendo.excel = window.kendo.excel || {};\n\n    var getter = kendo.getter;\n    var map = $.map;\n\n    var current = {\n        compile: function(template) {\n            return template;\n        }\n    };\n\n    var TemplateService = kendo.Class.extend({\n\n    });\n\n    TemplateService.register = function(userImplementation) {\n        current = userImplementation;\n    };\n\n    TemplateService.compile = function(template) {\n        return current.compile(template);\n    };\n\n    function defaultGroupHeaderTemplate(data) {\n        return ((data.title) + \": \" + (data.value));\n    }\n\n    function createArray(length, callback) {\n        var result = [];\n\n        for (var idx = 0; idx < length; idx++) {\n            result.push(callback(idx));\n        }\n\n        return result;\n    }\n\n    function defaultItemId(item) {\n        return item.id;\n    }\n\n    var ExcelExporter = kendo.Class.extend({\n        init: function(options) {\n            options.columns = this._trimColumns(options.columns || []);\n\n            this.allColumns = map(this._leafColumns(options.columns || []), this._prepareColumn);\n\n            this.columns = this._visibleColumns(this.allColumns);\n\n            this.options = options;\n            this.data = options.data || [];\n            this.aggregates = options.aggregates || {};\n            this.groups = [].concat(options.groups || []);\n            this.hasGroups = this.groups.length > 0;\n            this.hierarchy = options.hierarchy;\n            this.hasGroupHeaderColumn = this.columns.some(function (column) { return column.groupHeaderColumnTemplate; });\n            this.collapsible = this.options.collapsible;\n        },\n\n        workbook: function() {\n            var workbook = {\n                sheets: [ {\n                    columns: this._columns(),\n                    rows: this.hierarchy ? this._hierarchyRows() : this._rows(),\n                    freezePane: this._freezePane(),\n                    filter: this._filter()\n                } ]\n            };\n\n            return workbook;\n        },\n\n        _trimColumns: function(columns) {\n            var this$1$1 = this;\n\n            return columns.filter(function (column) {\n                var result = Boolean(column.field);\n\n                if (!result && column.columns) {\n                    result = this$1$1._trimColumns(column.columns).length > 0;\n                }\n\n                return result;\n            });\n        },\n\n        _leafColumns: function(columns) {\n            var this$1$1 = this;\n\n            var result = [];\n\n            for (var idx = 0; idx < columns.length; idx++) {\n                if (!columns[idx].columns) {\n                    result.push(columns[idx]);\n                } else {\n                    result = result.concat(this$1$1._leafColumns(columns[idx].columns));\n                }\n            }\n\n            return result;\n        },\n\n        _prepareColumn: function(column) {\n            if (!column.field) {\n                return null;\n            }\n\n            var value = function(dataItem) {\n                return getter(column.field, true)(dataItem);\n            };\n\n            var values = null;\n\n            if (column.values) {\n                values = {};\n\n                column.values.forEach(function(item) {\n                    values[item.value] = item.text;\n                });\n\n                value = function(dataItem) {\n                    return values[getter(column.field, true)(dataItem)];\n                };\n            }\n\n            return $.extend({}, column, {\n                value: value,\n                values: values,\n                groupHeaderTemplate: column.groupHeaderTemplate ? TemplateService.compile(column.groupHeaderTemplate) : defaultGroupHeaderTemplate,\n                groupHeaderColumnTemplate: column.groupHeaderColumnTemplate ? TemplateService.compile(column.groupHeaderColumnTemplate) : null,\n                groupFooterTemplate: column.groupFooterTemplate ? TemplateService.compile(column.groupFooterTemplate) : null,\n                footerTemplate: column.footerTemplate ? TemplateService.compile(column.footerTemplate) : null\n            });\n        },\n\n        _filter: function() {\n            if (!this.options.filterable) {\n                return null;\n            }\n\n            var depth = this._depth();\n\n            return {\n                from: depth,\n                to: depth + this.columns.length - 1\n            };\n        },\n\n        _createPaddingCells: function(length) {\n            var this$1$1 = this;\n\n            return createArray(length, function () { return $.extend({\n                background: \"#dfdfdf\",\n                color: \"#333\"\n            }, this$1$1.options.paddingCellOptions); });\n        },\n\n        _dataRow: function(dataItem, level, depth) {\n            var this$1$1 = this;\n\n            var cells = this._createPaddingCells(level);\n\n            // grouped\n            if (this.hasGroups && depth && dataItem.items) {\n                cells = cells.concat(this._groupHeaderCells(dataItem, level, depth));\n                var rows = this._dataRows(dataItem.items, level + 1);\n\n                rows.unshift({\n                    type: \"group-header\",\n                    cells: cells,\n                    level: this.collapsible ? level : null\n                });\n\n                return rows.concat(this._footer(dataItem, level));\n            }\n\n            var dataCells = [];\n\n            for (var cellIdx = 0; cellIdx < this.columns.length; cellIdx++) {\n                dataCells[cellIdx] = this$1$1._cell(dataItem, this$1$1.columns[cellIdx]);\n            }\n\n            if (this.hierarchy) {\n                dataCells[0].colSpan = depth - level + 1;\n            }\n\n            return [ {\n                type: \"data\",\n                cells: cells.concat(dataCells),\n                level: this.collapsible ? level : null\n            } ];\n        },\n\n        _groupHeaderCells: function(dataItem, level, depth) {\n            var cells = [];\n\n            var column = this.allColumns.filter(function(column) {\n                return column.field === dataItem.field;\n            })[0] || {};\n\n            var title = column && column.title ? column.title : dataItem.field;\n            var template = column ? column.groupHeaderTemplate || column.groupHeaderColumnTemplate : null;\n            var group = $.extend({\n                title: title,\n                field: dataItem.field,\n                value: column && column.values ? column.values[dataItem.value] : dataItem.value,\n                aggregates: dataItem.aggregates,\n                items: dataItem.items\n            }, dataItem.aggregates[dataItem.field]);\n\n            var value = template ? template(group) : (title + \": \" + (dataItem.value));\n\n            cells.push($.extend({\n                value: value,\n                background: \"#dfdfdf\",\n                color: \"#333\",\n                colSpan: (this.hasGroupHeaderColumn ? 1 : this.columns.length) + depth - level\n            }, column.groupHeaderCellOptions));\n\n            if (this.hasGroupHeaderColumn) {\n                this.columns.forEach(function(column, index) {\n                    if (index > 0) {\n                        cells.push($.extend({\n                            background: \"#dfdfdf\",\n                            color: \"#333\",\n                            value: column.groupHeaderColumnTemplate ?\n                                column.groupHeaderColumnTemplate($.extend({ group: group }, group, dataItem.aggregates[column.field])) :\n                                undefined\n                        }, column.groupHeaderCellOptions));\n                    }\n                });\n            }\n\n            return cells;\n        },\n\n        _dataRows: function(dataItems, level) {\n            var this$1$1 = this;\n\n            var depth = this._depth();\n            var rows = [];\n\n            for (var idx = 0; idx < dataItems.length; idx++) {\n                rows.push.apply(rows, this$1$1._dataRow(dataItems[idx], level, depth));\n            }\n\n            return rows;\n        },\n\n        _hierarchyRows: function() {\n            var this$1$1 = this;\n\n            var depth = this._depth();\n            var data = this.data;\n            var itemLevel = this.hierarchy.itemLevel;\n            var itemId = this.hierarchy.itemId || defaultItemId;\n            var hasFooter = this._hasFooterTemplate();\n            var rows = [];\n            var parents = [];\n            var previousLevel = 0;\n            var previousItemId;\n\n            if (!hasFooter) {\n                this.collapsible = false;\n            }\n\n            for (var idx = 0; idx < data.length; idx++) {\n                var item = data[idx];\n                var level = itemLevel(item, idx);\n\n                if (hasFooter) {\n                    if (level > previousLevel) {\n                        parents.push({ id: previousItemId, level: previousLevel });\n                    } else if (level < previousLevel) {\n                        rows.push.apply(rows, this$1$1._hierarchyFooterRows(parents, level, depth));\n                    }\n\n                    previousLevel = level;\n                    previousItemId = itemId(item, idx);\n                }\n\n                rows.push.apply(rows, this$1$1._dataRow(item, level + 1, depth));\n            }\n\n            if (hasFooter) {\n                rows.push.apply(rows, this._hierarchyFooterRows(parents, 0, depth));\n\n                var rootAggregate = data.length ? this.aggregates[data[0].parentId] : {};\n                rows.push(this._hierarchyFooter(rootAggregate, 0, depth));\n            }\n\n            this._prependHeaderRows(rows);\n\n            return rows;\n        },\n\n        _hierarchyFooterRows: function(parents, currentLevel, depth) {\n            var this$1$1 = this;\n\n            var rows = [];\n            while (parents.length && parents[parents.length - 1].level >= currentLevel) {\n                var parent = parents.pop();\n                rows.push(this$1$1._hierarchyFooter(this$1$1.aggregates[parent.id], parent.level + 1, depth));\n            }\n\n            return rows;\n        },\n\n        _hasFooterTemplate: function() {\n            var columns = this.columns;\n            for (var idx = 0; idx < columns.length; idx++) {\n                if (columns[idx].footerTemplate) {\n                    return true;\n                }\n            }\n        },\n\n        _hierarchyFooter: function(aggregates, level, depth) {\n            var cells = this.columns.map(function(column, index) {\n                var colSpan = index ? 1 : depth - level + 1;\n                if (column.footerTemplate) {\n                    var fieldAggregates = (aggregates || {})[column.field];\n                    return $.extend({\n                        background: \"#dfdfdf\",\n                        color: \"#333\",\n                        colSpan: colSpan,\n                        value: column.footerTemplate($.extend({ aggregates: aggregates }, fieldAggregates))\n                    }, column.footerCellOptions);\n                }\n\n                return $.extend({\n                    background: \"#dfdfdf\",\n                    color: \"#333\",\n                    colSpan: colSpan\n                }, column.footerCellOptions);\n            });\n\n            return {\n                type: \"footer\",\n                cells: this._createPaddingCells(level).concat(cells),\n                level: this.collapsible ? level : null\n            };\n        },\n\n        _footer: function(dataItem, level) {\n            var rows = [];\n            var footer = this.columns.some(function (column) { return column.groupFooterTemplate; });\n\n            var templateData, group;\n            if (footer) {\n                group = {\n                    group: { items: dataItem.items,\n                             field: dataItem.field,\n                             value: dataItem.value }\n                };\n                templateData = {};\n                Object.keys(dataItem.aggregates).forEach(function (key) {\n                    templateData[key] = $.extend({}, dataItem.aggregates[key], group);\n                });\n            }\n\n            var cells = this.columns.map(function (column) {\n                if (column.groupFooterTemplate) {\n                    var data = $.extend({}, templateData, dataItem.aggregates[column.field], group);\n                    return $.extend({\n                        background: \"#dfdfdf\",\n                        color: \"#333\",\n                        value: column.groupFooterTemplate(data)\n                    }, column.groupFooterCellOptions);\n                }\n\n                return $.extend({\n                    background: \"#dfdfdf\",\n                    color: \"#333\"\n                }, column.groupFooterCellOptions);\n            });\n\n            if (footer) {\n                rows.push({\n                    type: \"group-footer\",\n                    cells: this._createPaddingCells(this.groups.length).concat(cells),\n                    level: this.collapsible ? level : null\n                });\n            }\n\n            return rows;\n        },\n\n        _isColumnVisible: function(column) {\n            return this._visibleColumns([ column ]).length > 0 && (column.field || column.columns);\n        },\n\n        _visibleColumns: function(columns) {\n            var this$1$1 = this;\n\n            return columns.filter(function (column) {\n                var exportable = column.exportable;\n                if (typeof exportable === 'object') {\n                    exportable = column.exportable.excel;\n                }\n\n                var visibleInExport = !column.hidden && exportable !== false;\n                var visibleInExportOnly = column.hidden && exportable === true;\n                var visible = visibleInExport || visibleInExportOnly;\n                if (visible && column.columns) {\n                    visible = this$1$1._visibleColumns(column.columns).length > 0;\n                }\n                return visible;\n            });\n        },\n\n        _headerRow: function(row, groups) {\n            var this$1$1 = this;\n\n            var headers = row.cells.map(function(cell) {\n                return $.extend(cell, {\n                    colSpan: cell.colSpan > 1 ? cell.colSpan : 1,\n                    rowSpan: row.rowSpan > 1 && !cell.colSpan ? row.rowSpan : 1\n                });\n            });\n\n            if (this.hierarchy && headers[0].firstCell) {\n                headers[0].colSpan += this._depth();\n            }\n\n            return {\n                type: \"header\",\n                cells: createArray(groups.length, function () { return $.extend({\n                    background: \"#7a7a7a\",\n                    color: \"#fff\"\n                }, this$1$1.options.headerPaddingCellOptions); }).concat(headers)\n            };\n        },\n\n        _prependHeaderRows: function(rows) {\n            var this$1$1 = this;\n\n            var groups = this.groups;\n\n            var headerRows = [ { rowSpan: 1, cells: [], index: 0 } ];\n\n            this._prepareHeaderRows(headerRows, this.options.columns);\n\n            for (var idx = headerRows.length - 1; idx >= 0; idx--) {\n                rows.unshift(this$1$1._headerRow(headerRows[idx], groups));\n            }\n        },\n\n        _prepareHeaderRows: function(rows, columns, parentCell, parentRow) {\n            var this$1$1 = this;\n\n            var row = parentRow || rows[rows.length - 1];\n            var childRow = rows[row.index + 1];\n            var totalColSpan = 0;\n\n            for (var idx = 0; idx < columns.length; idx++) {\n                var column = columns[idx];\n                if (this$1$1._isColumnVisible(column)) {\n\n                    var cell = $.extend({\n                        background: \"#7a7a7a\",\n                        color: \"#fff\",\n                        value: column.title || column.field,\n                        colSpan: 0,\n                        firstCell: idx === 0 && (!parentCell || parentCell.firstCell)\n                    }, column.headerCellOptions);\n                    row.cells.push(cell);\n\n                    if (column.columns && column.columns.length) {\n                        if (!childRow) {\n                            childRow = { rowSpan: 0, cells: [], index: rows.length };\n                            rows.push(childRow);\n                        }\n                        cell.colSpan = this$1$1._trimColumns(this$1$1._visibleColumns(column.columns)).length;\n                        this$1$1._prepareHeaderRows(rows, column.columns, cell, childRow);\n                        totalColSpan += cell.colSpan - 1;\n                        row.rowSpan = rows.length - row.index;\n                    }\n                }\n            }\n\n            if (parentCell) {\n                parentCell.colSpan += totalColSpan;\n            }\n        },\n\n        _rows: function() {\n            var this$1$1 = this;\n\n            var rows = this._dataRows(this.data, 0);\n\n            if (this.columns.length) {\n                this._prependHeaderRows(rows);\n                var footer = false;\n\n                var cells = this.columns.map(function (column) {\n                    if (column.footerTemplate) {\n                        footer = true;\n\n                        return $.extend({\n                            background: \"#dfdfdf\",\n                            color: \"#333\",\n                            value: column.footerTemplate($.extend({}, this$1$1.aggregates, this$1$1.aggregates[column.field]))\n                        }, column.footerCellOptions);\n                    }\n\n                    return $.extend({\n                        background: \"#dfdfdf\",\n                        color: \"#333\"\n                    }, column.footerCellOptions);\n                });\n\n                if (footer) {\n                    rows.push({\n                        type: \"footer\",\n                        cells: this._createPaddingCells(this.groups.length).concat(cells)\n                    });\n                }\n            }\n\n            return rows;\n        },\n\n        _headerDepth: function(columns) {\n            var this$1$1 = this;\n\n            var result = 1;\n            var max = 0;\n\n            for (var idx = 0; idx < columns.length; idx++) {\n                if (columns[idx].columns) {\n                    var temp = this$1$1._headerDepth(columns[idx].columns);\n                    if (temp > max) {\n                        max = temp;\n                    }\n                }\n            }\n            return result + max;\n        },\n\n        _freezePane: function() {\n            var columns = this._visibleColumns(this.options.columns || []);\n\n            var colSplit = this._visibleColumns(this._trimColumns(this._leafColumns(columns.filter(function(column) {\n                return column.locked;\n            })))).length;\n\n            return {\n                rowSplit: this._headerDepth(columns),\n                colSplit: colSplit ? colSplit + this.groups.length : 0\n            };\n        },\n\n        _cell: function(dataItem, column) {\n            return $.extend({\n                value: column.value(dataItem)\n            }, column.cellOptions);\n        },\n\n        _depth: function() {\n            var depth = 0;\n\n            if (this.hierarchy) {\n                depth = this.hierarchy.depth;\n            } else {\n                depth = this.groups.length;\n            }\n\n            return depth;\n        },\n\n        _columns: function() {\n            var depth = this._depth();\n            var columns = createArray(depth, function () { return ({ width: 20 }); });\n\n            return columns.concat(this.columns.map(function(column) {\n                return {\n                    width: parseInt(column.width, 10),\n                    autoWidth: column.width ? false : true\n                };\n            }));\n        }\n    });\n\n    kendo.deepExtend(kendo.excel, {\n        ExcelExporter: ExcelExporter,\n        TemplateService: TemplateService\n    });\n\n    })(window.kendo.jQuery);\n\n    (function($, kendo) {\n\n        var ExcelExporter = kendo.excel.ExcelExporter;\n\n        var extend = $.extend;\n\n        kendo.excel.TemplateService.register({\n            compile: kendo.template\n        });\n\n        kendo.ExcelExporter = kendo.Class.extend({\n            init: function(options) {\n                this.options = options;\n                var dataSource = options.dataSource;\n\n                if (dataSource instanceof kendo.data.DataSource) {\n\n                    if (!dataSource.filter()) {\n                        dataSource.options.filter = undefined;\n                    }\n\n                    this.dataSource = new dataSource.constructor(extend(\n                        {},\n                        dataSource.options,\n                        {\n                            page: options.allPages ? 0 : dataSource.page(),\n                            filter: dataSource.filter(),\n                            pageSize: (options.allPages || options.groupPaging) ? dataSource.total() : dataSource.pageSize() || dataSource.total(),\n                            sort: dataSource.sort(),\n                            group: dataSource.group(),\n                            aggregate: dataSource.aggregate(),\n                            isExcelExportRequest: true\n                        }));\n\n                    var data = dataSource.data();\n\n                    if (data.length > 0) {\n                        if (options.hierarchy) {\n                            for (var i = 0; i < data.length; i++) {\n                                if (data[i].expanded === false || data[i].expanded === undefined) {\n                                    data[i].expanded = true;\n                                    data[i].shouldRestoreExpandedState = true;\n                                }\n                            }\n                        }\n                        // Avoid toJSON() for perf and avoid data() to prevent reparenting.\n                        this.dataSource._data = data;\n\n                        var transport = this.dataSource.transport;\n                        if (dataSource._isServerGrouped() && transport.options && transport.options.data) { // clear the transport data when using aspnet-mvc transport\n                            transport.options.data = null;\n                        }\n                    }\n\n                } else {\n                    this.dataSource = kendo.data.DataSource.create(dataSource);\n                }\n            },\n\n            _hierarchy: function() {\n                var hierarchy = this.options.hierarchy;\n                var dataSource = this.dataSource;\n\n                if (hierarchy && dataSource.level) {\n                    hierarchy = {\n                        itemLevel: function(item) {\n                            return dataSource.level(item);\n                        }\n                    };\n\n                    var view = dataSource.view();\n                    var depth = 0;\n                    var level;\n\n                    for (var idx = 0; idx < view.length; idx++) {\n                        level = dataSource.level(view[idx]);\n\n                        if (level > depth) {\n                            depth = level;\n                        }\n                    }\n\n                    hierarchy.depth = depth + 1;\n                } else {\n                    hierarchy = false;\n                }\n\n                return {\n                    hierarchy: hierarchy\n                };\n            },\n\n            _restoreExpandedState: function() {\n                var options = this.options,\n                    dataSource = options.dataSource,\n                    data = dataSource.data(),\n                    hierarchy = options.hierarchy;\n\n                if (data.length > 0) {\n                    if (hierarchy) {\n                        for (var i = 0; i < data.length; i++) {\n                            if (data[i].shouldRestoreExpandedState) {\n                                data[i].expanded = false;\n                                delete data[i].shouldRestoreExpandedState;\n                            }\n                        }\n                    }\n                }\n            },\n\n            workbook: function() {\n                return $.Deferred((function(d) {\n                    this.dataSource.fetch()\n                        .then((function() {\n\n                            var workbook = new ExcelExporter(extend({}, this.options, this._hierarchy(), {\n                                data: this.dataSource.view(),\n                                groups: this.dataSource.group(),\n                                aggregates: this.dataSource.aggregates()\n                            })).workbook();\n\n                            d.resolve(workbook, this.dataSource.view());\n                        }).bind(this));\n                }).bind(this)).promise();\n            }\n        });\n\n\n    })(kendo.jQuery, kendo);\n\n    (function($, kendo) {\n\n\n    kendo.ExcelMixin = {\n        extend: function(proto) {\n           proto.events.push(\"excelExport\");\n           proto.options.excel = $.extend(proto.options.excel, this.options);\n           proto.saveAsExcel = this.saveAsExcel;\n        },\n        options: {\n            proxyURL: \"\",\n            allPages: false,\n            filterable: false,\n            fileName: \"Export.xlsx\",\n            collapsible: false\n        },\n        saveAsExcel: function(deferred) {\n            var excel = this.options.excel || {};\n\n            var exporter = new kendo.ExcelExporter({\n                columns: this.columns,\n                dataSource: this.dataSource,\n                allPages: excel.allPages,\n                filterable: excel.filterable,\n                hierarchy: excel.hierarchy,\n                collapsible: excel.collapsible\n            });\n\n            exporter.workbook().then((function(book, data) {\n                if (!this.trigger(\"excelExport\", { workbook: book, data: data })) {\n                    var workbook = new kendo.ooxml.Workbook(book);\n\n                    if (!workbook.options) {\n                        workbook.options = {};\n                    }\n                    workbook.options.skipCustomHeight = true;\n\n                    workbook.toDataURLAsync().then(function(dataURI) {\n                        kendo.saveAs({\n                            dataURI: dataURI,\n                            fileName: book.fileName || excel.fileName,\n                            proxyURL: excel.proxyURL,\n                            forceProxy: excel.forceProxy\n                        });\n\n                        exporter._restoreExpandedState();\n                        if (deferred) {\n                            deferred.resolve();\n                        }\n                    });\n                }\n            }).bind(this));\n        }\n    };\n\n    })(kendo.jQuery, kendo);\n\n    var __meta__ = {\n        id: \"excel\",\n        name: \"Excel export\",\n        category: \"framework\",\n        advanced: true,\n        mixin: true,\n        depends: [ \"data\", \"ooxml\" ]\n    };\n\n}));\n"]}