{"version":3,"sources":["raw-js/kendo.gantt.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendogantt","js","this","$","undefined$1","kendo","window","keys","supportsMedia","mobileOS","support","Widget","ui","encode","htmlEncode","ObservableObject","data","ObservableArray","Query","isArray","Array","isFunction","extend","isPlainObject","outerWidth","_outerWidth","outerHeight","_outerHeight","NS","TABINDEX","STRING","DOT","VIEWS_DROPDOWN_TEMPLATE","label","styles","views","viewsDropdown","Object","map","view","title","join","ADD_ACTIONS","text","ganttStyles","wrapper","plannedTasks","rowHeight","content","listWrapper","list","timelineWrapper","timeline","splitBar","splitter","popupWrapper","popupList","resizeHandle","icon","item","line","buttonDelete","buttonCancel","buttonSave","buttonToggle","buttonDefaults","primary","hovered","selected","focused","focusedCell","gridHeader","gridHeaderWrap","gridContent","tasks","popup","form","editForm","formContainer","resourcesFormContainer","message","buttonsContainer","button","editField","editLabel","resourcesField","toolbar","headerWrapper","footerWrapper","viewsWrapper","iconPlus","iconPdf","iconToggle","viewButton","link","pdfButton","appendButton","selector","uid","attr","focusTable","table","direct","parents","scrollPositions","parentsUntil","filter","index","element","getComputedStyles","overflow","add","each","parent","scrollTop","setActive","e","focus","Gantt","init","options","events","dataSource","fn","call","_events","_wrapper","_resources","length","_timeline","_processDefaults","_toolbar","_footer","_splitter","_adjustDimensions","_preventRefresh","_selectedViewName","_dataSource","_assignments","_list","_dependencies","_scrollable","_dataBind","_attachEvents","_createEditor","notify","_showWatermarkOverlay","name","autoBind","navigatable","selectable","editable","resizable","columnResizeHandleWidth","columns","dependencies","resources","assignments","taskTemplate","messages","save","cancel","destroy","deleteTaskConfirmation","deleteDependencyConfirmation","deleteTaskWindowTitle","deleteDependencyWindowTitle","selectView","day","week","month","year","start","end","actions","append","addChild","insertBefore","insertAfter","pdf","toggle","editor","editorTitle","resourcesEditorTitle","plannedStart","plannedEnd","percentComplete","assignButton","resourcesHeader","unitsHeader","addNew","percentCompleteHint","remove","actualStart","actualEnd","parentOptionLabel","general","predecessors","successors","other","dependencyType","switchText","offsetTooltipAdvanced","offsetTooltipDelay","seconds","minutes","hours","days","showWorkHours","showWorkDays","workDayStart","Date","workDayEnd","workWeekStart","workWeekEnd","hourSpan","snap","height","listWidth","showPlannedTasks","select","value","find","_selectionUpdate","clearSelection","unbind","_refreshHandler","_progressHandler","_errorHandler","_dependencyRefreshHandler","_dependencyErrorHandler","getKendoToolBar","footer","_editor","_resourceEditorWindow","_resizeDraggable","layout","getKendoSplitter","off","_mediaQuery","removeListener","_mediaQueryHandler","_resizeHandler","setOptions","newOptions","deepExtend","selectedView","isSettings","type","empty","_setEvents","resize","bind","on","matches","kendoSplitter","orientation","panes","collapsible","scrollable","size","width","addClass","appendTo","css","treelistWrapper","_viewClickHandler","target","trigger","preventDefault","_togglePane","that","treelist","contentSelector","is","removeClass","refresh","_resize","ns","viewsButtons","toolbarStyles","actionsMessages","defaults","menuButtons","m","attributes","class","click","_addClickHandler","open","_openAddClickHandler","saveAsPDF","showText","switchLabel","template","component","componentOptions","checked","change","_togglePlannedTasks","unchecked","viewsDdl","togglable","group","viewsGroup","current","toLowerCase","push","values","t","buttons","_viewsButtons","defaultCommands","_processTools","items","commands","tools","spacerPresent","create","c","splitbar","toolbarEl","_suppressResize","hide","show","viewsDropdownSelector","toolsOptions","prepend","kendoToolBar","defaultTools","parentMessages","matchMedia","addListener","val","toggleSwitch","direction","animation","effects","toolbarHeight","footerHeight","totalHeight","totalWidth","treeListVisible","splitBarWidth","treeListWidth","timelineWidth","children","_scrollTo","action","scrollTarget","id","closest","get","scrollIntoView","_addTask","orderId","task","_createNewModel","firstSlot","_timeSlots","set","_createTask","dataItem","taskParent","_getListEditable","update","reorder","mode","move","reorderable","clickMoveClick","_getListOptions","filterable","columnMenu","field","_attachResourceEditor","column","i","_resourcePopupEditor","_attachListEvents","oldIndex","newIndex","oldWidth","newWidth","_navigatable","model","container","cell","_preventItemChange","closeCell","key","updatedValues","previousTask","updateDuration","duration","updatePlannedDuration","plannedDuration","hasOwnProperty","getTime","isCurrentInHeader","currentIndex","rowIndex","updateInfo","hasChanges","cancelChanges","_updateAssignments","Math","max","cellIndex","_requestStart","sync","then","_tabPressed","td","tbody","eq","_setCurrent","sender","position","parentId","source","sort","dir","_updateTask","selection","listElement","listOptions","GanttList","prefix","edit","navigate","trimOptions","GanttTimeline","viewName","replace","viewsEl","getKendoButtonGroup","getByUid","resizeStart","dependency","predecessorId","predecessor","successorId","successor","_createDependency","currentUid","editTask","removeTask","summary","removeDependency","_error","GanttDataSource","refreshDependencies","GanttDependencyDataSource","dataTextField","dataColorField","dataFormatField","DataSource","_assignmentsRefreshHandler","dataTaskIdField","dataResourceIdField","dataValueField","gantt","PopupEditor","_createResourceEditor","cancelTask","saveTask","updateDependencies","buttonsEl","dialog","popupStyles","dialogEl","format","kendoButton","themeColor","updateModel","close","kendoWindow","modal","draggable","visible","deactivate","center","unitsValidation","step","min","assignmentsModel","schema","resourceTextField","fields","Units","validation","_resourceEditor","ResourceEditor","r","range","_render","taskTree","_renderDependencies","date","_scrollToDate","_modelFromElement","setDataSource","fetch","setDependenciesDataSource","assignment","resource","taskId","resourceId","hasMatch","operator","toArray","_updateAssignment","splice","_removeAssignment","shift","j","newLength","_createAssignment","taskCopy","toJSON","_editTask","difference","hasResourceChanges","k","updated","u","some","concat","dirty","_syncDataSource","_updateDependency","created","d","_preventDependencyRefresh","destroyed","resourceValueField","_taskConfirm","_removeTask","insert","_scrollToUid","resourceValue","_dependencyConfirm","_removeDependency","_removeTaskDependencies","_removeTaskAssignments","callback","_confirm","confirmation","showDialog","_progress","cachedUid","scrollToUid","cachedIndex","_selected","_assignResources","_renderTree","_current","assigments","applyTaskResource","setter","wrapTask","resourcedId","valueFormat","formatedValue","toString","color","_wrapResourceData","result","taskAssignments","valuePerResource","progress","headerSelector","timelineHeader","timelineContent","treeListHeader","treeListContent","scrollLeft","delta","wheelDeltaY","currentTarget","one","headerTable","contentTable","tables","isInput","ctrlKey","_focusTimeout","setTimeout","focusedIndex","keyCode","focusSequence","contains","F10","first","TAB","shiftKey","hasClass","last","DELETE","selectedTask","deleteAction","tagName","_viewByIndex","promises","when","apply","done","_adjustHeight","_renderCurrentTime","toggleClass","_setPlanned","PDFMixin","_drawPDF","listTableWidth","listTableHeight","toolbarsHeight","timelineTableWidth","clone","_drawPDFShadow","avoidLinks","plugin","jQuery"],"mappings":"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","file":"kendo.gantt.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.data.js'), require('kendo.resizable.js'), require('kendo.switch.js'), require('kendo.gantt.data.js'), require('kendo.gantt.editors.js'), require('kendo.gantt.list.js'), require('kendo.gantt.timeline.js'), require('kendo.splitter.js'), require('kendo.pdf.js'), require('kendo.toolbar.js'), require('kendo.html.button.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.data', 'kendo.resizable', 'kendo.switch', 'kendo.gantt.data', 'kendo.gantt.editors', 'kendo.gantt.list', 'kendo.gantt.timeline', 'kendo.splitter', 'kendo.pdf', 'kendo.toolbar', 'kendo.html.button'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendogantt = global.kendogantt || {}, global.kendogantt.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n        id: \"gantt\",\n        name: \"Gantt\",\n        category: \"web\",\n        description: \"The Gantt component.\",\n        depends: [ \"data\", \"resizable\", \"switch\", \"gantt.data\", \"gantt.editors\", \"gantt.list\", \"gantt.timeline\", \"pdf\", \"toolbar\", \"html.button\" ]\n    };\n    (function($, undefined$1) {\n\n        var kendo = window.kendo,\n            keys = kendo.keys,\n            supportsMedia = \"matchMedia\" in window,\n            mobileOS = kendo.support.mobileOS,\n            Widget = kendo.ui.Widget,\n            encode = kendo.htmlEncode,\n            ObservableObject = kendo.data.ObservableObject,\n            ObservableArray = kendo.data.ObservableArray,\n            Query = kendo.data.Query,\n            isArray = Array.isArray,\n            isFunction = kendo.isFunction,\n            extend = $.extend,\n            isPlainObject = $.isPlainObject,\n            outerWidth = kendo._outerWidth,\n            outerHeight = kendo._outerHeight,\n            defaultIndicatorWidth = 3,\n\n            NS = \".kendoGantt\",\n            PERCENTAGE_FORMAT = \"p0\",\n            TABINDEX = \"tabIndex\",\n            STRING = \"string\",\n            DOT = \".\",\n            TASK_DELETE_CONFIRM = \"Are you sure you want to delete this task?\",\n            DEPENDENCY_DELETE_CONFIRM = \"Are you sure you want to delete this dependency?\",\n            VIEWS_DROPDOWN_TEMPLATE = ({ label, styles, views }) => `<select aria-label=\"${label}\" class=\"k-dropdown k-picker k-dropdown-list ${styles.viewsDropdown}\">` +\n                `${Object.keys(views).map(view => '<option value=\"' + view + '\">' + views[view].title + '</option>').join(\"\")}` +\n            '</select>',\n            MIN_SCREEN = \"(max-width: 480px)\",\n            ADD_ACTIONS = [{\n                data: \"add\",\n                text: \"addChild\"\n            },\n            {\n                data: \"insert-before\",\n                text: \"insertBefore\"\n            },\n            {\n                data: \"insert-after\",\n                text: \"insertAfter\"\n            }];\n\n        var ganttStyles = {\n            wrapper: \"k-gantt\",\n            plannedTasks: \"k-gantt-planned\",\n            rowHeight: \"k-gantt-rowheight\",\n            content: \"k-gantt-content\",\n            listWrapper: \"k-gantt-treelist\",\n            list: \"k-gantt-treelist\",\n            timelineWrapper: \"k-gantt-timeline-pane\",\n            timeline: \"k-gantt-timeline-pane\",\n            splitBar: \"k-splitbar\",\n            splitter: \"k-splitter\",\n            popupWrapper: \"k-list-container\",\n            popupList: \"k-list k-reset\",\n            resizeHandle: \"k-resize-handle\",\n            icon: \"k-icon\",\n            item: \"k-item\",\n            line: \"k-gantt-line\",\n            buttonDelete: \"k-gantt-delete\",\n            buttonCancel: \"k-gantt-cancel\",\n            buttonSave: \"k-gantt-update\",\n            buttonToggle: \"k-gantt-toggle\",\n            buttonDefaults: \"k-button-md k-rounded-md k-button-solid\",\n            primary: \"k-button-solid-primary\",\n            hovered: \"k-hover\",\n            selected: \"k-selected\",\n            focused: \"k-focus\",\n            focusedCell: \"k-focus\",\n            gridHeader: \"k-grid-header\",\n            gridHeaderWrap: \"k-grid-header-wrap\",\n            gridContent: \"k-grid-content\",\n            tasks: \"k-gantt-tasks\",\n            popup: {\n                form: \"k-popup-edit-form\",\n                editForm: \"k-gantt-edit-form\",\n                formContainer: \"k-edit-form-container\",\n                resourcesFormContainer: \"k-resources-form-container\",\n                message: \"k-popup-message\",\n                buttonsContainer: \"k-edit-buttons\",\n                button: \"k-button\",\n                editField: \"k-edit-field\",\n                editLabel: \"k-edit-label\",\n                resourcesField: \"k-gantt-resources\"\n            },\n            toolbar: {\n                headerWrapper: \"k-gantt-header k-gantt-toolbar\",\n                footerWrapper: \"k-gantt-footer k-gantt-toolbar\",\n                toolbar: \"k-gantt-toolbar\",\n                views: \"k-gantt-views\",\n                viewsWrapper: \"k-gantt-views-wrapper\",\n                viewsDropdown: \"k-views-dropdown\",\n                button: \"k-button\",\n                buttonToggle: \"k-gantt-toggle\",\n                buttonDefaults: \"k-button-md k-rounded-md k-button-solid\",\n                iconPlus: \"plus\",\n                iconPdf: \"file-pdf\",\n                iconToggle: \"layout-1-by-4\",\n                viewButton: \"k-view\",\n                link: \"k-link\",\n                pdfButton: \"k-gantt-pdf\",\n                appendButton: \"k-gantt-create\"\n            }\n        };\n\n        function selector(uid) {\n            return \"[\" + kendo.attr(\"uid\") + (uid ? \"='\" + uid + \"']\" : \"]\");\n        }\n\n        function trimOptions(options) {\n            delete options.name;\n            delete options.prefix;\n\n            delete options.remove;\n            delete options.edit;\n            delete options.add;\n            delete options.navigate;\n\n            return options;\n        }\n\n        function focusTable(table, direct) {\n            var wrapper = table.parents('[' + kendo.attr(\"role\") + '=\"gantt\"]');\n            var scrollPositions = [];\n            var parents = scrollableParents(wrapper);\n\n            table.attr(TABINDEX, 0);\n\n            if (direct) {\n                parents.each(function(index, parent) {\n                    scrollPositions[index] = $(parent).scrollTop();\n                });\n            }\n\n            try {\n                //The setActive method does not cause the document to scroll to the active object in the current page\n                table[0].setActive();\n            } catch (e) {\n                table[0].focus();\n            }\n\n            if (direct) {\n                parents.each(function(index, parent) {\n                    $(parent).scrollTop(scrollPositions[index]);\n                });\n            }\n        }\n\n        function scrollableParents(element) {\n            return $(element).parentsUntil(\"body\")\n                    .filter(function(index, element) {\n                        var computedStyle = kendo.getComputedStyles(element, [\"overflow\"]);\n                        return computedStyle.overflow != \"visible\";\n                    })\n                    .add(window);\n        }\n\n        var Gantt = Widget.extend({\n            init: function(element, options, events) {\n                if (isArray(options)) {\n                    options = { dataSource: options };\n                }\n\n                Widget.fn.init.call(this, element, options);\n\n                if (events) {\n                    this._events = events;\n                }\n\n                this._wrapper();\n\n                this._resources();\n\n                if (!this.options.views || !this.options.views.length) {\n                    this.options.views = [\"day\", \"week\", \"month\"];\n                }\n\n                this._timeline();\n\n                this._processDefaults();\n                this._toolbar();\n                this._footer();\n                this._splitter();\n\n                this._adjustDimensions();\n\n                // Prevent extra refresh from setting the view\n                this._preventRefresh = true;\n\n                this.view(this.timeline._selectedViewName);\n\n                this._preventRefresh = false;\n\n                this._dataSource();\n\n                this._assignments();\n\n                this._list();\n\n                this._dependencies();\n\n                this._scrollable();\n\n                this._dataBind();\n\n                this._attachEvents();\n\n                this._createEditor();\n\n                kendo.notify(this);\n\n                if (this._showWatermarkOverlay) {\n                    this._showWatermarkOverlay(this.wrapper[0]);\n                }\n            },\n\n            events: [\n                \"dataBinding\",\n                \"dataBound\",\n                \"add\",\n                \"edit\",\n                \"remove\",\n                \"cancel\",\n                \"save\",\n                \"change\",\n                \"navigate\",\n                \"moveStart\",\n                \"move\",\n                \"moveEnd\",\n                \"resizeStart\",\n                \"resize\",\n                \"resizeEnd\",\n                \"columnHide\",\n                \"columnReorder\",\n                \"columnResize\",\n                \"columnShow\",\n                \"togglePlannedTasks\"\n            ],\n\n            options: {\n                name: \"Gantt\",\n                autoBind: true,\n                navigatable: true,\n                selectable: true,\n                editable: true,\n                resizable: false,\n                columnResizeHandleWidth: defaultIndicatorWidth,\n                columns: [],\n                views: [],\n                dataSource: {},\n                dependencies: {},\n                resources: {},\n                assignments: {},\n                taskTemplate: null,\n                messages: {\n                    save: \"Save\",\n                    cancel: \"Cancel\",\n                    destroy: \"Delete\",\n                    deleteTaskConfirmation: TASK_DELETE_CONFIRM,\n                    deleteDependencyConfirmation: DEPENDENCY_DELETE_CONFIRM,\n                    deleteTaskWindowTitle: \"Delete task\",\n                    deleteDependencyWindowTitle: \"Delete dependency\",\n                    selectView: \"Select view\",\n                    views: {\n                        day: \"Day\",\n                        week: \"Week\",\n                        month: \"Month\",\n                        year: \"Year\",\n                        start: \"Start\",\n                        end: \"End\"\n                    },\n                    actions: {\n                        append: \"Add Task\",\n                        addChild: \"Add Child\",\n                        insertBefore: \"Add Above\",\n                        insertAfter: \"Add Below\",\n                        pdf: \"Export to PDF\",\n                        toggle: \"Toggle pane\"\n                    },\n                    editor: {\n                        editorTitle: \"Task\",\n                        resourcesEditorTitle: \"Resources\",\n                        title: \"Title\",\n                        start: \"Start\",\n                        end: \"End\",\n                        plannedStart: \"Planned Start\",\n                        plannedEnd: \"Planned End\",\n                        percentComplete: \"Complete\",\n                        resources: \"Resources\",\n                        assignButton: \"Assign\",\n                        resourcesHeader: \"Resources\",\n                        unitsHeader: \"Units\",\n                        parent: \"Parent\",\n                        addNew: \"Add\",\n                        name: \"Name\",\n                        percentCompleteHint: \"value from 0 to 1\",\n                        remove: \"Remove\",\n                        actualStart: \"Actual Start\",\n                        actualEnd: \"Actual End\",\n                        parentOptionLabel: \"-None-\",\n                        general: \"General\",\n                        predecessors: \"Predecessors\",\n                        successors: \"Successors\",\n                        other: \"Other\",\n                        dependencyType: \"Type\"\n                    },\n                    plannedTasks: {\n                        switchText: \"Planned Tasks\",\n                        offsetTooltipAdvanced: \"Met deadline earlier\",\n                        offsetTooltipDelay: \"Delay\",\n                        seconds: \"seconds\",\n                        minutes: \"minutes\",\n                        hours: \"hours\",\n                        days: \"days\"\n                    }\n                },\n                showWorkHours: true,\n                showWorkDays: true,\n                toolbar: null,\n                workDayStart: new Date(1980, 1, 1, 8, 0, 0),\n                workDayEnd: new Date(1980, 1, 1, 17, 0, 0),\n                workWeekStart: 1,\n                workWeekEnd: 5,\n                hourSpan: 1,\n                snap: true,\n                height: 600,\n                listWidth: \"30%\",\n                rowHeight: null,\n                showPlannedTasks: false\n            },\n\n            select: function(value) {\n                var list = this.list;\n\n                if (!value) {\n                    return list.select();\n                }\n\n                if (typeof value === STRING) {\n                    value = list.content.find(value);\n                }\n\n                list.select(value);\n                this._selectionUpdate();\n\n                return;\n            },\n\n            clearSelection: function() {\n                this.list.clearSelection();\n                this._selectionUpdate();\n            },\n\n            destroy: function() {\n                Widget.fn.destroy.call(this);\n\n                if (this.dataSource) {\n                    this.dataSource.unbind(\"change\", this._refreshHandler);\n                    this.dataSource.unbind(\"progress\", this._progressHandler);\n                    this.dataSource.unbind(\"error\", this._errorHandler);\n                }\n\n                if (this.dependencies) {\n                    this.dependencies.unbind(\"change\", this._dependencyRefreshHandler);\n                    this.dependencies.unbind(\"error\", this._dependencyErrorHandler);\n                }\n\n                if (this.timeline) {\n                    this.timeline.unbind();\n                    this.timeline.destroy();\n                }\n\n                if (this.list) {\n                    this.list.unbind();\n                    this.list.destroy();\n                }\n\n                if (this.toolbar && this.toolbar.getKendoToolBar()) {\n                    this.toolbar.getKendoToolBar().destroy();\n                }\n\n                if (this.footer && this.footer.getKendoToolBar()) {\n                    this.footer.getKendoToolBar().destroy();\n                }\n\n                if (this._editor) {\n                    this._editor.destroy();\n                }\n\n                if (this._resourceEditorWindow) {\n                    this._resourceEditorWindow.destroy();\n                }\n\n                if (this._resizeDraggable) {\n                    this._resizeDraggable.destroy();\n                }\n\n                if (this.layout && this.layout.getKendoSplitter()) {\n                    this.layout.getKendoSplitter().destroy();\n                }\n\n                this.toolbar.off(NS);\n\n                if (supportsMedia) {\n                    this._mediaQuery.removeListener(this._mediaQueryHandler);\n                    this._mediaQuery = null;\n                }\n\n                $(window).off(\"resize\" + NS, this._resizeHandler);\n                $(this.wrapper).off(NS);\n\n                this.toolbar = null;\n                this.footer = null;\n\n                kendo.destroy(this.element);\n            },\n\n            setOptions: function(options) {\n                var newOptions = kendo.deepExtend({}, this.options, options);\n\n                var events = this._events;\n\n                if (!options.views) {\n                    var selectedView = this.view().name;\n\n                    newOptions.views = $.map(this.options.views, function(view) {\n                        var isSettings = isPlainObject(view);\n                        var name = isSettings ? ((typeof view.type !== \"string\") ? view.title : view.type) : view;\n\n                        if (selectedView === name) {\n                            if (isSettings) {\n                                view.selected = true;\n                            } else {\n                                view = { type: name, selected: true };\n                            }\n                        } else if (isSettings) {\n                            view.selected = false;\n                        }\n\n                        return view;\n                    });\n                }\n\n                if (!options.dataSource) { newOptions.dataSource = this.dataSource; }\n                if (!options.dependencies) { newOptions.dependencies = this.dependencies; }\n                if (!options.resources) { newOptions.resources = this.resources; }\n                if (!options.assignments) { newOptions.assignments = this.assignments; }\n\n                this.destroy();\n                this.element.empty();\n                this.options = null;\n\n                this.init(this.element, newOptions, events);\n\n                Widget.fn._setEvents.call(this, newOptions);\n            },\n\n            _attachEvents: function() {\n                this._resizeHandler = this.resize.bind(this, false);\n                $(window).on(\"resize\" + NS, this._resizeHandler);\n\n                if (supportsMedia) {\n                    this._mediaQueryHandler({ matches: this._mediaQuery.matches });\n                }\n            },\n\n            _splitter: function() {\n                this.splitter = this.layout.kendoSplitter({\n                    navigatable: this.options.navigatable,\n                    orientation: \"horizontal\",\n                    panes: [\n                        { collapsible: false, scrollable: false, label: \"Gantt List\" },\n                        { collapsible: false, scrollable: false, label: \"Gantt Timeline\" }\n                    ]\n                }).getKendoSplitter();\n\n                if (this.options.listWidth) {\n                    this.splitter.size(\".k-pane:first\", this.options.listWidth);\n                }\n            },\n\n            _wrapper: function() {\n                var ganttStyles = Gantt.styles;\n                var options = this.options;\n                var height = options.height;\n                var width = options.width;\n\n                this.wrapper = this.element.addClass(ganttStyles.wrapper).attr(\"role\", \"application\");\n                this.layout = $(\"<div class='\" + ganttStyles.content + \"' />\").appendTo(this.wrapper)\n                    .append(\"<div class='\" + ganttStyles.listWrapper + \"'><div></div></div>\")\n                    .append(\"<div class='\" + ganttStyles.timelineWrapper + \"'><div></div></div>\");\n\n                if (options.showPlannedTasks) {\n                    this.wrapper.addClass(ganttStyles.plannedTasks);\n                }\n\n                if (height) {\n                    this.wrapper.css(\"height\", height);\n                }\n\n                if (width) {\n                    this.wrapper.css(\"width\", width);\n                }\n\n                if (options.rowHeight) {\n                    this.wrapper.addClass(ganttStyles.rowHeight);\n                }\n\n                this.treelistWrapper = this.wrapper.find(DOT + ganttStyles.list);\n                this.timelineWrapper = this.wrapper.find(DOT + ganttStyles.timeline);\n\n                this.treelistWrapper.css(\"width\", options.listWidth);\n                this.timelineWrapper.css(\"width\", this.wrapper.width() - this.treelistWrapper.outerWidth());\n            },\n\n            _viewClickHandler: function(e) {\n                var list = this.list;\n                var name = e.target.attr(kendo.attr(\"name\"));\n\n                if (list.editor && !list.editor.end()) {\n                    return;\n                }\n\n                if (!this.trigger(\"navigate\", { view: name })) {\n                    this.view(name);\n                } else {\n                    e.preventDefault();\n                }\n            },\n\n            _togglePane: function(e) {\n                var that = this,\n                    treelist = that.treelistWrapper,\n                    timeline = that.timelineWrapper,\n                    contentSelector = DOT + ganttStyles.gridContent;\n\n                e.preventDefault();\n\n                if (treelist.is(\":visible\")) {\n                    treelist.addClass(\"k-hidden\");\n                    timeline.removeClass(\"k-hidden\");\n\n                    that.refresh();\n\n                    timeline\n                        .find(contentSelector)\n                        .scrollTop(that.scrollTop);\n                } else {\n                    treelist.removeClass(\"k-hidden\");\n                    timeline.addClass(\"k-hidden\");\n\n                    treelist\n                        .find(contentSelector)\n                        .scrollTop(that.scrollTop);\n                }\n\n                that._resize();\n            },\n\n            _processDefaults: function() {\n                var that = this,\n                    views = that.timeline.views,\n                    ns = kendo.ns,\n                    viewsButtons = [],\n                    toolbarStyles = Gantt.styles.toolbar,\n                    actionsMessages = this.options.messages.actions,\n                    items = ADD_ACTIONS.map((m) => ({\n                        text: actionsMessages[m.text],\n                        attributes: { \"data-type\": m.data }\n                    })),\n                    defaults = {\n                        append: {\n                            name: \"append\",\n                            type: \"dropDownButton\",\n                            menuButtons: items,\n                            icon: toolbarStyles.iconPlus,\n                            attributes: {\n                                class: toolbarStyles.appendButton\n                            },\n                            click: that._addClickHandler.bind(that),\n                            open: that._openAddClickHandler.bind(that)\n                        },\n                        pdf: {\n                            name: \"pdf\",\n                            type: \"button\",\n                            attributes: {\n                                class: toolbarStyles.pdfButton\n                            },\n                            icon: toolbarStyles.iconPdf,\n                            click: that.saveAsPDF.bind(that)\n                        },\n                        toggle: {\n                            name: \"toggle\",\n                            type: \"button\",\n                            showText: \"overflow\",\n                            attributes: {\n                                class: \"k-gantt-toggle\"\n                            },\n                            icon: toolbarStyles.iconToggle,\n                            click: that._togglePane.bind(that)\n                        },\n                        switchLabel: {\n                            template: \"<label for=planned-switch>\" + that.options.messages.plannedTasks.switchText + \"</label>\"\n                        },\n                        plannedTasks: {\n                            type: \"component\",\n                            component: \"Switch\",\n                            element: \"<input id='planned-switch' class='k-gantt-planned-switch'>\",\n                            componentOptions: {\n                                checked: that.options.showPlannedTasks,\n                                change: that._togglePlannedTasks.bind(that),\n                                messages: {\n                                    checked: \"\",\n                                    unchecked: \"\"\n                                }\n                            }\n                        },\n                        viewsDdl: {\n                            template: VIEWS_DROPDOWN_TEMPLATE({\n                                views: that.timeline.views,\n                                styles: toolbarStyles,\n                                label: that.options.messages.selectView\n                            })\n                        },\n                        view: {\n                            name: \"view\",\n                            type: \"button\",\n                            togglable: true,\n                            group: \"views\"\n                        },\n                        viewsGroup: {\n                            type: \"buttonGroup\",\n                            attributes: {\n                                class: toolbarStyles.views\n                            }\n                        }\n                    };\n\n                Object.keys(views).map(name => {\n                    var current = $.extend(true, {}, defaults.view);\n\n                    current.text = views[name].title;\n                    current.attributes = {\n                        class: \"k-view-\" + name.toLowerCase()\n                    };\n                    current.attributes[\"data\" + ns + \"-name\"] = name;\n\n                    defaults[name] = current;\n\n                    viewsButtons.push(name);\n                });\n\n                Object.values(defaults).map(t => {\n                    if (t.name === \"view\") {\n                        t.click = that._viewClickHandler.bind(that);\n                    }\n                });\n\n                defaults.viewsGroup.buttons = viewsButtons;\n\n                that._viewsButtons = viewsButtons;\n                that.defaultCommands = defaults;\n            },\n\n            _processTools: function(items) {\n                var editable = this.options.editable,\n                    commands = [],\n                    tools = [\"toggle\"],\n                    spacerPresent = false,\n                    defaults = this.defaultCommands;\n\n                if (!Array.isArray(items)) {\n                    if (editable && editable.create !== false) {\n                        tools.push(\"append\");\n                    }\n                } else {\n                    commands = items;\n                }\n\n                commands.map(c => {\n                    if (c === \"plannedTasks\" || c.name === \"plannedTasks\") {\n                        spacerPresent = true;\n\n                        tools.push({\n                            type: \"spacer\"\n                        });\n\n                        tools.push(\"switchLabel\");\n                    }\n\n                    if (!defaults[c] && !defaults[c.name] && !c.template) {\n                        if (typeof c === STRING) {\n                            c = {\n                                name: c,\n                                type: \"button\",\n                                text: c,\n                                attributes: {\n                                    class: \"k-gantt-\" + c\n                                }\n                            };\n                        } else {\n                            c = $.extend({}, {\n                                type: \"button\",\n                                text: c.name,\n                                attributes: {\n                                    class: \"k-gantt-\" + c.name\n                                }\n                            }, c);\n                        }\n                    }\n\n                    tools.push(c);\n                });\n\n                if (!spacerPresent) {\n                    tools.push({\n                        type: \"spacer\"\n                    });\n                }\n\n                if (this._viewsButtons && this._viewsButtons.length > 0) {\n                    if (this._viewsButtons.length > 1) {\n                        tools.push(\"viewsDdl\");\n                    }\n\n                    tools.push(\"viewsGroup\");\n                }\n\n                return tools;\n            },\n\n            _mediaQueryHandler: function(e) {\n                var that = this;\n                var splitbar = that.layout.find(\".k-splitbar\");\n                var splitter = that.layout.getKendoSplitter();\n                var treelist = that.treelistWrapper;\n                var timeline = that.timelineWrapper;\n                var contentSelector = DOT + ganttStyles.gridContent;\n\n                var toolbarEl = that.toolbar;\n                var toolbar = toolbarEl.getKendoToolBar();\n\n                if (e.matches) {\n                    treelist.addClass(\"k-hidden\");\n                    splitbar.addClass(\"k-hidden\");\n                    splitter._suppressResize = true;\n                    toolbar.hide(toolbarEl.find(\".k-gantt-views\"));\n                    toolbar.show(toolbarEl.find(\".k-views-dropdown\"));\n\n                    treelist.width(\"100%\");\n                } else {\n                    splitter._suppressResize = false;\n                    treelist.removeClass(\"k-hidden\");\n                    splitbar.removeClass(\"k-hidden\");\n                    timeline.removeClass(\"k-hidden\");\n\n                    toolbar.show(toolbarEl.find(\".k-gantt-views\"));\n                    toolbar.hide(toolbarEl.find(\".k-views-dropdown\"));\n\n                    treelist.width(treelist.outerWidth());\n\n                    timeline\n                        .find(contentSelector)\n                        .scrollTop(that.scrollTop);\n                }\n\n                that._resize();\n            },\n\n            _toolbar: function() {\n                var that = this;\n                var ganttStyles = Gantt.styles;\n                var viewsDropdownSelector = DOT + ganttStyles.toolbar.viewsDropdown;\n                var toolsOptions = this.options.toolbar;\n                var tools;\n                var toolbar;\n\n                if (typeof toolsOptions === STRING) {\n                    toolsOptions = kendo.template(toolsOptions).bind(this);\n                }\n\n                if (isFunction(toolsOptions)) {\n                    tools = this._processTools([{\n                        template: toolsOptions({})\n                    }]);\n                } else {\n                    tools = this._processTools(toolsOptions);\n                }\n\n                toolbar = $(\"<div class='\" + ganttStyles.toolbar.headerWrapper + \"'>\");\n\n                this.wrapper.prepend(toolbar);\n                this.toolbar = toolbar;\n\n                toolbar.kendoToolBar({\n                    resizable: false,\n                    tools: tools,\n                    size: \"medium\",\n                    defaultTools: this.defaultCommands,\n                    parentMessages: this.options.messages.actions\n                });\n\n                if (supportsMedia) {\n                    this._mediaQuery = window.matchMedia(MIN_SCREEN);\n                    this._mediaQuery.addListener(this._mediaQueryHandler.bind(this));\n                }\n\n                toolbar.on(\"change\" + NS, viewsDropdownSelector, function() {\n                    var list = that.list;\n                    var name = $(this).val();\n\n                    if (list.editable && list.editable.trigger(\"validate\")) {\n                        return;\n                    }\n\n                    if (!that.trigger(\"navigate\", { view: name })) {\n                        that.view(name);\n                    }\n                });\n\n                this.toggleSwitch = toolbar.find('input.k-gantt-planned-switch').data(\"kendoSwitch\");\n            },\n\n            _footer: function() {\n                var editable = this.options.editable;\n\n                if (!editable || editable.create === false) {\n                    return;\n                }\n\n                var ganttStyles = Gantt.styles.toolbar;\n                var messages = this.options.messages.actions;\n                var footer = $(\"<div class='\" + ganttStyles.footerWrapper + \"'>\");\n\n                this.wrapper.append(footer);\n                this.footer = footer;\n\n                footer.kendoToolBar({\n                    resizable: false,\n                    size: \"medium\",\n                    tools: [\"append\"],\n                    defaultTools: {\n                        append: extend(true, {}, this.defaultCommands.append, {\n                            direction: \"up\",\n                            animation: {\n                                open: {\n                                    effects: \"slideIn:up\"\n                                }\n                            }\n                        })\n                    },\n                    parentMessages: messages\n                });\n            },\n\n            _adjustDimensions: function() {\n                var element = this.element;\n                var toolbarHeight = outerHeight(this.toolbar);\n                var footerHeight = this.footer ? outerHeight(this.footer) : 0;\n                var totalHeight = element.height();\n                var totalWidth = element.width();\n                var treeListVisible = this.treelistWrapper.is(\":visible\");\n                var splitBar = this.layout.find(\".k-splitbar\");\n                var splitBarWidth = splitBar.is(\":visible\") ? outerWidth(splitBar) : 0;\n                var treeListWidth = treeListVisible ? outerWidth(this.treelistWrapper) : 0;\n                var timelineWidth = totalWidth - ( treeListWidth + splitBarWidth );\n\n                this.layout.children().height(totalHeight - (toolbarHeight + footerHeight));\n                this.timelineWrapper.width(timelineWidth);\n                if (!treeListVisible) {\n                    this.timelineWrapper.css(\"left\", 0);\n                }\n\n                if (totalWidth < (treeListWidth + splitBarWidth)) {\n                    this.treelistWrapper.width(totalWidth - splitBarWidth);\n                }\n            },\n\n            _scrollTo: function(value) {\n                var view = this.timeline.view();\n                var list = this.list;\n                var attr = kendo.attr(\"uid\");\n                var id = typeof value === \"string\" ? value :\n                    value.closest(\"tr\" + selector()).attr(attr);\n                var action;\n                var scrollTarget;\n                var scrollIntoView = function() {\n                    if (scrollTarget.length !== 0) {\n                        action();\n                    }\n                };\n\n                if (view.content.is(\":visible\")) {\n                    scrollTarget = view.content.find(selector(id));\n                    action = function() {\n                        view._scrollTo(scrollTarget);\n                    };\n                } else {\n                    scrollTarget = list.element.find(selector(id));\n                    action = function() {\n                        scrollTarget.get(0).scrollIntoView();\n                    };\n                }\n\n                scrollIntoView();\n            },\n\n            _addTask: function(selected, parent, type) {\n                var dataSource = this.dataSource,\n                    task = dataSource._createNewModel({}),\n                    timeline = this.timeline,\n                    firstSlot = timeline.view()._timeSlots()[0],\n                    editable = this.list.editor,\n                    orderId;\n\n                if (editable && editable.trigger(\"validate\")) {\n                    return;\n                }\n\n                task.set(\"title\", \"New task\");\n\n                if (parent) {\n                    task.set(\"parentId\", parent.get(\"id\"));\n                    task.set(\"start\", parent.get(\"start\"));\n                    task.set(\"end\", parent.get(\"end\"));\n                    task.set(\"plannedStart\", parent.get(\"plannedStart\"));\n                    task.set(\"plannedEnd\", parent.get(\"plannedEnd\"));\n                } else {\n                    task.set(\"start\", firstSlot.start);\n                    task.set(\"end\", firstSlot.end);\n                }\n\n                if (type && type !== \"add\") {\n                    orderId = selected.get(\"orderId\");\n                    orderId = type === \"insert-before\" ? orderId : orderId + 1;\n                }\n\n                this._createTask(task, orderId);\n            },\n\n            _addClickHandler: function(e) {\n                var type = e.target.data(\"type\");\n                var dataSource = this.dataSource;\n                var selected = this.dataItem(this.select());\n                var parent = dataSource.taskParent(selected);\n                var target = type === \"add\" ? selected : parent;\n\n                this._addTask(selected, target, type);\n            },\n\n            _openAddClickHandler: function(e) {\n                var selected = this.select();\n\n                if (!selected || selected.length === 0) {\n                    e.preventDefault();\n\n                    this._addTask();\n                }\n            },\n\n            _getListEditable: function() {\n                var editable = false,\n                    options = this.options;\n\n                if (options.editable !== false) {\n                    editable = \"incell\";\n\n                    if (options.editable && options.editable.update === false) {\n                        editable = false;\n                    } else {\n                        if (!options.editable || options.editable.reorder !== false) {\n                            editable = {\n                                mode: \"incell\",\n                                move: {\n                                    reorderable: true,\n                                    clickMoveClick: options.editable.clickMoveClick === false ? false : true\n                                }\n                            };\n                        }\n                    }\n                }\n\n                return editable;\n            },\n\n            _getListOptions: function() {\n                var options = this.options,\n                    editable = this._getListEditable(),\n                    listWrapper = this.wrapper.find(DOT + ganttStyles.list),\n                    ganttListOptions = {\n                        columns: options.columns || [],\n                        dataSource: this.dataSource,\n                        navigatable: options.navigatable,\n                        selectable: options.selectable,\n                        reorderable: options.reorderable,\n                        editable: editable,\n                        resizable: options.resizable,\n                        filterable: options.filterable,\n                        columnMenu: options.columnMenu,\n                        columnResizeHandleWidth: this.options.columnResizeHandleWidth,\n                        listWidth: outerWidth(listWrapper),\n                        resourcesField: this.resources.field,\n                        rowHeight: this.options.rowHeight\n                    };\n\n                return ganttListOptions;\n            },\n\n            _attachResourceEditor: function(columns) {\n                var column;\n\n                for (var i = 0; i < columns.length; i++) {\n                    column = columns[i];\n\n                    if (column.field === this.resources.field && typeof column.editor !== \"function\") {\n                        column.editor = this._resourcePopupEditor.bind(this);\n                    }\n                }\n            },\n\n            _attachListEvents: function() {\n                var that = this;\n\n                that.list\n                    .bind(\"columnShow\", function(e) {\n                        that.trigger(\"columnShow\", { column: e.column });\n                    })\n                    .bind(\"columnHide\", function(e) {\n                        that.trigger(\"columnHide\", { column: e.column });\n                    })\n                    .bind(\"columnReorder\", function(e) {\n                        that.trigger(\"columnReorder\", { column: e.column, oldIndex: e.oldIndex, newIndex: e.newIndex });\n                    })\n                    .bind(\"columnResize\", function(e) {\n                        that.trigger(\"columnResize\", { column: e.column, oldWidth: e.oldWidth, newWidth: e.newWidth });\n                    })\n                    .bind(\"render\", function() {\n                        that._navigatable();\n                     }, true)\n                    .bind(\"beforeEdit\", function(e) {\n\n                        if (that.trigger(\"edit\", { task: e.model, container: e.container })) {\n                            e.preventDefault();\n                        }\n                    })\n                    .bind(\"cancel\", function(e) {\n                        if (that.trigger(\"cancel\", { task: e.model, container: e.cell })) {\n                            e.preventDefault();\n                            return;\n                        }\n\n                        that._preventItemChange = true;\n                        that.list.closeCell(true);\n                    })\n                    .bind(\"save\", function(e) {\n                        var updatedValues = e.values,\n                            key;\n\n                        that.previousTask = {};\n                        that._preventRefresh = true;\n\n                        if (that.updateDuration === null || that.updateDuration === undefined$1) {\n                            that.updateDuration = e.model.duration();\n                        }\n\n                        if (that.updatePlannedDuration === null || that.updatePlannedDuration === undefined$1) {\n                            that.updatePlannedDuration = e.model.plannedDuration();\n                        }\n\n                        if (updatedValues.hasOwnProperty(\"start\")) {\n                            updatedValues.end = new Date(updatedValues.start.getTime() + that.updateDuration);\n                        }\n\n                        if (updatedValues.hasOwnProperty(\"plannedStart\") && updatedValues.plannedStart) {\n                            updatedValues.plannedEnd = new Date(updatedValues.plannedStart.getTime() + that.updatePlannedDuration);\n                        }\n\n                        for (key in updatedValues) {\n                            if (updatedValues.hasOwnProperty(key)) {\n                                that.previousTask[key] = e.model.get(key);\n                            }\n                        }\n\n                        that.updatedValues = updatedValues;\n                    })\n                    .bind(\"itemChange\", function(e) {\n                        var updateInfo = that.updatedValues,\n                            task = e.data,\n                            resourcesField = that.resources.field,\n                            previousTask = that.previousTask,\n                            current,\n                            isCurrentInHeader,\n                            currentIndex,\n                            rowIndex,\n                            navigatable = that.options.navigatable,\n                            key;\n\n                        if (that._preventItemChange) {\n                            that._preventItemChange = false;\n                            return;\n                        }\n\n                        for (key in previousTask) {\n                            if (previousTask.hasOwnProperty(key)) {\n                                task.set(key, previousTask[key]);\n                            }\n                        }\n\n                        that.previousTask = {};\n\n                        if (!that.trigger(\"save\", { task: task, values: updateInfo })) {\n                            if (updateInfo) {\n                                that._preventRefresh = true;\n                                that.dataSource.update(task, updateInfo);\n\n                                if (updateInfo[resourcesField]) {\n                                    that._updateAssignments(task.get(\"id\"), updateInfo[resourcesField]);\n                                }\n                            }\n\n                            if (navigatable) {\n                                current = $(that.list.current());\n                                isCurrentInHeader = current.is(\"th\");\n                                rowIndex = current.closest(\"tr\").index();\n                                currentIndex = isCurrentInHeader ? current.parent().children(\":not(.k-group-cell)\").index(current[0]) : Math.max(that.list.cellIndex(current), 0);\n                            }\n\n                            that._preventRefresh = false;\n                            that._requestStart();\n                            that.dataSource.sync().then(function() {\n                                if (that.options.navigatable && !that._tabPressed) {\n                                    if (!isCurrentInHeader) {\n                                        var row = that.list.tbody.children().eq(rowIndex);\n\n                                        var td = row.find(\">td:visible\")\n                                            .eq(currentIndex);\n\n                                        that.list._setCurrent(td, false, true);\n                                    }\n                                }\n                                that._tabPressed = false;\n                            });\n                        } else if (that.dataSource.hasChanges()) {\n                            that.dataSource.cancelChanges(task);\n                            that._preventRefresh = false;\n                            that.refresh();\n                        }\n\n                        that.updatedValues = null;\n                        that.updateDuration = null;\n                    })\n                    .bind(\"change\", function() {\n                        that.trigger(\"change\");\n\n                        that._selectionUpdate();\n\n                    })\n                    .bind(\"navigate\", function(e) {\n                        var treeList = e.sender;\n                        var current = treeList.current();\n                        var uid;\n\n                        that._scrollTo(current);\n                        that.timeline.element.find(\"div.k-task\").attr(\"tabindex\", \"-1\");\n                        uid = current.closest(\"tr\").attr(\"data-uid\");\n                        that.timeline.element.find(\"div.k-task[data-uid='\" + uid + \"']\").attr(\"tabindex\", \"0\");\n                    })\n                    .bind(\"expand\", function(e) {\n                        e.preventDefault();\n                        e.model.set(\"expanded\", true);\n                    })\n                    .bind(\"collapse\", function(e) {\n                        e.preventDefault();\n                        e.model.set(\"expanded\", false);\n                    })\n                    .bind(\"dragend\", function(e) {\n                        var dataSource = that.dataSource,\n                            task, updateInfo;\n\n                        if (e.position === \"over\") {\n                            dataSource.cancelChanges();\n\n                            updateInfo = {\n                                parentId: e.source.parentId\n                            };\n\n                            task = dataSource.get(e.source.id);\n\n                            if (!that.trigger(\"save\", { task: task, values: updateInfo })) {\n                                dataSource.update(task, updateInfo);\n                            }\n\n                            dataSource.sync();\n                        }\n                    })\n                    .bind(\"dataBound\", function() {\n                        if (that.dataSource.sort().length === 0) {\n                            that.dataSource.sort([{ field: \"orderId\", dir: \"asc\" }]);\n                        }\n                    })\n                    .bind(\"reorder\", function(e) {\n                        that._updateTask(e.task, e.updateInfo);\n                    });\n            },\n\n            _selectionUpdate: function() {\n                var that = this,\n                    selection = that.list.select();\n\n                if (selection.length) {\n                    that.timeline.select(\"[data-uid='\" + selection.attr(\"data-uid\") + \"']\");\n                } else {\n                    that.timeline.clearSelection();\n                }\n            },\n\n            _list: function() {\n                var ganttStyles = Gantt.styles,\n                    listWrapper = this.wrapper.find(DOT + ganttStyles.list),\n                    listElement = listWrapper.find(\"> div\"),\n                    listOptions = this._getListOptions();\n\n                this._attachResourceEditor(listOptions.columns);\n\n                this.list = new kendo.ui.GanttList(listElement, listOptions);\n\n                this._attachListEvents();\n            },\n\n            _timeline: function() {\n                var that = this;\n                var ganttStyles = Gantt.styles;\n                var options = trimOptions(extend(true, { resourcesField: this.resources.field }, this.options));\n                var element = this.wrapper.find(DOT + ganttStyles.timeline + \" > div\");\n\n                this.timeline = new kendo.ui.GanttTimeline(element, options);\n\n                this.timeline\n                    .bind(\"navigate\", function(e) {\n                        var viewName = e.view.replace(/\\./g, \"\\\\.\").toLowerCase();\n                        var viewsEl = that.toolbar.find(DOT + ganttStyles.toolbar.views);\n                        var viewsGroup = viewsEl.getKendoButtonGroup();\n\n                        if (viewsGroup) {\n                            viewsGroup.select(viewsEl.find(DOT + ganttStyles.toolbar.viewButton + \"-\" + viewName));\n                        }\n\n                        that.toolbar\n                            .find(DOT + ganttStyles.toolbar.viewsDropdown)\n                            .val(e.view);\n\n                        that.refresh();\n                    })\n                    .bind(\"moveStart\", function(e) {\n                        var editable = that.list.editor;\n\n                        if (editable && !editable.end()) {\n                            e.preventDefault();\n                            return;\n                        }\n\n                        if (that.trigger(\"moveStart\", { task: e.task })) {\n                            e.preventDefault();\n                        }\n                    })\n                    .bind(\"move\", function(e) {\n                        var task = e.task;\n                        var start = e.start;\n                        var end = new Date(start.getTime() + task.duration());\n\n                        if (that.trigger(\"move\", { task: task, start: start, end: end })) {\n                            e.preventDefault();\n                        }\n                    })\n                    .bind(\"moveEnd\", function(e) {\n                        var task = e.task;\n                        var start = e.start;\n                        var end = new Date(start.getTime() + task.duration());\n\n                        if (!that.trigger(\"moveEnd\", { task: task, start: start, end: end })) {\n                            that._updateTask(that.dataSource.getByUid(task.uid), {\n                                start: start,\n                                end: end\n                            });\n                        }\n                    })\n                    .bind(\"resizeStart\", function(e) {\n                        var editable = that.list.editor;\n\n                        if (editable && !editable.end()) {\n                            e.preventDefault();\n                            return;\n                        }\n\n                        if (that.trigger(\"resizeStart\", { task: e.task })) {\n                            e.preventDefault();\n                        }\n                    })\n                    .bind(\"resize\", function(e) {\n                        if (that.trigger(\"resize\", { task: e.task, start: e.start, end: e.end })) {\n                            e.preventDefault();\n                        }\n                    })\n                    .bind(\"resizeEnd\", function(e) {\n                        var task = e.task;\n                        var updateInfo = {};\n\n                        if (e.resizeStart) {\n                            updateInfo.start = e.start;\n                        } else {\n                            updateInfo.end = e.end;\n                        }\n\n                        if (!that.trigger(\"resizeEnd\", { task: task, start: e.start, end: e.end })) {\n                            that._updateTask(that.dataSource.getByUid(task.uid), updateInfo);\n                        }\n                    })\n                    .bind(\"percentResizeStart\", function(e) {\n                        var editable = that.list.editor;\n\n                        if (editable && !editable.end()) {\n                            e.preventDefault();\n                        }\n                    })\n                    .bind(\"percentResizeEnd\", function(e) {\n                        that._updateTask(that.dataSource.getByUid(e.task.uid), { percentComplete: e.percentComplete });\n                    })\n                    .bind(\"dependencyDragStart\", function(e) {\n                        var editable = that.list.editor;\n\n                        if (editable && !editable.end()) {\n                            e.preventDefault();\n                        }\n                    })\n                    .bind(\"dependencyDragEnd\", function(e) {\n                        var dependency = that.dependencies._createNewModel({\n                            type: e.type,\n                            predecessorId: e.predecessor.id,\n                            successorId: e.successor.id\n                        });\n\n                        that._createDependency(dependency);\n                    })\n                    .bind(\"select\", function(e) {\n                        var editable = that.list.editor,\n                            current = that.select(),\n                            currentUid;\n\n                        if (editable) {\n                            editable.end();\n                        }\n\n                        if (current && current.length) {\n                            currentUid = current.data(\"uid\");\n                        }\n\n                        if (currentUid !== e.uid) {\n                            that.select(\"[data-uid='\" + e.uid + \"']\");\n                            that.trigger(\"change\");\n                        }\n                    })\n                    .bind(\"editTask\", function(e) {\n                        var editable = that.list.editor;\n\n                        if (editable && !editable.end()) {\n                            return;\n                        }\n\n                        that.editTask(e.uid);\n                    })\n                    .bind(\"clear\", function() {\n                        that.clearSelection();\n                        that.trigger(\"change\");\n                    })\n                    .bind(\"removeTask\", function(e) {\n                        var editable = that.list.editor;\n\n                        if (editable && !editable.end()) {\n                            return;\n                        }\n\n                        that.removeTask(that.dataSource.getByUid(e.uid));\n                    })\n                    .bind(\"expand\", function(e) {\n                        var model = that.dataSource.getByUid(e.uid);\n                        if (model.summary && !model.get(\"expanded\")) {\n                            model.set(\"expanded\", true);\n                        } else {\n                            e.preventDefault();\n                        }\n                    })\n                    .bind(\"collapse\", function(e) {\n                        var model = that.dataSource.getByUid(e.uid);\n\n                        if (model.summary && model.get(\"expanded\")) {\n                            model.set(\"expanded\", false);\n                        } else {\n                            e.preventDefault();\n                        }\n                    })\n                    .bind(\"removeDependency\", function(e) {\n                        var editable = that.list.editor;\n\n                        if (editable && !editable.end()) {\n                            return;\n                        }\n\n                        that.removeDependency(that.dependencies.getByUid(e.uid));\n                    });\n            },\n\n            _dataSource: function() {\n                var options = this.options;\n                var dataSource = options.dataSource;\n\n                dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;\n\n                if (this.dataSource && this._refreshHandler) {\n                    this.dataSource\n                        .unbind(\"change\", this._refreshHandler)\n                        .unbind(\"progress\", this._progressHandler)\n                        .unbind(\"error\", this._errorHandler);\n                } else {\n                    this._refreshHandler = this.refresh.bind(this);\n                    this._progressHandler = this._requestStart.bind(this);\n                    this._errorHandler = this._error.bind(this);\n                }\n\n                this.dataSource = kendo.data.GanttDataSource.create(dataSource)\n                    .bind(\"change\", this._refreshHandler)\n                    .bind(\"progress\", this._progressHandler)\n                    .bind(\"error\", this._errorHandler);\n            },\n\n            _dependencies: function() {\n                var dependencies = this.options.dependencies || {};\n                var dataSource = isArray(dependencies) ? { data: dependencies } : dependencies;\n\n                if (this.dependencies && this._dependencyRefreshHandler) {\n                    this.dependencies\n                        .unbind(\"change\", this._dependencyRefreshHandler)\n                        .unbind(\"error\", this._dependencyErrorHandler);\n                } else {\n                    this._dependencyRefreshHandler = this.refreshDependencies.bind(this);\n                    this._dependencyErrorHandler = this._error.bind(this);\n                }\n\n                this.dependencies = kendo.data.GanttDependencyDataSource.create(dataSource)\n                    .bind(\"change\", this._dependencyRefreshHandler)\n                    .bind(\"error\", this._dependencyErrorHandler);\n            },\n\n            _resources: function() {\n                var resources = this.options.resources;\n                var dataSource = resources.dataSource || {};\n\n                this.resources = {\n                    field: \"resources\",\n                    dataTextField: \"name\",\n                    dataColorField: \"color\",\n                    dataFormatField: \"format\"\n                };\n\n                extend(this.resources, resources);\n\n                this.resources.dataSource = kendo.data.DataSource.create(dataSource);\n            },\n\n            _assignments: function() {\n                var assignments = this.options.assignments;\n                var dataSource = assignments.dataSource || { };\n\n                if (this.assignments) {\n                    this.assignments.dataSource\n                        .unbind(\"change\", this._assignmentsRefreshHandler);\n                } else {\n                    this._assignmentsRefreshHandler = this.refresh.bind(this);\n                }\n\n                this.assignments = {\n                    dataTaskIdField: \"taskId\",\n                    dataResourceIdField: \"resourceId\",\n                    dataValueField: \"value\"\n                };\n\n                extend(this.assignments, assignments);\n\n                this.assignments.dataSource = kendo.data.DataSource.create(dataSource);\n\n                this.assignments.dataSource\n                    .bind(\"change\", this._assignmentsRefreshHandler);\n            },\n\n            _createEditor: function() {\n                var that = this;\n\n                var editor = this._editor = new kendo.gantt.PopupEditor(this.wrapper, extend({}, this.options, {\n                    target: this,\n                    resources: {\n                        field: this.resources.field,\n                        editor: this._createResourceEditor.bind(this)\n                    }\n                }));\n\n                editor\n                    .bind(\"cancel\", function(e) {\n                        var task = that.dataSource.getByUid(e.model.uid);\n\n                        if (that.trigger(\"cancel\", { container: e.container, task: task })) {\n                            e.preventDefault();\n                            return;\n                        }\n\n                        if (that.dependencies) {\n                            that.dependencies.filter({});\n                        }\n\n                        that.cancelTask();\n                        if (that.options.navigatable) {\n                            that.timeline.element.find('div[data-uid=\"' + e.model.uid + '\"]').focus();\n                        }\n                    })\n                    .bind(\"edit\", function(e) {\n                        var task = that.dataSource.getByUid(e.model.uid);\n\n                        if (that.trigger(\"edit\", { container: e.container, task: task })) {\n                            e.preventDefault();\n                        }\n                    })\n                    .bind(\"save\", function(e) {\n                        var task = that.dataSource.getByUid(e.model.uid);\n\n                        that.saveTask(task, e.updateInfo, e.updateDependencies);\n                    })\n                    .bind(\"remove\", function(e) {\n                        that.removeTask(e.model.uid);\n                    })\n                    .bind(\"close\", function(options) {\n                        if (that.options.navigatable) {\n                            that.element.find('div[data-uid=\"' + options.window.attr(\"data-uid\") + '\"]').focus();\n                        }\n                    });\n            },\n\n            _resourcePopupEditor: function(container, options) {\n                var that = this,\n                    editor = that._createResourceEditor($(\"<div>\"), options),\n                    popupStyles = ganttStyles.popup,\n                    wrapper = that.element,\n                    dialogEl = $(kendo.format('<div class=\"' + popupStyles.formContainer + '\">')).appendTo(wrapper),\n                    messages = that.options.messages,\n                    buttonsEl, dialog;\n\n                dialogEl.append(editor.wrapper);\n                buttonsEl = $('<div class=\"' + popupStyles.buttonsContainer + '\">');\n                dialogEl.append(buttonsEl);\n\n                buttonsEl.append($(\"<button class='\" + ganttStyles.buttonSave + \"'>\" + encode(messages.save) + \"</button>\").kendoButton({\n                    name: \"save\",\n                    themeColor: \"primary\",\n                    icon: \"save\",\n                    click: () => {\n                        if (!editor.updateModel()) {\n                            return;\n                        }\n                        editor.trigger(\"save\", { model: editor.model });\n                        that._updateAssignments(editor.model.get(\"id\"), editor.model.get(that.resources.field));\n\n                        dialog.trigger(\"close\");\n                        dialog.close();\n                    }\n                }));\n\n                buttonsEl.append($(\"<button class='\" + ganttStyles.buttonCancel + \"'>\" + encode(messages.cancel) + \"</button>\").kendoButton({\n                    name: \"cancel\",\n                    icon: \"cancel\",\n                    click: () => {\n                        dialog.trigger(\"close\");\n                        dialog.close();\n                    }\n                }));\n\n                this._resourceEditorWindow = dialog = dialogEl.kendoWindow({\n                    modal: true,\n                    resizable: false,\n                    draggable: true,\n                    visible: false,\n                    title: messages.editor.resourcesEditorTitle,\n                    deactivate: () => {\n                        editor.destroy();\n                        dialog.destroy();\n                        dialog.element.closest(\".k-window\").remove();\n                    }\n                }).data(\"kendoWindow\");\n\n                dialog.center().open();\n\n                return editor;\n            },\n\n            _createResourceEditor: function(container, options) {\n                var that = this;\n                var model = options instanceof ObservableObject ? options : options.model;\n                var messages = this.options.messages;\n                var resourcesField = this.resources.field;\n                var unitsValidation = { step: 0.01, min: 0.01, max: 1 };\n                var assignmentsModel = this.assignments.dataSource.options.schema.model;\n                var resourceTextField = that.resources.dataTextField;\n                var resources = this.resources.dataSource.view();\n\n\n                if (assignmentsModel && assignmentsModel.fields.Units && assignmentsModel.fields.Units.validation) {\n                    extend(true, unitsValidation, assignmentsModel.fields.Units.validation);\n                }\n\n                var editor = this._resourceEditor = new kendo.gantt.ResourceEditor(container, {\n                    resourcesField: resourcesField,\n                    unitsValidation: unitsValidation,\n                    resources: resources.map(r => ({ value: r.id, text: r[resourceTextField] })),\n                    model: model,\n                    messages: extend({}, messages.editor)\n                });\n\n                return editor;\n            },\n\n            view: function(type) {\n                return this.timeline.view(type);\n            },\n\n            range: function(range) {\n                var dataSource = this.dataSource;\n                var view = this.view();\n                var timeline = this.timeline;\n\n                if (range) {\n                    view.options.range = {\n                        start: range.start,\n                        end: range.end\n                    };\n\n                    timeline._render(dataSource.taskTree());\n                    timeline._renderDependencies(this.dependencies.view());\n                }\n\n                return {\n                    start: view.start,\n                    end: view.end\n                };\n            },\n\n            date: function(date) {\n                var view = this.view();\n\n                if (date) {\n                    view.options.date = date;\n                    view._scrollToDate(date);\n                }\n\n                return view.options.date;\n            },\n\n            dataItem: function(value) {\n                if (!value) {\n                    return null;\n                }\n\n                var list = this.list;\n                var element = list.element.find(value);\n\n                return list._modelFromElement(element);\n            },\n\n            setDataSource: function(dataSource) {\n                this.options.dataSource = dataSource;\n\n                this._dataSource();\n\n                this.list.setDataSource(this.dataSource);\n\n                if (this.options.autoBind) {\n                    dataSource.fetch();\n                }\n            },\n\n            setDependenciesDataSource: function(dependencies) {\n                this.options.dependencies = dependencies;\n\n                this._dependencies();\n\n                if (this.options.autoBind) {\n                    dependencies.fetch();\n                }\n            },\n\n            items: function() {\n                return this.wrapper.children(\".k-task\");\n            },\n\n            _updateAssignments: function(id, resources) {\n                var dataSource = this.assignments.dataSource;\n                var taskId = this.assignments.dataTaskIdField;\n                var resourceId = this.assignments.dataResourceIdField;\n                var hasMatch = false;\n                var assignments = new Query(dataSource.view())\n                    .filter({\n                        field: taskId,\n                        operator: \"eq\",\n                        value: id\n                    }).toArray();\n                var assignment;\n                var resource;\n                var value;\n\n                while (assignments.length) {\n                    assignment = assignments[0];\n\n                    for (var i = 0, length = resources.length; i < length; i++) {\n                        resource = resources[i];\n\n                        if (assignment.get(resourceId) === resource.get(\"id\")) {\n                            value = resources[i].get(\"value\");\n                            this._updateAssignment(assignment, value);\n                            resources.splice(i, 1);\n                            hasMatch = true;\n                            break;\n                        }\n                    }\n\n                    if (!hasMatch) {\n                        this._removeAssignment(assignment);\n                    }\n\n                    hasMatch = false;\n\n                    assignments.shift();\n                }\n\n                for (var j = 0, newLength = resources.length; j < newLength; j++) {\n                    resource = resources[j];\n\n                    if (resource.id !== undefined$1 && resource.value) {\n                        this._createAssignment(resource, id);\n                    }\n                }\n\n                dataSource.sync();\n            },\n\n            cancelTask: function() {\n                var editor = this._editor;\n                var container = editor.container;\n\n                if (container) {\n                    editor.close();\n                }\n\n                if (this.dependencies) {\n                    this.dependencies.cancelChanges();\n                }\n            },\n\n            editTask: function(uid) {\n                var task = typeof uid === \"string\" ? this.dataSource.getByUid(uid) : uid;\n\n                if (!task) {\n                    return;\n                }\n\n                var taskCopy = this.dataSource._createNewModel(task.toJSON());\n                taskCopy.uid = task.uid;\n\n                this.cancelTask();\n\n                this._editTask(taskCopy);\n            },\n\n            _editTask: function(task) {\n                this._editor.editTask(task, this.options.editable.plannedTasks);\n            },\n\n            saveTask: function(task, updateInfo, updateDependencies) {\n                var that = this,\n                    editor = this._editor,\n                    container = editor.container,\n                    editable = editor.editable,\n                    hasChanges = false,\n                    hasResourceChanges = false,\n                    updateInfo = updateInfo || {},\n                    resourcesField = that.options.resources.field,\n                    difference;\n\n                Object.keys(updateInfo).map(k => {\n                    var updated = updateInfo[k],\n                        current = task.get(k);\n\n                    if (updated instanceof Date) {\n                        updated = updated.getTime();\n                        current = current ? current.getTime() : undefined$1;\n                    }\n\n                    if (updated !== current) {\n                        if (k === resourcesField) {\n                            difference = updated\n                                .filter(u => !current.some(c => c.id === u.id && c.value === u.value))\n                                .concat(current.filter(c => !updated.some(u => u.id === c.id && c.value === u.value)));\n\n                            if (difference && difference.length > 0) {\n                                hasResourceChanges = true;\n                            }\n                        } else {\n                            hasChanges = true;\n                        }\n                    }\n                });\n\n                if (container &&\n                    editable &&\n                    editable.end() &&\n                    (hasChanges || hasResourceChanges || updateDependencies)) {\n                        if (!that.trigger(\"save\", { task: task, values: updateInfo, updateDependencies: updateDependencies })) {\n                            if (hasChanges) {\n                                that._preventRefresh = true;\n\n                                that.dataSource.update(task, updateInfo);\n                            }\n\n                            if (hasResourceChanges) {\n                                this._updateAssignments(task.get(\"id\"), updateInfo[resourcesField]);\n                            }\n\n                            that._syncDataSource();\n\n                            if (this.dependencies) {\n                                this._updateDependency(updateDependencies);\n                            }\n\n                            this._editor.close();\n                        } else {\n                            if (task && task.dirty) {\n                                that.dataSource.cancelChanges(task);\n                                that._preventRefresh = false;\n                                that.refresh();\n                            }\n\n                            if (that.dependencies) {\n                                that.dependencies.cancelChanges();\n                            }\n                        }\n                } else if (editable && editable.end()) {\n                    this._editor.close();\n                }\n            },\n\n            _updateDependency: function(updateDependencies) {\n                this.dependencies.filter({});\n\n                if (updateDependencies) {\n                    updateDependencies.created.map(d => {\n                        this._preventDependencyRefresh = true;\n                        this.dependencies.add(d);\n                        this._preventDependencyRefresh = false;\n                    });\n\n                    updateDependencies.destroyed.map(d => {\n                        this.dependencies.remove(d);\n                    });\n                }\n\n                this.dependencies.sync();\n            },\n\n            _updateTask: function(task, updateInfo) {\n                var that = this;\n                var resourcesField = that.resources.field;\n\n                if (!that.trigger(\"save\", { task: task, values: updateInfo })) {\n                    if (updateInfo) {\n                        that._preventRefresh = true;\n\n                        that.dataSource.update(task, updateInfo);\n\n                        if (updateInfo[resourcesField]) {\n                            that._updateAssignments(task.get(\"id\"), updateInfo[resourcesField]);\n                        }\n                    }\n\n                    that._syncDataSource();\n                } else {\n                    if (task && task.dirty) {\n                        that.dataSource.cancelChanges(task);\n                        that._preventRefresh = false;\n                        that.refresh();\n                    }\n\n                    if (that.dependencies) {\n                        that.dependencies.cancelChanges();\n                    }\n                }\n            },\n\n            _updateAssignment: function(assignment, value) {\n                var resourceValueField = this.assignments.dataValueField;\n\n                assignment.set(resourceValueField, value);\n            },\n\n            removeTask: function(uid) {\n                var that = this;\n                var task = typeof uid === \"string\" ? this.dataSource.getByUid(uid) : uid;\n\n                if (!task) {\n                    return;\n                }\n\n                this._taskConfirm(function(cancel) {\n                    if (!cancel) {\n                        that._removeTask(task);\n                    }\n                }, task);\n            },\n\n            _createTask: function(task, index) {\n                if (!this.trigger(\"add\", {\n                    task: task,\n                    dependency: null\n                })) {\n                    var dataSource = this.dataSource;\n\n                    this._preventRefresh = true;\n\n                    if (index === undefined$1) {\n                        dataSource.add(task);\n                    } else {\n                        dataSource.insert(index, task);\n                    }\n\n                    this._scrollToUid = task.uid;\n                    this._syncDataSource();\n                }\n            },\n\n            _createDependency: function(dependency) {\n                if (!this.trigger(\"add\", {\n                    task: null,\n                    dependency: dependency\n                })) {\n                    this._preventDependencyRefresh = true;\n\n                    this.dependencies.add(dependency);\n\n                    this._preventDependencyRefresh = false;\n\n                    this.dependencies.sync();\n                }\n            },\n\n            _createAssignment: function(resource, id) {\n                var assignments = this.assignments;\n                var dataSource = assignments.dataSource;\n                var taskId = assignments.dataTaskIdField;\n                var resourceId = assignments.dataResourceIdField;\n                var resourceValue = assignments.dataValueField;\n                var assignment = dataSource._createNewModel();\n\n                assignment[taskId] = id;\n                assignment[resourceId] = resource.get(\"id\");\n                assignment[resourceValue] = resource.get(\"value\");\n\n                dataSource.add(assignment);\n            },\n\n            removeDependency: function(uid) {\n                var that = this;\n                var dependency = typeof uid === \"string\" ? this.dependencies.getByUid(uid) : uid;\n\n                if (!dependency) {\n                    return;\n                }\n\n                this._dependencyConfirm(function(cancel) {\n                    if (!cancel) {\n                        that._removeDependency(dependency);\n                    }\n                }, dependency);\n            },\n\n            _removeTaskDependencies: function(task, dependencies) {\n                this._preventDependencyRefresh = true;\n\n                for (var i = 0, length = dependencies.length; i < length; i++) {\n                    this.dependencies.remove(dependencies[i]);\n                }\n\n                this._preventDependencyRefresh = false;\n\n                this.dependencies.sync();\n            },\n\n            _removeTaskAssignments: function(task) {\n                var dataSource = this.assignments.dataSource;\n                var assignments = dataSource.view();\n                var filter = {\n                    field: this.assignments.dataTaskIdField,\n                    operator: \"eq\",\n                    value: task.get(\"id\")\n                };\n\n                assignments = new Query(assignments).filter(filter).toArray();\n\n                this._preventRefresh = true;\n\n                for (var i = 0, length = assignments.length; i < length; i++) {\n                    dataSource.remove(assignments[i]);\n                }\n\n                this._preventRefresh = false;\n\n                dataSource.sync();\n            },\n\n            _removeTask: function(task) {\n                var dependencies = this.dependencies.dependencies(task.id);\n\n                if (!this.trigger(\"remove\", {\n                    task: task,\n                    dependencies: dependencies\n                })) {\n                    this._removeTaskDependencies(task, dependencies);\n                    this._removeTaskAssignments(task);\n\n                    this._preventRefresh = true;\n\n                    if (this.dataSource.remove(task)) {\n                        this._syncDataSource();\n                    }\n\n                    if (this.dependencies) {\n                        this.dependencies.filter({});\n                    }\n\n                    this._preventRefresh = false;\n                }\n            },\n\n            _removeDependency: function(dependency) {\n                if (!this.trigger(\"remove\", {\n                    task: null,\n                    dependencies: [dependency]\n                })) {\n                    if (this.dependencies.remove(dependency)) {\n                        this.dependencies.sync();\n                    }\n                }\n            },\n\n            _removeAssignment: function(assignment) {\n                this.assignments.dataSource.remove(assignment);\n            },\n\n            _taskConfirm: function(callback, task) {\n                var messages = this.options.messages;\n\n                this._confirm(callback, {\n                    model: task,\n                    text: messages.deleteTaskConfirmation,\n                    title: messages.deleteTaskWindowTitle\n                });\n            },\n\n            _dependencyConfirm: function(callback, dependency) {\n                var messages = this.options.messages;\n\n                this._confirm(callback, {\n                    model: dependency,\n                    text: messages.deleteDependencyConfirmation,\n                    title: messages.deleteDependencyWindowTitle\n                });\n            },\n\n            _confirm: function(callback, options) {\n                var editable = this.options.editable;\n\n                if (editable === true || editable.confirmation !== false) {\n                    this.showDialog(extend(true, {}, options, { callback: callback }));\n                } else {\n                    callback();\n                }\n            },\n\n            showDialog: function(options) {\n                this._editor.showDialog(options);\n            },\n\n            refresh: function() {\n                if (this._preventRefresh || !this.list || this.list.editor) {\n                    return;\n                }\n\n                this._progress(false);\n\n                var dataSource = this.dataSource;\n                var taskTree = dataSource.taskTree();\n                var scrollToUid = this._scrollToUid;\n                var current;\n                var cachedUid;\n                var cachedIndex = -1;\n                var selected = this.select()[0] ? this.select().data(\"uid\") : this._selected;\n\n                if (this.current) {\n                    cachedUid = this.current.closest(\"tr\").attr(kendo.attr(\"uid\"));\n                    cachedIndex = this.current.index();\n                }\n\n                if (this.trigger(\"dataBinding\")) {\n                    return;\n                }\n\n                if (this.resources.dataSource.data().length !== 0) {\n                    this._assignResources(taskTree);\n                }\n\n                if (this._editor) {\n                    this._editor.close();\n                }\n\n                this.clearSelection();\n                this.list._renderTree(taskTree);\n                this.timeline._render(taskTree);\n                this.timeline._renderDependencies(this.dependencies.view());\n\n                if (scrollToUid) {\n                    this._scrollTo(scrollToUid);\n                    this.select(selector(scrollToUid));\n                }\n\n                if ((scrollToUid || cachedUid) && cachedIndex >= 0) {\n                    current = this.list.element\n                        .find(\"tr\" + selector((scrollToUid || cachedUid)) + \" > td\").eq(cachedIndex);\n\n                    this._current(current);\n                }\n\n                this._scrollToUid = null;\n\n                if (selected) {\n                    this._selected = selected;\n                    this.select(\"[data-uid=\" + selected + \"]\");\n                }\n\n                this.trigger(\"dataBound\");\n            },\n\n            refreshDependencies: function() {\n                if (this._preventDependencyRefresh) {\n                    return;\n                }\n\n                if (this.trigger(\"dataBinding\")) {\n                    return;\n                }\n\n                this.timeline._renderDependencies(this.dependencies.view());\n\n                this.trigger(\"dataBound\");\n            },\n\n            _assignResources: function(taskTree) {\n                var resources = this.resources;\n                var assignments = this.assignments;\n                var groupAssigments = function() {\n                    var data = assignments.dataSource.view();\n                    var group = {\n                        field: assignments.dataTaskIdField\n                    };\n\n                    data = new Query(data).group(group).toArray();\n\n                    return data;\n                };\n                var assigments = groupAssigments();\n                var applyTaskResource = function(task, action) {\n                    var taskId = task.get(\"id\");\n\n                    kendo.setter(resources.field)(task, new ObservableArray([]));\n\n                    for (var i = 0, length = assigments.length; i < length; i++) {\n                        if (assigments[i].value === taskId) {\n                            action(task, assigments[i].items);\n                        }\n                    }\n                };\n                var wrapTask = function(task, items) {\n                    for (var j = 0, length = items.length; j < length; j++) {\n                        var item = items[j];\n                        var resource = resources.dataSource.get(item.get(assignments.dataResourceIdField));\n                        var resourceValue = item.get(assignments.dataValueField);\n                        var resourcedId = item.get(assignments.dataResourceIdField);\n                        var valueFormat = resource.get(resources.dataFormatField) || PERCENTAGE_FORMAT;\n                        var formatedValue = kendo.toString(resourceValue, valueFormat);\n\n                        task[resources.field].push(new ObservableObject({\n                            id: resourcedId,\n                            name: resource.get(resources.dataTextField),\n                            color: resource.get(resources.dataColorField),\n                            value: resourceValue,\n                            formatedValue: formatedValue,\n                            format: valueFormat\n                        }));\n                    }\n                };\n\n                for (var i = 0, length = taskTree.length; i < length; i++) {\n                    applyTaskResource(taskTree[i], wrapTask);\n                }\n            },\n\n            _wrapResourceData: function(id) {\n                var that = this;\n                var result = [];\n                var resource;\n                var resources = this.resources.dataSource.view();\n                var assignments = this.assignments.dataSource.view();\n                var taskAssignments = new Query(assignments).filter({\n                    field: that.assignments.dataTaskIdField,\n                    operator: \"eq\",\n                    value: id\n                }).toArray();\n                var valuePerResource = function(id) {\n                    var resourceValue = null;\n\n                    new Query(taskAssignments).filter({\n                        field: that.assignments.dataResourceIdField,\n                        operator: \"eq\",\n                        value: id\n                    }).select(function(assignment) {\n                        resourceValue += assignment.get(that.assignments.dataValueField);\n                    });\n\n                    return resourceValue;\n                };\n\n                for (var i = 0, length = resources.length; i < length; i++) {\n                    resource = resources[i];\n                    result.push({\n                        id: resource.get(\"id\"),\n                        name: resource.get(that.resources.dataTextField),\n                        format: resource.get(that.resources.dataFormatField) || PERCENTAGE_FORMAT,\n                        value: valuePerResource(resource.id)\n                    });\n                }\n\n                return result;\n            },\n\n            _syncDataSource: function() {\n                this._preventRefresh = false;\n                this._requestStart();\n                this.dataSource.sync();\n            },\n\n            _requestStart: function() {\n                this._progress(true);\n            },\n\n            _error: function() {\n                this._progress(false);\n            },\n\n            _progress: function(toggle) {\n                kendo.ui.progress(this.element, toggle);\n            },\n\n            _scrollable: function() {\n                var that = this;\n                var ganttStyles = Gantt.styles;\n                var contentSelector = DOT + ganttStyles.gridContent;\n                var headerSelector = DOT + ganttStyles.gridHeaderWrap;\n                var timelineHeader = this.timeline.element.find(headerSelector);\n                var timelineContent = this.timeline.element.find(contentSelector);\n                var treeListHeader = this.list.element.find(headerSelector);\n                var treeListContent = this.list.element.find(contentSelector);\n\n                if (mobileOS) {\n                    treeListContent.css(\"overflow-y\", \"auto\");\n                }\n\n                timelineContent.on(\"scroll\", function() {\n                    that.scrollTop = this.scrollTop;\n                    kendo.scrollLeft(timelineHeader, this.scrollLeft);\n                    treeListContent.scrollTop(this.scrollTop);\n                });\n\n                treeListContent\n                    .on(\"scroll\", function() {\n                        kendo.scrollLeft(treeListHeader, this.scrollLeft);\n                    })\n                    .on(\"DOMMouseScroll\" + NS + \" mousewheel\" + NS, function(e) {\n                        var scrollTop = timelineContent.scrollTop();\n                        var delta = kendo.wheelDeltaY(e);\n\n                        if (delta) {\n                            e.preventDefault();\n                            //In Firefox DOMMouseScroll event cannot be canceled\n                            $(e.currentTarget).one(\"wheel\" + NS, false);\n\n                            timelineContent.scrollTop(scrollTop + (-delta));\n                        }\n                    });\n            },\n\n            _navigatable: function() {\n                var that = this;\n                var navigatable = this.options.navigatable;\n                var editable = this.options.editable;\n                var ganttStyles = Gantt.styles;\n                var contentSelector = DOT + ganttStyles.gridContent;\n                var listWrapper = DOT + ganttStyles.listWrapper;\n                var headerSelector = DOT + ganttStyles.gridHeaderWrap;\n                var headerTable = this.list.element.find(headerSelector).find(\"table\");\n                var contentTable = this.list.element.find(contentSelector).find(\"table\");\n                var tables = headerTable.add(contentTable);\n                var attr = selector();\n                var deleteAction = function() {\n                    var editable = that.options.editable;\n\n                    if (!editable || editable.destroy === false || that.list.editor) {\n                        return;\n                    }\n\n                    var selectedTask = that.select();\n                    var uid = kendo.attr(\"uid\");\n\n                    if (selectedTask.length) {\n                        that.removeTask(selectedTask.attr(uid));\n                    }\n                };\n\n                $(this.wrapper)\n                    .on(\"mousedown\" + NS, listWrapper + \" tr\" + attr, function(e) {\n                        var isInput = $(e.target).is(\":button,a,:input,a>.k-icon,.k-svg-icon,k-svg-icon,svg,path,textarea,span.k-icon:not(.k-i-none),span.k-svg-icon:not(.k-svg-i-none),span.k-link,.k-input,.k-multiselect-wrap,.k-input-value-text,.k-input-inner\");\n\n                        if (e.ctrlKey) {\n                            return;\n                        }\n\n\n                        if ((navigatable || editable) && !isInput) {\n                            that._focusTimeout = setTimeout(function() {\n                                focusTable(that.list.content.find(\"table\"), true);\n                            }, 2);\n                        }\n                    })\n                    .on(\"keydown\" + NS, function(e) {\n                        var key = e.keyCode;\n                        var that = this;\n                        var uid;\n                        var cell;\n                        var target = $(e.target);\n                        var focusedIndex;\n                        var focusSequence = [\n                            that.toolbar,\n                            that.layout.find(\".k-splitbar\"),\n                            that.layout.find(\".k-gantt-treelist\"),\n                            that.layout.find(\".k-gantt-timeline-pane\")\n                        ];\n\n                        that._tabPressed = false;\n\n                        if (that.footer) {\n                            focusSequence.push(that.footer);\n                        }\n\n                        for (var i = 0; i < focusSequence.length; i++) {\n                            if ($.contains(focusSequence[i][0], e.target) || focusSequence[i][0] === e.target) {\n                                focusedIndex = i;\n                                break;\n                            }\n                        }\n\n                        if (key === keys.F10) {\n                            that.toolbar.find(\"[tabindex=0]:visible\").first().addClass(ganttStyles.focused).trigger(\"focus\");\n                            e.preventDefault();\n                        } else if (key == keys.TAB) {\n                            if (focusedIndex == 2) {\n                                that._tabPressed = true;\n                            }\n                            if (e.shiftKey) {\n                                for (i = focusedIndex - 1; i >= 0; i--) {\n                                    if (!focusSequence[i].hasClass(\"k-hidden\")) {\n                                        uid = target.attr(\"data-uid\");\n                                        if (i === 2 && uid) {\n                                            cell = that.list.content.find(\"tr[data-uid='\" + uid + \"']\").find(\"td\").last();\n                                            that.list.current(cell);\n                                            focusTable(that.list.content.find(\"table\"), true);\n                                        } else {\n                                            if (focusSequence[i].is(\":kendoFocusable\")) {\n                                                focusSequence[i].focus();\n                                            } else {\n                                                focusSequence[i].find(\"[tabindex=0]:visible\").focus();\n                                            }\n                                        }\n                                        e.preventDefault();\n                                        break;\n                                    }\n                                }\n                            } else {\n                                for (i = focusedIndex + 1; i < focusSequence.length; i++) {\n                                    if (!focusSequence[i].hasClass(\"k-hidden\")) {\n                                        if (focusSequence[i].is(\":kendoFocusable\")) {\n                                            focusSequence[i].focus();\n                                        } else {\n                                            focusSequence[i].find(\"[tabindex=0]:visible\").focus();\n                                        }\n                                        e.preventDefault();\n                                      break;\n                                    }\n                                }\n                            }\n                        }\n\n                    }.bind(this));\n\n                if (navigatable) {\n                    contentTable\n                        .on(\"keydown\" + NS, function(e) {\n                            var key = e.keyCode;\n                            if (e.keyCode == keys.DELETE) {\n                                deleteAction();\n                            } else if (key >= 49 && key <= 57 && e.target.tagName.toLowerCase() !== \"input\") {\n                               that.view(that.timeline._viewByIndex(key - 49));\n                            }\n                        });\n\n                    return;\n                }\n\n                tables\n                    .on(\"focus\" + NS, function() {\n                        $(that.toolbar.find(DOT + ganttStyles.focused)).removeClass(ganttStyles.focused);\n                    })\n                    .on(\"blur\" + NS, function() {\n\n                        if (this == headerTable) {\n                            $(this).attr(TABINDEX, -1);\n                        }\n                    });\n            },\n\n\n            _dataBind: function() {\n                var that = this;\n\n                if (that.options.autoBind) {\n                    this._preventRefresh = true;\n                    this._preventDependencyRefresh = true;\n\n                    var promises = $.map([\n                        this.dataSource,\n                        this.dependencies,\n                        this.resources.dataSource,\n                        this.assignments.dataSource\n                    ],\n                    function(dataSource) {\n                        return dataSource.fetch();\n                    });\n\n                    $.when.apply(null, promises)\n                        .done(function() {\n                            that._preventRefresh = false;\n                            that._preventDependencyRefresh = false;\n                            that.refresh();\n                        });\n                }\n            },\n\n            _resize: function() {\n                this._adjustDimensions();\n                this.timeline.view()._adjustHeight();\n                this.timeline.view()._renderCurrentTime();\n                this.list._adjustHeight();\n            },\n\n            _togglePlannedTasks: function(e) {\n                var timeline = this.timeline;\n\n                if (!this.trigger(\"togglePlannedTasks\", { showPlannedTasks: !timeline.options.showPlannedTasks })) {\n                    this.wrapper.toggleClass(ganttStyles.plannedTasks);\n                    timeline._setPlanned(!timeline.options.showPlannedTasks);\n                    timeline._render(this.dataSource.taskTree());\n                    timeline._renderDependencies(this.dependencies.view());\n                } else {\n                    e.preventDefault();\n                }\n            }\n        });\n\n        if (kendo.PDFMixin) {\n            kendo.PDFMixin.extend(Gantt.fn);\n\n            Gantt.fn._drawPDF = function() {\n                var ganttStyles = Gantt.styles;\n                // Get the width of the treelist portion.\n                var listTableWidth = this.wrapper.find(DOT + ganttStyles.list + \" \" + DOT + ganttStyles.gridContent + \">table\").width();\n                // Get the height of the treelist portion.\n                var listTableHeight = this.wrapper.find(DOT + ganttStyles.list + \" \" + DOT + ganttStyles.gridContent + \">table\").height();\n                // Get the combined height of all toolbars.\n                var toolbarsHeight = this.wrapper.find(DOT + ganttStyles.toolbar.toolbar).outerHeight() * this.wrapper.find(DOT + ganttStyles.toolbar.toolbar).length;\n                // Get the width of the timeline portion.\n                var timelineTableWidth = this.wrapper.find(DOT + ganttStyles.timeline + \" \" + DOT + ganttStyles.gridContent + \" table\").width();\n                var content = this.wrapper.clone();\n\n                content.find(DOT + ganttStyles.list).css(\"height\", listTableHeight + toolbarsHeight);\n                content.find(DOT + ganttStyles.splitter).css(\"width\", timelineTableWidth + listTableWidth);\n                content.find(DOT + ganttStyles.splitter).css(\"height\", listTableHeight + toolbarsHeight);\n\n                return this._drawPDFShadow({\n                    content: content\n                }, {\n                    avoidLinks: this.options.pdf.avoidLinks\n                });\n            };\n        }\n\n        kendo.ui.plugin(Gantt);\n\n        extend(true, Gantt, { styles: ganttStyles });\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}