{"version":3,"sources":["raw-js/kendo.treeview.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendotreeview","js","this","$","undefined$1","TreeView","subGroup","nodeContents","nodeIcon","spriteRe","kendo","window","ui","data","encode","htmlEncode","extend","template","isArray","Array","Widget","HierarchicalDataSource","keys","NS","TEMP_NS","SELECT","CHECK","NAVIGATE","CHANGE","ERROR","CHECKED","INDETERMINATE","DRAGSTART","DRAG","DROP","DRAGEND","DATABOUND","ITEMSLOADED","LOADCOMPLETED","REQUESTEND","CLICK","UNDEFINED","KSTATEHOVER","KTREEVIEW","NODE","ICON","TOGGLE_ICON_ELM","STRING","ARIA_CHECKED","ARIA_SELECTED","ARIA_DISABLED","ARIA_EXPANDED","ARIA_ACTIVEDESCENDANT","ARIA_BUSY","DISABLED","bindings","text","url","spriteCssClass","imageUrl","isDomElement","o","HTMLElement","nodeType","nodeName","contentChild","filter","node","result","children","length","checkboxes","find","insertAction","indexOffset","nodeData","referenceNode","parentNode","group","closest","parent","is","_dataSourceMove","dataSource","model","referenceItem","dataItem","referenceNodeIndex","indexOf","index","_insert","updateNodeHtml","wrapper","toggleButton","checkbox","innerWrapper","hasClass","prependTo","remove","removeAttr","appendTo","append","eq","addClass","container","tmp","toLowerCase","nextSibling","nodeValue","trim","test","className","insertBefore","firstChild","appendChild","moveContents","DataBoundWidget","init","element","options","inferred","list","that","hasDataSource","loadOnDemand","prototype","call","_dataSourceUids","_animation","_accessors","_templates","root","_wrapper","_group","_applyCssClasses","_tabindex","attr","_dataSource","_attachEvents","_dragging","_syncHtmlAndDataSource","autoBind","_progress","fetch","_attemptLoadCompleted","bind","checkChildren","updateIndeterminate","id","_ariaId","format","guid","notify","clickableItems","MOUSEENTER","_clickHandler","_click","on","e","preventDefault","removeClass","_toggleButtonClick","_keydown","_keypress","_focus","_blur","_mousedown","_checkboxChange","_retryRequest","target","focus","i","item","uid","itemCheckbox","view","uidAttr","expandedAttr","checkboxesEnabled","items","expanded","hasChildren","checked","prop","next","animationOptions","animation","hasCollapseAnimation","collapse","expand","reverse","effects","hide","enabled","dragAndDrop","dragging","widget","HierarchicalDragAndDrop","reorderable","autoScroll","allowedContainers","itemSelector","hintText","_hintText","clickMoveClick","contains","source","destination","dropHintContainer","itemFromTarget","content","first","last","dropPositionFrom","dropHint","prevAll","dragstart","trigger","sourceNode","drag","originalEvent","dropTarget","pageY","pageX","statusClass","status","setStatusClass","setStatus","drop","navigationTarget","_tempPreventNavigation","destinationNode","valid","setValid","state","dropPosition","position","dragend","triggerDragEnd","current","insertAfter","destroy","ev","off","templates","dragClue","treeview","fieldAccessor","_fieldAccessor","encoded","_checkboxes","setAttributes","attributes","hasOwnProperty","cssClass","groupLength","firstLevel","textClass","isLink","selected","checkboxClass","toggleButtonClass","toggleIcon","icon","support","isRtl","groupAttributes","groupCssClass","r","renderItems","itemContent","itemElement","tag","textAttr","toJSON","loading","messages","retry","requestFailed","setDataSource","one","_bindDataSource","_refreshHandler","refresh","_errorHandler","_error","_loadCompletedHandler","_loadCompleted","_requestEndHandler","_dsRequestEnd","_loadedNodes","setTimeout","type","_loadCompletedFired","concat","nodes","_unbindDataSource","unbind","silentRead","fields","field","create","recursiveRead","_initChildren","events","name","duration","dataTextField","size","textField","fieldName","fieldBindings","count","getter","map","x","d","Math","min","level","setOptions","fn","_trigger","eventName","_setChecked","datasource","value","isFunction","_setCheckedValue","_setIndeterminate","siblings","all","indeterminate","subnodes","_bubbleIndeterminate","skipDownward","_skip","set","isChecked","_preventChange","currentTarget","toggle","browser","msie","edge","_clickTarget","_focusable","select","clickTarget","touch","_nextVisible","scrollContainer","containers","offsets","documentElement","document","scrollHeight","clientHeight","push","scrollTop","focusElement","_enabled","skipSelf","wrapperRe","itemRe","_expanded","nextParent","_previousVisible","lastChild","prev","scrollTo","scrollIntoView","block","key","keyCode","focused","rtl","RIGHT","LEFT","DOWN","UP","HOME","END","ENTER","SPACEBAR","matchToFocus","focusedNode","get","_match","clearTimeout","_matchTimer","_matchNextByText","startIndex","contents","href","wrap","_getSelectedNode","groupElement","css","_nodes","groupData","each","_updateNodeClasses","defaultTemplate","html","renderCheckBox","rounded","replace","textWrap","_processNodes","callback","getByUid","_dataItem","_insertNode","insertCallback","collapsed","childrenData","updatedGroupLength","nodeHtml","_renderItem","_renderGroup","applyStylesFromKendoAttributes","_updateNodes","nodeWrapper","isCollapsed","context","render","setCheckedState","findByUid","toggleClass","end","elements","_toggle","ns","_appendItems","dataItems","viewItems","rootItems","_refreshChildren","child","empty","_refreshRoot","groupHtml","parentElement","action","bubble","_remove","_loaded","load","retryHtml","replaceWith","loaded","enable","arguments","_current","_updateActiveDescendant","direction","height","kendoStop","kendoAnimate","reset","complete","force","showProgress","loadingText","_objectOrSelf","referenceDataItem","destTreeview","destDataSource","loadPromise","Deferred","resolve","promise","_toObservableData","obj","jQuery","ObservableArray","splice","apply","success","loadModel","inserted","done","max","add","noop","keepData","prevSibling","detach","findByText","getAttribute","expandPath","path","nodeIds","slice","nodeElement","then","proceed","shift","_parentIds","parents","unshift","expandTo","Node","len","cssProperties","registerPrefix","plugin"],"mappings":"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","file":"kendo.treeview.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.data.js'), require('kendo.treeview.draganddrop.js'), require('kendo.html.input.js'), require('kendo.icons.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.data', 'kendo.treeview.draganddrop', 'kendo.html.input', 'kendo.icons'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendotreeview = global.kendotreeview || {}, global.kendotreeview.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n        id: \"treeview\",\n        name: \"TreeView\",\n        category: \"web\",\n        description: \"The TreeView widget displays hierarchical data in a traditional tree structure,with support for interactive drag-and-drop operations.\",\n        depends: [ \"data\", \"html.input\", \"icons\" ],\n        features: [{\n            id: \"treeview-dragging\",\n            name: \"Drag & Drop\",\n            description: \"Support for drag & drop\",\n            depends: [ \"treeview.draganddrop\" ]\n        }]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            data = kendo.data,\n            encode = kendo.htmlEncode,\n            extend = $.extend,\n            template = kendo.template,\n            isArray = Array.isArray,\n            Widget = ui.Widget,\n            HierarchicalDataSource = data.HierarchicalDataSource,\n            keys = kendo.keys,\n            NS = \".kendoTreeView\",\n            TEMP_NS = \".kendoTreeViewTemp\",\n            SELECT = \"select\",\n            CHECK = \"check\",\n            NAVIGATE = \"navigate\",\n            EXPAND = \"expand\",\n            CHANGE = \"change\",\n            ERROR = \"error\",\n            CHECKED = \"checked\",\n            INDETERMINATE = \"indeterminate\",\n            COLLAPSE = \"collapse\",\n            DRAGSTART = \"dragstart\",\n            DRAG = \"drag\",\n            DROP = \"drop\",\n            DRAGEND = \"dragend\",\n            DATABOUND = \"dataBound\",\n            ITEMSLOADED = \"itemsLoaded\",\n            LOADCOMPLETED = \"loadCompleted\",\n            REQUESTEND = \"requestEnd\",\n            CLICK = \"click\",\n            KENDOKEYDOWN = \"kendoKeydown\",\n            UNDEFINED = \"undefined\",\n            KSTATEHOVER = \"k-hover\",\n            KTREEVIEW = \"k-treeview\",\n            VISIBLE = \":visible\",\n            NODE = \".k-treeview-item\",\n            ICON = \"k-icon\",\n            TOGGLE_ICON_ELM = `<span></span>`,\n            STRING = \"string\",\n            ARIA_CHECKED = \"aria-checked\",\n            ARIA_SELECTED = \"aria-selected\",\n            ARIA_DISABLED = \"aria-disabled\",\n            ARIA_EXPANDED = \"aria-expanded\",\n            ARIA_ACTIVEDESCENDANT = \"aria-activedescendant\",\n            ARIA_BUSY = \"aria-busy\",\n            DISABLED = \"k-disabled\",\n            TreeView,\n            subGroup, nodeContents, nodeIcon,\n            spriteRe,\n            bindings = {\n                text: \"dataTextField\",\n                url: \"dataUrlField\",\n                spriteCssClass: \"dataSpriteCssClassField\",\n                imageUrl: \"dataImageUrlField\"\n            },\n            isJQueryInstance = function(obj) {\n                return (obj instanceof kendo.jQuery) || (window.jQuery && obj instanceof window.jQuery);\n            },\n            isDomElement = function(o) {\n                return (\n                    typeof HTMLElement === \"object\" ? o instanceof HTMLElement : //DOM2\n                    o && typeof o === \"object\" && o.nodeType === 1 && typeof o.nodeName === STRING\n                );\n            };\n\n        function contentChild(filter) {\n            return function(node) {\n                var result = node.children(\".k-animation-container\");\n\n                if (!result.length) {\n                    result = node;\n                }\n\n                return result.children(filter);\n            };\n        }\n\n        function templateNoWith(code) {\n            return kendo.template(code, { useWithBlock: false });\n        }\n\n        subGroup = contentChild(\".k-treeview-group\");\n        nodeContents = contentChild(\".k-treeview-group,.k-content\");\n        nodeIcon = function(node) {\n            return node.children(\"div\").find(`.k-treeview-toggle > span:first`);\n        };\n\n        function checkboxes(node) {\n             return node.find(\".k-checkbox-wrap:first input[type=checkbox]\");\n        }\n\n        function insertAction(indexOffset) {\n            return function(nodeData, referenceNode) {\n                referenceNode = referenceNode.closest(NODE);\n\n                var group = referenceNode.parent(),\n                    parentNode;\n\n                if (group.parent().is(\"li\")) {\n                    parentNode = group.parent();\n                }\n\n                return this._dataSourceMove(nodeData, group, parentNode, function(dataSource, model) {\n                    var referenceItem = this.dataItem(referenceNode);\n                    var referenceNodeIndex = referenceItem && referenceNode.parent().children().length !== referenceItem.parent().length ? referenceItem.parent().indexOf(referenceItem) : referenceNode.index();\n\n                    return this._insert(dataSource.data(), model, referenceNodeIndex + indexOffset);\n                });\n            };\n        }\n\n        spriteRe = /k-sprite/;\n\n        function moveContents(node, container) {\n            var tmp;\n\n            while (node && node.nodeName.toLowerCase() != \"ul\") {\n                tmp = node;\n                node = node.nextSibling;\n\n                if (tmp.nodeType == 3) {\n                    tmp.nodeValue = kendo.trim(tmp.nodeValue);\n                }\n\n                if (spriteRe.test(tmp.className)) {\n                    container.insertBefore(tmp, container.firstChild);\n                } else {\n                    container.appendChild(tmp);\n                }\n            }\n        }\n\n        function updateNodeHtml(node) {\n            var wrapper = node.children(\"div\"),\n                group = node.children(\"ul\"),\n                toggleButton = wrapper.find(`.k-treeview-toggle > span`),\n                checkbox = node.children(\"input[type=checkbox]\"),\n                innerWrapper = wrapper.children(\".k-treeview-leaf\");\n\n            if (node.hasClass(\"k-treeview\")) {\n                return;\n            }\n\n            if (!wrapper.length) {\n                wrapper = $(\"<div />\").prependTo(node);\n            }\n\n            if (!toggleButton.length && group.length) {\n                toggleButton = $(`<span class='k-treeview-toggle'>${TOGGLE_ICON_ELM}</span>`).prependTo(wrapper);\n            } else if (!group.length || !group.children().length) {\n                toggleButton.parent().remove();\n                group.remove();\n                node.removeAttr(ARIA_EXPANDED);\n            }\n\n            if (checkbox.length) {\n                $(\"<span class='k-checkbox-wrap' />\").appendTo(wrapper).append(checkbox);\n            }\n\n            if (!innerWrapper.length) {\n                innerWrapper = node.children(\"a\").eq(0).addClass(\"k-treeview-leaf k-link\");\n\n                if (!innerWrapper.length) {\n                    innerWrapper = $(\"<span class='k-treeview-leaf' />\");\n                }\n\n                innerWrapper.appendTo(wrapper);\n\n                if (wrapper.length) {\n                    moveContents(wrapper[0].nextSibling, innerWrapper[0]);\n                }\n            }\n        }\n\n        TreeView = kendo.ui.DataBoundWidget.extend({\n            init: function(element, options) {\n                var that = this,\n                    inferred = false,\n                    hasDataSource = options && !!options.dataSource,\n                    list;\n\n                if (isArray(options)) {\n                    options = { dataSource: options };\n                }\n\n                if (options && typeof options.loadOnDemand == UNDEFINED && isArray(options.dataSource)) {\n                    options.loadOnDemand = false;\n                }\n\n                Widget.prototype.init.call(that, element, options);\n\n                element = that.element;\n                options = that.options;\n\n                that._dataSourceUids = {};\n\n                list = (element.is(\"ul\") && element) ||\n                       (element.hasClass(KTREEVIEW) && element.children(\"ul\"));\n\n                inferred = !hasDataSource && list.length;\n\n                if (inferred) {\n                    options.dataSource.list = list;\n                }\n\n                that._animation();\n\n                that._accessors();\n\n                that._templates();\n\n                // render treeview if it's not already rendered\n                if (!element.hasClass(KTREEVIEW)) {\n                    that._wrapper();\n\n                    if (list) {\n                        that.root = element;\n                        that._group(that.wrapper);\n                    }\n                } else {\n                    // otherwise just initialize properties\n                    that.wrapper = element;\n                    that.root = element.children(\"ul\").eq(0);\n                }\n\n                that._applyCssClasses();\n                that._tabindex();\n\n                that.wrapper.find(\">ul\").attr(\"role\", \"tree\");\n\n                that._dataSource(inferred);\n\n                that._attachEvents();\n\n                that._dragging();\n\n                if (!inferred) {\n                    if (options.autoBind) {\n                        that._progress(true);\n                        that.dataSource.fetch(this._attemptLoadCompleted.bind(this));\n                    }\n                } else {\n                    that._syncHtmlAndDataSource();\n                }\n\n                if (options.checkboxes && options.checkboxes.checkChildren) {\n                    that.updateIndeterminate();\n                }\n\n                if (that.element[0].id) {\n                    that._ariaId = kendo.format(\"{0}_tv_active\", that.element[0].id);\n                } else {\n                    that._ariaId = kendo.guid() + \"_tv_active\";\n                }\n\n                kendo.notify(that);\n            },\n\n            _attachEvents: function() {\n                var that = this,\n                    clickableItems = \".k-treeview-leaf:not(.k-selected,.k-disabled)\",\n                    MOUSEENTER = \"mouseenter\";\n\n                that._clickHandler = that._click.bind(that);\n\n                that.wrapper\n                    .on(MOUSEENTER + NS, \".k-treeview-leaf.k-selected\", function(e) { e.preventDefault(); })\n                    .on(MOUSEENTER + NS, clickableItems, function() { $(this).addClass(KSTATEHOVER); })\n                    .on(\"mouseleave\" + NS, clickableItems, function() { $(this).removeClass(KSTATEHOVER); })\n                    .on(CLICK + NS, clickableItems, that._clickHandler)\n                    .on(\"dblclick\" + NS, \".k-treeview-leaf:not(.k-disabled)\", that._toggleButtonClick.bind(that))\n                    .on(CLICK + NS, `.k-treeview-toggle .${ICON}`, that._toggleButtonClick.bind(that))\n                    .on(\"keydown\" + NS, that, that._keydown.bind(that))\n                    .on(\"keypress\" + NS, that._keypress.bind(that))\n                    .on(\"focus\" + NS, that._focus.bind(that))\n                    .on(\"blur\" + NS, that._blur.bind(that))\n                    .on(\"mousedown\" + NS, `.k-treeview-leaf,.k-checkbox-wrap :checkbox,.k-treeview-toggle .${ICON}`, that._mousedown.bind(that))\n                    .on(\"change\" + NS, \".k-checkbox-wrap :checkbox\", that._checkboxChange.bind(that))\n                    .on(\"click\" + NS, \".k-request-retry\", that._retryRequest.bind(that))\n                    .on(\"click\" + NS, \".k-link.k-disabled\", function(e) { e.preventDefault(); })\n                    .on(\"click\" + NS, function(e) {\n                        var target = $(e.target);\n\n                        if (!target.is(\":kendoFocusable\") && !target.find(\"input,select,textarea,button,object\").is(\":kendoFocusable\")) {\n                            that.focus();\n                        }\n                    });\n            },\n\n            _syncHtmlAndDataSource: function(root, dataSource) {\n                root = root || this.root;\n                dataSource = dataSource || this.dataSource;\n                var data = dataSource.view(),\n                    uidAttr = kendo.attr(\"uid\"),\n                    expandedAttr = kendo.attr(\"expanded\"),\n                    checkboxesEnabled = this.options.checkboxes,\n                    items = root.children(\"li\"),\n                    i,\n                    item,\n                    dataItem,\n                    uid,\n                    itemCheckbox;\n\n                for (i = 0; i < items.length; i++) {\n                    dataItem = data[i];\n                    uid = dataItem.uid;\n                    item = items.eq(i);\n                    item.attr(\"role\", \"treeitem\")\n                        .attr(uidAttr, uid)\n                        .attr(ARIA_SELECTED, item.hasClass(\"k-selected\"));\n\n                    dataItem.expanded = item.attr(expandedAttr) === \"true\";\n\n                    if (dataItem.hasChildren) {\n                        item.attr(ARIA_EXPANDED, dataItem.expanded);\n                    }\n\n                    if (checkboxesEnabled) {\n                        itemCheckbox = checkboxes(item);\n                        dataItem.checked = itemCheckbox.prop(CHECKED);\n                        itemCheckbox.attr(\"id\", \"_\" + uid);\n                        itemCheckbox.next(\".k-checkbox-label\").attr(\"for\", \"_\" + uid);\n\n                        item.attr(ARIA_CHECKED, item.checked);\n                    }\n\n                    this._syncHtmlAndDataSource(item.children(\"ul\"), dataItem.children);\n                }\n            },\n\n            _animation: function() {\n                var options = this.options,\n                    animationOptions = options.animation,\n                    hasCollapseAnimation = animationOptions.collapse && \"effects\" in animationOptions.collapse,\n                    collapse = extend({}, animationOptions.expand, animationOptions.collapse);\n\n                if (!hasCollapseAnimation) {\n                    collapse = extend(collapse, { reverse: true });\n                }\n\n                if (animationOptions === false) {\n                    animationOptions = {\n                        expand: { effects: {} },\n                        collapse: { hide: true, effects: {} }\n                    };\n                }\n\n                animationOptions.collapse = extend(collapse, { hide: true });\n                options.animation = animationOptions;\n            },\n\n            _dragging: function() {\n                var enabled = this.options.dragAndDrop;\n                var dragging = this.dragging;\n\n                if (enabled && !dragging) {\n                    var widget = this;\n\n                    this.dragging = new ui.HierarchicalDragAndDrop(this.element, {\n                        reorderable: true,\n                        autoScroll: this.options.autoScroll,\n                        filter: \"div:not(.k-disabled) .k-treeview-leaf\",\n                        allowedContainers: \".k-treeview\",\n                        itemSelector: \".k-treeview .k-treeview-item\",\n                        hintText: this._hintText.bind(this),\n                        clickMoveClick: this.options.dragAndDrop.clickMoveClick === true ? true : false,\n                        contains: function(source, destination) {\n                            return $.contains(source, destination);\n                        },\n                        dropHintContainer: function(item) {\n                            return item;\n                        },\n                        itemFromTarget: function(target) {\n                            var item = target.closest(\".k-treeview-top,.k-treeview-mid,.k-treeview-bot\");\n                            return {\n                                item: item,\n                                content: target.closest(\".k-treeview-leaf\"),\n                                first: item.hasClass(\"k-treeview-top\"),\n                                last: item.hasClass(\"k-treeview-bot\")\n                            };\n                        },\n                        dropPositionFrom: function(dropHint) {\n                            return dropHint.prevAll(\".k-treeview-leaf\").length > 0 ? \"after\" : \"before\";\n                        },\n                        dragstart: function(source) {\n                            widget.wrapper.attr(kendo.attr(\"scrollable\"), false);\n                            return widget.trigger(DRAGSTART, { sourceNode: source[0] });\n                        },\n                        drag: function(options) {\n                            widget.trigger(DRAG, {\n                                originalEvent: options.originalEvent,\n                                sourceNode: options.source[0],\n                                dropTarget: options.target[0],\n                                pageY: options.pageY,\n                                pageX: options.pageX,\n                                statusClass: options.status,\n                                setStatusClass: options.setStatus\n                            });\n                        },\n                        drop: function(options) {\n                            var dropTarget = $(options.dropTarget);\n                            var navigationTarget = dropTarget.closest(\"a\");\n\n                            if (navigationTarget && navigationTarget.attr(\"href\")) {\n                                widget._tempPreventNavigation(navigationTarget);\n                            }\n\n                            return widget.trigger(DROP, {\n                                originalEvent: options.originalEvent,\n                                sourceNode: options.source,\n                                destinationNode: options.destination,\n                                valid: options.valid,\n                                setValid: function(state) {\n                                    this.valid = state;\n                                    options.setValid(state);\n                                },\n                                dropTarget: options.dropTarget,\n                                dropPosition: options.position\n                            });\n                        },\n                        dragend: function(options) {\n                            var source = options.source;\n                            var destination = options.destination;\n                            var position = options.position;\n\n                            widget.wrapper.removeAttr(kendo.attr(\"scrollable\"));\n\n                            function triggerDragEnd(source) {\n                                if (widget.options.checkboxes && widget.options.checkboxes.checkChildren) {\n                                    widget.updateIndeterminate();\n                                }\n\n                                widget.current(source);\n                                widget.element.focus();\n\n                                widget.trigger(DRAGEND, {\n                                    originalEvent: options.originalEvent,\n                                    sourceNode: source && source[0],\n                                    destinationNode: destination[0],\n                                    dropPosition: position\n                                });\n                            }\n\n                            // perform reorder / move\n                            // different handling is necessary because append might be async in remote bound tree\n                            if (position == \"over\") {\n                                widget.append(source, destination, triggerDragEnd);\n                            } else {\n                                if (position == \"before\") {\n                                    source = widget.insertBefore(source, destination);\n                                } else if (position == \"after\") {\n                                    source = widget.insertAfter(source, destination);\n                                }\n\n                                triggerDragEnd(source);\n                            }\n                        }\n                    });\n                } else if (!enabled && dragging) {\n                    dragging.destroy();\n                    this.dragging = null;\n                }\n            },\n\n            _tempPreventNavigation: function(node) {\n                node.on(CLICK + NS + TEMP_NS, function(ev) {\n                    ev.preventDefault();\n                    node.off(CLICK + NS + TEMP_NS);\n                });\n            },\n\n            _hintText: function(node) {\n                return this.templates.dragClue({\n                    item: this.dataItem(node),\n                    treeview: this.options\n                });\n            },\n\n            _templates: function() {\n                var that = this,\n                    options = that.options,\n                    fieldAccessor = that._fieldAccessor.bind(that);\n\n                if (options.template && typeof options.template == STRING) {\n                    options.template = template(options.template);\n                } else if (!options.template) {\n                    options.template = ({ item }) => {\n                        var text = fieldAccessor(\"text\")(item);\n\n                        if (typeof item.encoded != 'undefined' && item.encoded === false) {\n                            return `<span class='k-treeview-leaf-text'>${text}</span>`;\n                        }\n\n                        return `<span class='k-treeview-leaf-text'>${encode(text)}</span>`;\n                    };\n                }\n\n                that._checkboxes();\n\n                that.templates = {\n                    setAttributes: function(item) {\n                        var result = \"\";\n                        var attributes = item.attr || {};\n\n                        for (var attr in attributes) {\n                            if (attributes.hasOwnProperty(attr) && attr !== \"class\") {\n                                result += attr + \"=\\\"\" + attributes[attr] + \"\\\" \";\n                            }\n                        }\n\n                        return result;\n                    },\n                    cssClass: function(group, item) {\n                        var result = \"\",\n                            index = item.index,\n                            groupLength = group.length - 1;\n\n                        if (group.firstLevel && index === 0) {\n                            result += \"k-treeview-top \";\n                        }\n\n                        if (index === 0 && index != groupLength) {\n                            result += (result.indexOf(\"k-treeview-top\") != -1) ? \"\" : \"k-treeview-top\";\n                        } else if (index == groupLength) {\n                            result += \"k-treeview-bot\";\n                        } else {\n                            result += \"k-treeview-mid\";\n                        }\n\n                        return result;\n                    },\n                    textClass: function(item, isLink) {\n                        var result = \"k-treeview-leaf\";\n\n                        if (isLink) {\n                            result += \" k-link\";\n                        }\n\n                        if (item.enabled === false) {\n                            result += \" k-disabled\";\n                        }\n\n                        if (item.selected === true) {\n                            result += \" k-selected\";\n                        }\n\n                        return result;\n                    },\n                    checkboxClass: function(item) {\n                        var result = \"k-checkbox\";\n\n                        if (item.enabled === false) {\n                            result += \" k-disabled\";\n                        }\n\n                        return result;\n                    },\n                    toggleButtonClass: function(item) {\n                        var result = \"k-treeview-toggle\";\n\n                        if (item.enabled === false) {\n                            result += \" k-disabled\";\n                        }\n\n                        return result;\n                    },\n                    toggleIcon: function(icon, item) {\n                        if (item.expanded !== true) {\n                            return ui.icon(icon, { icon: `caret-alt-${kendo.support.isRtl(that.element) ? 'left' : 'right'}` });\n                        } else {\n                            return ui.icon(icon, { icon: 'caret-alt-down' });\n                        }\n                    },\n                    groupAttributes: function(group) {\n                        var attributes = \"\";\n\n                        if (!group.firstLevel) {\n                            attributes = \"role='group'\";\n                        }\n\n                        return attributes + (group.expanded !== true ? ` ${kendo.attr(\"style-display\")}=\"none\"` : \"\");\n                    },\n                    groupCssClass: function(group) {\n                        var cssClass = \"k-treeview-group\";\n\n                        if (group.firstLevel) {\n                            cssClass += \" k-treeview-lines\";\n                        }\n\n                        return cssClass;\n                    },\n                    dragClue: (data) => data.treeview.template(data),\n                    group: (data) =>\n                    `<ul class='${data.r.groupCssClass(data.group)}'${data.r.groupAttributes(data.group)}>` +\n                        data.renderItems(data) +\n                    `</ul>`,\n                    itemContent: (data) => {\n                        var imageUrl = fieldAccessor(\"imageUrl\")(data.item);\n                        var spriteCssClass = fieldAccessor(\"spriteCssClass\")(data.item);\n                        var result = \"\";\n\n                        if (imageUrl) {\n                            result += `<img class='k-image' alt='' src='${imageUrl}'>`;\n                        }\n\n                        if (spriteCssClass) {\n                            result += `<span class='k-sprite ${spriteCssClass}'></span>`;\n                        }\n\n                        result += data.treeview.template(data);\n\n                        return result;\n                    },\n                    itemElement: (data) => {\n                        var that = this,\n                            item = data.item,\n                            r = data.r;\n                        var url = fieldAccessor(\"url\")(item),\n                            tag = url ? 'a' : 'span',\n                            textAttr = url ? ' href=\"' + url + '\"' : '';\n                        var result = `<div class=\"${r.cssClass(data.group, item)}\">`;\n\n                        if (item.hasChildren) {\n                            result += `<span class='${r.toggleButtonClass(item)}'>` +\n                                        r.toggleIcon($(TOGGLE_ICON_ELM), item) +\n                                      `</span>`;\n                        }\n\n                        if (data.treeview.checkboxes) {\n                            result += `<span class='k-checkbox-wrap' role='presentation'>` +\n                                        data.treeview.checkboxes.template(data) +\n                                      `</span>`;\n                        }\n\n                        result += `<${tag} class='${r.textClass(item, !!url)}'${textAttr}>` +\n                                     r.itemContent(data) +\n                                  `</${tag}>`;\n\n                        result += \"</div>\";\n\n                        return result;\n                    },\n                    item: (data) => {\n                        var item = data.item,\n                            r = data.r;\n                        var result =\n                            `<li role='treeitem' class=\"k-treeview-item\"` +\n                            `${kendo.attr(\"uid\")}=\"${item.uid}\"` +\n                            `${r.setAttributes(item.toJSON ? item.toJSON() : item)} `;\n\n                        if (data.treeview.checkboxes) {\n                            result +=\n                                `aria-checked=\"${item.checked ? 'true' : 'false'}\" `;\n                        }\n\n                        result +=\n                            `aria-selected=\"${item.selected ? 'true' : 'false'}\" ` +\n                                `${item.enabled === false ? 'aria-disabled=\"true\"' : ''}`;\n\n                        if (item.hasChildren) {\n                            result += `aria-expanded=\"${item.expanded ? \"true\" : \"false\"}\" `;\n                        }\n\n                        result +=\n                            `data-expanded=\"${item.expanded ? \"true\" : \"false\"}\" >` +\n                            r.itemElement(data) +\n                            `</li>`;\n\n                        return result;\n                    },\n                    loading: ({ messages }) =>\n                        `<div class='k-icon k-i-loading'></div> ${encode(messages.loading)}`,\n                    retry: ({ messages }) =>\n                        `${encode(messages.requestFailed)} ` +\n                        `<button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-request-retry'><span class='k-button-text'>${encode(messages.retry)}</span></button>`\n                };\n            },\n\n            items: function() {\n                return this.element.find(\".k-treeview-item > div:first-child\");\n            },\n\n            setDataSource: function(dataSource) {\n                var options = this.options;\n\n                options.dataSource = dataSource;\n\n                this._dataSourceUids = {};\n\n                this._dataSource();\n\n                if (options.checkboxes && options.checkboxes.checkChildren) {\n                    this.dataSource.one(\"change\", this.updateIndeterminate.bind(this, null));\n                }\n\n                if (this.options.autoBind) {\n                    this.dataSource.fetch(this._attemptLoadCompleted.bind(this));\n                }\n            },\n\n            _bindDataSource: function() {\n                var that = this;\n\n                that._refreshHandler = that.refresh.bind(that);\n                that._errorHandler = that._error.bind(that);\n                that._loadCompletedHandler = that._loadCompleted.bind(that);\n                that._requestEndHandler = that._dsRequestEnd.bind(that);\n                that._loadedNodes = [];\n\n                that.dataSource.bind(CHANGE, that._refreshHandler);\n                that.dataSource.bind(ERROR, that._errorHandler);\n\n                that.dataSource.bind(ITEMSLOADED, that._loadCompletedHandler);\n                that.dataSource.bind(REQUESTEND, that._requestEndHandler);\n            },\n\n            _dsRequestEnd: function(e) {\n                var that = this;\n\n                setTimeout(function() {\n                    if (e.type === \"read\" && !that._loadCompletedFired) {\n                        that._attemptLoadCompleted();\n                    }\n                });\n            },\n\n            _loadCompleted: function(e) {\n                var that = this;\n                that._loadedNodes = that._loadedNodes.concat(e.nodes);\n\n                if (!that.dataSource.loading() && that.options.loadOnDemand === false) {\n                    that.trigger(LOADCOMPLETED, { nodes: that._loadedNodes });\n                    that._loadedNodes = [];\n                }\n            },\n\n            _attemptLoadCompleted: function() { // If there are no items to be loaded ensure event is triggered on dataBound\n                var that = this,\n                    items = that.dataSource.view(),\n                    current, i;\n\n                if (that.options.loadOnDemand === false) {\n                    for (i = 0; i < items.length; i++) {\n                        current = items[i];\n                        if (current.hasChildren && (!current.children || !current.children.data() || current.children.data().length === 0)) {\n                            return;\n                        }\n                    }\n\n                    that._loadCompletedFired = true;\n                    that.trigger(LOADCOMPLETED, { nodes: [] });\n                }\n            },\n\n            _unbindDataSource: function() {\n                var dataSource = this.dataSource;\n\n                if (dataSource) {\n                    dataSource.unbind(CHANGE, this._refreshHandler);\n                    dataSource.unbind(ERROR, this._errorHandler);\n                    dataSource.unbind(ITEMSLOADED, this._loadCompletedHandler);\n                    dataSource.unbind(REQUESTEND, this._requestEndHandler);\n                }\n            },\n\n            _dataSource: function(silentRead) {\n                var that = this,\n                    options = that.options,\n                    dataSource = options.dataSource;\n\n                function recursiveRead(data) {\n                    for (var i = 0; i < data.length; i++) {\n                        data[i]._initChildren();\n\n                        data[i].children.fetch();\n\n                        recursiveRead(data[i].children.view());\n                    }\n                }\n\n                dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;\n\n                that._unbindDataSource();\n\n                if (!dataSource.fields) {\n                    dataSource.fields = [\n                        { field: \"text\" },\n                        { field: \"url\" },\n                        { field: \"spriteCssClass\" },\n                        { field: \"imageUrl\" }\n                    ];\n                }\n\n                that.dataSource = dataSource = HierarchicalDataSource.create(dataSource);\n\n                if (silentRead) {\n                    dataSource.fetch();\n\n                    recursiveRead(dataSource.view());\n                }\n\n                that._bindDataSource();\n            },\n\n            events: [\n                DRAGSTART,\n                DRAG,\n                DROP,\n                DRAGEND,\n\n                DATABOUND,\n                LOADCOMPLETED,\n\n                EXPAND,\n                COLLAPSE,\n                SELECT,\n                CHANGE,\n                NAVIGATE,\n                CHECK,\n                KENDOKEYDOWN\n            ],\n\n            options: {\n                name: \"TreeView\",\n                dataSource: {},\n                animation: {\n                    expand: {\n                        effects: \"expand:vertical\",\n                        duration: 200\n                    }, collapse: {\n                        duration: 100\n                    }\n                },\n                messages: {\n                    loading: \"Loading...\",\n                    requestFailed: \"Request failed.\",\n                    retry: \"Retry\"\n                },\n                dragAndDrop: false,\n                checkboxes: false,\n                autoBind: true,\n                autoScroll: false,\n                loadOnDemand: true,\n                template: \"\",\n                dataTextField: null,\n                size: \"medium\"\n            },\n\n            _accessors: function() {\n                var that = this,\n                    options = that.options,\n                    i, field, textField,\n                    element = that.element;\n\n                for (i in bindings) {\n                    field = options[bindings[i]];\n                    textField = element.attr(kendo.attr(i + \"-field\"));\n\n                    if (!field && textField) {\n                        field = textField;\n                    }\n\n                    if (!field) {\n                        field = i;\n                    }\n\n                    if (!isArray(field)) {\n                        field = [field];\n                    }\n\n                    options[bindings[i]] = field;\n                }\n            },\n\n            // generates accessor function for a given field name, honoring the data*Field arrays\n            _fieldAccessor: function(fieldName) {\n                var fieldBindings = this.options[bindings[fieldName]],\n                    count = fieldBindings.length;\n\n                return (function(item) {\n                    if (count === 0) {\n                        return kendo.getter(fieldName)(item);\n                    }\n\n                    return $.map(fieldBindings, function(x) {\n                        return function(d) { return kendo.getter(x)(d); };\n                    })[Math.min(item.level(), count - 1)](item);\n                });\n            },\n\n            setOptions: function(options) {\n                Widget.fn.setOptions.call(this, options);\n\n                this._animation();\n\n                this._dragging();\n\n                this._accessors();\n\n                this._templates();\n            },\n\n            _trigger: function(eventName, node) {\n                return this.trigger(eventName, {\n                    node: node.closest(NODE)[0]\n                });\n            },\n\n            _setChecked: function(datasource, value) {\n                if (!datasource || !kendo.isFunction(datasource.view)) {\n                    return;\n                }\n\n                for (var i = 0, nodes = datasource.view(); i < nodes.length; i++) {\n                    if (nodes[i].enabled !== false) {\n                        this._setCheckedValue(nodes[i], value);\n                    }\n\n                    if (nodes[i].children) {\n                        this._setChecked(nodes[i].children, value);\n                    }\n                }\n            },\n\n            _setCheckedValue: function(node, value) {\n                node[CHECKED] = value;\n            },\n\n            _setIndeterminate: function(node) {\n                var group = subGroup(node),\n                    siblings, length,\n                    all = true,\n                    i;\n\n                if (!group.length) {\n                    return;\n                }\n\n                siblings = checkboxes(group.children());\n\n                length = siblings.length;\n\n                if (!length) {\n                    return;\n                } else if (length > 1) {\n                    for (i = 1; i < length; i++) {\n                        if (siblings[i].checked != siblings[i - 1].checked ||\n                            siblings[i].indeterminate || siblings[i - 1].indeterminate) {\n                            all = false;\n                            break;\n                        }\n                    }\n                } else {\n                    all = !siblings[0].indeterminate;\n                }\n\n                node.attr(ARIA_CHECKED, all ? siblings[0].checked : \"mixed\");\n\n                return checkboxes(node)\n                    .data(INDETERMINATE, !all)\n                    .prop(INDETERMINATE, !all)\n                    .prop(CHECKED, all && siblings[0].checked);\n            },\n\n            updateIndeterminate: function(node) {\n                // top-down update of inital indeterminate state for all nodes\n                node = node || this.wrapper;\n\n                var subnodes = subGroup(node).children();\n                var i;\n                var checkbox;\n                var dataItem;\n\n                if (subnodes.length) {\n                    for (i = 0; i < subnodes.length; i++) {\n                        this.updateIndeterminate(subnodes.eq(i));\n                    }\n\n                    if (node.is(\".k-treeview\")) {\n                        return;\n                    }\n\n                    checkbox = this._setIndeterminate(node);\n\n                    dataItem = this.dataItem(node);\n\n                    if (checkbox && checkbox.prop(CHECKED)) {\n                        dataItem.checked = true;\n                    } else {\n                        if (dataItem) {\n                            delete dataItem.checked;\n                        }\n                    }\n                }\n            },\n\n            _bubbleIndeterminate: function(node, skipDownward) {\n                // bottom-up setting of indeterminate state of parent nodes\n                if (!node.length) {\n                    return;\n                }\n\n                if (!skipDownward) {\n                    //update the indeterminate state of the node itself\n                    this.updateIndeterminate(node);\n                }\n\n                var parentNode = this.parent(node),\n                    checkbox;\n\n                if (parentNode.length) {\n                    this._setIndeterminate(parentNode);\n\n                    checkbox = parentNode.children(\"div\").find(\".k-checkbox-wrap input[type=checkbox]\");\n\n                    this._skip = true;\n                    if (checkbox.prop(INDETERMINATE) === false) {\n                        this.dataItem(parentNode).set(CHECKED, checkbox.prop(CHECKED));\n                    } else {\n                        // delete this.dataItem(parentNode).checked;\n                        this.dataItem(parentNode).set(CHECKED, false);\n                    }\n\n                    this._skip = false;\n\n                    this._bubbleIndeterminate(parentNode, true);\n                }\n            },\n\n            _checkboxChange: function(e) {\n                var that = this;\n                var checkbox = $(e.target);\n                var isChecked = checkbox.prop(CHECKED);\n                var node = checkbox.closest(NODE);\n                var dataItem = this.dataItem(node);\n\n                if (this._preventChange) {\n                    return;\n                }\n\n                if (dataItem.checked != isChecked) {\n                    dataItem.set(CHECKED, isChecked);\n                    node.attr(ARIA_CHECKED, isChecked);\n                    this._trigger(CHECK, node);\n                }\n\n                if (checkbox.is(\":focus\")) {\n                    that._trigger(NAVIGATE, node);\n                    that.focus();\n                }\n            },\n\n            _toggleButtonClick: function(e) {\n                var node = $(e.currentTarget).closest(NODE);\n\n                if (node.is(\"[aria-disabled='true']\")) {\n                    return;\n                }\n\n                this.toggle(node);\n            },\n\n            _mousedown: function(e) {\n                var that = this;\n                var currentTarget = $(e.currentTarget);\n                var node = $(e.currentTarget).closest(NODE);\n                var browser = kendo.support.browser;\n\n                if (node.is(\"[aria-disabled='true']\")) {\n                    return;\n                }\n\n                //IE does not trigger change for indeterminate checkboxes\n                if ((browser.msie || browser.edge) && currentTarget.is(\":checkbox\")) {\n                    if (currentTarget.prop(INDETERMINATE)) {\n                        that._preventChange = false;\n\n                        currentTarget.prop(CHECKED, !currentTarget.prop(CHECKED));\n                        currentTarget.trigger(CHANGE);\n\n                        currentTarget.on(CLICK + NS, function(e) {\n                            e.preventDefault();\n                        });\n\n                        that._preventChange = true;\n                    } else {\n                        currentTarget.off(CLICK + NS);\n                        that._preventChange = false;\n                    }\n                }\n\n                that._clickTarget = node;\n                that.current(node);\n            },\n\n            _focusable: function(node) {\n                return node && node.length && node.is(\":visible\") && !node.find(\".k-treeview-leaf\").first().hasClass(DISABLED);\n            },\n\n            _focus: function() {\n                var current = this.select(),\n                    clickTarget = this._clickTarget;\n\n                // suppress initial focus state on touch devices (until keyboard is used)\n                if (kendo.support.touch) {\n                    return;\n                }\n\n                if (clickTarget && clickTarget.length) {\n                    current = clickTarget;\n                }\n\n                if (!this._focusable(current)) {\n                    current = this.current();\n                }\n\n                if (!this._focusable(current)) {\n                    current = this._nextVisible($());\n                }\n\n                this.current(current);\n            },\n\n            focus: function() {\n                var wrapper = this.wrapper,\n                    scrollContainer = wrapper[0],\n                    containers = [],\n                    offsets = [],\n                    documentElement = document.documentElement,\n                    i;\n\n                do {\n                    scrollContainer = scrollContainer.parentNode;\n\n                    if (scrollContainer.scrollHeight > scrollContainer.clientHeight) {\n                        containers.push(scrollContainer);\n                        offsets.push(scrollContainer.scrollTop);\n                    }\n                } while (scrollContainer != documentElement);\n\n                kendo.focusElement(wrapper);\n\n                for (i = 0; i < containers.length; i++) {\n                    containers[i].scrollTop = offsets[i];\n                }\n            },\n\n            _blur: function() {\n                this.current().find(\".k-treeview-leaf\").first().removeClass(\"k-focus\");\n            },\n\n            _enabled: function(node) {\n                return !node.children(\"div\").children(\".k-treeview-leaf\").hasClass(DISABLED);\n            },\n\n            parent: function(node) {\n                var wrapperRe = /\\bk-treeview\\b(?!-)/,\n                    itemRe = /\\bk-treeview-item\\b/,\n                    result,\n                    skipSelf;\n\n                if (typeof node == STRING) {\n                    node = this.element.find(node);\n                }\n\n                if (!isDomElement(node)) {\n                    node = node[0];\n                }\n\n                skipSelf = itemRe.test(node.className);\n\n                do {\n                    node = node.parentNode;\n\n                    if (itemRe.test(node.className)) {\n                        if (skipSelf) {\n                            result = node;\n                        } else {\n                            skipSelf = true;\n                        }\n                    }\n                } while (!wrapperRe.test(node.className) && !result);\n\n                return $(result);\n            },\n\n            _nextVisible: function(node) {\n                var that = this,\n                    expanded = that._expanded(node),\n                    result;\n\n                function nextParent(node) {\n                    while (node.length && !node.next().length) {\n                        node = that.parent(node);\n                    }\n\n                    if (node.next().length) {\n                        return node.next();\n                    } else {\n                        return node;\n                    }\n                }\n\n                if (!node.length || !node.is(\":visible\")) {\n                    result = that.root.children().eq(0);\n                } else if (expanded) {\n                    result = subGroup(node).children().first();\n\n                    // expanded node with no children\n                    if (!result.length) {\n                        result = nextParent(node);\n                    }\n                } else {\n                    result = nextParent(node);\n                }\n\n                return result;\n            },\n\n            _previousVisible: function(node) {\n                var that = this,\n                    lastChild,\n                    result;\n\n                if (!node.length || node.prev().length) {\n                    if (node.length) {\n                        result = node.prev();\n                    } else {\n                        result = that.root.children().last();\n                    }\n\n                    while (that._expanded(result)) {\n                        lastChild = subGroup(result).children().last();\n\n                        if (!lastChild.length) {\n                            break;\n                        }\n\n                        result = lastChild;\n                    }\n                } else {\n                    result = that.parent(node) || node;\n                }\n\n                return result;\n            },\n\n            scrollTo: function(item) {\n                if (item && item.length > 0) {\n                    item[0].scrollIntoView({ block: \"nearest\" });\n                }\n            },\n\n            _keydown: function(e) {\n                var that = this,\n                    key = e.keyCode,\n                    target,\n                    focused = that.current(),\n                    expanded = that._expanded(focused),\n                    checkbox = focused.find(\".k-checkbox-wrap\").first().find(\":checkbox\"),\n                    rtl = kendo.support.isRtl(that.element);\n\n                if (e.target != e.currentTarget) {\n                    return;\n                }\n\n                if ((!rtl && key == keys.RIGHT) || (rtl && key == keys.LEFT)) {\n                    if (expanded) {\n                        target = that._nextVisible(focused);\n                    } else if (!focused.find(\".k-treeview-leaf\").first().hasClass(DISABLED)) {\n                        that.expand(focused);\n                    }\n                } else if ((!rtl && key == keys.LEFT) || (rtl && key == keys.RIGHT)) {\n                    if (expanded && !focused.find(\".k-treeview-leaf\").first().hasClass(DISABLED)) {\n                        that.collapse(focused);\n                    } else {\n                        target = that.parent(focused);\n\n                        if (!that._enabled(target)) {\n                            target = undefined$1;\n                        }\n                    }\n                } else if (key == keys.DOWN) {\n                    target = that._nextVisible(focused);\n                } else if (key == keys.UP) {\n                    target = that._previousVisible(focused);\n                } else if (key == keys.HOME) {\n                    target = that._nextVisible($());\n                } else if (key == keys.END) {\n                    target = that._previousVisible($());\n                } else if (key == keys.ENTER && !focused.find(\".k-treeview-leaf\").first().hasClass(DISABLED)) {\n                    if (!focused.find(\".k-treeview-leaf\").first().hasClass(\"k-selected\")) {\n                        if (!that._trigger(SELECT, focused)) {\n                            that.select(focused);\n                        }\n                    }\n                } else if (key == keys.SPACEBAR && checkbox.length) {\n                    if (!focused.find(\".k-treeview-leaf\").first().hasClass(DISABLED)) {\n                        checkbox.prop(CHECKED, !checkbox.prop(CHECKED))\n                            .data(INDETERMINATE, false)\n                            .prop(INDETERMINATE, false);\n\n                        that._checkboxChange({ target: checkbox });\n                    }\n                    target = focused;\n                }\n\n                if (target) {\n                    e.preventDefault();\n\n                    if (focused[0] != target[0]) {\n                        that._trigger(NAVIGATE, target);\n                        that.current(target);\n                        that.scrollTo(target);\n                    }\n                }\n            },\n\n            _keypress: function(e) {\n                var that = this;\n                var delay = 300;\n                var focusedNode = that.current().get(0);\n                var matchToFocus;\n                var key = e.key;\n                var isPrintable = key.length === 1;\n\n                if (!isPrintable) {\n                    return;\n                }\n\n                if (!that._match) {\n                    that._match = \"\";\n                }\n\n                that._match += key;\n                clearTimeout(that._matchTimer);\n                that._matchTimer = setTimeout(function() {\n                    that._match = \"\";\n                }, delay);\n\n                matchToFocus = focusedNode &&\n                                that._matchNextByText(\n                                    Array.prototype.indexOf.call(that.element.find(\".k-treeview-item\"),\n                                    focusedNode), that._match\n                                );\n\n                if (!matchToFocus.length) {\n                    matchToFocus = that._matchNextByText(-1, that._match);\n                }\n\n                if (matchToFocus.get(0) && matchToFocus.get(0) !== focusedNode) {\n                    that._trigger(NAVIGATE, matchToFocus);\n                    that.current(matchToFocus);\n                }\n            },\n\n            _matchNextByText: function(startIndex, text) {\n                var element = this.element;\n                var textNodes = element.find(\".k-treeview-leaf\").filter(function(i, element) {\n                    return (i > startIndex &&\n                            $(element).is(\":visible\") &&\n                            $(element).text().toLowerCase().indexOf(text) === 0);\n                });\n\n                return textNodes.eq(0).closest(NODE);\n            },\n\n            _click: function(e) {\n                var that = this,\n                    node = $(e.currentTarget),\n                    contents = nodeContents(node.closest(NODE)),\n                    href = node.attr(\"href\"),\n                    shouldNavigate;\n\n                if (href) {\n                    shouldNavigate = href == \"#\" || href.indexOf(\"#\" + this.element.id + \"-\") >= 0;\n                } else {\n                    shouldNavigate = contents.length && !contents.children().length;\n                }\n\n                if (shouldNavigate) {\n                    e.preventDefault();\n                }\n\n                if (!node.hasClass(\".k-selected\") && !that._trigger(SELECT, node)) {\n                    that.select(node);\n                }\n            },\n\n            _wrapper: function() {\n                var that = this,\n                    element = that.element,\n                    wrapper, root,\n                    wrapperClasses = \"k-treeview\";\n\n                if (element.is(\"ul\")) {\n                    wrapper = element.wrap('<div />').parent();\n                    root = element;\n                } else {\n                    wrapper = element;\n                    root = wrapper.children(\"ul\").eq(0);\n                }\n\n                that.wrapper = wrapper.addClass(wrapperClasses);\n                that.root = root;\n            },\n\n            _getSelectedNode: function() {\n                return this.element.find(\".k-selected\").closest(NODE);\n            },\n\n            _group: function(item) {\n                var that = this,\n                    firstLevel = item.hasClass(KTREEVIEW),\n                    group = {\n                        firstLevel: firstLevel,\n                        expanded: firstLevel || that._expanded(item)\n                    },\n                    groupElement = item.children(\"ul\");\n\n                groupElement\n                    .addClass(that.templates.groupCssClass(group))\n                    .css(\"display\", group.expanded ? \"\" : \"none\");\n\n                if (!firstLevel) {\n                    groupElement.attr(\"role\", \"group\");\n                }\n\n                that._nodes(groupElement, group);\n            },\n\n            _nodes: function(groupElement, groupData) {\n                var that = this,\n                    nodes = groupElement.children(\"li\"),\n                    nodeData;\n\n                groupData = extend({ length: nodes.length }, groupData);\n\n                nodes.each(function(i, node) {\n                    node = $(node);\n\n                    nodeData = { index: i, expanded: that._expanded(node) };\n\n                    updateNodeHtml(node);\n\n                    that._updateNodeClasses(node, groupData, nodeData);\n\n                    // iterate over child nodes\n                    that._group(node);\n                });\n            },\n\n            _checkboxes: function() {\n                var options = this.options;\n                var checkboxes = options.checkboxes;\n                var defaultTemplate, checkbox;\n\n                if (checkboxes) {\n                    defaultTemplate = kendo.html.renderCheckBox($(\"<input/>\"), $.extend({}, options, {\n                        rounded: \"medium\"\n                    }));\n\n                    defaultTemplate = defaultTemplate.replace(\">\", \"\");\n\n                    checkbox = ({ item }) =>\n                    defaultTemplate +\n                    ` id=\"_${item.uid}\" aria-hidden=\"true\" type=\"checkbox\" tabindex=\"-1\"` +\n                    `${checkboxes.name ? 'name=\"' + checkboxes.name + '\"' : ''} ` +\n                    `${(item.enabled === false) ? 'disabled' : ''} ` +\n                    `${item.checked ? 'checked' : ''}/>`;\n\n                    checkboxes = extend({\n                        template: checkbox\n                    }, options.checkboxes);\n\n                    if (typeof checkboxes.template == STRING) {\n                        checkboxes.template = template(checkboxes.template);\n                    }\n\n                    options.checkboxes = checkboxes;\n                }\n            },\n\n            _updateNodeClasses: function(node, groupData, nodeData) {\n                var wrapper = node.children(\"div\"),\n                    group = node.children(\"ul\"),\n                    templates = this.templates;\n\n                if (node.hasClass(\"k-treeview\")) {\n                    return;\n                }\n\n                nodeData = nodeData || {};\n                nodeData.expanded = typeof nodeData.expanded != UNDEFINED ? nodeData.expanded : this._expanded(node);\n                nodeData.index = typeof nodeData.index != UNDEFINED ? nodeData.index : node.index();\n                nodeData.enabled = typeof nodeData.enabled != UNDEFINED ? nodeData.enabled : !wrapper.children(\".k-treeview-leaf\").hasClass(\"k-disabled\");\n\n                groupData = groupData || {};\n                groupData.firstLevel = typeof groupData.firstLevel != UNDEFINED ? groupData.firstLevel : node.parent().parent().hasClass(KTREEVIEW);\n                groupData.length = typeof groupData.length != UNDEFINED ? groupData.length : node.parent().children().length;\n\n                // li\n                node.addClass(\"k-treeview-item\");\n\n                // div\n                wrapper.removeClass(\"k-treeview-top k-treeview-mid k-treeview-bot\")\n                       .addClass(templates.cssClass(groupData, nodeData));\n\n                // chekbox\n                var checkbox = wrapper.find(\".k-checkbox\");\n                checkbox.removeClass(\"k-checkbox k-disabled\").addClass(templates.checkboxClass(nodeData));\n\n                // span / a\n                var textWrap = wrapper.children(\".k-treeview-leaf\");\n                var isLink = textWrap[0] && textWrap[0].nodeName.toLowerCase() == \"a\";\n                textWrap.removeClass(\"k-treeview-leaf k-link k-disabled\")\n                    .addClass(templates.textClass(nodeData, isLink));\n\n                // toggle button\n                if (group.length || node.attr(\"data-hasChildren\") == \"true\") {\n                    var toggleButton = wrapper.find(\".k-treeview-toggle\");\n                    var toggleIcon = toggleButton.children(`span`);\n                    toggleButton.removeClass(\"k-treeview-toggle k-disabled\").addClass(templates.toggleButtonClass(nodeData));\n\n                    // renderv icon\n                    templates.toggleIcon(toggleIcon, nodeData);\n\n\n                    group.addClass(\"k-treeview-group\");\n                }\n            },\n\n\n            _processNodes: function(nodes, callback) {\n                var that = this;\n                var items = that.element.find(nodes);\n                for (var i = 0; i < items.length; i++) {\n                    callback.call(that, i, $(items[i]).closest(NODE));\n                }\n            },\n\n            dataItem: function(node) {\n                var uid = $(node).closest(NODE).attr(kendo.attr(\"uid\")),\n                    dataSource = this.dataSource;\n\n                return dataSource && dataSource.getByUid(uid);\n            },\n\n            _dataItem: function(node) {\n                var uid = $(node).closest(NODE).attr(kendo.attr(\"uid\")),\n                    dataSource = this.dataSource;\n\n                return dataSource && this._dataSourceUids[uid];\n            },\n\n            _insertNode: function(nodeData, index, parentNode, insertCallback, collapsed) {\n                var that = this,\n                    group = subGroup(parentNode),\n                    updatedGroupLength = group.children().length + 1,\n                    childrenData,\n                    groupData = {\n                        firstLevel: parentNode.hasClass(KTREEVIEW),\n                        expanded: !collapsed,\n                        length: updatedGroupLength\n                    }, node, i, item, nodeHtml = \"\", firstChild, lastChild,\n                    append = function(item, group) {\n                        item.appendTo(group);\n                    };\n\n                for (i = 0; i < nodeData.length; i++) {\n                    item = nodeData[i];\n\n                    item.index = index + i;\n\n                    nodeHtml += that._renderItem({\n                        group: groupData,\n                        item: item\n                    });\n                }\n\n                node = $(nodeHtml);\n\n                if (!node.length) {\n                    return;\n                }\n\n                if (!group.length) {\n                    group = $(that._renderGroup({\n                        group: groupData\n                    }));\n\n                    kendo.applyStylesFromKendoAttributes(group, [\"display\"]);\n                    group.appendTo(parentNode);\n\n                    parentNode.attr(ARIA_EXPANDED, true);\n                }\n\n                insertCallback(node, group);\n\n                if (parentNode.hasClass(\"k-treeview-item\")) {\n                    updateNodeHtml(parentNode);\n                    that._updateNodeClasses(parentNode, groupData, { expanded: !collapsed });\n                }\n\n                firstChild = node.prev().first();\n                lastChild = node.next().last();\n\n                that._updateNodeClasses(firstChild, {}, { expanded: firstChild.attr(kendo.attr(\"expanded\")) == \"true\" });\n                that._updateNodeClasses(lastChild, {}, { expanded: lastChild.attr(kendo.attr(\"expanded\")) == \"true\" });\n\n                // render sub-nodes\n                for (i = 0; i < nodeData.length; i++) {\n                    item = nodeData[i];\n\n                    if (item.hasChildren) {\n                        childrenData = item.children.data();\n\n                        if (childrenData.length) {\n                            that._insertNode(childrenData, item.index, node.eq(i), append, !item.expanded);\n                        }\n                    }\n                }\n\n                return node;\n            },\n\n            _updateNodes: function(items, field) {\n                var that = this;\n                var i, node, nodeWrapper, item, isChecked, isCollapsed, kin;\n                var context = { treeview: that.options, item: item };\n                var render = field != \"expanded\" && field != \"checked\";\n\n                function setCheckedState(root, state) {\n                    if (root.is(\".k-treeview-group\")) {\n                        root.find(\".k-treeview-item:not([aria-disabled])\").attr(ARIA_CHECKED, state);\n                    }\n\n                    root.find(\".k-checkbox-wrap input[type=checkbox]:not([disabled])\")\n                        .prop(CHECKED, state)\n                        .data(INDETERMINATE, false)\n                        .prop(INDETERMINATE, false);\n                }\n\n                if (field == \"selected\") {\n                    item = items[0];\n\n                    node = that.findByUid(item.uid);\n                    kin = node.find(\".k-treeview-leaf\").first();\n\n                    kin.removeClass(\"k-hover\")\n                        .toggleClass(\"k-selected\", item[field])\n                        .end();\n\n                    if (item[field]) {\n                        that.current(node);\n                    }\n\n                    node.attr(ARIA_SELECTED, !!item[field]);\n                } else {\n                    var elements = $.map(items, function(item) {\n                        return that.findByUid(item.uid).children(\"div\");\n                    });\n\n                    for (i = 0; i < items.length; i++) {\n                        context.item = item = items[i];\n                        nodeWrapper = elements[i];\n                        node = nodeWrapper.parent();\n\n                        if (render) {\n                            if (kendo.unbind) {\n                                kendo.unbind(nodeWrapper);\n                            }\n                            nodeWrapper.children(\".k-treeview-leaf\")\n                                .html(that.templates.itemContent(context));\n                        }\n\n                        if (field == CHECKED) {\n                            isChecked = item[field];\n\n                            setCheckedState(nodeWrapper, isChecked);\n\n                            node.attr(ARIA_CHECKED, isChecked);\n\n                            if (that.options.checkboxes.checkChildren) {\n                                setCheckedState(node.children(\".k-treeview-group\"), isChecked);\n\n                                that._setChecked(item.children, isChecked);\n\n                                that._bubbleIndeterminate(node);\n                            }\n                        } else if (field == \"expanded\") {\n                            that._toggle(node, item, item[field]);\n                        } else if (field == \"enabled\") {\n                            node.find(\".k-checkbox-wrap input[type=checkbox]\").prop(\"disabled\", !item[field]);\n\n                            isCollapsed = !nodeContents(node).is(VISIBLE);\n\n                            node.removeAttr(ARIA_DISABLED);\n\n                            if (!item[field]) {\n                                if (item.selected) {\n                                    item.set(\"selected\", false);\n                                }\n\n                                if (item.expanded) {\n                                    item.set(\"expanded\", false);\n                                }\n\n                                isCollapsed = true;\n                                node.attr(ARIA_SELECTED, false)\n                                    .attr(ARIA_DISABLED, true);\n                            }\n\n                            that._updateNodeClasses(node, {}, { enabled: item[field], expanded: !isCollapsed });\n                        }\n\n                        if (nodeWrapper.length) {\n                            this.trigger(\"itemChange\", { item: nodeWrapper, data: item, ns: ui });\n                        }\n                    }\n                }\n            },\n\n            _appendItems: function(index, items, parentNode) {\n                var group = subGroup(parentNode);\n                var children = group.children();\n                var collapsed = !this._expanded(parentNode);\n\n                if (this.element === parentNode) {\n                    var dataItems = this.dataSource.data();\n                    var viewItems = this.dataSource.view();\n                    var rootItems = viewItems.length < dataItems.length ? viewItems : dataItems;\n                    index = rootItems.indexOf(items[0]);\n                } else if (items.length) {\n                    index = items[0].parent().indexOf(items[0]);\n                }\n\n                if (typeof index == UNDEFINED) {\n                    index = children.length;\n                }\n\n                this._insertNode(items, index, parentNode, function(item, group) {\n                    // insert node into DOM\n                    if (index >= children.length) {\n                        item.appendTo(group);\n                    } else {\n                        item.insertBefore(children.eq(index));\n                    }\n                }, collapsed);\n\n                if (!collapsed) {\n                    this._updateNodeClasses(parentNode, {}, { expanded: !collapsed });\n                    subGroup(parentNode).css(\"display\", \"block\");\n                }\n            },\n\n            _refreshChildren: function(parentNode, items, index) {\n                var i, children, child;\n                var options = this.options;\n                var loadOnDemand = options.loadOnDemand;\n                var checkChildren = options.checkboxes && options.checkboxes.checkChildren;\n\n                subGroup(parentNode).empty();\n\n                if (!items.length) {\n                    updateNodeHtml(parentNode);\n                } else {\n                    this._appendItems(index, items, parentNode);\n\n                    children = subGroup(parentNode).children();\n\n                    if (loadOnDemand && checkChildren) {\n                        this._bubbleIndeterminate(children.last());\n                    }\n\n                    for (i = 0; i < children.length; i++) {\n                        child = children.eq(i);\n                        this.trigger(\"itemChange\", {\n                            item: child.children(\"div\"),\n                            data: items[i],\n                            ns: ui\n                        });\n                    }\n                }\n            },\n\n            _refreshRoot: function(items) {\n                var groupHtml = this._renderGroup({\n                        items: items,\n                        group: {\n                            firstLevel: true,\n                            expanded: true\n                        }\n                    });\n\n                if (this.root.length && this.root[0].parentElement) {\n                    var group = $(groupHtml);\n\n                    this.root\n                        .attr(\"class\", group.attr(\"class\"))\n                        .html(group.html());\n                } else {\n                    this.root = this.wrapper.html(groupHtml).children(\"ul\");\n                }\n\n                var elements = this.root.children(\".k-treeview-item\");\n                for (var i = 0; i < items.length; i++) {\n                    this.trigger(\"itemChange\", {\n                        item: elements.eq(i),\n                        data: items[i],\n                        ns: ui\n                    });\n                }\n            },\n\n            refresh: function(e) {\n                var node = e.node;\n                var action = e.action;\n                var items = e.items;\n                var parentNode = this.wrapper;\n                var options = this.options;\n                var loadOnDemand = options.loadOnDemand;\n                var checkChildren = options.checkboxes && options.checkboxes.checkChildren;\n                var i;\n\n                if (this._skip) {\n                    return;\n                }\n\n                for (i = 0; i < items.length; i++) {\n                    this._dataSourceUids[items[i].uid] = items[i];\n                }\n\n                if (e.field) {\n                    if (!items[0] || !items[0].level) {\n                        return;\n                    }\n\n                    return this._updateNodes(items, e.field);\n                }\n\n                if (node) {\n                    parentNode = this.findByUid(node.uid);\n                    this._progress(parentNode, false);\n                }\n\n                if (checkChildren && action != \"remove\") {\n                    var bubble = false;\n\n                    for (i = 0; i < items.length; i++) {\n                        if (\"checked\" in items[i]) {\n                            bubble = true;\n                            break;\n                        }\n                    }\n\n                    if (!bubble && node && node.checked) {\n                        for (i = 0; i < items.length; i++) {\n                            items[i].checked = true;\n                        }\n                    }\n                }\n\n                if (action == \"add\") {\n                    this._appendItems(e.index, items, parentNode);\n                } else if (action == \"remove\") {\n                    this._remove(this.findByUid(items[0].uid), false);\n                } else if (action == \"itemchange\") {\n                    this._updateNodes(items);\n                } else if (action == \"itemloaded\") {\n                    this._refreshChildren(parentNode, items, e.index);\n                } else {\n                    this._refreshRoot(items);\n                    this.element.attr(ARIA_BUSY, false);\n                }\n\n                if (action != \"remove\") {\n                    for (i = 0; i < items.length; i++) {\n                        if (!loadOnDemand || items[i].expanded || items[i]._loaded) {\n                            items[i].load();\n                        }\n                    }\n                }\n\n                this.wrapper.find(\">ul\").attr(\"role\", \"tree\");\n\n\n                this.trigger(DATABOUND, { node: node ? parentNode : undefined$1 });\n                if (this.dataSource.filter() && this.options.checkboxes.checkChildren) {\n                    this.updateIndeterminate(parentNode);\n                }\n            },\n\n            _error: function(e) {\n                var node = e.node && this.findByUid(e.node.uid);\n                var retryHtml = this.templates.retry({ messages: this.options.messages });\n\n                if (node) {\n                    this._progress(node, false);\n                    this._expanded(node, false);\n                    nodeIcon(node).replaceWith(ui.icon($(TOGGLE_ICON_ELM), { icon: \"arrow-rotate-cw\" }));\n                    e.node.loaded(false);\n                } else {\n                    this._progress(false);\n                    this.dataSource.data([]);\n                    this.element.html(retryHtml);\n                }\n            },\n\n            _retryRequest: function(e) {\n                e.preventDefault();\n\n                this.dataSource.fetch(this._attemptLoadCompleted.bind(this));\n            },\n\n            expand: function(nodes) {\n                this._processNodes(nodes, function(index, item) {\n                    this.toggle(item, true);\n                });\n            },\n\n            collapse: function(nodes) {\n                this._processNodes(nodes, function(index, item) {\n                    this.toggle(item, false);\n                });\n            },\n\n            enable: function(nodes, enable) {\n                if (typeof nodes === \"boolean\") {\n                    enable = nodes;\n                    nodes = this.items();\n                } else {\n                    enable = arguments.length == 2 ? !!enable : true;\n                }\n\n                this._processNodes(nodes, function(index, item) {\n                    this.dataItem(item).set(\"enabled\", enable);\n                });\n            },\n\n            current: function(node) {\n                var that = this,\n                    current = that._current,\n                    element = that.element;\n\n                if (arguments.length > 0 && node && node.length) {\n                    if (current) {\n                        current.find(\".k-treeview-leaf\").first().removeClass(\"k-focus\");\n                    }\n\n                    current = that._current = $(node, element).closest(NODE);\n                    current.find(\".k-treeview-leaf\").first().addClass(\"k-focus\");\n                    that._updateActiveDescendant();\n\n                    return;\n                }\n\n                if (!current) {\n                    current = that._nextVisible($());\n                }\n\n                return current;\n            },\n\n            _updateActiveDescendant: function() {\n                var current = this._current,\n                    id = current[0].id || this._ariaId,\n                    prev = this.element.find(\"#\" + this._ariaId);\n\n                if (prev.length > 0) {\n                    prev.removeAttr(\"id\");\n                }\n\n                this.root.removeAttr(ARIA_ACTIVEDESCENDANT);\n                current.attr(\"id\", id);\n                this.root.attr(ARIA_ACTIVEDESCENDANT, id);\n            },\n\n            select: function(node) {\n                var that = this,\n                    element = that.element;\n\n                if (!arguments.length) {\n                    return element.find(\".k-selected\").closest(NODE);\n                }\n\n                node = $(node, element).closest(NODE);\n\n                element.find(\".k-selected\").each(function() {\n                    var dataItem = that.dataItem(this);\n                    if (dataItem) {\n                        dataItem.set(\"selected\", false);\n                        delete dataItem.selected;\n                    } else {\n                        $(this).removeClass(\"k-selected\");\n                    }\n                });\n\n                if (node.length) {\n                    that.dataItem(node).set(\"selected\", true);\n                    that._clickTarget = node;\n                }\n\n                that.trigger(CHANGE);\n            },\n\n            _toggle: function(node, dataItem, expand) {\n                var options = this.options;\n                var contents = nodeContents(node);\n                var direction = expand ? \"expand\" : \"collapse\";\n                var loaded;\n\n                if (contents.data(\"animating\")) {\n                    return;\n                }\n\n                loaded = dataItem && dataItem.loaded();\n\n                if (expand && !loaded) {\n                    if (options.loadOnDemand) {\n                        this._progress(node, true);\n                    }\n\n                    contents.remove();\n                    dataItem.load();\n                } else {\n                    this._updateNodeClasses(node, {}, { expanded: expand });\n\n                    if (!expand) {\n                        contents.css(\"height\", contents.height()).css(\"height\");\n                    }\n\n                    contents\n                        .kendoStop(true, true)\n                        .kendoAnimate(extend(\n                            { reset: true },\n                            options.animation[direction],\n                            { complete: function() {\n                                if (expand) {\n                                    contents.css(\"height\", \"\");\n                                }\n                            } }\n                        ));\n                }\n\n            },\n\n            toggle: function(node, expand) {\n                node = $(node);\n\n                if (!nodeIcon(node)) {\n                    return;\n                }\n\n                if (arguments.length == 1) {\n                    expand = !this._expanded(node);\n                }\n\n                this._expanded(node, expand);\n            },\n\n            destroy: function() {\n                var that = this;\n\n                Widget.fn.destroy.call(that);\n\n                that.wrapper.off(NS);\n                that.wrapper.find(\".k-checkbox-wrap :checkbox\").off(NS);\n                that._clickHandler = null;\n\n                that._unbindDataSource();\n\n                if (that.dragging) {\n                    that.dragging.destroy();\n                }\n\n                that._dataSourceUids = {};\n\n                kendo.destroy(that.element);\n\n                that.root = that.wrapper = that.element = null;\n            },\n\n            _expanded: function(node, value, force) {\n                var expandedAttr = kendo.attr(\"expanded\");\n                var dataItem;\n                var expanded = value;\n                var direction = expanded ? \"expand\" : \"collapse\";\n\n                if (node.children().hasClass(\"k-hidden\")) {\n                    node.children().removeClass(\"k-hidden\");\n                }\n\n                if (arguments.length == 1) {\n                    dataItem = this._dataItem(node);\n                    return node.attr(expandedAttr) === \"true\" || (dataItem && dataItem.expanded);\n                }\n\n                dataItem = this.dataItem(node);\n\n                if (nodeContents(node).data(\"animating\")) {\n                    return;\n                }\n\n                if (force || !this._trigger(direction, node)) {\n                    if (expanded) {\n                        node.attr(expandedAttr, \"true\");\n                        node.attr(ARIA_EXPANDED, \"true\");\n                    } else {\n                        node.removeAttr(expandedAttr);\n                        node.attr(ARIA_EXPANDED, \"false\");\n                    }\n\n                    if (dataItem) {\n                        dataItem.set(\"expanded\", expanded);\n                        // necessary when expanding an item yields an error and the item is not expanded as a result\n                        expanded = dataItem.expanded;\n                    }\n                }\n            },\n\n            _progress: function(node, showProgress) {\n                var element = this.element;\n                var loadingText = this.templates.loading({ messages: this.options.messages });\n\n                if (arguments.length == 1) {\n                    showProgress = node;\n\n                    if (showProgress) {\n                        element.html(loadingText);\n                    } else {\n                        element.empty();\n                    }\n\n                    this.element.attr(ARIA_BUSY, showProgress);\n                } else {\n                    nodeIcon(node).replaceWith(\n                        $(TOGGLE_ICON_ELM)\n                            .toggleClass('k-i-loading', showProgress)\n                            .toggleClass('k-icon', showProgress));\n                    node.attr(ARIA_BUSY, showProgress);\n                }\n            },\n\n            text: function(node, text) {\n                var dataItem = this.dataItem(node),\n                    fieldBindings = this.options[bindings.text],\n                    level = dataItem.level(),\n                    length = fieldBindings.length,\n                    field = fieldBindings[Math.min(level, length - 1)];\n\n                if (text) {\n                    dataItem.set(field, text);\n                } else {\n                    return dataItem[field];\n                }\n            },\n\n            _objectOrSelf: function(node) {\n                return $(node).closest(\"[data-role=treeview]\").data(\"kendoTreeView\") || this;\n            },\n\n            _dataSourceMove: function(nodeData, group, parentNode, callback) {\n                var referenceDataItem,\n                    destTreeview = this._objectOrSelf(parentNode || group),\n                    destDataSource = destTreeview.dataSource;\n                var loadPromise = $.Deferred().resolve().promise();\n\n                if (parentNode && parentNode[0] != destTreeview.element[0]) {\n                    referenceDataItem = destTreeview.dataItem(parentNode);\n\n                    if (!referenceDataItem.loaded()) {\n                        destTreeview._progress(parentNode, true);\n                        loadPromise = referenceDataItem.load();\n                    }\n\n                    if (parentNode != this.root) {\n                        destDataSource = referenceDataItem.children;\n\n                        if (!destDataSource || !(destDataSource instanceof HierarchicalDataSource)) {\n                            referenceDataItem._initChildren();\n                            referenceDataItem.loaded(true);\n                            destDataSource = referenceDataItem.children;\n                        }\n                    }\n                }\n\n                nodeData = this._toObservableData(nodeData);\n\n                return callback.call(destTreeview, destDataSource, nodeData, loadPromise);\n            },\n\n            _toObservableData: function(node) {\n                var dataItem = node, dataSource, uid;\n\n                if (isJQueryInstance(node) || isDomElement(node)) {\n                    dataSource = this._objectOrSelf(node).dataSource;\n                    uid = $(node).attr(kendo.attr(\"uid\"));\n                    dataItem = dataSource.getByUid(uid);\n\n                    if (dataItem) {\n                        dataItem = dataSource.remove(dataItem);\n                    }\n                }\n\n                return dataItem;\n            },\n\n            _insert: function(data, model, index) {\n                if (!(model instanceof kendo.data.ObservableArray)) {\n                    if (!isArray(model)) {\n                        model = [model];\n                    }\n                } else {\n                    // items will be converted to new Node instances\n                    model = model.toJSON();\n                }\n\n                var parentNode = data.parent();\n\n                if (parentNode && parentNode._initChildren) {\n                    parentNode.hasChildren = true;\n                    parentNode._initChildren();\n                }\n\n                data.splice.apply(data, [ index, 0 ].concat(model));\n\n                return this.findByUid(data[index].uid);\n            },\n\n            insertAfter: insertAction(1),\n\n            insertBefore: insertAction(0),\n\n            append: function(nodeData, parentNode, success) {\n                var group = this.root;\n\n                if (parentNode && nodeData instanceof jQuery && parentNode[0] === nodeData[0]) {\n                    return;\n                }\n\n                parentNode = parentNode && parentNode.length ? parentNode : null;\n\n                if (parentNode) {\n                    group = subGroup(parentNode);\n                }\n\n                return this._dataSourceMove(nodeData, group, parentNode, function(dataSource, model, loadModel) {\n                    var inserted;\n                    var that = this;\n\n                    function add() {\n                        if (parentNode) {\n                            that._expanded(parentNode, true, true);\n                        }\n\n                        var data = dataSource.data(),\n                            index = Math.max(data.length, 0);\n\n                        return that._insert(data, model, index);\n                    }\n\n                    loadModel.done(function() {\n                        inserted = add();\n                        success = success || $.noop;\n                        success(inserted);\n                    });\n\n                    return inserted || null;\n                });\n            },\n\n            _remove: function(node, keepData) {\n                var that = this,\n                    parentNode,\n                    prevSibling, nextSibling;\n\n                node = $(node, that.element);\n\n                if (node.attr(\"id\") === that.root.attr(ARIA_ACTIVEDESCENDANT)) {\n                    that.root.removeAttr(ARIA_ACTIVEDESCENDANT);\n                }\n\n                parentNode = node.parent().parent();\n                prevSibling = node.prev();\n                nextSibling = node.next();\n\n                node[keepData ? \"detach\" : \"remove\"]();\n\n                if (parentNode.hasClass(\"k-treeview-item\")) {\n                    updateNodeHtml(parentNode);\n                    that._updateNodeClasses(parentNode);\n                }\n\n                that._updateNodeClasses(prevSibling);\n                that._updateNodeClasses(nextSibling);\n\n                return node;\n            },\n\n            remove: function(node) {\n                var dataItem = this.dataItem(node);\n                if (dataItem) {\n                    this.dataSource.remove(dataItem);\n                }\n            },\n\n            detach: function(node) {\n                return this._remove(node, true);\n            },\n\n            findByText: function(text) {\n                return $(this.element).find(\".k-treeview-leaf\").filter(function(i, element) {\n                    return $(element).text() == text;\n                }).closest(NODE);\n            },\n\n            findByUid: function(uid) {\n                var items = this.element.find(\".k-treeview-item\");\n                var uidAttr = kendo.attr(\"uid\");\n                var result;\n\n                for (var i = 0; i < items.length; i++) {\n                    if (items[i].getAttribute(uidAttr) == uid) {\n                        result = items[i];\n                        break;\n                    }\n                }\n\n                return $(result);\n            },\n\n            expandPath: function(path, complete) {\n                var treeview = this;\n                var nodeIds = path.slice(0);\n                var callback = complete || $.noop;\n\n                function proceed() {\n                    nodeIds.shift();\n\n                    if (nodeIds.length) {\n                        expand(nodeIds[0]).then(proceed);\n                    } else {\n                        callback.call(treeview);\n                    }\n                }\n\n                function expand(id) {\n                    var result = $.Deferred();\n                    var node = treeview.dataSource.get(id);\n                    var expandedAttr = kendo.attr(\"expanded\");\n                    var nodeElement;\n\n                    if (node) {\n                        nodeElement = treeview.findByUid(node.uid);\n\n                        if (node.loaded()) {\n                            node.set(\"expanded\", true);\n                            nodeElement.attr(expandedAttr, true);\n                            nodeElement.attr(ARIA_EXPANDED, true);\n                            result.resolve();\n                        } else {\n                            // manually show progress of the node\n                            // should be moved to `refresh`\n                            // if the datasource starts triggering a `requestStart` event for nodes\n                            treeview._progress(nodeElement, true);\n\n                            node.load().then(function() {\n                                node.set(\"expanded\", true);\n                                nodeElement.attr(expandedAttr, true);\n                                nodeElement.attr(ARIA_EXPANDED, true);\n                                result.resolve();\n                            });\n                        }\n                    } else {\n                        result.resolve();\n                    }\n\n                    return result.promise();\n                }\n\n                // expand async nodes\n                expand(nodeIds[0]).then(proceed);\n            },\n\n            _parentIds: function(node) {\n                var parent = node && node.parentNode();\n                var parents = [];\n                while (parent && parent.parentNode) {\n                    parents.unshift(parent.id);\n                    parent = parent.parentNode();\n                }\n\n                return parents;\n            },\n\n            expandTo: function(node) {\n                if (!(node instanceof kendo.data.Node)) {\n                    node = this.dataSource.get(node);\n                }\n\n                var parents = this._parentIds(node);\n\n                this.expandPath(parents);\n            },\n\n            _renderItem: function(options) {\n                if (!options.group) {\n                    options.group = {};\n                }\n\n                options.treeview = this.options;\n\n                options.r = this.templates;\n\n                return this.templates.item(options);\n            },\n\n            _renderGroup: function(options) {\n                var that = this;\n\n                options.renderItems = function(options) {\n                        var html = \"\",\n                            i = 0,\n                            items = options.items,\n                            len = items ? items.length : 0,\n                            group = options.group;\n\n                        group.length = len;\n\n                        for (; i < len; i++) {\n                            options.group = group;\n                            options.item = items[i];\n                            options.item.index = i;\n                            html += that._renderItem(options);\n                        }\n\n                        return html;\n                    };\n\n                options.r = that.templates;\n\n                return that.templates.group(options);\n            }\n        });\n\n        kendo.cssProperties.registerPrefix(\"TreeView\", \"k-treeview-\");\n\n        ui.plugin(TreeView);\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}