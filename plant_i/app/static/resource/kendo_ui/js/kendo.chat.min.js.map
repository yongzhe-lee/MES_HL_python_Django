{"version":3,"sources":["raw-js/kendo.chat.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendochat","js","this","$","undefined$1","kendo","window","Widget","ui","extend","NS","keys","ChatMessageBox","init","element","options","fn","call","_wrapper","_attachEvents","_typing","events","messages","placeholder","toggleButton","sendButton","destroy","input","off","remove","empty","styles","inputId","guid","inputWrapper","addClass","appendTo","attr","separator","inputSuffix","toolbar","toggleable","buttons","length","html","renderButton","buttonToggle","toolbarId","icon","buttonToggleIcon","fillMode","size","buttonSend","buttonSendIcon","on","_keydown","bind","_input","_inputFocusout","_buttonClick","_toggleToolbar","start","val","_triggerTyping","e","keyCode","ENTER","preventDefault","_sendMessage","F10","trigger","value","args","text","ev","originalEvent","button","buttonFlat","iconButton","buttonIcon","hidden","chat","jQuery","DATA_K_BUTTON_NAME","SCROLL_LEFT_NAME","SCROLL_RIGHT_NAME","VISIBLE","TABINDEX","DEFAULT_ANIMATION","effects","duration","NO_ANIMATION","expand","show","collapse","hide","ChatToolBar","toolbarOptions","name","buttonsDefined","_createButtonList","scrollable","buttonsWidth","width","_initScrolling","_setupAnimation","toggle","_onClick","_onKeydown","buttonList","i","_createButton","append","first","removeAttr","btnOptions","attributes","buttonElm","title","type","tabindex","data","buttonDefaults","iconClass","prepend","renderIcon","target","closest","is","scrollButton","_scrolling","_scroll","key","LEFT","_focusButton","RIGHT","dir","current","not","candidate","index","removeAttribute","focus","scrollButtonLeft","scrollButtonLeftIcon","class","scrollButtonRight","scrollButtonRightIcon","_refreshScrollButtons","commandName","that","buttonWidth","maxScrollSize","scrollAmmount","scrollValue","currentScrollLeft","Math","min","max","scrollLeft","isNaN","parseInt","animation","defaultExpandAnimation","defaultCollapseAnimation","reverse","_animationComplete","_animationCompleteExpand","round","scrollWidth","clientWidth","children","last","outerWidth","skipAnimation","complete","kendoStop","kendoAnimate","encode","htmlEncode","DOT","AVATAR_TEMPLATE","url","IMG_TEMPLATE","MESSAGE_GROUP_TEMPLATE","messageGroup","noAvatar","author","SELF_MESSAGE_GROUP_TEMPLATE","TEXT_MESSAGE_TEMPLATE","timestamp","message","messageTime","toString","parseDate","bubble","TYPING_INDICATOR_TEMPLATE","messageListContent","typingIndicatorBubble","typingIndicator","CARD_ACTIONS_TEMPLATE","cardActions","cardActionsVertical","map","cardAction","buttonPrimary","CARD_ACTION_BUTTON_TEMPLATE","join","HERO_CARD_TEMPLATE","images","subtitle","card","cardRich","alt","cardMedia","HERO_IMG_TEMPLATE","cardBody","cardTitle","cardSubtitle","Templates","Components","registerTemplate","templateName","template","getTemplate","suggestedActions","action","suggestedAction","SUGGESTED_ACTION_TEMPLATE","registerComponent","componentName","component","getComponent","Component","Class","view","Calendar","kendoCalendar","change","viewStyles","wrapper","messageList","only","middle","avatar","scrollButtonIconLeft","scrollButtonIconRight","cardWrapper","cardDeckScrollWrap","cardDeck","cardList","cardActionsHorizontal","cardActionsStart","cardActionsCenter","cardActionsEnd","cardActionsStretched","selected","ChatView","_list","_lastSender","typingParticipants","_scrollable","isTyping","areTyping","and","_scrollDraggable","list","messageListLabel","_listClick","_messageClick","_suggestedActionClick","_cardActionClick","_suggestedActionKeydown","_scrollButtonClick","currentTarget","scrollToLeft","find","scrollContainer","siblings","cardWidth","renderMessage","sender","Date","bubbleElement","_renderTemplate","_renderBubble","_removeTypingParticipant","id","renderSuggestedActions","_removeSuggestedActions","_scrollToBottom","renderAttachments","_renderAttachmentWrapper","attachmentLayout","cardContainer","attachments","cardElement","contentType","content","_removeTypingIndicator","renderComponent","layout","buttonLeft","_renderScrollButton","buttonRight","directionClass","targetElement","hasClass","parents","_clearSelection","SPACEBAR","messageType","group","_getMessageGroup","_appendToGroup","componentType","templateOptions","_getMessageGroupTemplate","appendTarget","iconUrl","user","messageElement","childrenCount","filter","removeClass","_renderTypingIndicator","participants","indicator","_addTypingParticipant","_composeTypingParticipantsText","found","push","splice","typingAction","typingText","replace","trimRight","selectedClass","scrollTop","prop","chatStyles","canvas","viewWrapper","messageBoxWrapper","toolbarBoxWrapper","Chat","_events","_user","_view","_toolbar","_messageBox","notify","setOptions","_setEvents","messageBox","unbind","_resetToolbarButtons","getUser","height","uiElements","toolbarElement","css","postMessage","toggleToolbar","postArgs","from","renderUserTypingIndicator","clearUserTypingIndicator","removeTypingIndicator","plugin"],"mappings":"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","file":"kendo.chat.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.core.js'), require('kendo.html.button.js'), require('kendo.icons.js'), require('kendo.draganddrop.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.core', 'kendo.html.button', 'kendo.icons', 'kendo.draganddrop'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendochat = global.kendochat || {}, global.kendochat.js = factory()));\n})(this, (function () {\n    (function($, undefined$1) {\n\n        var kendo = window.kendo;\n        var Widget = kendo.ui.Widget;\n        var extend = $.extend;\n        var DOT = \".\";\n        var NS = \".kendoChat\";\n        var keys = kendo.keys;\n\n        var messageBoxStyles = {\n            input: \"k-input-inner\",\n            inputWrapper: \"k-textbox k-input k-input-md k-input-solid k-rounded-md\",\n            button: \"k-button\",\n            buttonFlat: \"k-button-lg k-button-flat k-button-flat-base\",\n            iconButton: \"k-icon-button\",\n            buttonIcon: \"k-button-icon\",\n            buttonSend: \"k-chat-send\",\n            buttonSendIcon: \"paper-plane\",\n            buttonToggle: \"k-button-toggle\",\n            buttonToggleIcon: \"more-horizontal\",\n            hidden: \"k-hidden\",\n            inputSuffix: \"k-input-suffix k-input-suffix-horizontal\",\n            separator: \"k-input-separator k-input-separator-vertical\"\n        };\n\n        var ChatMessageBox = Widget.extend({\n            init: function(element, options) {\n                Widget.fn.init.call(this, element, options);\n\n                this._wrapper();\n\n                this._attachEvents();\n\n                this._typing = false;\n            },\n\n            events: [\n                \"focusToolbar\",\n                \"sendMessage\",\n                \"toggleToolbar\",\n                \"typingEnd\",\n                \"typingStart\"\n            ],\n\n            options: {\n                messages: {\n                    placeholder: \"Type a message...\",\n                    toggleButton: \"Toggle toolbar\",\n                    sendButton: \"Send message\"\n                }\n            },\n\n            destroy: function() {\n                Widget.fn.destroy.call(this);\n\n                if (this.input) {\n                    this.input.off(NS);\n                    this.input.remove();\n                    this.input = null;\n                }\n\n                this.element.off(NS);\n                this.element.empty();\n            },\n\n            _wrapper: function() {\n                var styles = ChatMessageBox.styles;\n                var options = this.options;\n                var messages = options.messages;\n                var inputId = \"inputId_\" + kendo.guid();\n\n                this.inputWrapper = this.element\n                    .addClass(styles.inputWrapper)\n                    .appendTo(this.element);\n\n                this.input = $(\"<input type='text'>\")\n                    .addClass(styles.input)\n                    .attr(\"id\", inputId)\n                    .attr(\"aria-label\", messages.placeholder)\n                    .attr(\"placeholder\", messages.placeholder)\n                    .appendTo(this.inputWrapper);\n\n                this.separator = $(\"<span></span>\")\n                    .addClass(styles.separator)\n                    .appendTo(this.inputWrapper);\n\n                this.inputSuffix = $(\"<span></span>\")\n                    .addClass(styles.inputSuffix)\n                    .appendTo(this.inputWrapper);\n\n                if (options.toolbar && options.toolbar.toggleable && options.toolbar.buttons && options.toolbar.buttons.length) {\n                    $(kendo.html.renderButton(`<button class=\"${styles.buttonToggle}\" title=\"${messages.toggleButton}\" aria-label=\"${messages.toggleButton}\" aria-controls=\"${options.toolbarId}\"></button>`,\n                        {\n                            icon: styles.buttonToggleIcon,\n                            fillMode: \"flat\",\n                            size: \"medium\"\n                        }))\n                    .appendTo(this.inputSuffix);\n                }\n\n                $(kendo.html.renderButton(`<button class=\"${styles.buttonSend}\" title=\"${messages.sendButton}\" aria-label=\"${messages.sendButton}\"></button>`,\n                    {\n                        icon: styles.buttonSendIcon,\n                        fillMode: \"flat\",\n                        size: \"medium\"\n                    }))\n                .appendTo(this.inputSuffix);\n            },\n\n            _attachEvents: function() {\n                var styles = ChatMessageBox.styles;\n\n                this.input\n                    .on(\"keydown\" + NS, this._keydown.bind(this))\n                    .on(\"input\" + NS, this._input.bind(this))\n                    .on(\"focusout\" + NS, this._inputFocusout.bind(this));\n\n                this.element\n                    .on(\"click\" + NS, DOT + styles.buttonSend, this._buttonClick.bind(this));\n\n                this.element\n                    .on(\"click\" + NS, DOT + styles.buttonToggle, this._toggleToolbar.bind(this));\n            },\n\n            _input: function() {\n                var currentValue = this.input.val();\n                var start = currentValue.length > 0;\n\n                this._triggerTyping(start);\n            },\n\n            _keydown: function(e) {\n                var key = e.keyCode;\n\n                switch (key) {\n                    case keys.ENTER:\n                        e.preventDefault();\n\n                        this._sendMessage();\n                        break;\n                    case keys.F10:\n                        e.preventDefault();\n\n                        this.trigger(\"focusToolbar\");\n                        break;\n                }\n            },\n\n            _buttonClick: function(e) {\n                e.preventDefault();\n\n                this._sendMessage();\n            },\n\n            _sendMessage: function() {\n                var value = this.input.val();\n\n                if (!value.length) {\n                    return;\n                }\n\n                this._triggerTyping(false);\n\n                var args = {\n                    text: value\n                };\n\n                this.trigger(\"sendMessage\", args);\n\n                this.input.val(\"\");\n            },\n\n            _inputFocusout: function() {\n                this._triggerTyping(false);\n            },\n\n            _triggerTyping: function(start) {\n                if (start) {\n                    if (!this._typing) {\n                        this.trigger(\"typingStart\", {});\n                        this._typing = true;\n                    }\n                } else {\n                    if (this._typing) {\n                        this.trigger(\"typingEnd\", {});\n                        this._typing = false;\n                    }\n                }\n            },\n\n            _toggleToolbar: function(ev) {\n                this.trigger(\"toggleToolbar\", { originalEvent: ev });\n            }\n        });\n\n        extend(true, ChatMessageBox, { styles: messageBoxStyles });\n        extend(kendo, {\n            chat: {\n                ChatMessageBox: ChatMessageBox\n            }\n        });\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n\n        var kendo = window.kendo;\n        var Widget = kendo.ui.Widget;\n        var extend = $.extend;\n        var DOT = \".\";\n        var NS = \".kendoChat\";\n\n        var DATA_K_BUTTON_NAME = \"kButtonName\";\n        var SCROLL_LEFT_NAME = \"chatToolbarScrollLeft\";\n        var SCROLL_RIGHT_NAME = \"chatToolbarScrollRight\";\n        var VISIBLE = \":visible\";\n        var TABINDEX = \"tabindex\";\n\n        var DEFAULT_ANIMATION = {\n            effects: \"expand:vertical\",\n            duration: 200\n        };\n        var NO_ANIMATION = {\n            expand: {\n                show: true\n            },\n            collapse: {\n                hide: true\n            }\n        };\n\n        var toolbarStyles = {\n            button: \"k-button\",\n            buttonDefaults: \"k-button-md k-rounded-md k-button-solid k-button-solid-base\",\n            buttonList: \"k-button-list k-toolbar-group\",\n            scrollButton: \"k-scroll-button\",\n            scrollButtonLeft: \"k-scroll-button-left\",\n            scrollButtonRight: \"k-scroll-button-right\",\n            scrollButtonLeftIcon: \"chevron-left\",\n            scrollButtonRightIcon: \"chevron-right\",\n            iconButton: \"k-icon-button\"\n        };\n\n        var ChatToolBar = Widget.extend({\n            init: function(element, options) {\n                options = extend({}, options, { name: \"ChatToolbar\" });\n                var toolbarOptions = options.toolbar;\n                var buttonsDefined = toolbarOptions.buttons && toolbarOptions.buttons.length;\n\n                Widget.fn.init.call(this, element, options);\n\n                if (buttonsDefined) {\n                    this._createButtonList();\n                }\n\n                if (buttonsDefined && toolbarOptions.scrollable &&\n                        this.buttonsWidth() > this.element.width()) {\n                    this._initScrolling();\n                }\n\n                this._setupAnimation();\n\n                if (buttonsDefined && toolbarOptions.toggleable) {\n                    this.toggle(true);\n                }\n\n                this.element\n                    .on(\"click\" + NS, this._onClick.bind(this))\n                    .on(\"keydown\" + NS, this._onKeydown.bind(this));\n            },\n\n            events: [\n                \"click\"\n            ],\n\n            destroy: function() {\n                Widget.fn.destroy.call(this);\n\n                this.element.off(NS);\n                this.element.empty();\n            },\n\n            _createButtonList: function() {\n                var that = this;\n                var styles = ChatToolBar.styles;\n                var buttons = that.options.toolbar.buttons;\n                var buttonList = $(\"<div class='\" + styles.buttonList + \"'></div>\");\n\n                for (var i = 0; i < buttons.length; i++) {\n                    var button = that._createButton(buttons[i]);\n                    buttonList.append(button);\n                }\n\n                buttonList.appendTo(this.element);\n\n                this.buttonList = buttonList;\n                this.buttons().first().removeAttr(TABINDEX);\n            },\n\n            _createButton: function(btnOptions) {\n                var styles = ChatToolBar.styles;\n                var buttonElm = $(\"<button>\");\n                var attributes;\n\n                if (typeof btnOptions === \"string\") {\n                    btnOptions = {\n                        name: btnOptions\n                    };\n                }\n\n                attributes = $.extend({}, btnOptions.attr || {}, {\n                    title: btnOptions.text || btnOptions.name,\n                    \"aria-label\": btnOptions.text || btnOptions.name,\n                    type: \"button\",\n                    tabindex: -1\n                });\n\n                buttonElm\n                    .attr(attributes)\n                    .addClass(btnOptions.name)\n                    .data(DATA_K_BUTTON_NAME, btnOptions.name)\n                    .addClass(styles.button)\n                    .addClass(styles.buttonDefaults);\n\n                if (btnOptions.icon || btnOptions.iconClass) {\n                    buttonElm.addClass(styles.iconButton);\n                    buttonElm.prepend(kendo.html.renderIcon({ icon: btnOptions.icon, iconClass: \"k-button-icon\" + (btnOptions.iconClass ? ` ${btnOptions.iconClass}` : \"\") }));\n                }\n\n                return buttonElm;\n            },\n\n            _onClick: function(ev) {\n                var styles = ChatToolBar.styles;\n                var target = $(ev.target).closest(DOT + styles.button);\n\n                if (target.is(DOT + styles.scrollButton) && !this._scrolling) {\n                    this._scroll(target.data(DATA_K_BUTTON_NAME));\n                }\n\n                if (target.data(DATA_K_BUTTON_NAME)) {\n                    this.buttons().attr(TABINDEX, -1);\n                    target.removeAttr(TABINDEX);\n\n                    this.trigger(\"click\", {\n                        button: target[0],\n                        name: target.data(DATA_K_BUTTON_NAME),\n                        originalEvent: ev\n                    });\n                }\n            },\n\n            _onKeydown: function(e) {\n                var key = e.keyCode,\n                    keys = kendo.keys;\n\n                switch (key) {\n                    case keys.LEFT:\n                        this._focusButton(-1);\n                        break;\n                    case keys.RIGHT:\n                        this._focusButton(1);\n                        break;\n                }\n            },\n\n            _focusButton: function(dir) {\n                var buttons = this.buttons(),\n                    current = buttons.not(\"[tabindex=-1]\"),\n                    candidateIndex = current.index() + dir,\n                    candidate = buttons[candidateIndex];\n\n                if (candidate) {\n                    current.attr(TABINDEX, -1);\n                    candidate.removeAttribute(TABINDEX);\n                    candidate.focus();\n                }\n            },\n\n            _initScrolling: function() {\n                var styles = ChatToolBar.styles;\n\n                this.scrollButtonLeft = this._createButton({\n                    name: SCROLL_LEFT_NAME,\n                    icon: styles.scrollButtonLeftIcon,\n                    attr: {\n                        \"class\": styles.scrollButton + \" \" + styles.scrollButtonLeft\n                    }\n                });\n\n                this.scrollButtonRight = this._createButton({\n                    name: SCROLL_RIGHT_NAME,\n                    icon: styles.scrollButtonRightIcon,\n                    attr: {\n                        \"class\": styles.scrollButton + \" \" + styles.scrollButtonRight\n                    }\n                });\n\n                this.element.prepend(this.scrollButtonLeft);\n                this.element.append(this.scrollButtonRight);\n                this._refreshScrollButtons();\n\n                this.element.on(\"keydown\" + NS, this._refreshScrollButtons.bind(this));\n            },\n\n            _scroll: function(commandName) {\n                var that = this;\n                var buttonWidth = that.buttonWidth();\n                var maxScrollSize = this.maxScrollSize();\n                var scrollAmmount = commandName === SCROLL_LEFT_NAME ? buttonWidth * -1 : buttonWidth;\n                var currentScroll = this.currentScrollLeft();\n                var scrollValue = currentScroll + scrollAmmount;\n                scrollValue = Math.min(Math.max(scrollValue, 0), maxScrollSize);\n\n                if (commandName !== SCROLL_LEFT_NAME && commandName !== SCROLL_RIGHT_NAME) {\n                    return;\n                }\n\n                kendo.scrollLeft(that.buttonList, scrollValue);\n                that._refreshScrollButtons(scrollValue);\n            },\n\n            _refreshScrollButtons: function(value) {\n                var maxScrollSize = this.maxScrollSize();\n                var currentScrollLeft = value === undefined$1 || isNaN(parseInt(value, 10)) ? this.currentScrollLeft() : value;\n\n                if (!this.scrollButtonLeft && !this.scrollButtonRight) {\n                    return;\n                }\n\n                this.scrollButtonLeft.toggle(currentScrollLeft !== 0);\n                this.scrollButtonRight.toggle(currentScrollLeft !== maxScrollSize);\n            },\n\n            _setupAnimation: function() {\n                var animation = this.options.toolbar.animation;\n                var defaultExpandAnimation = extend({}, DEFAULT_ANIMATION);\n                var defaultCollapseAnimation = extend({\n                    reverse: true,\n                    hide: true\n                }, DEFAULT_ANIMATION);\n\n                if (animation === false) {\n                    animation = extend(true, {}, NO_ANIMATION);\n                } else {\n                    animation = extend(true, {\n                        expand: defaultExpandAnimation,\n                        collapse: defaultCollapseAnimation\n                    }, animation);\n                }\n\n                this.options.toolbar.animation = animation;\n            },\n\n            _animationComplete: function() {\n                this._refreshScrollButtons();\n            },\n\n            _animationCompleteExpand: function() {\n                this._animationComplete();\n                this.buttons().not(\"[tabindex=-1]\").trigger(\"focus\");\n            },\n\n            currentScrollLeft: function() {\n                return Math.round(kendo.scrollLeft(this.buttonList));\n            },\n\n            maxScrollSize: function() {\n                return Math.round(this.buttonList[0].scrollWidth - this.buttonList[0].clientWidth);\n            },\n\n            buttons: function() {\n                var styles = ChatToolBar.styles;\n                return this.buttonList ? this.buttonList.children(DOT + styles.button) : null;\n            },\n\n            buttonWidth: function() {\n                return Math.round(this.buttons().last().outerWidth(true));\n            },\n\n            buttonsWidth: function() {\n                var width = 0;\n\n                if (this.buttons()) {\n                    width = this.buttonWidth() * this.buttons().length;\n                }\n\n                return width;\n            },\n\n            toggle: function(skipAnimation) {\n                var animation = this.options.toolbar.animation;\n\n                if (skipAnimation) {\n                    animation = extend(true, {}, NO_ANIMATION);\n                }\n\n                animation.expand.complete = this._animationCompleteExpand.bind(this);\n                animation.collapse.complete = this._animationComplete.bind(this);\n\n                if (this.element.is(VISIBLE)) {\n                    this.element.kendoStop().kendoAnimate(animation.collapse);\n                } else {\n                    this.element.kendoStop().kendoAnimate(animation.expand);\n                }\n\n            },\n\n            focus: function() {\n                if (!this.element.is(VISIBLE)) {\n                    this.toggle();\n                } else {\n                    this.buttons().not(\"[tabindex=-1]\").trigger(\"focus\");\n                }\n            }\n        });\n\n        extend(true, ChatToolBar, { styles: toolbarStyles });\n        extend(kendo.chat, {\n            ChatToolBar: ChatToolBar\n        });\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n\n        var kendo = window.kendo;\n        var encode = kendo.htmlEncode;\n        var Widget = kendo.ui.Widget;\n        var extend = $.extend;\n        var DOT = \".\";\n        var SPACE = \" \";\n        var NS = \".kendoChat\";\n\n        var IMG_TEMPLATE = ({ url, text, styles }) => `<img src=\"${url}\" alt=\"${encode(text)}\">`;\n\n        var AVATAR_TEMPLATE = ({ url, text, styles }) => `<div class=\"k-avatar k-avatar-md k-avatar-solid k-avatar-solid-primary k-rounded-full\">` +\n                                    `<span class=\"k-avatar-image\">` +\n                                        IMG_TEMPLATE({ url, text, styles }) +\n                                    `</span>` +\n                                `</div>`;\n\n        var MESSAGE_GROUP_TEMPLATE = ({ text, url, styles }) => `<div ${encode(text)} class=\"${styles.messageGroup} ${ url ? \"\" : styles.noAvatar }\">\n            <p class=\"${styles.author}\">${encode(text)}</p>\n            ${ url ? AVATAR_TEMPLATE({ url, text, styles }) : '' }\n        </div>`;\n\n        var SELF_MESSAGE_GROUP_TEMPLATE = ({ url, text, styles }) => `<div me class=\"${styles.messageGroup} ${styles.self} ${ url ? \"\" : styles.noAvatar }\">\n        ${ url ? AVATAR_TEMPLATE({ url, text, styles }) : '' }\n    </div>`;\n\n        var TEXT_MESSAGE_TEMPLATE = ({ styles, text, timestamp }) => `<div class=\"${styles.message}\">\n        <time class=\"${styles.messageTime}\">${ kendo.toString(kendo.parseDate(timestamp), \"HH:mm:ss\") }</time>\n        <div class=\"${styles.bubble}\">${encode(text)}</div>\n    </div>`;\n\n        var TYPING_INDICATOR_TEMPLATE = ({ styles, text }) => `<div class=\"${styles.messageListContent} ${styles.typingIndicatorBubble}\">\n        <p class=\"${styles.author}\">${encode(text)}</p>\n        <div class=\"${styles.message}\">\n            <div class=\"${styles.bubble}\">\n                <div class=\"${styles.typingIndicator}\">\n                    <span></span><span></span><span></span>\n                </div>\n            </div>\n        </div>\n    </div>`;\n\n        var SUGGESTED_ACTION_TEMPLATE = ({ styles, action }) => `<span role=\"button\" tabindex=\"0\" class=\"${styles.suggestedAction}\" data-value=\"${encode(action.value)}\">${encode(action.title)}</span>`;\n\n        var SUGGESTED_ACTIONS_TEMPLATE = ({ styles, suggestedActions }) => `<div class=\"${styles.suggestedActions}\">\n        ${ suggestedActions.map(action => SUGGESTED_ACTION_TEMPLATE({ styles, action })).join('') }\n    </div>`;\n\n        var HERO_IMG_TEMPLATE = ({ images, styles }) => `<img src=\"${encode(images[0].url)}\" alt=\"${images[0].alt}\" class=\"${styles.cardMedia}\" />`;\n\n        var CARD_ACTION_BUTTON_TEMPLATE = ({ button, styles }) => `<span class=\"${styles.cardAction}\"><button class=\"${styles.button} ${styles.buttonPrimary}\" data-value=\"${encode(button.value)}\"><span class=\"k-button-text\">${encode(button.title)}</span></button></span>`;\n\n        var CARD_ACTIONS_TEMPLATE = ({ styles, buttons }) => `<div class=\"k-actions ${styles.cardActions} ${styles.cardActionsVertical}\">\n        ${ buttons.map((button) => CARD_ACTION_BUTTON_TEMPLATE({ styles, button })).join('') }\n    </div>`;\n\n        var HERO_CARD_TEMPLATE = ({ styles, images, buttons, title, subtitle, text }) => `<div class=\"${styles.card} ${styles.cardRich}\">\n        ${ (typeof images !== \"undefined\" && images.length > 0) ? HERO_IMG_TEMPLATE({ images, styles }) : '' }\n        <div class=\"${styles.cardBody}\">\n            ${ typeof title !== \"undefined\" ? (() => `<h5 class=\"${styles.cardTitle}\">${encode(title)}</h5>`)() : '' }\n            ${ typeof subtitle !== \"undefined\" ? (() => `<h6 class=\"${styles.cardSubtitle}\">${encode(subtitle)}</h6>`)() : '' }\n            ${ typeof text !== \"undefined\" ? (() => `<p>${encode(text)}</p>`)() : '' }\n        </div>\n        ${ (typeof buttons !== \"undefined\" && buttons.length > 0) ? CARD_ACTIONS_TEMPLATE({ buttons, styles }) : ''}\n    </div>`;\n\n        extend(kendo.chat, {\n            Templates: {},\n            Components: {}\n        });\n\n        kendo.chat.registerTemplate = function(templateName, template) {\n            kendo.chat.Templates[templateName] = kendo.template(template);\n        };\n\n        kendo.chat.getTemplate = function(templateName) {\n            return kendo.chat.Templates[templateName] || TEXT_MESSAGE_TEMPLATE;\n        };\n\n        kendo.chat.registerTemplate(\"text\", TEXT_MESSAGE_TEMPLATE);\n        kendo.chat.registerTemplate(\"message\", TEXT_MESSAGE_TEMPLATE);\n        kendo.chat.registerTemplate(\"typing\", TYPING_INDICATOR_TEMPLATE);\n        kendo.chat.registerTemplate(\"suggestedAction\", SUGGESTED_ACTIONS_TEMPLATE);\n        kendo.chat.registerTemplate(\"heroCard\", HERO_CARD_TEMPLATE);\n        kendo.chat.registerTemplate(\"application/vnd.microsoft.card.hero\", HERO_CARD_TEMPLATE);\n\n        kendo.chat.registerComponent = function(componentName, component) {\n            kendo.chat.Components[componentName] = component;\n        };\n\n        kendo.chat.getComponent = function(componentName) {\n            return kendo.chat.Components[componentName] || null;\n        };\n\n        var Component = kendo.chat.Component = kendo.Class.extend({\n            init: function(options, view) {\n                this.element = $('<div></div>');\n                this.options = options;\n                this.view = view;\n            },\n\n            destroy: function() {\n                kendo.destroy(this.element);\n            }\n        });\n\n        var Calendar = Component.extend({\n            init: function(options, view) {\n                Component.fn.init.call(this, options, view);\n\n                this.element.kendoCalendar({\n                    change: function() {\n                        view.trigger(\"suggestedAction\", { text: kendo.toString(this.value(), 'd'), type: \"message\" });\n                    }\n                });\n            },\n\n            destroy: function() {\n            }\n        });\n        kendo.chat.registerComponent(\"calendar\", Calendar);\n\n        var viewStyles = {\n            wrapper: \"k-chat\",\n            messageList: \"k-avatars\",\n            messageListContent: \"k-message-list-content\",\n            messageTime: \"k-message-time\",\n            messageGroup: \"k-message-group\",\n            message: \"k-message\",\n            only: \"k-only\",\n            first: \"k-first\",\n            middle: \"k-middle\",\n            last: \"k-last\",\n            author: \"k-author\",\n            avatar: \"k-avatar\",\n            noAvatar: \"k-no-avatar\",\n            self: \"k-alt\",\n            button: \"k-button\",\n            buttonDefaults: \"k-button-md k-rounded-md k-button-solid k-button-solid-base\",\n            iconButton: \"k-icon-button\",\n            buttonIcon: \"k-button-icon\",\n            buttonPrimary: \"k-button-md k-rounded-md k-button-flat k-button-flat-primary\",\n            scrollButtonIconLeft: \"chevron-left\",\n            scrollButtonIconRight: \"chevron-right\",\n            typingIndicator: \"k-typing-indicator\",\n            typingIndicatorBubble: \"k-typing-indicator-bubble\",\n            bubble: \"k-chat-bubble\",\n            suggestedActions: \"k-quick-replies\",\n            suggestedAction: \"k-quick-reply\",\n            cardWrapper: \"k-card-container\",\n            cardDeckScrollWrap: \"k-card-deck-scrollwrap\",\n            cardDeck: \"k-card-deck\",\n            cardList: \"k-card-list\",\n            card: \"k-card\",\n            cardRich: \"k-card-type-rich\",\n            cardBody: \"k-card-body\",\n            cardMedia: \"k-card-media\",\n            cardTitle: \"k-card-title\",\n            cardSubtitle: \"k-card-subtitle\",\n            cardActions: \"k-card-actions\",\n            cardActionsVertical: \"k-actions-vertical\",\n            cardActionsHorizontal: \"k-actions-horizontal\",\n            cardActionsStart: \"k-actions-start\",\n            cardActionsCenter: \"k-actions-center\",\n            cardActionsEnd: \"k-actions-end\",\n            cardActionsStretched: \"k-actions-stretched\",\n            cardAction: \"k-card-action\",\n            selected: \"k-selected\"\n        };\n\n        var ChatView = kendo.chat.ChatView = Widget.extend({\n            init: function(element, options) {\n                Widget.fn.init.call(this, element, options);\n\n                this._list();\n\n                this._lastSender = null;\n\n                this.typingParticipants = [];\n\n                this._attachEvents();\n\n                this._scrollable();\n            },\n\n            events: [\n            ],\n\n            options: {\n                messages: {\n                    isTyping: \" is typing.\",\n                    areTyping: \" are typing.\",\n                    and: \" and \"\n                }\n            },\n\n            destroy: function() {\n                Widget.fn.destroy.call(this);\n\n                if (this._scrollDraggable) {\n                    this._scrollDraggable.destroy();\n                }\n\n                this.element.empty();\n                this.element.off(NS);\n\n                this.list = null;\n                this._lastSender = null;\n            },\n\n            _list: function() {\n                var viewStyles = ChatView.styles;\n\n                this.element\n                    .addClass(viewStyles.messageList)\n                    .attr(\"role\", \"log\")\n                    .attr(\"aria-label\", this.options.messages.messageListLabel);\n\n                this.list = $(\"<div>\")\n                    .addClass(viewStyles.messageListContent)\n                    .appendTo(this.element);\n            },\n\n            _attachEvents: function() {\n                var styles = ChatView.styles;\n\n                this.element\n                    .on(\"click\" + NS, this._listClick.bind(this))\n                    .on(\"click\" + NS, DOT + styles.message, this._messageClick.bind(this))\n                    .on(\"click\" + NS, DOT + styles.suggestedAction, this._suggestedActionClick.bind(this))\n                    .on(\"click\" + NS, DOT + styles.cardAction + SPACE + DOT + styles.button, this._cardActionClick.bind(this));\n\n                this.element.on(\"keydown\" + NS, DOT + styles.suggestedAction, this._suggestedActionKeydown.bind(this));\n            },\n\n            _scrollable: function() {\n                var viewStyles = ChatView.styles;\n\n                this.element\n                    .on(\"click\" + NS, DOT + viewStyles.cardDeckScrollWrap + SPACE + DOT + viewStyles.button, this._scrollButtonClick.bind(this));\n            },\n\n            _scrollButtonClick: function(e) {\n                var viewStyles = ChatView.styles;\n                var button = $(e.currentTarget);\n                var scrollToLeft = button.find(`${DOT + viewStyles.buttonIcon}[class*=${viewStyles.scrollButtonIconLeft}]`).length !== 0;\n                var scrollContainer = button.siblings(DOT + viewStyles.cardDeck);\n                var lastCard = scrollContainer.find(DOT + viewStyles.card).last();\n                var cardWidth = lastCard.outerWidth(true);\n\n                if (scrollToLeft) {\n                    kendo.scrollLeft(scrollContainer, kendo.scrollLeft(scrollContainer) - cardWidth);\n                } else {\n                    kendo.scrollLeft(scrollContainer, kendo.scrollLeft(scrollContainer) + cardWidth);\n                }\n            },\n\n            getTemplate: function(templateName) {\n                return kendo.chat.getTemplate(templateName);\n            },\n\n            getComponent: function(type) {\n               return kendo.chat.getComponent(type);\n            },\n\n            renderMessage: function(message, sender) {\n                if (!message.timestamp) {\n                    message.timestamp = new Date();\n                }\n\n                if (!message.text) {\n                    message.text = \"\";\n                }\n\n                var bubbleElement = this._renderTemplate(message.type, message);\n\n                this._renderBubble(message.type, bubbleElement, sender);\n\n                if (message.type == \"typing\") {\n                    if (this.typingParticipants.length > 0) {\n                        this._removeTypingParticipant(sender);\n                    }\n                } else {\n                    this._lastSender = sender.id;\n                }\n            },\n\n            renderSuggestedActions: function(suggestedActions) {\n                this._removeSuggestedActions();\n\n                var element = this._renderTemplate(\"suggestedAction\", { suggestedActions: suggestedActions });\n\n                this.list.append(element);\n\n                this._scrollToBottom();\n            },\n\n            renderAttachments: function(options) {\n                var wrapper = this._renderAttachmentWrapper(options.attachmentLayout);\n                var cardContainer = options.attachmentLayout === \"carousel\" ? wrapper.find(DOT + ChatView.styles.cardDeck) : wrapper;\n                var attachments = options.attachments;\n\n                if (!attachments.length) {\n                    return;\n                }\n\n                for (var i = 0; i < attachments.length; i++) {\n                    var cardElement = this._renderTemplate(attachments[i].contentType, attachments[i].content);\n\n                    cardContainer.append(cardElement);\n                }\n\n                this._removeSuggestedActions();\n                this._removeTypingIndicator();\n\n                this.list.append(wrapper);\n\n                this._lastSender = null;\n            },\n\n            renderComponent: function(type) {\n                var componentType = this.getComponent(type);\n                var component = new componentType({}, this);\n\n                this.list.append(component.element);\n\n                this._scrollToBottom();\n            },\n\n            _renderAttachmentWrapper: function(layout) {\n                var viewStyles = ChatView.styles;\n                var wrapper = $(\"<div>\");\n\n                if (layout === \"carousel\") {\n                    wrapper.addClass(viewStyles.cardDeckScrollWrap);\n\n                    var buttonLeft = this._renderScrollButton(viewStyles.scrollButtonIconLeft);\n                    wrapper.append(buttonLeft);\n\n                    wrapper.append($(\"<div>\").addClass(viewStyles.cardDeck));\n\n                    var buttonRight = this._renderScrollButton(viewStyles.scrollButtonIconRight);\n                    wrapper.append(buttonRight);\n                } else {\n                    wrapper.addClass(viewStyles.cardList);\n                }\n\n                return wrapper;\n            },\n\n            _renderScrollButton: function(directionClass) {\n                var viewStyles = ChatView.styles;\n\n                return $(\"<button>\")\n                    .addClass(viewStyles.button)\n                    .addClass(viewStyles.buttonDefaults)\n                    .addClass(viewStyles.iconButton)\n                    .append(kendo.html.renderIcon({ icon: directionClass, iconClass: viewStyles.buttonIcon }));\n            },\n\n            _removeSuggestedActions: function() {\n                this.list.find(DOT + ChatView.styles.suggestedActions).remove();\n            },\n\n            _listClick: function(e) {\n                var styles = ChatView.styles;\n                var targetElement = $(e.target);\n\n                if (targetElement.hasClass(styles.message) || targetElement.parents(DOT + styles.message).length) {\n                    return;\n                }\n\n                this._clearSelection();\n            },\n\n            _messageClick: function(e) {\n                this._clearSelection();\n\n                $(e.currentTarget).addClass(ChatView.styles.selected);\n            },\n\n            _suggestedActionClick: function(e) {\n                var text = $(e.target).data(\"value\") || \"\";\n\n                this.trigger(\"actionClick\", { text: text });\n\n                this._removeSuggestedActions();\n            },\n\n            _suggestedActionKeydown: function(e) {\n                if (e.keyCode === kendo.keys.SPACEBAR || e.keyCode === kendo.keys.ENTER) {\n                    this._suggestedActionClick(e);\n                }\n            },\n\n            _cardActionClick: function(e) {\n                var text = $(e.target).data(\"value\") || \"\";\n\n                this.trigger(\"actionClick\", { text: text });\n            },\n\n            _renderBubble: function(messageType, bubbleElement, sender) {\n                this._removeSuggestedActions();\n                this._removeTypingIndicator();\n\n                var group = this._getMessageGroup(sender, messageType);\n\n                this._appendToGroup(group, bubbleElement, messageType);\n\n                this._scrollToBottom();\n            },\n\n            _renderTemplate: function(type, options) {\n                var componentType = this.getComponent(type);\n                var element;\n\n                if (componentType) {\n                    var component = new componentType(options, this);\n\n                    element = component.element;\n                } else {\n                    var template = this.getTemplate(type);\n                    var templateOptions = extend(true, {}, options, { styles: ChatView.styles });\n\n                    element = $(template(templateOptions));\n                }\n\n                return element;\n            },\n\n            _getMessageGroup: function(sender, messageType) {\n                var viewStyles = ChatView.styles;\n                var template = this._getMessageGroupTemplate(sender, messageType);\n                var appendTarget = messageType == \"typing\" ? this.element : this.list;\n                var group;\n\n                if (sender.id === this._lastSender && this._lastSender !== null && messageType !== \"typing\") {\n                    group = this.list.find(DOT + viewStyles.messageGroup).last();\n\n                    if (group.length) {\n                        return group;\n                    }\n                }\n\n                return $(template({ text: sender.name, url: sender.iconUrl, styles: viewStyles })).appendTo(appendTarget);\n            },\n\n            _getMessageGroupTemplate: function(sender, messageType) {\n                var isOwnMessage = sender.id === this.options.user.id;\n                var template = isOwnMessage ?\n                    SELF_MESSAGE_GROUP_TEMPLATE :\n                    MESSAGE_GROUP_TEMPLATE;\n\n                if (messageType == \"typing\") {\n                    template = TYPING_INDICATOR_TEMPLATE;\n                }\n\n                return template;\n            },\n\n            _appendToGroup: function(group, messageElement, messageType) {\n                var viewStyles = ChatView.styles;\n                var children = group.find(DOT + viewStyles.message);\n                var childrenCount = children.length;\n                var indicator = this.element.find(DOT + viewStyles.typingIndicator);\n\n                if (indicator.length && messageType == \"typing\") {\n                    return;\n                }\n\n                messageElement.addClass(childrenCount === 0 ? viewStyles.only : viewStyles.last);\n\n                children.filter(DOT + viewStyles.only)\n                    .removeClass(viewStyles.only)\n                    .addClass(viewStyles.first);\n\n                children.filter(DOT + viewStyles.last)\n                    .removeClass(viewStyles.last)\n                    .addClass(viewStyles.middle);\n\n                group.append(messageElement);\n            },\n\n            _renderTypingIndicator: function(sender) {\n                var indicator = this.element.find(DOT + viewStyles.typingIndicatorBubble),\n                    indicatorList,\n                    participants;\n\n                this._addTypingParticipant(sender);\n\n                if (indicator.length) {\n                    participants = this._composeTypingParticipantsText(this.typingParticipants);\n\n                    indicatorList = indicator.find(DOT + viewStyles.author).first();\n                    indicatorList.text(participants);\n\n                } else {\n                    $(TYPING_INDICATOR_TEMPLATE({\n                        text: sender.name + this.options.messages.isTyping,\n                        styles: viewStyles\n                    })).appendTo(this.element);\n                }\n\n                this._scrollToBottom();\n            },\n\n            _addTypingParticipant: function(sender) {\n                var found = false;\n                for (var i = 0; i < this.typingParticipants.length; i += 1) {\n                    if (this.typingParticipants[i].id == sender.id) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    this.typingParticipants.push(sender);\n                }\n            },\n\n            _removeTypingParticipant: function(sender) {\n                var indicator = this.element.find(DOT + viewStyles.typingIndicatorBubble),\n                    indicatorList,\n                    participants;\n\n                if (indicator.length) {\n                    for (var i = 0; i < this.typingParticipants.length; i += 1) {\n                        if (this.typingParticipants[i].id == sender.id) {\n                            this.typingParticipants.splice(i, 1);\n                        }\n                    }\n\n                    participants = this._composeTypingParticipantsText(this.typingParticipants);\n\n                    if (participants === \"\") {\n                        indicator.remove();\n                    } else {\n                        indicatorList = indicator.find(DOT + viewStyles.author).first();\n                        indicatorList.text(participants);\n                    }\n                }\n            },\n\n            _composeTypingParticipantsText: function(participants) {\n                var messages = this.options.messages,\n                    typingAction = participants.length == 1 ? messages.isTyping : messages.areTyping,\n                    typingText = \"\";\n\n                if (participants.length === 0) {\n                    return typingText;\n                }\n\n                typingText = this.typingParticipants.map(function(author) {\n                    return author.name;\n                }).join(', ').replace(/,(?!.*,)/gmi, messages.and.trimRight()) + typingAction;\n\n                return typingText;\n            },\n\n            _removeTypingIndicator: function() {\n                var indicator = this.element.find(DOT + viewStyles.typingIndicatorBubble);\n\n                if (indicator.length) {\n                    this.typingParticipants = [];\n                    indicator.remove();\n                }\n            },\n\n            _clearSelection: function() {\n                var selectedClass = ChatView.styles.selected;\n\n                this.element.find(DOT + selectedClass).removeClass(selectedClass);\n            },\n\n            _scrollToBottom: function() {\n                this.element.scrollTop(this.element.prop(\"scrollHeight\"));\n            }\n        });\n\n        extend(true, ChatView, { styles: viewStyles });\n\n    })(window.kendo.jQuery);\n\n    var __meta__ = {\n        id: \"chat\",\n        name: \"Chat\",\n        category: \"web\",\n        description: \"The Chat component.\",\n        depends: [ \"core\", \"draganddrop\", \"html.button\" ]\n    };\n\n    (function($, undefined$1) {\n\n        var kendo = window.kendo;\n        var Widget = kendo.ui.Widget;\n        var extend = $.extend;\n        var DOT = \".\";\n\n        var chatStyles = {\n            wrapper: \"k-chat\",\n            canvas: \"k-chat-canvas\",\n            viewWrapper: \"k-message-list\",\n            messageBoxWrapper: \"k-message-box\",\n            toolbarBoxWrapper: \"k-toolbar-box\"\n        };\n\n        var Chat = Widget.extend({\n            init: function(element, options, events) {\n                Widget.fn.init.call(this, element, options);\n\n                if (events) {\n                    this._events = events;\n                }\n\n                this._user();\n\n                this._wrapper();\n\n                this._view();\n\n                if (options && options.toolbar && options.toolbar.buttons) {\n                    this._toolbar();\n                }\n\n                this._messageBox();\n\n                kendo.notify(this);\n            },\n\n            events: [\n                \"typingStart\",\n                \"typingEnd\",\n                \"post\",\n                \"sendMessage\",\n                \"actionClick\",\n                \"toolClick\"\n            ],\n\n            options: {\n                user: {\n                    name: \"User\",\n                    iconUrl: \"\"\n                },\n                name: \"Chat\",\n                messages: {\n                    messageListLabel: \"Message list\",\n                    placeholder: \"Type a message...\",\n                    toggleButton: \"Toggle toolbar\",\n                    sendButton: \"Send message\"\n                },\n                toolbar: false\n            },\n\n            setOptions: function(options) {\n                this._setEvents(options);\n                $.extend(true, this.options, options);\n\n                if (this.toolbar && \"toolbar\" in options) {\n                    this.toolbar.destroy();\n                    this.toolbar = null;\n                }\n\n                if (this.messageBox) {\n                    this.messageBox.unbind();\n                    this.messageBox.destroy();\n                    this.messageBox = null;\n                }\n\n                this._messageBox();\n\n                if (\"toolbar\" in options) {\n                    this._resetToolbarButtons(options);\n                    this._toolbar();\n                }\n            },\n\n            _resetToolbarButtons: function(options) {\n                var toolbarBoxWrapper = this.wrapper.find(DOT + chatStyles.toolbarBoxWrapper);\n\n                if (!toolbarBoxWrapper.is(\":visible\")) {\n                    toolbarBoxWrapper.show();\n                }\n\n                if (options.toolbar && typeof options.toolbar == \"object\" && \"buttons\" in options.toolbar) {\n                    this.options.toolbar.buttons = options.toolbar.buttons;\n                }\n            },\n\n            destroy: function() {\n                if (this.view) {\n                    this.view.unbind();\n                    this.view.destroy();\n                    this.view = null;\n                }\n\n                if (this.messageBox) {\n                    this.messageBox.unbind();\n                    this.messageBox.destroy();\n                    this.messageBox = null;\n                }\n\n                if (this.toolbar) {\n                    this.toolbar.destroy();\n                    this.toolbar = null;\n                }\n\n                Widget.fn.destroy.call(this);\n            },\n\n            _user: function() {\n                this.options.user.id = kendo.guid();\n            },\n\n            getUser: function() {\n                return extend(true, {}, this.options.user);\n            },\n\n            _wrapper: function() {\n                var chatStyles = Chat.styles;\n                var options = this.options;\n                var height = options.height;\n                var width = options.width;\n                var uiElements = \"<div class='\" + chatStyles.viewWrapper + \"'></div>\" +\n                                 \"<span class='\" + chatStyles.messageBoxWrapper + \"'></span>\";\n                var toolbarElement = $(`<div class=\"${chatStyles.toolbarBoxWrapper}\" role=\"toolbar\"></div>`).hide();\n\n                this.wrapper = this.element\n                    .addClass(chatStyles.wrapper)\n                    .append(uiElements)\n                    .append(toolbarElement);\n\n                if (options.toolbar && options.toolbar.buttons && options.toolbar.buttons.length) {\n                    this.wrapper.find(DOT + chatStyles.toolbarBoxWrapper).show();\n                }\n\n                if (height) {\n                    this.wrapper.height(height);\n                }\n\n                if (width) {\n                    this.wrapper.css(\"max-width\", width);\n                }\n            },\n\n            _view: function() {\n                var that = this;\n                var chatStyles = Chat.styles;\n                var options = extend(true, {}, this.options);\n\n                var element = this.wrapper.find(DOT + chatStyles.viewWrapper + \"\");\n\n                this.view = new kendo.chat.ChatView(element, options);\n\n                this.view\n                    .bind(\"actionClick\", function(args) {\n                        that.trigger(\"actionClick\", args);\n\n                        that.postMessage(args.text);\n                    });\n            },\n\n            _messageBox: function() {\n                var that = this;\n                var chatStyles = Chat.styles;\n                var options = extend(true, {}, this.options);\n                var element = this.wrapper.find(DOT + chatStyles.messageBoxWrapper + \"\");\n\n                this.messageBox = new kendo.chat.ChatMessageBox(element, options);\n\n                this.messageBox\n                    .bind(\"typingStart\", function(args) {\n                        that.trigger(\"typingStart\", args);\n                    })\n                    .bind(\"typingEnd\", function(args) {\n                        that.trigger(\"typingEnd\", args);\n                    })\n                    .bind(\"sendMessage\", function(args) {\n                        that.trigger(\"sendMessage\", args);\n\n                        that.postMessage(args.text);\n                    })\n                    .bind(\"toggleToolbar\", function() {\n                        that.toggleToolbar();\n                    })\n                    .bind(\"focusToolbar\", function() {\n                        if (that.toolbar) {\n                            that.toolbar.focus();\n                        }\n                    });\n            },\n\n            _toolbar: function() {\n                var that = this;\n                var chatStyles = Chat.styles;\n                var options = extend(true, {}, that.options);\n                var element = that.wrapper.find(DOT + chatStyles.toolbarBoxWrapper + \"\");\n\n                that.options.toolbarId = kendo.guid();\n                element.attr(\"id\", that.options.toolbarId);\n\n                if (options.toolbar.scrollable === undefined$1) {\n                    this.options.toolbar.scrollable = options.toolbar.scrollable = true;\n                }\n\n                if (options.toolbar.toggleable === undefined$1) {\n                    this.options.toolbar.toggleable = options.toolbar.toggleable = false;\n                }\n\n                that.toolbar = new kendo.chat.ChatToolBar(element, options);\n\n                that.toolbar.bind(\"click\", function(ev) {\n                    that.trigger(\"toolClick\", {\n                        sender: that,\n                        name: ev.name,\n                        button: ev.button,\n                        messageBox: that.messageBox.input[0],\n                        originalEvent: ev.originalEvent\n                    });\n                });\n            },\n\n            postMessage: function(message) {\n                var postArgs = extend(true, {}, { text: message, type: \"message\", timestamp: new Date(), from: this.getUser() });\n\n                this.trigger(\"post\", postArgs);\n\n                this.renderMessage(postArgs, postArgs.from);\n            },\n\n            // TEST calling View renderMessage\n            renderMessage: function(message, sender) {\n                this.view.renderMessage(message, sender);\n            },\n\n            // TEST calling View renderSuggestedActions\n            renderSuggestedActions: function(suggestedActions) {\n                this.view.renderSuggestedActions(suggestedActions);\n            },\n\n            // TEST calling View renderCard\n            renderAttachments: function(options, sender) {\n                this.view.renderAttachments(options, sender);\n            },\n\n            toggleToolbar: function(skipAnimation) {\n                this.toolbar.toggle(skipAnimation);\n            },\n\n            renderUserTypingIndicator: function(sender) {\n                this.view._renderTypingIndicator(sender);\n            },\n\n            clearUserTypingIndicator: function(sender) {\n                this.view._removeTypingParticipant(sender);\n            },\n\n            removeTypingIndicator: function() {\n                this.view._removeTypingIndicator();\n            }\n        });\n\n        kendo.ui.plugin(Chat);\n\n        extend(true, Chat, { styles: chatStyles });\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}