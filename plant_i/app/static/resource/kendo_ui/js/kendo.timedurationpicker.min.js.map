{"version":3,"sources":["raw-js/kendo.timedurationpicker.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendotimedurationpicker","js","this","$","undefined$1","kendo","window","ui","Widget","html","map","extend","mediaQuery","OPEN","CLOSE","CHANGE","FOCUSED","ARIA_EXPANDED","HOVEREVENTS","NS","STATEDISABLED","ARIA_HIDDEN","ARIA_DISABLED","ARIA_READONLY","DISABLED","READONLY","STATEINVALID","MASKCHAR","caret","keys","defaultColumns","hours","name","format","divider","min","max","step","minutes","seconds","milliseconds","days","TimeDurationPicker","init","element","options","columns","that","fn","call","_columns","column","extended","selectorFormat","repeat","match","length","readonly","Boolean","attr","enable","is","parents","bigScreenMQL","adaptiveMode","onChange","_timeSelector","destroy","_popupView","_wrapper","_button","_applyCssClasses","_input","_buildMask","_validation","_editable","disable","_ariaLabel","_listsContainer","value","_old","_maskedInput","val","_canUpdateLast","notify","separator","shortcuts","size","fillMode","rounded","messages","set","cancel","events","wrapper","off","_value","parseInt","_updateValueFromTimeSelector","_toggleHover","e","currentTarget","toggleClass","type","add","addClass","removeClass","on","removeAttr","_attachHandlers","TimeSelector","id","anchor","mediaQueryList","matches","focus","trigger","_selectNearestSection","_lastCaret","close","preventDefault","open","change","_removeInvalidState","button","next","renderButton","icon","shape","insertAfter","role","part","toAdd","currentPartLength","_emtpyMask","_maskParts","i","replace","end","mask","symbolsLength","start","indexOf","numberEnd","lastIndexOf","numberStart","push","autocomplete","insertBefore","hide","wrap","parent","_keydown","bind","_inputHandler","_focus","_focusout","_paste","_mouseDown","_mouseUp","_click","_mouseOnInput","selection","_triggerChange","_lastValue","_updateValueFromInput","setTimeout","index","_getPartValue","startSeparator","lastSeparator","substring","_getEmptyPart","_fillParts","clipNumber","symbols","parts","split","join","_clearParts","endBoundary","_updatePart","oldValue","entered","emrtyPart","current","search","_replacePart","newPart","toggle","_switchPart","future","past","key","keyCode","_backward","BACKSPACE","LEFT","RIGHT","popup","visible","_scrollerKeyDownHandler","UP","DOWN","altKey","ENTER","partValue","masksToAdd","valueParts","rest","Math","floor","getTimeParts","_validationIcon","iconClass","_addInvalidState","colValue","values","valid","emptyPart","_isPasted","_pasted","clipboardData","originalEvent","getData","_replaceEntire","_activeElement","validEntry","updatedPart","endSubstring","startSubstring","deletedPart","canUpdate","restored","oldpartValue","nextSeparator","old","lengthDiff","test","cssProperties","registerPrefix","registerValues","prop","roundedValues","concat","plugin","jQuery"],"mappings":"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","file":"kendo.timedurationpicker.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.timeselector.js'), require('kendo.icons.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.timeselector', 'kendo.icons'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendotimedurationpicker = global.kendotimedurationpicker || {}, global.kendotimedurationpicker.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n        id: \"timedurationpicker\",\n        name: \"TimeDurationPicker\",\n        category: \"web\",\n        description: \"The TimeDurationPicker widget allows the end user to select a time range stored in milliseconds.\",\n        docsCategory: \"editors\",\n        depends: [ \"timeselector\" ]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            Widget = ui.Widget,\n            html = kendo.html,\n            map = $.map,\n            extend = $.extend,\n            mediaQuery = kendo.mediaQuery,\n            OPEN = \"open\",\n            FOCUS = \"focus\",\n            CLOSE = \"close\",\n            CHANGE = \"change\",\n            CLICK = \"click\",\n            SPAN = \"<span></span>\",\n            KEYDOWN = \"keydown\",\n            FOCUSOUT = \"focusout\",\n            FOCUSED = \"k-focus\",\n            MOUSEUP = \"mouseup\",\n            MOUSEDOWN = \"mousedown\",\n            PASTE = \"paste\",\n            NS = \".kendoTimeDurationPicker\",\n            ARIA_EXPANDED = \"aria-expanded\",\n            HOVEREVENTS = \"mouseenter\" + NS + \" mouseleave\" + NS,\n            STRING = \"string\",\n            INPUT = \"input\",\n            HOVER = \"k-hover\",\n            STATEDISABLED = \"k-disabled\",\n            ARIA_HIDDEN = \"aria-hidden\",\n            ARIA_DISABLED = \"aria-disabled\",\n            ARIA_READONLY = \"aria-readonly\",\n            ARIA_READONLY = \"aria-readonly\",\n            DISABLED = \"disabled\",\n            READONLY = \"readonly\",\n            STATEINVALID = \"k-invalid\",\n            MASKCHAR = \"_\",\n            caret = kendo.caret,\n            keys = kendo.keys,\n            NS = \".kendoTimeDurationPicker\";\n            html = kendo.html;\n\n        var defaultColumns = {\n            \"hours\": {\n                name: \"hours\",\n                format: \"## hours\",\n                divider: 3600000,\n                min: 0,\n                max: 23,\n                step: 1\n            },\n            \"minutes\": {\n                name: \"minutes\",\n                format: \"## mins\",\n                divider: 60000,\n                min: 0,\n                max: 59,\n                step: 1\n            },\n            \"seconds\": {\n                name: \"seconds\",\n                format: \"## sec\",\n                divider: 1000,\n                min: 0,\n                max: 59,\n                step: 1\n            },\n            \"milliseconds\": {\n                name: \"milliseconds\",\n                format: \"### msec\",\n                min: 0,\n                max: 999,\n                step: 1\n            },\n            \"days\": {\n                format: \"### days\",\n                name: \"days\",\n                divider: 86400000,\n                min: 0,\n                max: 365,\n                step: 1\n            }\n        };\n\n        function convertToMsec(value) {\n            return ((value.days || 0) * 86400000) + ((value.hours || 0) * 3600000) + ((value.minutes || 0) * 60000) + ((value.seconds || 0) * 1000) + (value.milliseconds || 0);\n        }\n\n        function getTimeParts(value) {\n            var rest;\n            var days = Math.floor(value / 86400000);\n            rest = value % 86400000;\n            var hours = Math.floor(rest / 3600000);\n            rest = value % 3600000;\n            var minutes = Math.floor(rest / 60000);\n            rest = value % 60000;\n            var seconds = Math.floor(rest / 1000);\n            rest = value % 1000;\n\n            return {\n                days: days,\n                hours: hours,\n                minutes: minutes,\n                seconds: seconds,\n                milliseconds: rest\n            };\n        }\n\n        function normalizeColumns(columns) {\n            return map(columns, function(column) {\n                column = typeof column === STRING ? { name: column } : column;\n                var extended = extend(true, {}, defaultColumns[column.name], column);\n                extended.selectorFormat = \"{0:\" + \"0\".repeat(extended.format.match(/#/g).length) + \"}\";\n                return extended;\n            });\n        }\n\n        var TimeDurationPicker = Widget.extend({\n            init: function(element, options) {\n                var that = this;\n\n                options = options || {};\n\n                Widget.fn.init.call(that, element, options);\n\n                that._columns = normalizeColumns(options.columns);\n                that.options.columns = that._columns;\n                that.options.readonly = options.readonly !== undefined$1 ? options.readonly : Boolean(that.element.attr(\"readonly\"));\n                that.options.enable = options.enable !== undefined$1 ? options.enable : !(Boolean(that.element.is(\"[disabled]\") || $(element).parents(\"fieldset\").is(':disabled')));\n\n                that.bigScreenMQL = mediaQuery(\"large\");\n                if (that.options.adaptiveMode == \"auto\") {\n                    that.bigScreenMQL.onChange(()=> {\n                        if (that._timeSelector) {\n                            that._timeSelector.destroy();\n                            that._timeSelector = null;\n                        }\n\n                        that._popupView();\n                    });\n                }\n\n                that._wrapper();\n                that._button();\n                that._applyCssClasses();\n                that._input();\n                that._popupView();\n\n                that._buildMask();\n                that._validation();\n                that._editable({\n                    readonly: that.options.readonly,\n                    disable: !that.options.enable\n                });\n                that._ariaLabel(that._timeSelector._listsContainer);\n                if (that.options.value) {\n                    that.value(options.value);\n                    that._old = that._maskedInput.val();\n                }\n                that._canUpdateLast = true;\n\n                kendo.notify(that);\n            },\n\n            options: {\n                name: \"TimeDurationPicker\",\n                columns: [],\n                separator: \",\",\n                shortcuts: [],\n                value: null,\n                adaptiveMode: \"none\",\n                size: \"medium\",\n                fillMode: \"solid\",\n                rounded: \"medium\",\n                messages: {\n                    set: \"Set\",\n                    cancel: \"Cancel\",\n                    days: \"Days\",\n                    hours: \"Hours\",\n                    minutes: \"Minutes\",\n                    milliseconds: \"Milliseconds\",\n                    seconds: \"Seconds\"\n                }\n            },\n\n            events: [\n                OPEN,\n                CLOSE,\n                CHANGE\n            ],\n\n            destroy: function() {\n                var that = this;\n\n                that.wrapper.off(NS);\n                that._maskedInput.off(NS);\n                if (that._timeSelector) {\n                    that._timeSelector.destroy();\n                    that._timeSelector = null;\n                }\n\n\n                if (that.bigScreenMQL) {\n                    that.bigScreenMQL.destroy();\n                }\n            },\n\n            value: function(value) {\n                var that = this;\n\n                if (value === undefined$1) {\n                    return that._value;\n                }\n\n                if (typeof value === \"number\") {\n                    value = parseInt(value);\n                } else {\n                    value = null;\n                }\n\n                that._value = value;\n                that.element.val(that._value);\n                that._timeSelector._value = that._value;\n                that._updateValueFromTimeSelector();\n            },\n\n            _toggleHover: function(e) {\n                $(e.currentTarget).toggleClass(HOVER, e.type === \"mouseenter\");\n            },\n\n            _editable: function(options) {\n                var that = this,\n                    disable = options.disable,\n                    readonly = options.readonly,\n                    element = that._maskedInput.add(that.element).off(NS),\n                    wrapper = that.wrapper.off(NS);\n\n                if (!readonly && !disable) {\n                    wrapper\n                        .removeClass(STATEDISABLED)\n                        .on(HOVEREVENTS, that._toggleHover);\n\n                    if (element && element.length) {\n                        element.removeAttr(DISABLED);\n                        element.removeAttr(READONLY);\n                    }\n                    element.attr(ARIA_DISABLED, false)\n                           .attr(ARIA_READONLY, false);\n\n                    that._attachHandlers();\n                } else {\n                    wrapper\n                        .addClass(disable ? STATEDISABLED : \"\")\n                        .removeClass(disable ? \"\" : STATEDISABLED);\n\n                    element.attr(DISABLED, disable)\n                           .attr(READONLY, readonly)\n                           .attr(ARIA_DISABLED, disable)\n                           .attr(ARIA_READONLY, readonly);\n                }\n            },\n\n            readonly: function(readonly) {\n                this._editable({\n                    readonly: readonly === undefined$1 ? true : readonly,\n                    disable: false\n                });\n            },\n\n            enable: function(enable) {\n                this._editable({\n                    readonly: false,\n                    disable: !(enable = enable === undefined$1 ? true : enable)\n                });\n            },\n\n            _popupView: function() {\n                var that = this;\n                var options = that.options;\n\n                if (!that._timeSelector) {\n                    that._timeSelector = new kendo.ui.TimeSelector(that._maskedInput, {\n                        id: that.element.attr(\"id\") + \"_timeSelector\",\n                        anchor: that.wrapper,\n                        adaptiveMode: options.adaptiveMode,\n                        columns: options.columns,\n                        shortcuts: options.shortcuts,\n                        value: options.value,\n                        size: options.adaptiveMode != \"auto\" || that.bigScreenMQL.mediaQueryList.matches ? options.size : \"large\",\n                        fillMode: options.fillMode,\n                        rounded: options.rounded,\n                        messages: options.messages,\n                        focus: function() {\n                            that._maskedInput.trigger(\"focus\");\n                            that._selectNearestSection(that._lastCaret || 0);\n                        },\n                        close: function(e) {\n                            if (that.trigger(CLOSE)) {\n                                e.preventDefault();\n                            } else {\n                                that._maskedInput.attr(ARIA_EXPANDED, false);\n                                that._timeSelector._listsContainer.attr(ARIA_HIDDEN, true);\n                            }\n                        },\n                        open: function(e) {\n                            if (that.trigger(OPEN)) {\n                                e.preventDefault();\n                            } else {\n                                that._maskedInput.attr(ARIA_EXPANDED, true);\n                                that._timeSelector._listsContainer.attr(ARIA_HIDDEN, false);\n                                that._lastCaret = caret(that._maskedInput)[0];\n                                if (that._lastCaret === that._maskedInput.val().length) {\n                                    that._lastCaret = 0;\n                                }\n                            }\n                        },\n                        change: function(value) {\n                            that._value = value;\n                            that._updateValueFromTimeSelector();\n                            that._removeInvalidState();\n                            that.trigger(CHANGE);\n                        }\n                    });\n                }\n            },\n\n            _button: function() {\n                var that = this,\n                    element = that.element,\n                    options = that.options,\n                    button;\n\n                button = element.next(\"button.k-input-button\");\n\n                if (!button[0]) {\n                    button = $(html.renderButton('<button unselectable=\"on\" tabindex=\"-1\" class=\"k-input-button\" aria-label=\"select\"></button>', {\n                        icon: \"clock-arrow-rotate\",\n                        size: options.size,\n                        fillMode: options.fillMode,\n                        shape: \"none\",\n                        rounded: \"none\"\n                    })).insertAfter(element);\n                }\n\n                that._button = button.attr({\n                    \"role\": \"button\"\n                });\n            },\n\n            _buildMask: function() {\n                var columns = this.options.columns;\n                var format;\n                var toAdd = \"\";\n                var part;\n                var currentPartLength = 0;\n\n                this._emtpyMask = \"\";\n                this._maskParts = [];\n\n                for (var i = 0; i < columns.length; i++) {\n                    part = {};\n                    format = columns[i].format;\n\n                    if (i) {\n                        toAdd = this.options.separator;\n                    }\n\n                    toAdd += format.replace(/#/g, '_');\n                    this._emtpyMask += toAdd;\n                    part.end = this._emtpyMask.length - 1;\n                    part.mask = format.replace(/#/g, '_');\n                    part.symbolsLength = part.mask.match(/_/g).length;\n                    part.start = this._emtpyMask.indexOf(part.mask, currentPartLength);\n                    part.numberEnd = this._emtpyMask.lastIndexOf(MASKCHAR) + 1;\n                    part.numberStart = this._emtpyMask.indexOf(MASKCHAR, part.start);\n\n                    currentPartLength += part.mask.length;\n                    this._maskParts.push(part);\n                }\n\n                this._old = this._emtpyMask;\n                this._maskedInput.val(this._emtpyMask);\n            },\n\n            _input: function() {\n                var that = this;\n\n                that._maskedInput = $(\"<input />\")\n                            .attr(kendo.attr(\"validate\"), false)\n                            .attr({\n                                \"role\": \"combobox\",\n                                \"aria-expanded\": false,\n                                \"aria-controls\": that.element.attr(\"id\") + \"_timeSelector\",\n                                \"autocomplete\": \"off\"\n                            })\n                            .addClass(\"k-input-inner\")\n                            .insertBefore(that.element);\n\n                that.element.hide();\n            },\n\n            _wrapper: function() {\n                var that = this,\n                    element = that.element,\n                    wrapper;\n\n                wrapper = element.parents(\".k-timedurationpicker\");\n\n                if (!wrapper[0]) {\n                    wrapper = element.wrap(SPAN).parent();\n                }\n\n                that.wrapper = wrapper.addClass(\"k-timedurationpicker k-input\");\n            },\n\n            _attachHandlers: function() {\n                var that = this;\n\n                that._maskedInput\n                        .on(KEYDOWN + NS, that._keydown.bind(that))\n                        .on(INPUT + NS, that._inputHandler.bind(that))\n                        .on(FOCUS + NS, that._focus.bind(that))\n                        .on(FOCUSOUT + NS, that._focusout.bind(that))\n                        .on(PASTE + NS, that._paste.bind(that))\n                        .on(MOUSEDOWN + NS, that._mouseDown.bind(that))\n                        .on(MOUSEUP + NS, that._mouseUp.bind(that));\n\n                that.wrapper.on(CLICK + NS, \".k-input-button\", that._click.bind(that));\n            },\n\n            _mouseDown: function() {\n                this._mouseOnInput = true;\n            },\n\n            _mouseUp: function() {\n                var selection = caret(this._maskedInput[0]);\n                var value = this._maskedInput[0].value;\n                if (selection[0] === selection[1]) {\n                    this._selectNearestSection(selection[1] == value.length ? value.length - 1 : selection[1]);\n                }\n            },\n\n            _triggerChange: function() {\n                if ((this._lastValue == undefined$1 && this._value) || this._lastValue != this._value) {\n                    this._lastValue = this._value;\n                    this.trigger(CHANGE);\n                }\n            },\n\n            _focusout: function() {\n                this._updateValueFromInput();\n                this._triggerChange();\n\n                this._canUpdateLast = true;\n                this.wrapper.removeClass(FOCUSED);\n            },\n\n            _focus: function() {\n                var that = this;\n                if (!that._mouseOnInput) {\n                    setTimeout(function() {\n                        that._selectNearestSection(0);\n                    }, 10);\n                }\n                that._mouseOnInput = false;\n                that.wrapper.addClass(FOCUSED);\n            },\n\n            _selectNearestSection: function(index) {\n                var part;\n\n                for (var i = 0; i < this._maskParts.length; i++ ) {\n                    part = this._maskParts[i];\n                    if (index >= part.start && index <= part.end) {\n                        caret(this._maskedInput[0], part.numberStart, part.numberEnd);\n                    }\n                }\n            },\n\n            _getPartValue: function(value, index) {\n                var that = this;\n                var separator = that.options.separator;\n                var startSeparator = value.indexOf(separator,index);\n                var lastSeparator = value.lastIndexOf(separator,index);\n                return value.substring(lastSeparator < 0 ? 0 : lastSeparator + 1 , startSeparator < 0 ? value.length : startSeparator );\n            },\n\n            _getEmptyPart: function(index) {\n                return this._getPartValue(this._emtpyMask, index);\n            },\n\n            _fillParts: function(clipNumber) {\n                var parts = this._emtpyMask.split(this.options.separator);\n                var symbols;\n                clipNumber = clipNumber + \"\";\n\n                for (var i = 0; i < parts.length; i++) {\n                    symbols = parts[i].match(/_/g).length;\n                    if (symbols > clipNumber.length) {\n                        parts[i] = parts[i].replace(MASKCHAR.repeat(symbols), \"0\".repeat(symbols - clipNumber.length) + clipNumber);\n                    } else {\n                        parts[i] = parts[i].replace(MASKCHAR.repeat(symbols), clipNumber.substring(0, symbols));\n                        clipNumber = clipNumber.substring(symbols, symbols.length);\n                    }\n                }\n                return parts.join(this.options.separator);\n            },\n\n            _clearParts: function(value, start, end) {\n                var parts = value.split(this.options.separator);\n                var index = 0;\n                var endBoundary;\n\n                for (var i = 0; i < parts.length; i++) {\n                    endBoundary = index + parts[i].length;\n                    if ((index <= start && endBoundary >= start) || (index <= end && endBoundary >= end)) {\n                        parts[i] = this._getEmptyPart(index);\n                    }\n                    index += (parts[i].length + 1);\n                }\n                return parts.join(this.options.separator);\n            },\n\n            _updatePart: function(oldValue, entered) {\n                var emrtyPart = this._getEmptyPart(this._old.indexOf(oldValue));\n                var current = oldValue.substring(emrtyPart.indexOf(MASKCHAR), emrtyPart.lastIndexOf(MASKCHAR) + 1);\n                var format = \"{0:\" + \"0\".repeat(current.length) + \"}\";\n\n                if (current.indexOf(MASKCHAR) >= 0 || !(oldValue[oldValue.search(/[0-9]/)] === \"0\") || entered.length > 1) {\n                    return oldValue.replace(current, kendo.format(format, parseInt(entered)));\n                } else {\n                    return oldValue.replace(current, kendo.format(format, parseInt(current + entered)));\n                }\n            },\n\n            _replacePart: function(oldValue, newPart, index) {\n                return oldValue.replace(this._getPartValue(oldValue, index), newPart);\n            },\n\n            _click: function() {\n                var that = this;\n\n                if (!that._timeSelector) {\n                    return;\n                }\n\n                that._timeSelector.toggle();\n            },\n\n            _switchPart: function(options) {\n                var separator = this.options.separator;\n                var selection = options.caret != undefined$1 ? options.caret : caret(this._maskedInput[0])[0];\n                var value = this._maskedInput.val();\n                var index;\n\n                if (options.next) {\n                    index = value.indexOf(separator, selection);\n                    if (index < 0) {\n                        index = value.length - 1;\n                    } else {\n                        index++;\n                    }\n                } else {\n                    index = value.lastIndexOf(separator, selection);\n                    if (index < 0 ) {\n                        index = 0;\n                    } else {\n                        index--;\n                    }\n                }\n                this._selectNearestSection(index);\n            },\n\n            _keydown: function(e) {\n                var key = e.keyCode;\n                var separator = this.options.separator;\n                var selection;\n                var value;\n                var index;\n                var future;\n                var past;\n\n                this._backward = key === keys.BACKSPACE;\n                if (key == keys.LEFT || key == keys.RIGHT) {\n                    e.preventDefault();\n                    selection = caret(this._maskedInput[0])[0];\n                    value = this._maskedInput.val();\n                    future = value.indexOf(separator, selection);\n                    past = value.lastIndexOf(separator, selection);\n\n                    if ((future < 0 && key == keys.RIGHT) || (past < 0 && key == keys.LEFT)) {\n                        return;\n                    }\n\n                    index = (key == keys.LEFT) ? (past - 1) : (future + 1);\n                    this._selectNearestSection(index);\n                    if (key == keys.LEFT) {\n                        this._canUpdateLast = true;\n                    }\n                } else if (this._timeSelector.popup.visible()) {\n                    this._timeSelector._scrollerKeyDownHandler(e);\n                } else if (key == keys.UP || key == keys.DOWN) {\n                    e.preventDefault();\n                    if (e.altKey) {\n                        this._timeSelector.toggle();\n                    }\n                } else if (key == keys.ENTER) {\n                    this._updateValueFromInput();\n                    this._triggerChange();\n                }\n            },\n\n            _updateValueFromTimeSelector: function() {\n                var that = this;\n                var valueParts = getTimeParts(that._value);\n                var value = \"\";\n                var column = this._columns[i];\n                var part;\n                var partValue;\n                var masksToAdd;\n\n                for (var i = 0; i < this._columns.length; i++) {\n                    column = this._columns[i];\n                    partValue = valueParts[column.name] + '';\n                    part = this._maskParts[i];\n\n                    if (i) {\n                        value += that.options.separator;\n                    }\n\n                    if (!valueParts[column.name]) {\n                        value += part.mask;\n                        continue;\n                    }\n\n                    masksToAdd = part.symbolsLength - partValue.length;\n                    value += part.mask.replace(MASKCHAR.repeat(part.symbolsLength), \"0\".repeat(masksToAdd < 0 ? 0 : masksToAdd) + partValue);\n                }\n\n                that._maskedInput.val(value);\n                that._old = value;\n            },\n\n            _validation: function() {\n                var that = this;\n                var element = that.element;\n\n                that._validationIcon = $(kendo.ui.icon({ icon: \"exclamation-circle\", iconClass: \"k-input-validation-icon k-hidden\" })).insertAfter(element);\n            },\n\n            _addInvalidState: function() {\n                this.wrapper.addClass(STATEINVALID);\n                this._validationIcon.removeClass('k-hidden');\n            },\n\n            _removeInvalidState: function() {\n                this.wrapper.removeClass(STATEINVALID);\n                this._validationIcon.addClass('k-hidden');\n            },\n\n            _updateValueFromInput: function() {\n                var val = this._maskedInput.val();\n                var values = {};\n                var valid = true;\n                var column;\n                var part;\n                var colValue;\n\n                for (var i = 0; i < this._columns.length; i++) {\n                    column = this._columns[i];\n                    part = this._maskParts[i];\n                    colValue = val.substring(part.numberStart, part.numberEnd).replace(/_/g, \"\");\n                    colValue = kendo.parseInt(colValue || 0);\n\n                    if (colValue >= column.min && colValue <= column.max) {\n                        values[column.name] = colValue;\n                    } else {\n                        valid = false;\n                        break;\n                    }\n                }\n\n                if (valid) {\n                    this._value = convertToMsec(values);\n                    this.element.val(this._value || \"\");\n                    this._timeSelector._value = this._value;\n                    this._removeInvalidState();\n                } else {\n                    this._addInvalidState();\n                }\n            },\n\n            _paste: function(e) {\n                this._isPasted = true;\n                this._pasted = (e.clipboardData || e.originalEvent.clipboardData).getData('Text');\n                var emptyPart;\n\n                var selection = caret(this._maskedInput);\n\n                if (this._maskedInput.val().length == selection[1] && !selection[0]) {\n                    this._replaceEntire = true;\n                } else {\n                    emptyPart = this._getEmptyPart(selection[0]);\n                    this._pasted = this._pasted.substring(0, emptyPart.match(/_/g).length);\n                }\n            },\n\n            _inputHandler: function() {\n                if (kendo._activeElement() !== this._maskedInput[0]) {\n                    return;\n                }\n\n                var that = this;\n                var old = that._old;\n                var separator = that.options.separator;\n                var value = that._maskedInput[0].value;\n                var selection = caret(that._maskedInput)[0];\n                var lengthDiff = old.length - value.length;\n                var entered;\n                var validEntry;\n                var updatedPart;\n                var endSubstring;\n                var startSubstring;\n                var deletedPart;\n                var emptyPart;\n                var canUpdate;\n                var restored;\n                var oldpartValue;\n                var nextSeparator;\n\n                entered = that._isPasted ? that._pasted : value.substring(selection - 1, selection);\n                validEntry = /\\d/.test(entered);\n\n                if (that._isPasted && that._replaceEntire && validEntry) {\n                    that._old = that._fillParts(parseInt(entered));\n                    that._maskedInput.val(that._old);\n                    that._selectNearestSection(0);\n                    that._isPasted = that._replaceEntire = false;\n                    return;\n                }\n\n                if (that._isPasted) {\n                    lengthDiff = 0;\n                }\n\n                that._isPasted = false;\n\n                if ((entered === separator && !that._backward)) {\n                    that._maskedInput.val(that._old);\n                    that._switchPart({ caret: selection, next: true });\n                    return;\n                }\n\n                if (!value && that._backward) {\n                    that._old = that._emtpyMask;\n                    that._maskedInput.val(that._old);\n                    that._selectNearestSection(selection);\n                    return;\n                }\n\n                if ((!validEntry && !that._backward)) {\n                    that._maskedInput.val(that._old);\n                    that._selectNearestSection(selection);\n                    return;\n                }\n\n                if (!lengthDiff || lengthDiff > 0) {\n                    endSubstring = value.substring(selection, value.length);\n                    startSubstring = value.substring(0, selection);\n                    deletedPart = that._emtpyMask.substring(startSubstring.length, old.indexOf(endSubstring));\n\n                    restored = startSubstring + deletedPart + endSubstring;\n                    oldpartValue = that._getPartValue(that._old, selection);\n                    nextSeparator = that._old.indexOf(separator, that._old.indexOf(oldpartValue) + 1);\n\n                    if (that._backward) {\n                        // if multiple parts\n                        if (deletedPart.split(separator).length > 1) {\n                            that._old = this._clearParts(restored, selection, selection + deletedPart.length);\n                        } else {\n                            emptyPart = this._getEmptyPart(selection);\n                            if (emptyPart == oldpartValue) {\n                                that._maskedInput.val(that._old);\n                                that._switchPart({ caret: selection });\n                                return;\n                            }\n                            that._old = that._replacePart(restored, emptyPart, selection);\n                        }\n                        that._maskedInput.val(that._old);\n                        that._selectNearestSection(selection);\n                        return;\n                    }\n\n                    if (nextSeparator < 0 && oldpartValue.indexOf(MASKCHAR) === -1 && !that._canUpdateLast) {\n                        that._maskedInput.val(that._old);\n                        that._selectNearestSection(selection);\n                        return;\n                    }\n\n                    if (validEntry) {\n                        updatedPart = that._updatePart(oldpartValue, entered);\n                        canUpdate = updatedPart[updatedPart.search(/[0-9]/)] === \"0\";\n                        restored = that._replacePart(restored, updatedPart, selection);\n                        that._maskedInput.val(restored);\n                        if (nextSeparator > 0 && !canUpdate) {\n                            that._selectNearestSection(nextSeparator + 1, true);\n                        } else {\n                            that._selectNearestSection(selection);\n                        }\n\n                        that._canUpdateLast = !(nextSeparator < 0 && !canUpdate);\n                    }\n                    that._old = restored;\n                } else if (lengthDiff < 0) {\n                    that._maskedInput.val(that._old);\n                    that._selectNearestSection(that._old.length - 1);\n                }\n            },\n\n        });\n\n        kendo.cssProperties.registerPrefix(\"TimeDurationPicker\", \"k-input-\");\n\n        kendo.cssProperties.registerValues(\"TimeDurationPicker\", [{\n            prop: \"rounded\",\n            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n\n        ui.plugin(TimeDurationPicker);\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}