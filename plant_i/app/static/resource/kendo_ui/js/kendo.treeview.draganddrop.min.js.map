{"version":3,"sources":["raw-js/kendo.treeview.draganddrop.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendotreeview","draganddrop","js","this","$","undefined$1","kendo","window","ui","extend","VISIBILITY","DRAG_STATUS","DRAG_STATUS_ELEMENT","KSTATEHOVER","HierarchicalDragAndDrop","Class","init","element","options","hovered","dragstart","noop","drag","drop","dragend","_draggable","Draggable","ignore","filter","autoScroll","cursorOffset","left","top","support","mobileOS","zoomLevel","hint","_hint","bind","dragcancel","hintDestroyed","holdToDrag","clickMoveClick","hintText","_removeTouchHover","touch","find","removeClass","_hintStatus","newStatus","statusElement","status","icon","replaceWith","e","dropHint","remove","source","currentTarget","closest","itemSelector","preventDefault","reorderable","css","appendTo","hoveredItem","itemHeight","itemTop","itemContent","delta","insertOnTop","insertOnBottom","addChild","itemData","position","target","dropTarget","eventTarget","container","allowedContainers","length","contains","hasClass","itemFromTarget","item","_outerHeight","content","getOffset","y","location","_lastHover","toggleClass","dropHintContainer","first","last","originalEvent","pageY","pageX","x","setStatus","value","indexOf","destination","eventArgs","dropPrevented","requireTarget","dropPositionFrom","valid","setValid","newValid","dropped","destroy","jQuery"],"mappings":"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","file":"kendo.treeview.draganddrop.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.data.js'), require('kendo.draganddrop.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.data', 'kendo.draganddrop'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendotreeview = global.kendotreeview || {}, global.kendotreeview.draganddrop = global.kendotreeview.draganddrop || {}, global.kendotreeview.draganddrop.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n        id: \"treeview.draganddrop\",\n        name: \"Hierarchical Drag & Drop\",\n        category: \"framework\",\n        depends: [ \"core\", \"draganddrop\" ],\n        advanced: true\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo;\n        var ui = kendo.ui;\n        var extend = $.extend;\n        var VISIBILITY = \"visibility\";\n        var DRAG_STATUS = \"k-drag-status\";\n        var DRAG_STATUS_ELEMENT = `<span class=\"${DRAG_STATUS}\"></span>`;\n        var KSTATEHOVER = \"k-hover\";\n        var INPUTSELECTOR = \"input,a:not(.k-treeview-leaf),textarea,.k-multiselect-wrap,select,button,a.k-button>.k-icon,.k-button>.k-button-text,button.k-button>.k-icon,span.k-toggle-icon,a.k-button>.k-svg-icon,button.k-button>.k-svg-icon,.k-button>.k-svg-icon>svg,.k-button>.k-svg-icon>svg>path\";\n        var DROPHINTTEMPLATE = \"<div class='k-drop-hint k-drop-hint-h'>\" +\n                                    \"<div class='k-drop-hint-start'></div>\" +\n                                    \"<div class='k-drop-hint-line'></div>\" +\n                                \"</div>\";\n\n        ui.HierarchicalDragAndDrop = kendo.Class.extend({\n            init: function(element, options) {\n                this.element = element;\n                this.hovered = element;\n                this.options = extend({\n                    dragstart: $.noop, drag: $.noop, drop: $.noop, dragend: $.noop\n                }, options);\n\n                this._draggable = new ui.Draggable(element, {\n                    ignore: INPUTSELECTOR,\n                    filter: options.filter,\n                    autoScroll: options.autoScroll,\n                    cursorOffset: {\n                        left: 10,\n                        top: kendo.support.mobileOS ? -40 / kendo.support.zoomLevel() : 10\n                    },\n                    hint: this._hint.bind(this),\n                    dragstart: this.dragstart.bind(this),\n                    dragcancel: this.dragcancel.bind(this),\n                    hintDestroyed: this.dragcancel.bind(this),\n                    drag: this.drag.bind(this),\n                    dragend: this.dragend.bind(this),\n                    holdToDrag: options.holdToDrag,\n                    clickMoveClick: options.clickMoveClick\n                });\n            },\n\n            _hint: function(element) {\n                return \"<div class='k-drag-clue'>\" +\n                            DRAG_STATUS_ELEMENT +\n                            this.options.hintText(element) +\n                        \"</div>\";\n            },\n\n            _removeTouchHover: function() {\n                if (kendo.support.touch && this.hovered) {\n                    this.hovered.find(\".\" + KSTATEHOVER).removeClass(KSTATEHOVER);\n                    this.hovered = false;\n                }\n            },\n\n            _hintStatus: function(newStatus) {\n                var statusElement = this._draggable.hint.find(`.${DRAG_STATUS}`);\n                if (newStatus) {\n                    this.status = newStatus;\n                    ui.icon(statusElement, {\n                        icon: newStatus\n                    });\n                } else {\n                    this.status = '';\n                    statusElement.replaceWith(DRAG_STATUS_ELEMENT);\n                }\n            },\n\n            dragstart: function(e) {\n                if (this.dropHint) {\n                    this.dropHint.remove();\n                }\n\n                this.source = e.currentTarget.closest(this.options.itemSelector);\n\n                if (this.options.dragstart(this.source)) {\n                    e.preventDefault();\n                }\n\n                if (this.options.reorderable) {\n                    this.dropHint = $(DROPHINTTEMPLATE)\n                        .css(VISIBILITY, \"hidden\")\n                        .appendTo(this.element);\n                } else {\n                    this.dropHint = $();\n                }\n            },\n\n            drag: function(e) {\n                var options = this.options;\n                var source = this.source;\n                var target = this.dropTarget = $(kendo.eventTarget(e));\n                var container = target.closest(options.allowedContainers);\n                var hoveredItem, itemHeight, itemTop, itemContent, delta;\n                var insertOnTop, insertOnBottom, addChild;\n                var itemData, position, status;\n\n                if (!container.length) {\n                    // dragging outside of allowed elements\n                    status = \"cancel\";\n                    this._removeTouchHover();\n                } else if (source[0] == target[0] || options.contains(source[0], target[0])) {\n                    // dragging item within itself\n                    status = \"cancel\";\n                } else if (e.clickMoveClick && e.currentTarget.hasClass(\"k-drag-cell\") && target.closest(\".k-drag-cell\").length === 0) {\n                    // click-move-click interaction with drag cell\n                    status = \"cancel\";\n                } else if (e.clickMoveClick && e.currentTarget.hasClass(\"k-treeview-leaf\") && target.closest(\".k-treeview-leaf\").length === 0) {\n                    // click-move-click interaction with TreeView\n                    status = \"cancel\";\n                } else {\n                    // moving or reordering item\n                    status = \"insert-middle\";\n\n                    itemData = options.itemFromTarget(target);\n                    hoveredItem = itemData.item;\n\n                    if (hoveredItem.length) {\n                        this._removeTouchHover();\n                        itemHeight = kendo._outerHeight(hoveredItem);\n                        itemContent = itemData.content;\n\n                        if (options.reorderable) {\n                            delta = itemHeight / (itemContent.length > 0 ? 4 : 2);\n                            itemTop = kendo.getOffset(hoveredItem).top;\n\n                            insertOnTop = e.y.location < (itemTop + delta);\n                            insertOnBottom = (itemTop + itemHeight - delta) < e.y.location;\n                            addChild = itemContent.length && !insertOnTop && !insertOnBottom;\n                        } else {\n                            addChild = true;\n                            insertOnTop = false;\n                            insertOnBottom = false;\n                        }\n\n                        this.hovered = addChild ? container : false;\n\n                        this.dropHint.css(VISIBILITY, addChild ? \"hidden\" : \"visible\");\n\n                        if (this._lastHover && this._lastHover[0] != itemContent[0]) {\n                            this._lastHover.removeClass(KSTATEHOVER);\n                        }\n\n                        this._lastHover = itemContent.toggleClass(KSTATEHOVER, addChild);\n\n                        if (addChild) {\n                            status = \"plus\";\n                        } else {\n                            position = hoveredItem.position();\n                            position.top += insertOnTop ? 0 : itemHeight;\n\n                            this.dropHint.css(position)\n                                [insertOnTop ? \"prependTo\" : \"appendTo\"]\n                                (options.dropHintContainer(hoveredItem));\n\n                            if (insertOnTop && itemData.first) {\n                                status = \"insert-top\";\n                            }\n\n                            if (insertOnBottom && itemData.last) {\n                                status = \"insert-bottom\";\n                            }\n                        }\n                    } else if (target[0] != this.dropHint[0]) {\n                        if (this._lastHover) {\n                            this._lastHover.removeClass(KSTATEHOVER);\n                        }\n\n                        if (!$.contains(this.element[0], container[0])) {\n                            // moving node to different element\n                            status = \"plus\";\n                        } else {\n                            status = \"cancel\";\n                        }\n                    }\n                }\n\n                this.options.drag({\n                    originalEvent: e.originalEvent,\n                    source: source,\n                    target: target,\n                    pageY: e.y.location,\n                    pageX: e.x.location,\n                    status: status,\n                    setStatus: function(value) {\n                        status = value;\n                    }\n                });\n\n                if (status.indexOf(\"insert\") !== 0) {\n                    this.dropHint.css(VISIBILITY, \"hidden\");\n                }\n\n                this._hintStatus(status);\n            },\n\n            dragcancel: function() {\n                if (this.dropHint) {\n                    this.dropHint.remove();\n                }\n            },\n\n            dragend: function(e) {\n                var position = \"over\",\n                    source = this.source,\n                    destination,\n                    dropHint = this.dropHint,\n                    dropTarget = this.dropTarget || $(kendo.eventTarget(e)),\n                    eventArgs, dropPrevented, requireTarget;\n\n                if (dropHint && dropHint.css(VISIBILITY) == \"visible\") {\n                    position = this.options.dropPositionFrom(dropHint);\n                    destination = dropHint.closest(this.options.itemSelector);\n                    requireTarget = true;\n                } else if (dropTarget) {\n                    destination = dropTarget.closest(this.options.itemSelector);\n\n                    // moving node to root element\n                    if (!destination.length) {\n                        destination = dropTarget.closest(this.options.allowedContainers);\n                    }\n                }\n\n                if (requireTarget && !destination.length) {\n                    this.dragcancel();\n                    return;\n                }\n\n                eventArgs = {\n                    originalEvent: e.originalEvent,\n                    source: source[0],\n                    destination: destination[0],\n                    valid: this.status != \"cancel\",\n                    setValid: function(newValid) {\n                        this.valid = newValid;\n                    },\n                    dropTarget: dropTarget[0],\n                    position: position\n                };\n\n                dropPrevented = this.options.drop(eventArgs);\n\n                dropHint.remove();\n                this._removeTouchHover();\n                if (this._lastHover) {\n                    this._lastHover.removeClass(KSTATEHOVER);\n                }\n\n                if (!eventArgs.valid || dropPrevented) {\n                    this._draggable.dropped = eventArgs.valid;\n                    return;\n                }\n\n                this._draggable.dropped = true;\n\n                this.options.dragend({\n                    originalEvent: e.originalEvent,\n                    source: source,\n                    destination: destination,\n                    position: position\n                });\n            },\n\n            destroy: function() {\n                this._lastHover = this.hovered = null;\n                this._draggable.destroy();\n            }\n        });\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}