{"version":3,"sources":["raw-js/kendo.dataviz.sankey.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendodataviz","sankey","js","this","$","window","kendo","dataviz","deepExtend","Box","setDefaultOptions","constants","geometry","drawing","ChartLegend","Legend","sum","array","mapFn","map","reduce","acc","curr","sortAsc","a","b","y0","index","y1","sortSource","source","sortTarget","target","value","node","sortLinks","nodes","forEach","targetLinks","link","sourceLinks","sort","calcLayer","maxDepth","align","depth","height","length","Sankey$1","Class","extend","init","options","ref","nodesOptions","offset","data","links","width","offsetX","offsetY","nodeWidth","nodePadding","padding","reverse","targetColumnIndex","loops","autoLayout","calculate","connectLinksToNodes","calculateNodeValues","circularLinks","calculateNodeHeights","columns","calculateNodeDepths","calculateNodeColumns","calculateNodeBreadths","applyNodesOffset","calculateLinkBreadths","nodesMap","Map","i","id","undefined","label","text","set","get","sourceId","targetId","push","Math","max","current","Set","next","currDepth","size","currentNodes","Array","from","n","l","add","nodesLength","currentHeight","eachNode","d","apply","columnWidth","layer","min","x0","x1","this$1$1","kSize","c","y","uncurlLinksToRight","uncurlLinksToLeft","left","top","column","kValue","targetTopPos","dy","arrangeNodesVertically","loop","j","sourceTopPos","endIndex","arrangeUp","arrangeDown","yPos","currentY","i$1","link$1","calculateSankey","rotationDirection","p1x","p1y","p2x","p2y","p3x","p3y","expression1","expression2","SankeyElement","Class$$1","call","createVisual","__proto__","prototype","Object","create","constructor","visual","createElement","exportVisual","customVisual","sender","getSender","visualOptions","getElement","Node","SankeyElement$$1","arguments","rect","Rect","Path","fromRect","fill","color","opacity","stroke","className","role","ariaRoleDescription","ariaLabel","nodeColor","nodeColors","resolveNodeOptions","nodeOptions","defined","util","Link","xC","moveTo","curveTo","INSIDE","BEFORE","Label","totalWidth","position","visible","nodeBox","textbox","TextBox","reflow","textSizeBox","box","goesOutside","textY","center","textOrigin","textRect","translate","renderVisual","font","border","margin","paintOrder","resolveLabelOptions","Title$1","Title$$1","drawingRect","title","Title","buildTitle","CENTER","getSpacing","sortData","item","area","background","areaBackground","areaOpacity","legend","markers","type","cursor","POINTER","BOTTOM","LINK","NODE","Sankey","Observable$$1","element","theme","_initTheme","_setOptions","_initElement","_initSurface","_redraw","_initResizeObserver","destroy","unbind","_destroySurface","_destroyResizeObserver","addClass","setAttribute","tabIndex","getAttribute","description","surface","_initSurfaceElement","_createSurface","observer","ResizeObserver","entries","entry","contentRect","setSize","resize","_resizeObserver","observe","Surface","surfaceElement","mouseenter","_mouseenter","bind","mouseleave","_mouseleave","mousemove","_mousemove","click","_click","currentTheme","setLinksOpacity","linksVisuals","setOpacity","linkOptions","setLinksInactivityOpacity","inactiveOpacity","highlight","linkValue","trigger","name","ev","event","targetType","dataItem","isLink","isNode","isLegendItem","Boolean","chartElement","highlightLinks","nodeVisual","nodesVisuals","originalEvent","relatedTarget","nodeName","tooltipTimeOut","clearTimeout","tooltipShown","tooltip","followPointer","delay","tooltipElType","mouseEvent","getBoundingClientRect","isLeft","clientX","isTop","clientY","tooltipData","popupOffset","pageX","pageY","popupAlign","horizontal","vertical","ref$1","nodeValue","nextDelay","setTimeout","_destroySurfaceElement","disconnect","document","appendChild","parentNode","removeChild","setOptions","clear","_getSize","draw","_render","titleBox","legendBox","calcOptions","sankeyOptions","labels","disableAutoLayout","sankeyBox","legendArea","clone","titleHeight","TOP","unpad","shrink","legendPosition","LEFT","RIGHT","calculatedNodes","console","warn","nodeEl","nodeOps","nodeInstance","wrap","rectToBox","rawBBox","labelVisual","x2","y2","permutation","columnsLength","results","crosses","link1","link2","f1","f2","f3","f4","linksLength","lNext","nextLink","crossesValue","minCrosses","r","bestResult","find","context","sankeyContext","labelOptions","Group","clip","titleVisual","append","visualNodes","sortedLinks","slice","sourceNode","targetNode","linkOps","colorType","resolveLinkOptions","linkVisual","diagramWidth","textOps","legendVisual","exportOptions","Observable","right","lineJoin","createSankeyData","dimensions","measure","linksMap","row","dimension","key","existingValue","nodesId","nodesArray","String","linksArray","jQuery","Widget","ui","encode","htmlEncode","styleAttr","tooltipContentWrapStyle","TootipText","Square","TooltipTemplates","icon","SankeyTooltip","fn","outerWidth","outerHeight","setContent","content","html","each","el","split","filter","s","parts","style","trim","removeAttribute","setPosition","offsetOption","css","show","hide","remove","Tooltip","ContentTemplates","template","KendoSankey","userOptions","empty","wrapper","_initSankey","_attachEvents","notify","_showWatermarkOverlay","currentOptions","events","eventName","_instance","themeOptions","_getThemeOptions","seriesColors","axisDefaults","seriesDefaults","line","strokeColor","_createSankey","themeName","SASS_THEMES","indexOf","toLowerCase","autoTheme","chart","themes","_events","handler","tooltipShow","tooltipHide","e","_tooltip","doc","ownerDocument","appendTo","body","nodeTemplate","linkTemplate","currentTemplate","format","messages","tooltipUnits","ExportMixin","PDFMixin","plugin"],"mappings":"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","file":"kendo.dataviz.sankey.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.core.js'), require('kendo.color.js'), require('kendo.drawing.js'), require('kendo.dataviz.core.js'), require('kendo.dataviz.chart.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.core', 'kendo.color', 'kendo.drawing', 'kendo.dataviz.core', 'kendo.dataviz.chart'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendodataviz = global.kendodataviz || {}, global.kendodataviz.sankey = global.kendodataviz.sankey || {}, global.kendodataviz.sankey.js = factory()));\n})(this, (function () {\n    /***********************************************************************\n     * WARNING: this file is auto-generated.  If you change it directly,\n     * your modifications will eventually be lost.  The source code is in\n     * `kendo-charts` repository, you should make your changes there and\n     * run `src-modules/sync.sh` in this repository.\n     */\n\n    (function($) {\n    /* eslint-disable */\n\n    window.kendo.dataviz = window.kendo.dataviz || {};\n    var dataviz = kendo.dataviz;\n    var deepExtend = dataviz.deepExtend;\n    var Box = dataviz.Box;\n    var setDefaultOptions = dataviz.setDefaultOptions;\n    var constants = dataviz.constants;\n    var geometry = kendo.geometry;\n    var drawing = kendo.drawing;\n\n    var ChartLegend = dataviz.Legend;\n\n    var max = function (array, mapFn) { return Math.max.apply(null, array.map(mapFn)); };\n    var min = function (array, mapFn) { return Math.min.apply(null, array.map(mapFn)); };\n    var sum = function (array, mapFn) { return array.map(mapFn).reduce(function (acc, curr) { return (acc + curr); }, 0); };\n    var sortAsc = function (a, b) { return (a.y0 === b.y0 ? a.index - b.index : a.y0 + a.y1 - b.y0 - b.y1); };\n    var sortSource = function (a, b) { return sortAsc(a.source, b.source); };\n    var sortTarget = function (a, b) { return sortAsc(a.target, b.target); };\n    var value = function (node) { return node.value; };\n\n    function sortLinks(nodes) {\n        nodes.forEach(function (node) {\n            node.targetLinks.forEach(function (link) {\n                link.source.sourceLinks.sort(sortTarget);\n            });\n            node.sourceLinks.forEach(function (link) {\n                link.target.targetLinks.sort(sortSource);\n            });\n        });\n    }\n\n    var calcLayer = function (node, maxDepth) {\n        if (node.align === 'left') {\n            return node.depth;\n        }\n\n        if (node.align === 'right') {\n            return maxDepth - node.height;\n        }\n\n        return node.sourceLinks.length ? node.depth : maxDepth;\n    };\n\n    var Sankey$1 = kendo.Class.extend({\n        init: function(options) {\n            var ref = options.nodesOptions;\n            var offset = ref.offset; if (offset === void 0) { offset = {}; }\n            var align = ref.align;\n            this.data = {\n                nodes: options.nodes.map(function (node) { return deepExtend({}, { offset: offset, align: align }, node); }),\n                links: options.links.map(function (link) { return deepExtend({}, link); })\n            };\n\n            this.width = options.width;\n            this.height = options.height;\n            this.offsetX = options.offsetX || 0;\n            this.offsetY = options.offsetY || 0;\n            this.nodeWidth = options.nodesOptions.width;\n            this.nodePadding = options.nodesOptions.padding;\n            this.reverse = options.reverse;\n            this.targetColumnIndex = options.targetColumnIndex;\n            this.loops = options.loops;\n            this.autoLayout = options.autoLayout;\n        },\n\n        calculate: function() {\n            var ref = this.data;\n            var nodes = ref.nodes;\n            var links = ref.links;\n            this.connectLinksToNodes(nodes, links);\n            this.calculateNodeValues(nodes);\n\n            var circularLinks = this.calculateNodeHeights(nodes);\n\n            if (circularLinks) {\n                return { nodes: [], links: [], columns: [], circularLinks: circularLinks };\n            }\n\n            this.calculateNodeDepths(nodes);\n            var columns = this.calculateNodeColumns(nodes);\n            this.calculateNodeBreadths(columns);\n            this.applyNodesOffset(nodes);\n            this.calculateLinkBreadths(nodes);\n\n            return $.extend({}, this.data, {columns: columns});\n        },\n\n        connectLinksToNodes: function(nodes, links) {\n            var nodesMap = new Map();\n\n            nodes.forEach(function (node, i) {\n                node.index = i;\n                node.sourceLinks = [];\n                node.targetLinks = [];\n                node.id = node.id !== undefined ? node.id : node.label.text;\n                nodesMap.set(node.id, node);\n            });\n\n            links.forEach(function (link) {\n                link.source = nodesMap.get(link.sourceId);\n                link.target = nodesMap.get(link.targetId);\n                link.source.sourceLinks.push(link);\n                link.target.targetLinks.push(link);\n            });\n        },\n\n        calculateNodeValues: function(nodes) {\n            nodes.forEach(function (node) {\n                node.value = Math.max(\n                    sum(node.sourceLinks, value),\n                    sum(node.targetLinks, value)\n                );\n            });\n        },\n\n        calculateNodeDepths: function(nodes) {\n            var current = new Set(nodes);\n            var next = new Set();\n            var currDepth = 0;\n            while (current.size) {\n                var currentNodes = Array.from(current);\n                for (var n = 0; n < currentNodes.length; n++) {\n                    var node = currentNodes[n];\n                    node.depth = currDepth;\n                    for (var l = 0; l < node.sourceLinks.length; l++) {\n                        var link = node.sourceLinks[l];\n                        next.add(link.target);\n                    }\n                }\n                currDepth++;\n                current = next;\n                next = new Set();\n            }\n        },\n\n        calculateNodeHeights: function(nodes) {\n            var nodesLength = nodes.length;\n            var current = new Set(nodes);\n            var next = new Set;\n            var currentHeight = 0;\n            var eachNode = function (node) {\n                node.height = currentHeight;\n                node.targetLinks.forEach(function (link) {\n                    next.add(link.source);\n                });\n            };\n            while (current.size) {\n                current.forEach(eachNode);\n                currentHeight++;\n                if (currentHeight > nodesLength) {\n                    return true;\n                }\n                current = next;\n                next = new Set;\n            }\n            return false;\n        },\n\n        calculateNodeColumns: function(nodes) {\n            var this$1$1 = this;\n\n            var maxDepth = max(nodes, function (d) { return d.depth; });\n            var columnWidth = (this.width - this.offsetX - this.nodeWidth) / maxDepth;\n            var columns = new Array(maxDepth + 1);\n            for (var i = 0; i < nodes.length; i++) {\n                var node = nodes[i];\n                var layer = Math.max(0, Math.min(maxDepth, calcLayer(node, maxDepth)));\n                node.x0 = this$1$1.offsetX + layer * columnWidth;\n                node.x1 = node.x0 + this$1$1.nodeWidth;\n                node.layer = layer;\n                columns[layer] = columns[layer] || [];\n                columns[layer].push(node);\n            }\n\n            return columns;\n        },\n\n        calculateNodeBreadths: function(columns) {\n            var this$1$1 = this;\n\n            var kSize = min(columns, function (c) { return (this$1$1.height - this$1$1.offsetY - (c.length - 1) * this$1$1.nodePadding) / sum(c, value); });\n\n            columns.forEach(function (nodes) {\n                var y = this$1$1.offsetY;\n                nodes.forEach(function (node) {\n                    node.y0 = y;\n                    node.y1 = y + node.value * kSize;\n                    y = node.y1 + this$1$1.nodePadding;\n                    node.sourceLinks.forEach(function (link) {\n                        link.width = link.value * kSize;\n                    });\n                });\n                y = (this$1$1.height - y + this$1$1.nodePadding) / (nodes.length + 1);\n                nodes.forEach(function (node, i) {\n                    node.y0 += y * (i + 1);\n                    node.y1 += y * (i + 1);\n                });\n            });\n\n            if (this.autoLayout !== false) {\n                var loops = this.loops !== undefined ? this.loops : columns.length - 1;\n                var targetColumnIndex = this.targetColumnIndex || 1;\n\n                for (var i = 0; i < loops; i++) {\n                    if (!this$1$1.reverse) {\n                        this$1$1.uncurlLinksToLeft(columns, targetColumnIndex);\n                        this$1$1.uncurlLinksToRight(columns, targetColumnIndex);\n                    } else {\n                        this$1$1.uncurlLinksToRight(columns, targetColumnIndex);\n                        this$1$1.uncurlLinksToLeft(columns, targetColumnIndex);\n                    }\n                }\n            }\n\n            columns.forEach(sortLinks);\n        },\n\n        applyNodesOffset: function(nodes) {\n            nodes.forEach(function (node) {\n                var offsetX = (node.offset ? node.offset.left : 0) || 0;\n                var offsetY = (node.offset ? node.offset.top : 0) || 0;\n                node.x0 += offsetX;\n                node.x1 += offsetX;\n                node.y0 += offsetY;\n                node.y1 += offsetY;\n            });\n        },\n\n        calculateLinkBreadths: function(nodes) {\n            nodes.forEach(function (node) {\n                var sourceLinks = node.sourceLinks;\n                var targetLinks = node.targetLinks;\n                var y = node.y0;\n                var y1 = y;\n                sourceLinks.forEach(function (link) {\n                    link.x0 = link.source.x1;\n                    link.y0 = y + link.width / 2;\n                    y += link.width;\n                });\n                targetLinks.forEach(function (link) {\n                    link.x1 = link.target.x0;\n                    link.y1 = y1 + link.width / 2;\n                    y1 += link.width;\n                });\n            });\n        },\n\n        uncurlLinksToRight: function(columns, targetColumnIndex) {\n            var this$1$1 = this;\n\n            var n = columns.length;\n            for (var i = targetColumnIndex; i < n; i++) {\n                var column = columns[i];\n                column.forEach(function (target) {\n                    var y = 0;\n                    var sum = 0;\n                    target.targetLinks.forEach(function (link) {\n                        var kValue = link.value * (target.layer - link.source.layer);\n                        y += this$1$1.targetTopPos(link.source, target) * kValue;\n                        sum += kValue;\n                    });\n\n                    var dy = y === 0 ? 0 : (y / sum - target.y0);\n                    target.y0 += dy;\n                    target.y1 += dy;\n                    sortLinks([target]);\n                });\n                column.sort(sortAsc);\n                this$1$1.arrangeNodesVertically(column);\n            }\n        },\n\n        uncurlLinksToLeft: function(columns, targetColumnIndex) {\n            var this$1$1 = this;\n\n            var l = columns.length;\n            var startIndex = l - 1 - targetColumnIndex;\n            for (var i = startIndex; i >= 0; i--) {\n                var column = columns[i];\n                var loop = function ( j ) {\n                    var source = column[j];\n                    var y = 0;\n                    var sum = 0;\n                    source.sourceLinks.forEach(function (link) {\n                        var kValue = link.value * (link.target.layer - source.layer);\n                        y += this$1$1.sourceTopPos(source, link.target) * kValue;\n                        sum += kValue;\n                    });\n                    var dy = y === 0 ? 0 : (y / sum - source.y0);\n                    source.y0 += dy;\n                    source.y1 += dy;\n                    sortLinks([source]);\n                };\n\n                for (var j = 0; j < column.length; j++) loop( j );\n\n                column.sort(sortAsc);\n                this$1$1.arrangeNodesVertically(column);\n            }\n        },\n\n        arrangeNodesVertically: function(nodes) {\n            var startIndex = 0;\n            var endIndex = nodes.length - 1;\n\n            this.arrangeUp(nodes, this.height, endIndex);\n            this.arrangeDown(nodes, this.offsetY, startIndex);\n        },\n\n        arrangeDown: function(nodes, yPos, index) {\n            var this$1$1 = this;\n\n            var currentY = yPos;\n\n            for (var i = index; i < nodes.length; i++) {\n                var node = nodes[i];\n                var dy = Math.max(0, currentY - node.y0);\n                node.y0 += dy;\n                node.y1 += dy;\n                currentY = node.y1 + this$1$1.nodePadding;\n            }\n        },\n\n        arrangeUp: function(nodes, yPos, index) {\n            var this$1$1 = this;\n\n            var currentY = yPos;\n            for (var i = index; i >= 0; --i) {\n                var node = nodes[i];\n                var dy = Math.max(0, node.y1 - currentY);\n                node.y0 -= dy;\n                node.y1 -= dy;\n                currentY = node.y0 - this$1$1.nodePadding;\n            }\n        },\n\n        sourceTopPos: function(source, target) {\n            var this$1$1 = this;\n\n            var y = target.y0 - ((target.targetLinks.length - 1) * this.nodePadding) / 2;\n            for (var i = 0; i < target.targetLinks.length; i++) {\n                var link = target.targetLinks[i];\n                if (link.source === source) {\n                    break;\n                }\n                y += link.width + this$1$1.nodePadding;\n            }\n            for (var i$1 = 0; i$1 < source.sourceLinks.length; i$1++) {\n                var link$1 = source.sourceLinks[i$1];\n                if (link$1.target === target) {\n                    break;\n                }\n                y -= link$1.width;\n            }\n            return y;\n        },\n\n        targetTopPos: function(source, target) {\n            var this$1$1 = this;\n\n            var y = source.y0 - ((source.sourceLinks.length - 1) * this.nodePadding) / 2;\n            for (var i = 0; i < source.sourceLinks.length; i++) {\n                var link = source.sourceLinks[i];\n                if (link.target === target) {\n                    break;\n                }\n                y += link.width + this$1$1.nodePadding;\n            }\n            for (var i$1 = 0; i$1 < target.targetLinks.length; i$1++) {\n                var link$1 = target.targetLinks[i$1];\n                if (link$1.source === source) {\n                    break;\n                }\n                y -= link$1.width;\n            }\n            return y;\n        }\n    });\n\n    var calculateSankey = function (options) { return new Sankey$1(options).calculate(); };\n\n    var crossesValue = function (links) {\n        var value = 0;\n        var linksLength = links.length;\n\n        for (var i = 0; i < linksLength; i++) {\n            var link = links[i];\n\n            for (var lNext = i + 1; lNext < linksLength; lNext++) {\n                var nextLink = links[lNext];\n\n                if (intersect(link, nextLink)) {\n                    value += Math.min(link.value, nextLink.value);\n                }\n            }\n        }\n\n        return value;\n    };\n\n    function rotationDirection(p1x, p1y, p2x, p2y, p3x, p3y) {\n        var expression1 = (p3y - p1y) * (p2x - p1x);\n        var expression2 = (p2y - p1y) * (p3x - p1x);\n\n        if (expression1 > expression2) {\n            return 1;\n        } else if (expression1 === expression2) {\n            return 0;\n        }\n\n        return -1;\n    }\n\n    function intersect(link1, link2) {\n        var f1 = rotationDirection(link1.x0, link1.y0, link1.x1, link1.y1, link2.x1, link2.y1);\n        var f2 = rotationDirection(link1.x0, link1.y0, link1.x1, link1.y1, link2.x0, link2.y0);\n        var f3 = rotationDirection(link1.x0, link1.y0, link2.x0, link2.y0, link2.x1, link2.y1);\n        var f4 = rotationDirection(link1.x1, link1.y1, link2.x0, link2.y0, link2.x1, link2.y1);\n\n        return f1 !== f2 && f3 !== f4;\n    }\n\n    var SankeyElement = (function (Class$$1) {\n        function SankeyElement(options) {\n            Class$$1.call(this);\n            this.options = deepExtend({}, this.options, options);\n            this.createVisual();\n        }\n\n        if ( Class$$1 ) SankeyElement.__proto__ = Class$$1;\n        SankeyElement.prototype = Object.create( Class$$1 && Class$$1.prototype );\n        SankeyElement.prototype.constructor = SankeyElement;\n\n        SankeyElement.prototype.createVisual = function createVisual () {\n            this.visual = this.createElement();\n        };\n\n        SankeyElement.prototype.exportVisual = function exportVisual () {\n            return this.visual;\n        };\n\n        SankeyElement.prototype.createElement = function createElement () {\n            var this$1$1 = this;\n\n            var customVisual = this.options.visual;\n            var visual;\n\n            if (customVisual) {\n                visual = customVisual({\n                    sender: this.getSender(),\n                    options: this.visualOptions(),\n                    createVisual: function () { return this$1$1.getElement(); }\n                });\n            } else {\n                visual = this.getElement();\n            }\n\n            return visual;\n        };\n\n        SankeyElement.prototype.getSender = function getSender () {\n            return this;\n        };\n\n        return SankeyElement;\n    }(dataviz.Class));\n\n    var Node = (function (SankeyElement$$1) {\n        function Node () {\n            SankeyElement$$1.apply(this, arguments);\n        }\n\n        if ( SankeyElement$$1 ) Node.__proto__ = SankeyElement$$1;\n        Node.prototype = Object.create( SankeyElement$$1 && SankeyElement$$1.prototype );\n        Node.prototype.constructor = Node;\n\n        Node.prototype.getElement = function getElement () {\n            var options = this.options;\n            var node = options.node;\n            var rect = new geometry.Rect([node.x0, node.y0], [node.x1 - node.x0, node.y1 - node.y0]);\n\n            return drawing.Path.fromRect(rect, this.visualOptions());\n        };\n\n        Node.prototype.visualOptions = function visualOptions () {\n            var options = deepExtend({}, this.options, this.options.node);\n\n            return {\n                fill: {\n                    color: options.color,\n                    opacity: options.opacity\n                },\n                stroke: { width: 0 },\n                className: 'k-sankey-node',\n                role: 'graphics-symbol',\n                ariaRoleDescription: 'Node',\n                ariaLabel: options.node.label.text\n            };\n        };\n\n        return Node;\n    }(SankeyElement));\n\n    var nodeColor = function (node, nodeColors, index) { return node.color || nodeColors[index % nodeColors.length]; };\n\n    var resolveNodeOptions = function (node, options, nodeColors, index) {\n        var nodeOptions = deepExtend({}, options, options.node);\n        return deepExtend({},\n            { color: nodeColor(node, nodeColors, index) },\n            nodeOptions,\n            { node: node },\n            {\n                visual: node.visual,\n                opacity: node.opacity,\n                offset: node.offset,\n                color: node.color\n            }\n        );\n    };\n\n    var ref = drawing.util;\n    var defined = ref.defined;\n\n    var Link = (function (SankeyElement$$1) {\n        function Link () {\n            SankeyElement$$1.apply(this, arguments);\n        }\n\n        if ( SankeyElement$$1 ) Link.__proto__ = SankeyElement$$1;\n        Link.prototype = Object.create( SankeyElement$$1 && SankeyElement$$1.prototype );\n        Link.prototype.constructor = Link;\n\n        Link.prototype.getElement = function getElement () {\n            var link = this.options.link;\n            var x0 = link.x0;\n            var x1 = link.x1;\n            var y0 = link.y0;\n            var y1 = link.y1;\n            var xC = (x0 + x1) / 2;\n\n            return new drawing.Path(this.visualOptions())\n                .moveTo(x0, y0).curveTo([xC, y0], [xC, y1], [x1, y1]);\n        };\n\n        Link.prototype.visualOptions = function visualOptions () {\n            var options = this.options;\n            var link = this.options.link;\n            return {\n                stroke: {\n                    width: options.link.width,\n                    color: link.color || options.color,\n                    opacity: defined(link.opacity) ? link.opacity : options.opacity\n                }\n            };\n        };\n\n        return Link;\n    }(SankeyElement));\n\n    var resolveLinkOptions = function (link, options, sourceNode, targetNode) {\n        var linkOptions = deepExtend({},\n            options,\n            {\n                link: link,\n                opacity: link.opacity,\n                color: link.color,\n                colorType: link.colorType,\n                visual: link.visual,\n                highlight: link.highlight\n            }\n        );\n\n        if (linkOptions.colorType === 'source') {\n            linkOptions.color = sourceNode.options.fill.color;\n        } else if (linkOptions.colorType === 'target') {\n            linkOptions.color = targetNode.options.fill.color;\n        }\n\n        return linkOptions;\n    };\n\n    var INSIDE = 'inside';\n    var BEFORE = 'before';\n    var AFTER = 'after';\n\n    var Label = (function (SankeyElement$$1) {\n        function Label () {\n            SankeyElement$$1.apply(this, arguments);\n        }\n\n        if ( SankeyElement$$1 ) Label.__proto__ = SankeyElement$$1;\n        Label.prototype = Object.create( SankeyElement$$1 && SankeyElement$$1.prototype );\n        Label.prototype.constructor = Label;\n\n        Label.prototype.getElement = function getElement () {\n            var options = deepExtend({}, this.options, this.options.node.label);\n            var node = options.node;\n            var totalWidth = options.totalWidth;\n            var position = options.position;\n            var text = options.text;\n            var offset = options.offset;\n\n            if (!options.visible || !text) {\n                return null;\n            }\n\n            var nodeBox = new Box(node.x0, node.y0, node.x1, node.y1);\n            var visualOptions = this.visualOptions();\n            var textbox = new dataviz.TextBox(text, visualOptions);\n            textbox.reflow(new Box());\n            var textSizeBox = textbox.box;\n\n            var goesOutside = node.x1 + textSizeBox.width() > totalWidth;\n            var textY = nodeBox.center().y - (textSizeBox.height() / 2);\n            var side = position === BEFORE || (position === INSIDE && goesOutside) ? BEFORE : AFTER;\n            var textOrigin = [side === BEFORE ? node.x0 - textSizeBox.width() : node.x1, textY];\n\n            var textRect = new Box(textOrigin[0], textOrigin[1], textOrigin[0] + textSizeBox.width(), textOrigin[1] + textSizeBox.height());\n            textRect.translate(offset.left || 0, offset.top || 0);\n            textbox.reflow(textRect);\n\n            textbox.renderVisual();\n\n            return textbox.visual;\n        };\n\n        Label.prototype.visualOptions = function visualOptions () {\n            var options = deepExtend({}, this.options, this.options.node.label);\n            return {\n                color: options.color,\n                font: options.font,\n                border: options.border,\n                margin: options.margin,\n                padding: options.padding,\n                align: options.align,\n                paintOrder: options.paintOrder,\n                stroke: options.stroke,\n            };\n        };\n\n        return Label;\n    }(SankeyElement));\n\n    setDefaultOptions(Label, {\n        position: INSIDE, // inside, before, after\n    });\n\n    var resolveLabelOptions = function (node, options, totalWidth) { return deepExtend({},\n        options,\n        {\n            node: node,\n            totalWidth: totalWidth,\n            visual: node.label.visual,\n            visible: node.label.visible,\n            margin: node.label.margin,\n            padding: node.label.padding,\n            border: node.label.border,\n            align: node.label.align,\n            offset: node.label.offset\n        }\n    ); };\n\n    var Title$1 = (function (SankeyElement$$1) {\n        function Title$$1 () {\n            SankeyElement$$1.apply(this, arguments);\n        }\n\n        if ( SankeyElement$$1 ) Title$$1.__proto__ = SankeyElement$$1;\n        Title$$1.prototype = Object.create( SankeyElement$$1 && SankeyElement$$1.prototype );\n        Title$$1.prototype.constructor = Title$$1;\n\n        Title$$1.prototype.getElement = function getElement () {\n            var options = this.options;\n            var drawingRect = options.drawingRect;\n            var text = options.text;\n\n            if (options.visible === false || !text) {\n                return null;\n            }\n\n            var title = dataviz.Title.buildTitle(text, options);\n\n            title.reflow(drawingRect);\n\n            title.renderVisual();\n            return title.visual;\n        };\n\n        Title$$1.prototype.createElement = function createElement () {\n            return this.getElement();\n        };\n\n        return Title$$1;\n    }(SankeyElement));\n\n    setDefaultOptions(Title$1, {\n        align: constants.CENTER, // 'left', 'right', 'center'\n        border: {\n            width: 0\n        },\n        margin: dataviz.getSpacing(5),\n        padding: dataviz.getSpacing(5)\n    });\n\n    var AREA = \"area\";\n\n    var sortData = function (a, b) {\n        if (a.node.x0 - b.node.x0 !== 0) {\n            return a.node.x0 - b.node.x0;\n        }\n        return a.node.y0 - b.node.y0;\n    };\n\n    var Legend = (function (SankeyElement$$1) {\n        function Legend () {\n            SankeyElement$$1.apply(this, arguments);\n        }\n\n        if ( SankeyElement$$1 ) Legend.__proto__ = SankeyElement$$1;\n        Legend.prototype = Object.create( SankeyElement$$1 && SankeyElement$$1.prototype );\n        Legend.prototype.constructor = Legend;\n\n        Legend.prototype.getElement = function getElement () {\n            var options = this.options;\n            var drawingRect = options.drawingRect;\n            var nodes = options.nodes; if (nodes === void 0) { nodes = []; }\n            var item = options.item;\n\n            if (options.visible === false || !nodes.length) {\n                return null;\n            }\n\n            var data = nodes.map(function (node) { return ({\n                text: (node.label && node.label.text) || '',\n                area: {\n                    background: item.areaBackground !== undefined ? item.areaBackground : node.color,\n                    opacity: item.areaOpacity !== undefined ? item.areaOpacity : node.opacity\n                },\n                node: node,\n            }); });\n\n            data.sort(sortData);\n\n            var legend = new ChartLegend($.extend({}, options, {data: data}));\n            legend.reflow(drawingRect);\n\n            legend.renderVisual();\n            return legend.visual;\n        };\n\n        Legend.prototype.createElement = function createElement () {\n            return this.getElement();\n        };\n\n        return Legend;\n    }(SankeyElement));\n\n    setDefaultOptions(Legend, {\n        markers: { visible: false },\n        item: {\n            type: AREA,\n            cursor: constants.POINTER,\n            opacity: 1\n        },\n        position: constants.BOTTOM,\n        align: constants.CENTER,\n        border: {\n            width: 0\n        }\n    });\n\n    var LINK = 'link';\n    var NODE = 'node';\n\n    var Sankey = (function (Observable$$1) {\n        function Sankey(element, options, theme) {\n            Observable$$1.call(this);\n\n            this._initTheme(theme);\n            this._setOptions(options);\n            this._initElement(element);\n            this._initSurface();\n\n            if (options && options.data) {\n                this._redraw();\n                this._initResizeObserver();\n            }\n        }\n\n        if ( Observable$$1 ) Sankey.__proto__ = Observable$$1;\n        Sankey.prototype = Object.create( Observable$$1 && Observable$$1.prototype );\n        Sankey.prototype.constructor = Sankey;\n\n        Sankey.prototype.destroy = function destroy () {\n            this.unbind();\n            this._destroySurface();\n            this._destroyResizeObserver();\n        };\n\n        Sankey.prototype._initElement = function _initElement (element) {\n            this.element = element;\n            dataviz.addClass(element, [ \"k-chart\", \"k-sankey\" ]);\n            element.setAttribute('role', 'graphics-document');\n            element.tabIndex = element.getAttribute(\"tabindex\") || 0;\n\n            var ref = this.options;\n            var title = ref.title;\n\n            if (title.text) {\n                element.setAttribute('aria-label', title.text);\n            }\n\n            if (title.description) {\n                element.setAttribute(\"aria-roledescription\", title.description);\n            }\n        };\n\n        Sankey.prototype._initSurface = function _initSurface () {\n            if (!this.surface) {\n                this._destroySurface();\n                this._initSurfaceElement();\n                this.surface = this._createSurface();\n            }\n        };\n\n        Sankey.prototype._initResizeObserver = function _initResizeObserver () {\n            var this$1$1 = this;\n\n            var observer = new ResizeObserver(function (entries) {\n                entries.forEach(function (entry) {\n                    var ref = entry.contentRect;\n                    var width = ref.width;\n                    var height = ref.height;\n                    if (entry.target !== this$1$1.element ||\n                        (this$1$1.size && this$1$1.size.width === width && this$1$1.size.height === height)) {\n                        return;\n                    }\n                    this$1$1.size = { width: width, height: height };\n                    this$1$1.surface.setSize(this$1$1.size);\n                    this$1$1.resize = true;\n                    this$1$1._redraw();\n                });\n            });\n            this._resizeObserver = observer;\n            observer.observe(this.element);\n        };\n\n        Sankey.prototype._createSurface = function _createSurface () {\n            return drawing.Surface.create(this.surfaceElement, {\n                mouseenter: this._mouseenter.bind(this),\n                mouseleave: this._mouseleave.bind(this),\n                mousemove: this._mousemove.bind(this),\n                click: this._click.bind(this)\n            });\n        };\n\n        Sankey.prototype._initTheme = function _initTheme (theme) {\n            var currentTheme = theme || this.theme || {};\n            this.theme = currentTheme;\n            this.options = deepExtend({}, currentTheme, this.options);\n        };\n\n        Sankey.prototype.setLinksOpacity = function setLinksOpacity (opacity) {\n            var this$1$1 = this;\n\n            this.linksVisuals.forEach(function (link) {\n                this$1$1.setOpacity(link, opacity, link.linkOptions.opacity);\n            });\n        };\n\n        Sankey.prototype.setLinksInactivityOpacity = function setLinksInactivityOpacity (inactiveOpacity) {\n            var this$1$1 = this;\n\n            this.linksVisuals.forEach(function (link) {\n                this$1$1.setOpacity(link, inactiveOpacity, link.linkOptions.highlight.inactiveOpacity);\n            });\n        };\n\n        Sankey.prototype.setOpacity = function setOpacity (link, opacity, linkValue) {\n            link.options.set('stroke', $.extend({}, link.options.stroke,\n                {opacity: defined(linkValue) ? linkValue : opacity}));\n        };\n\n        Sankey.prototype.trigger = function trigger (name, ev) {\n            var event = $.extend({}, ev,\n                {type: name,\n                targetType: ev.element.type,\n                dataItem: ev.element.dataItem});\n\n            return Observable$$1.prototype.trigger.call(this, name, event);\n        };\n\n        Sankey.prototype._mouseenter = function _mouseenter (ev) {\n            var element = ev.element;\n            var isLink = element.type === LINK;\n            var isNode = element.type === NODE;\n            var isLegendItem = Boolean(element.chartElement && element.chartElement.options.node);\n\n            if ((isLink && this.trigger('linkEnter', ev)) ||\n                (isNode && this.trigger('nodeEnter', ev))) {\n                return;\n            }\n\n            var ref = this.options.links;\n            var highlight = ref.highlight;\n            if (isLink) {\n                this.setLinksInactivityOpacity(highlight.inactiveOpacity);\n                this.setOpacity(element, highlight.opacity, element.linkOptions.highlight.opacity);\n            } else if (isNode) {\n                this.highlightLinks(element, highlight);\n            } else if (isLegendItem) {\n                var nodeVisual = this.nodesVisuals.get(element.chartElement.options.node.id);\n                this.highlightLinks(nodeVisual, highlight);\n            }\n        };\n\n        Sankey.prototype._mouseleave = function _mouseleave (ev) {\n            var this$1$1 = this;\n\n            var element = ev.element;\n            var isLink = element.type === LINK;\n            var isNode = element.type === NODE;\n            var isLegendItem = Boolean(element.chartElement && element.chartElement.options.node);\n            var target = ev.originalEvent.relatedTarget;\n\n            if (isLink && target && target.nodeName === 'text') {\n                return;\n            }\n\n            if (isLink || isNode) {\n                if (this.tooltipTimeOut) {\n                    clearTimeout(this.tooltipTimeOut);\n                    this.tooltipTimeOut = null;\n                }\n                this.tooltipShown = false;\n                this.trigger('tooltipHide', ev);\n            }\n\n            if ((isLink && this.trigger('linkLeave', ev)) ||\n                (isNode && this.trigger('nodeLeave', ev))) {\n                return;\n            }\n\n            if (isLink || isNode || isLegendItem) {\n                this.linksVisuals.forEach(function (link) {\n                    this$1$1.setOpacity(link, this$1$1.options.links.opacity, link.linkOptions.opacity);\n                });\n            }\n        };\n\n        Sankey.prototype._mousemove = function _mousemove (ev) {\n            var this$1$1 = this;\n\n            var ref = this.options.tooltip;\n            var followPointer = ref.followPointer;\n            var delay = ref.delay;\n            var element = ev.element;\n            var tooltipElType = element.type;\n\n            if ((tooltipElType !== LINK && tooltipElType !== NODE) || (this.tooltipShown && !followPointer)) {\n                return;\n            }\n\n            var mouseEvent = ev.originalEvent;\n            var rect = this.element.getBoundingClientRect();\n            var isLeft = mouseEvent.clientX - rect.left < rect.width / 2;\n            var isTop = mouseEvent.clientY - rect.top < rect.height / 2;\n\n            ev.tooltipData = {\n                popupOffset: {\n                    left: mouseEvent.pageX,\n                    top: mouseEvent.pageY\n                },\n                popupAlign: {\n                    horizontal: isLeft ? 'left' : 'right',\n                    vertical: isTop ? 'top' : 'bottom'\n                }\n            };\n\n            if (tooltipElType === NODE) {\n                var ref$1 = element.dataItem;\n                var sourceLinks = ref$1.sourceLinks;\n                var targetLinks = ref$1.targetLinks;\n                var links = targetLinks.length ? targetLinks : sourceLinks;\n                ev.nodeValue = links.reduce(function (acc, link) { return acc + link.value; }, 0);\n            }\n\n            if (this.tooltipTimeOut) {\n                clearTimeout(this.tooltipTimeOut);\n                this.tooltipTimeOut = null;\n            }\n\n            var nextDelay = followPointer && this.tooltipShown ? 0 : delay;\n\n            this.tooltipTimeOut = setTimeout(function () {\n                this$1$1.trigger('tooltipShow', ev);\n                this$1$1.tooltipShown = true;\n                this$1$1.tooltipTimeOut = null;\n            }, nextDelay);\n        };\n\n        Sankey.prototype._click = function _click (ev) {\n            var element = ev.element;\n            var isLink = element.type === LINK;\n            var isNode = element.type === NODE;\n\n            if (isNode) {\n                this.trigger('nodeClick', ev);\n            } else if (isLink) {\n                this.trigger('linkClick', ev);\n            }\n        };\n\n        Sankey.prototype.highlightLinks = function highlightLinks (node, highlight) {\n            var this$1$1 = this;\n\n            if (node) {\n                this.setLinksInactivityOpacity(highlight.inactiveOpacity);\n                node.links.forEach(function (link) {\n                    this$1$1.setOpacity(link, highlight.opacity, link.linkOptions.highlight.opacity);\n                });\n            }\n        };\n\n        Sankey.prototype._destroySurface = function _destroySurface () {\n            if (this.surface) {\n                this.surface.destroy();\n                this.surface = null;\n                this._destroySurfaceElement();\n            }\n        };\n\n        Sankey.prototype._destroyResizeObserver = function _destroyResizeObserver () {\n            if (this._resizeObserver) {\n                this._resizeObserver.disconnect();\n                this._resizeObserver = null;\n            }\n        };\n\n        Sankey.prototype._initSurfaceElement = function _initSurfaceElement () {\n            if (!this.surfaceElement) {\n                this.surfaceElement = document.createElement('div');\n                this.element.appendChild(this.surfaceElement);\n            }\n        };\n\n        Sankey.prototype._destroySurfaceElement = function _destroySurfaceElement () {\n            if (this.surfaceElement && this.surfaceElement.parentNode) {\n                this.surfaceElement.parentNode.removeChild(this.surfaceElement);\n                this.surfaceElement = null;\n            }\n        };\n\n        Sankey.prototype.setOptions = function setOptions (options, theme) {\n            this._setOptions(options);\n            this._initTheme(theme);\n            this._initSurface();\n            this._redraw();\n        };\n\n        Sankey.prototype._redraw = function _redraw () {\n            this.surface.clear();\n\n            var ref = this._getSize();\n            var width = ref.width;\n            var height = ref.height;\n            this.size = { width: width, height: height };\n            this.surface.setSize(this.size);\n\n            this.createVisual();\n\n            this.surface.draw(this.visual);\n        };\n\n        Sankey.prototype._getSize = function _getSize () {\n            return this.element.getBoundingClientRect();\n        };\n\n        Sankey.prototype.createVisual = function createVisual () {\n            this.visual = this._render();\n        };\n\n        Sankey.prototype.titleBox = function titleBox (title, drawingRect) {\n            if (!title || title.visible === false || !title.text) {\n                return null;\n            }\n\n            var titleElement = new Title$1($.extend({}, {drawingRect: drawingRect}, title));\n            var titleVisual = titleElement.exportVisual();\n            return titleVisual.chartElement.box;\n        };\n\n        Sankey.prototype.legendBox = function legendBox (options, nodes, drawingRect) {\n            if (!options || options.visible === false) {\n                return null;\n            }\n\n            var legend = new Legend($.extend({}, {nodes: nodes}, options, {drawingRect: drawingRect}));\n            var legendVisual = legend.exportVisual();\n\n            return legendVisual.chartElement.box;\n        };\n\n        Sankey.prototype.calculateSankey = function calculateSankey$1 (calcOptions, sankeyOptions) {\n            var title = sankeyOptions.title;\n            var legend = sankeyOptions.legend;\n            var data = sankeyOptions.data;\n            var nodes = sankeyOptions.nodes;\n            var labels = sankeyOptions.labels;\n            var nodeColors = sankeyOptions.nodeColors;\n            var disableAutoLayout = sankeyOptions.disableAutoLayout;\n            var autoLayout = !disableAutoLayout;\n\n            var sankeyBox = new Box(0, 0, calcOptions.width, calcOptions.height);\n            var titleBox = this.titleBox(title, sankeyBox);\n\n            var legendArea = sankeyBox.clone();\n\n            if (titleBox) {\n                var titleHeight = titleBox.height();\n                if (title.position === constants.TOP) {\n                    sankeyBox.unpad({ top: titleHeight });\n                    legendArea = new Box(0, titleHeight, calcOptions.width, calcOptions.height);\n                } else {\n                    sankeyBox.shrink(0, titleHeight);\n                    legendArea = new Box(0, 0, calcOptions.width, calcOptions.height - titleHeight);\n                }\n            }\n\n            var legendBox = this.legendBox(legend, data.nodes, legendArea);\n            var legendPosition = (legend && legend.position) || Legend.prototype.options.position;\n\n            if (legendBox) {\n                if (legendPosition === constants.LEFT) {\n                    sankeyBox.unpad({ left: legendBox.width() });\n                }\n\n                if (legendPosition === constants.RIGHT) {\n                    sankeyBox.shrink(legendBox.width(), 0);\n                }\n\n                if (legendPosition === constants.TOP) {\n                    sankeyBox.unpad({ top: legendBox.height() });\n                }\n\n                if (legendPosition === constants.BOTTOM) {\n                    sankeyBox.shrink(0, legendBox.height());\n                }\n            }\n\n            var ref = calculateSankey($.extend({}, calcOptions, {offsetX: 0, offsetY: 0, width: sankeyBox.width(), height: sankeyBox.height()}));\n            var calculatedNodes = ref.nodes;\n            var circularLinks = ref.circularLinks;\n            if (circularLinks) {\n                console.warn('Circular links detected. Kendo Sankey diagram does not support circular links.');\n                return { sankey: { nodes: [], links: [], circularLinks: circularLinks }, legendBox: legendBox, titleBox: titleBox };\n            }\n\n            var box = new Box();\n\n            calculatedNodes.forEach(function (nodeEl, i) {\n                var nodeOps = resolveNodeOptions(nodeEl, nodes, nodeColors, i);\n                var nodeInstance = new Node(nodeOps);\n                box.wrap(dataviz.rectToBox(nodeInstance.exportVisual().rawBBox()));\n\n                var labelInstance = new Label(resolveLabelOptions(nodeEl, labels, sankeyBox.width()));\n                var labelVisual = labelInstance.exportVisual();\n                if (labelVisual) {\n                    box.wrap(dataviz.rectToBox(labelVisual.rawBBox()));\n                }\n            });\n\n            var offsetX = sankeyBox.x1;\n            var offsetY = sankeyBox.y1;\n\n            var width = sankeyBox.width() + offsetX;\n            var height = sankeyBox.height() + offsetY;\n\n            width -= box.x2 > sankeyBox.width() ? box.x2 - sankeyBox.width() : 0;\n            height -= box.y2 > sankeyBox.height() ? box.y2 - sankeyBox.height() : 0;\n\n            offsetX += box.x1 < 0 ? -box.x1 : 0;\n            offsetY += box.y1 < 0 ? -box.y1 : 0;\n\n            if (autoLayout === false) {\n                return {\n                    sankey: calculateSankey($.extend({}, calcOptions, {offsetX: offsetX, offsetY: offsetY, width: width, height: height, autoLayout: false})),\n                    legendBox: legendBox,\n                    titleBox: titleBox\n                };\n            }\n\n            if (this.resize && autoLayout && this.permutation) {\n                this.resize = false;\n                return {\n                    sankey: calculateSankey($.extend({}, calcOptions, {offsetX: offsetX, offsetY: offsetY, width: width, height: height}, this.permutation)),\n                    legendBox: legendBox,\n                    titleBox: titleBox\n                };\n            }\n\n            var startColumn = 1;\n            var loops = 2;\n            var columnsLength = calculateSankey($.extend({}, calcOptions, {offsetX: offsetX, offsetY: offsetY, width: width, height: height, autoLayout: false})).columns.length;\n            var results = [];\n\n            var permutation = function (targetColumnIndex, reverse) {\n                var currPerm = calculateSankey($.extend({}, calcOptions, {offsetX: offsetX, offsetY: offsetY, width: width, height: height, loops: loops, targetColumnIndex: targetColumnIndex, reverse: reverse}));\n                var crosses = crossesValue(currPerm.links);\n                results.push({\n                    crosses: crosses,\n                    reverse: reverse,\n                    targetColumnIndex: targetColumnIndex\n                });\n                return crosses === 0;\n            };\n\n            for (var index = startColumn; index <= columnsLength - 1; index++) {\n                if (permutation(index, false) || permutation(index, true)) {\n                    break;\n                }\n            }\n\n            var minCrosses = Math.min.apply(null, results.map(function (r) { return r.crosses; }));\n            var bestResult = results.find(function (r) { return r.crosses === minCrosses; });\n            this.permutation = { targetColumnIndex: bestResult.targetColumnIndex, reverse: bestResult.reverse };\n            var result = calculateSankey($.extend({}, calcOptions, {offsetX: offsetX, offsetY: offsetY, width: width, height: height}, this.permutation));\n\n            return {\n                sankey: result,\n                legendBox: legendBox,\n                titleBox: titleBox\n            };\n        };\n\n        Sankey.prototype._render = function _render (options, context) {\n            var sankeyOptions = options || this.options;\n            var sankeyContext = context || this;\n\n            var data = sankeyOptions.data;\n            var labelOptions = sankeyOptions.labels;\n            var nodesOptions = sankeyOptions.nodes;\n            var linkOptions = sankeyOptions.links;\n            var nodeColors = sankeyOptions.nodeColors;\n            var title = sankeyOptions.title;\n            var legend = sankeyOptions.legend;\n            var ref = sankeyContext.size;\n            var width = ref.width;\n            var height = ref.height;\n\n            var calcOptions = $.extend({}, data, {width: width, height: height, nodesOptions: nodesOptions, title: title, legend: legend});\n            var ref$1 = this.calculateSankey(calcOptions, sankeyOptions);\n            var sankey = ref$1.sankey;\n            var titleBox = ref$1.titleBox;\n            var legendBox = ref$1.legendBox;\n            var nodes = sankey.nodes;\n            var links = sankey.links;\n\n            var visual = new drawing.Group({\n                clip: drawing.Path.fromRect(new geometry.Rect([0, 0], [width, height]))\n            });\n\n            if (titleBox) {\n                var titleElement = new Title$1($.extend({}, title, {drawingRect: titleBox}));\n                var titleVisual = titleElement.exportVisual();\n                visual.append(titleVisual);\n            }\n\n            if (sankey.circularLinks) {\n                return visual;\n            }\n\n            var visualNodes = new Map();\n            sankeyContext.nodesVisuals = visualNodes;\n\n            nodes.forEach(function (node, i) {\n                var nodeOps = resolveNodeOptions(node, nodesOptions, nodeColors, i);\n\n                var nodeInstance = new Node(nodeOps);\n                var nodeVisual = nodeInstance.exportVisual();\n                nodeVisual.links = [];\n                nodeVisual.type = NODE;\n\n                node.color = nodeOps.color;\n                node.opacity = nodeOps.opacity;\n\n                nodeVisual.dataItem = $.extend({}, data.nodes[i],\n                    {color: nodeOps.color,\n                    opacity: nodeOps.opacity,\n                    sourceLinks: node.sourceLinks.map(function (link) { return ({ sourceId: link.sourceId, targetId: link.targetId, value: link.value }); }),\n                    targetLinks: node.targetLinks.map(function (link) { return ({ sourceId: link.sourceId, targetId: link.targetId, value: link.value }); })});\n                visualNodes.set(node.id, nodeVisual);\n\n                visual.append(nodeVisual);\n            });\n\n            var sortedLinks = links.slice().sort(function (a, b) { return b.value - a.value; });\n\n            var linksVisuals = [];\n            sankeyContext.linksVisuals = linksVisuals;\n\n            sortedLinks.forEach(function (link) {\n                var source = link.source;\n                var target = link.target;\n                var sourceNode = visualNodes.get(source.id);\n                var targetNode = visualNodes.get(target.id);\n                var linkOps = resolveLinkOptions(link, linkOptions, sourceNode, targetNode);\n                var linkInstance = new Link(linkOps);\n                var linkVisual = linkInstance.exportVisual();\n\n                linkVisual.type = LINK;\n                linkVisual.dataItem = {\n                    source: $.extend({}, sourceNode.dataItem),\n                    target: $.extend({}, targetNode.dataItem),\n                    value: link.value\n                };\n                linkVisual.linkOptions = linkOps;\n                linksVisuals.push(linkVisual);\n\n                sourceNode.links.push(linkVisual);\n                targetNode.links.push(linkVisual);\n\n                visual.append(linkVisual);\n            });\n\n            var diagramWidth = nodes.reduce(function (acc, node) { return Math.max(acc, node.x1); }, 0);\n            nodes.forEach(function (node) {\n                var textOps = resolveLabelOptions(node, labelOptions, diagramWidth);\n                var labelInstance = new Label(textOps);\n                var labelVisual = labelInstance.exportVisual();\n\n                if (labelVisual) {\n                    visual.append(labelVisual);\n                }\n            });\n\n            if (legendBox) {\n                var legendElement = new Legend($.extend({}, legend, {drawingRect: legendBox, nodes: nodes}));\n                var legendVisual = legendElement.exportVisual();\n                visual.append(legendVisual);\n            }\n\n            return visual;\n        };\n\n        Sankey.prototype.exportVisual = function exportVisual (exportOptions) {\n            var options = (exportOptions && exportOptions.options) ?\n                deepExtend({}, this.options, exportOptions.options) : this.options;\n\n            var context = {\n                size: {\n                    width: defined(exportOptions && exportOptions.width) ? exportOptions.width : this.size.width,\n                    height: defined(exportOptions && exportOptions.height) ? exportOptions.height : this.size.height\n                }\n            };\n\n            return this._render(options, context);\n        };\n\n        Sankey.prototype._setOptions = function _setOptions (options) {\n            this.options = deepExtend({}, this.options, options);\n        };\n\n        return Sankey;\n    }(dataviz.Observable));\n\n    setDefaultOptions(Sankey, {\n        title: {\n            position: constants.TOP, // 'top', 'bottom'\n        },\n        labels: {\n            visible: true,\n            margin: {\n                left: 8,\n                right: 8\n            },\n            padding: 0,\n            border: {\n                width: 0\n            },\n            paintOrder: 'stroke',\n            stroke: {\n                lineJoin: \"round\",\n                width: 1\n            },\n            align: constants.LEFT,\n            offset: { left: 0, top: 0 }\n        },\n        nodes: {\n            width: 24,\n            padding: 16,\n            opacity: 1,\n            align: 'stretch', // 'left', 'right', 'stretch'\n            offset: { left: 0, top: 0 }\n        },\n        links: {\n            colorType: 'static', // 'source', 'target', 'static'\n            opacity: 0.4,\n            highlight: {\n                opacity: 0.8,\n                inactiveOpacity: 0.2\n            }\n        },\n        tooltip: {\n            followPointer: false,\n            delay: 200\n        }\n    });\n\n    var createSankeyData = function (data, dimensions, measure) {\n        var nodes = new Set();\n        var links = new Map();\n        var linksMap = new Map();\n\n        data.forEach(function (row) {\n            dimensions.forEach(function (dimension) {\n                nodes.add(dimension.value(row));\n            });\n\n            for (var i = 0; i < dimensions.length - 1; i++) {\n                var source = dimensions[i].value(row);\n                var target = dimensions[i + 1].value(row);\n                var key = source + \"_\" + target;\n                var value = measure.value(row);\n                var existingValue = links.get(key);\n\n                if (existingValue !== undefined) {\n                    links.set(key, existingValue + value);\n                } else {\n                    links.set(key, value);\n                    linksMap.set(key, { source: source, target: target });\n                }\n            }\n        });\n\n        var nodesId = new Map();\n        var nodesArray = Array.from(nodes).map(function (node, index) {\n            nodesId.set(node, index);\n            return { id: index, label: { text: String(node) } };\n        });\n\n        var linksArray = Array.from(links).map(function (ref) {\n            var key = ref[0];\n            var value = ref[1];\n\n            var ref$1 = linksMap.get(key);\n            var source = ref$1.source;\n            var target = ref$1.target;\n            return {\n                sourceId: nodesId.get(source),\n                targetId: nodesId.get(target),\n                value: value\n            };\n        });\n\n        return { nodes: nodesArray, links: linksArray };\n    };\n\n    kendo.deepExtend(kendo.dataviz, {\n        Sankey: Sankey,\n        createSankeyData: createSankeyData\n    });\n\n    })(window.kendo.jQuery);\n\n    (function($) {\n        var kendo = window.kendo;\n        var Widget = kendo.ui.Widget;\n\n        var encode = kendo.htmlEncode;\n        var styleAttr = '__style';\n        var tooltipContentWrapStyle = `${styleAttr}=\"display: flex; align-items: center;\"`;\n        var space = 3;\n        var TootipText = (text) => `<span ${styleAttr}=\"margin: 0 ${space}px\">${text}</span>`;\n        var Square = (color) => `<div ${styleAttr}=\"width: 15px; height: 15px; background-color: ${color}; display: inline-flex; margin-left: ${space}px\"></div>`;\n        var TooltipTemplates = {\n            node: function({ dataItem, value }) {\n                const { color, label } = dataItem;\n                return (\n                    `<div ${tooltipContentWrapStyle}>\n                    ${Square(color)}\n                    ${TootipText(encode(label.text))}\n                    ${TootipText(value)}\n                </div>`\n                );\n            },\n            link: function({ dataItem, value }) {\n                const { source, target } = dataItem;\n                return (\n                    `<div ${tooltipContentWrapStyle}>\n                    ${Square(source.color)}\n                    ${TootipText(encode(source.label.text))}\n                    ${TootipText(kendo.ui.icon({ icon: \"arrow-right\" }))}\n                    ${Square(target.color)}\n                    ${TootipText(encode(target.label.text))}\n                    ${TootipText(value)}\n                </div>`\n                );\n            }\n        };\n\n        var SankeyTooltip = Widget.extend({\n            init: function(element, options) {\n                this.options = options;\n\n                Widget.fn.init.call(this, element);\n\n                this.element.addClass('k-tooltip k-chart-tooltip k-chart-shared-tooltip')\n                    .append('<div class=\"k-tooltip-content\"></div>');\n            },\n\n            size: function() {\n                return {\n                    width: this.element.outerWidth(),\n                    height: this.element.outerHeight()\n                };\n            },\n\n            setContent: function(content) {\n                this.element.find('.k-tooltip-content').html(content);\n                this.element.find(`[${styleAttr}]`).each((i, el) => {\n                    el.getAttribute(styleAttr)\n                        .split(';')\n                        .filter(s => s !== '')\n                        .forEach(s => {\n                            const parts = s.split(':');\n                            el.style[parts[0].trim()] = parts[1].trim();\n                        });\n                    el.removeAttribute(styleAttr);\n                });\n            },\n\n            setPosition: function(popupAlign, popupOffset, offsetOption) {\n                const size = this.size();\n                const offset = { ...popupOffset };\n\n                offset.left += (popupAlign.horizontal === 'left') ? offsetOption : (-1 * offsetOption);\n                if (popupAlign.horizontal === 'right') {\n                    offset.left -= size.width;\n                }\n\n                if (popupAlign.vertical === 'bottom') {\n                    offset.top -= size.height + offsetOption;\n                } else {\n                    offset.top += offsetOption;\n                }\n\n                this.element.css(offset);\n            },\n\n            show: function() {\n                this.element.show();\n            },\n\n            hide: function() {\n                this.element.hide();\n            },\n\n            destroy: function() {\n                this.element.remove();\n            }\n        });\n\n        kendo.deepExtend(kendo.dataviz, {\n            SankeyTooltip: {\n                Tooltip: SankeyTooltip,\n                ContentTemplates: TooltipTemplates\n            }\n        });\n    })(window.kendo.jQuery);\n\n    (function($) {\n        var kendo = window.kendo;\n        var template = kendo.template;\n        var Widget = kendo.ui.Widget;\n        var dataviz = kendo.dataviz;\n        var defined = dataviz.defined;\n        var encode = kendo.htmlEncode;\n        var KendoSankey = dataviz.Sankey;\n        var NODE_CLICK = \"nodeClick\";\n        var LINK_CLICK = \"linkClick\";\n        var NODE_ENTER = \"nodeEnter\";\n        var NODE_LEAVE = \"nodeLeave\";\n        var LINK_ENTER = \"linkEnter\";\n        var LINK_LEAVE = \"linkLeave\";\n        var TOOLTIP_SHOW = \"tooltipShow\";\n        var TOOLTIP_HIDE = \"tooltipHide\";\n        var NODE = 'node';\n\n        const { Tooltip, ContentTemplates } = dataviz.SankeyTooltip;\n\n        var Sankey = Widget.extend({\n            init: function(element, userOptions) {\n                kendo.destroy(element);\n                $(element).empty();\n\n                this.options = kendo.deepExtend(this.options, userOptions);\n\n                Widget.fn.init.call(this, element);\n\n                this.wrapper = this.element;\n                this._initSankey();\n\n                this._attachEvents();\n\n                kendo.notify(this, dataviz.ui);\n\n                if (this._showWatermarkOverlay) {\n                    this._showWatermarkOverlay(this.wrapper[0]);\n                }\n            },\n\n            setOptions: function(options) {\n                var currentOptions = this.options;\n\n                this.events.forEach(eventName => {\n                    if (currentOptions[eventName]) {\n                        this.unbind(eventName, currentOptions[eventName]);\n                    }\n                });\n\n                this._instance.setOptions(options);\n\n                this.bind(this.events, this._instance.options);\n            },\n\n            _initSankey: function() {\n                const themeOptions = this._getThemeOptions(this.options);\n                const { seriesColors: nodeColors, axisDefaults, seriesDefaults, legend, title } = themeOptions;\n                const { line: links, labels } = axisDefaults;\n                const strokeColor = seriesDefaults.labels.background;\n\n                this._createSankey(this.options, { nodeColors, links, labels: { ...labels, stroke: { color: strokeColor } }, legend, title });\n                this.options = this._instance.options;\n            },\n\n            _createSankey: function(options, themeOptions) {\n                this._instance = new KendoSankey(this.element[0], options, themeOptions);\n            },\n\n            _getThemeOptions: function(userOptions) {\n                var themeName = (userOptions || {}).theme;\n\n                if (themeName && dataviz.SASS_THEMES.indexOf(themeName.toLowerCase()) !== -1) {\n                    return dataviz.autoTheme().chart;\n                }\n\n                if (defined(themeName)) {\n                    var themes = dataviz.ui.themes || {};\n                    var theme = themes[themeName] || themes[themeName.toLowerCase()] || {};\n                    return theme.chart || {};\n                }\n            },\n\n            _attachEvents: function() {\n                this.events.forEach(eventName => {\n                    this._instance.bind(eventName, event => {\n                        if (this._events[eventName]) {\n                            this._events[eventName].forEach(handler => handler.call(undefined, event));\n                        }\n                    });\n                });\n\n                this._instance.bind(TOOLTIP_SHOW, this.tooltipShow.bind(this));\n                this._instance.bind(TOOLTIP_HIDE, this.tooltipHide.bind(this));\n            },\n\n            tooltipShow: function(e) {\n                if (!this._tooltip) {\n                    const doc = this.element[0].ownerDocument;\n                    this._tooltip = new Tooltip(doc.createElement('div'), {});\n                    const { appendTo = doc.body } = this.options.tooltip;\n                    this._tooltip.element.appendTo($(appendTo));\n                }\n\n                const { nodeTemplate, linkTemplate, offset } = this.options.tooltip;\n                const currentTemplate = template((e.targetType === NODE ? nodeTemplate : linkTemplate) || ContentTemplates[e.targetType]);\n                const value = encode(kendo.format(this.options.messages.tooltipUnits, defined(e.nodeValue) ? e.nodeValue : e.dataItem.value));\n\n                this._tooltip.setContent(currentTemplate({ dataItem: e.dataItem, value }));\n                this._tooltip.setPosition(e.tooltipData.popupAlign, e.tooltipData.popupOffset, offset);\n                this._tooltip.show();\n            },\n\n            tooltipHide: function() {\n                if (this._tooltip) {\n                    this._tooltip.destroy();\n                    this._tooltip = null;\n                }\n            },\n\n            exportVisual: function(exportOptions) {\n                return this._instance.exportVisual(exportOptions);\n            },\n\n            destroy: function() {\n                Widget.fn.destroy.call(this);\n                this.tooltipHide();\n                this._instance.destroy();\n                this._instance = null;\n            },\n\n            events: [\n                NODE_CLICK,\n                LINK_CLICK,\n                NODE_ENTER,\n                NODE_LEAVE,\n                LINK_ENTER,\n                LINK_LEAVE\n            ],\n            options: {\n                name: \"Sankey\",\n                theme: \"default\",\n                tooltip: {\n                    offset: 12\n                },\n                messages: {\n                    tooltipUnits: \"({0} Units)\"\n                }\n            }\n        });\n\n        dataviz.ExportMixin.extend(Sankey.fn);\n\n        if (kendo.PDFMixin) {\n            kendo.PDFMixin.extend(Sankey.fn);\n        }\n\n        dataviz.ui.plugin(Sankey);\n\n        kendo.deepExtend(dataviz, {\n            Sankey\n        });\n\n    })(window.kendo.jQuery);\n\n    let __meta__ = {\n        id: \"dataviz.sankey\",\n        name: \"Sankey\",\n        category: \"dataviz\",\n        description: \"The Sankey widget uses modern browser technologies to render high-quality data visualizations in the browser.\",\n        depends: [ \"data\", \"userevents\", \"drawing\", \"dataviz.core\", \"dataviz.themes\" ],\n        features: [{\n            id: \"dataviz.sankey-pdf-export\",\n            name: \"PDF export\",\n            description: \"Export Sankey as PDF\",\n            depends: [ \"pdf\" ]\n        }]\n    };\n\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}