{"version":3,"sources":["raw-js/kendo.propertygrid.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendopropertygrid","js","this","$","undefined$1","kendo","window","TreeListContextMenu","ui","treelist","ContextMenu","extend","PropertyGridContextMenu","init","element","options","fn","call","defaultItems","separator","name","copy","text","icon","command","softRules","copyName","copyDeclaration","resize","rules","reset","expandItem","collapseItem","propertygrid","jQuery","Class","keys","Command","propertyGrid","CopyCommand","exec","that","target","closest","dataItem","selectedText","getSelection","getRangeAt","toString","navigator","clipboard","writeText","field","value","_objectFromNodes","tabDelimitedValue","JSON","stringify","description","filter","item","join","ResetCommand","dataSource","cancelChanges","trigger","type","model","container","_render","ResizeColumnCommand","_actionButtonsTemplate","apply","cancel","insertButtonIcon","cancelButtonIcon","html","renderButton","themeColor","dialog","form","tableColumnIndex","index","columnIndex","grouped","columnSelector","oldColumnWidth","table","find","outerWidth","dialogOptions","title","visible","resizable","minWidth","totalWidth","width","e","delta","wrapper","data","formData","columnsize","newColumnWidth","columns","children","eq","column","oldWidth","newWidth","close","preventDefault","destroy","component","colCount","length","widths","idx","push","each","col","adjustColWidths","appendTo","document","body","kendoWindow","_createForm","after","on","end","keyCode","ENTER","ESC","center","open","currentColumnWidth","kendoForm","validation","validateOnBlur","validaitonSummary","renderButtons","items","label","editor","editorOptions","min","ToggleItemCommand","expand","collapse","ToggleGroupLayout","removeClass","_refreshLayout","_updateDetails","ToggleDetails","visibleDetails","toggleClass","ExcelExport","saveAsExcel","PDFExport","saveAsPDF","PropertyGridCommand","commands","NS","kendoDom","dom","kendoDomElement","kendoHtmlElement","kendoTextElement","F10","Editable","TreeList","isArray","Array","isPlainObject","CHANGE","EXPAND","COLLAPSE","GROUP_EXPAND","GROUP_COLLAPSE","CARET_ALT_DOWN","GROUPING_ROW","TR","TD","defaultBodyContextMenu","defaultCommands","group","togglable","showText","commandName","attributes","overflow","details","sort","componentOptions","commandOn","dataTextField","dataValueField","class","search","prefixOptions","placeholder","spacer","excel","pdf","isNullorUndefined","isEditable","PropertyGridDataSource","TreeListDataSource","groupedItemsTree","currentChildren","_childrenMap","view","_defaultParentId","Query","toArray","filterGroupedItemsTree","expression","filterExpression","filters","logic","groups","filterItems","filtered","i","hasChildren","childNodes","filteredGroups","forEach","itm","DynamicInCellEditor","createEditable","fields","editable","clearContainer","change","off","empty","removeAttr","attr","PropertyGrid","_processOptions","_processedModel","_processModel","_createDataSource","_wrapper","_detailsBox","_groupable","notify","hasHeader","groupable","contextMenu","sortable","selectable","scrollable","showDetails","size","defaultTools","messages","defaultGroupName","events","defaultEditors","string","date","number","boolean","_groupContentTemplate","groupName","action","_detailsTemplate","_setEditable","editMode","toolbar","_extendColumnOptions","fieldColumn","valueColumn","_processSettings","obj","settings","flatData","_flatten","_setDefaults","Object","entries","map","x","serverGrouping","schema","id","parentId","expanded","appendNested","result","key","nestedKeys","nestedObject","collectionIdx","nestedKey","flattenObject","propType","collection","nested","flattenCollection","isDate","isComplexObject","tempId","parsed","parseDate","_setDefaultEditor","_createIncellEditor","cell","toJSON","parentColumn","fieldRenderer","_cellContent","bind","_createDirtyTemplate","templateSettings","_customTemplateSettings","template","columnTemplate","incellEditing","_isIncellEditable","isValueColumn","dirtyIndicator","dirty","get","dirtyIndicatorTemplate","format","_editableCellContent","bTag","content","_generateGroupRow","groupRowContent","tdElement","className","colSpan","role","uid","_generateDetailsBox","_renderRows","selected","childrenMap","viewChildrenMap","hasFooterTemplate","selectedRow","_selectedRowUid","rows","prepend","_groupedData","groupTr","concat","_trs","editedColumn","editedColumnIndex","aggregates","level","remove","_contentTree","render","_generateRowOptions","pageable","_renderedModelLevel","isAlt","_absoluteIndex","_renderRow","rowOptions","renderer","row","_tds","groupTdElement","splice","editCell","cellIndex","draggable","isColumnEditable","_editCell","css","addClass","_toolbar","toolbarOptions","_processToolbarItems","_verifyItems","kendoToolBar","navigateOnTab","navigatable","_attachToolbarHandlers","append","toolbarWidget","getKendoToolBar","sortElement","_toolbarClick","getKendoDropDownList","_sortItems","some","hasOwnProperty","findIndex","_getCommandType","toLowerCase","Error","imageClass","spriteCssClass","iconClass","menuButtons","buttons","click","origEvent","event","originalEvent","stopPropagation","_commandClick","currentTarget","ev","val","_action","dir","sender","refresh","_initContextMenu","tbodyContextMenu","mainOptions","tbody","states","_buildStates","isResizable","windowHasSelection","rangeCount","isDirty","isNotInEditMode","hasClass","isNotGroupColumn","isExpandable","isCollapsible","args","commandOptions","rootNodes","hashTable","create","node","childNode","guid","_groupableClickHandler","groupRow","is","_groupRowKeyDown","current","handled","focusElement","_setCurrent","_findCurrentCell","LEFT","RIGHT","altKey","_handleGroupRowExpandCollapse","parent","_toggleGroup","_search","input","clearTimeout","_searchTimeOut","setTimeout","searchFields","operator","select","_","detailsTemplate","detailsContainer","_clearDetails","setDataSource","selectItem","toggleItem","toggleGroup","toggleDetails","edit","saveState","saveChanges","resetState","setOptions","currentOptions","getOptions","_events","deepExtend","before","_setEvents","PropertyGridExcelExporter","ExcelExporter","_trimColumns","allColumns","_leafColumns","_prepareColumn","_visibleColumns","widget","hasGroups","hierarchy","hasGroupHeaderColumn","groupHeaderColumnTemplate","collapsible","_recursiveRows","this$1$1","_dataRow","_depth","itmIdx","_buildGroupedDataRows","groupItem","cells","background","color","_buildDataRows","parents","previousItemId","depth","itemLevel","itemId","hasFooter","_hasFooterTemplate","previousLevel","_hierarchyFooterRows","rootAggregate","_hierarchyFooter","_hierarchyRows","_prependHeaderRows","workbook","Deferred","d","fetch","then","_hierarchy","resolve","promise","PropertyGridExcelMixin","proto","proxyURL","filterable","fileName","exporter","allPages","book","ooxml","Workbook","skipCustomHeight","toDataURLAsync","dataURI","saveAs","forceProxy","_restoreExpandedState","prototype","cssProperties","propertyDictionary","registerPrefix","plugin"],"mappings":"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","file":"kendo.propertygrid.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.menu.js'), require('kendo.excel.js'), require('kendo.progressbar.js'), require('kendo.treelist.js'), require('kendo.dialog.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.menu', 'kendo.excel', 'kendo.progressbar', 'kendo.treelist', 'kendo.dialog'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendopropertygrid = global.kendopropertygrid || {}, global.kendopropertygrid.js = factory()));\n})(this, (function () {\n    (function($, undefined$1) {\n        const kendo = window.kendo,\n            ui = kendo.ui,\n            TreeListContextMenu = ui.treelist.ContextMenu,\n            extend = $.extend;\n\n        let PropertyGridContextMenu = TreeListContextMenu.extend({\n            init: function(element, options) {\n                const that = this;\n\n                TreeListContextMenu.fn.init.call(that, element, options);\n            },\n            defaultItems: {\n                \"separator\": { name: \"separator\", separator: true },\n                \"copy\": { name: \"copy\", text: \"Copy\", icon: \"copy\", command: \"CopyCommand\", softRules: \"windowHasSelection\",options: \"copy:selection\" },\n                \"copyName\": { name: \"copyName\", text: \"Copy Name\", icon: \"file-txt\", command: \"CopyCommand\", options: \"copy:name\" },\n                \"copyDeclaration\": { name: \"copyDeclatarion\", text: \"Copy Declaration\", icon: \"file-data\", command: \"CopyCommand\", options: \"copy:declaration\" },\n                \"resize\": { name: \"resize\", text: \"Resize Column\", icon: \"arrows-left-right\", rules: \"isResizable\", command: \"ResizeColumnCommand\",softRules: \"isNotGroupColumn\" },\n                \"reset\": { name: \"reset\", text: \"Reset\", icon: \"arrow-rotate-ccw\", command: \"ResetCommand\", rules: \"isEditable\", softRules: \"isDirty;isNotInEditMode\" },\n                \"expandItem\": { name: \"expandItem\", text: \"Expand Item\", icon: \"folder-open\", softRules: \"isExpandable\", command: \"ToggleItemCommand\", options: \"expand:true\" },\n                \"collapseItem\": { name: \"collapseItem\", text: \"Collapse Item\", icon: \"folder\", softRules: \"isCollapsible\", command: \"ToggleItemCommand\", options: \"expand:false\" }\n            }\n        });\n\n        kendo.ui.propertygrid = kendo.ui.propertygrid || {};\n\n        extend(kendo.ui.propertygrid, {\n            ContextMenu: PropertyGridContextMenu\n        });\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n        let kendo = window.kendo,\n            extend = $.extend,\n            Class = kendo.Class,\n            keys = kendo.keys,\n            COLUMNSIZE = \"#columnsize\";\n\n        let Command = Class.extend({\n            init: function(options) {\n                this.options = options;\n                this.propertyGrid = options.propertyGrid;\n            }\n        });\n\n        let CopyCommand = Command.extend({\n            exec: function() {\n                const that = this,\n                    options = that.options,\n                    propertyGrid = that.propertyGrid,\n                    target = that.options.target.closest(\"tr\"),\n                    dataItem = propertyGrid.dataItem(target);\n                if (options.copy == \"selection\") {\n                    let sel = window.getSelection();\n                    let range = sel.getRangeAt(0);\n                    let selectedText = range.toString();\n\n                    navigator.clipboard.writeText(selectedText);\n                } else if (options.copy == \"name\") {\n                    navigator.clipboard.writeText(dataItem.field);\n                } else if (options.copy == \"declaration\") {\n                    let value = that.propertyGrid._objectFromNodes(dataItem);\n                    let tabDelimitedValue = [dataItem.field, JSON.stringify(value[dataItem.field]), dataItem.description].filter(item => item !== undefined$1).join(\"\\t\");\n                    navigator.clipboard.writeText(tabDelimitedValue);\n                }\n            }\n        });\n\n        let ResetCommand = Command.extend({\n            exec: function() {\n                let that = this,\n                    propertyGrid = that.propertyGrid,\n                    target = that.options.target.closest(\"tr\"),\n                    dataItem = propertyGrid.dataItem(target);\n\n                propertyGrid.dataSource.cancelChanges(dataItem);\n                propertyGrid.trigger(\"cancel\", { type: \"cancel\", model: dataItem, container: that.options.target });\n                propertyGrid._render();\n            }\n        });\n\n        let ResizeColumnCommand = Command.extend({\n            _actionButtonsTemplate: function({ apply, cancel, insertButtonIcon, cancelButtonIcon }) {\n                return '<div class=\"k-actions k-actions-start k-actions-horizontal k-window-buttons\">' +\n                kendo.html.renderButton(`<button class=\"k-dialog-apply\">${apply}</button>`, { themeColor: \"primary\", icon: insertButtonIcon }) +\n                kendo.html.renderButton(`<button class=\"k-dialog-close\">${cancel}</button>`, { icon: cancelButtonIcon }) +\n            '</div>';\n            },\n\n            exec: function() {\n                let that = this, dialog, form,\n                    propertyGrid = that.propertyGrid,\n                    tableColumnIndex = that.options.target.index(),\n                    columnIndex = propertyGrid.grouped ? tableColumnIndex - 1 : tableColumnIndex,\n                    columnSelector = `tr:not(.k-table-group-row):first > td:nth-child(${tableColumnIndex + 1})`,\n                    oldColumnWidth = propertyGrid.table.find(columnSelector).outerWidth(),\n                    dialogOptions = {\n                        title: \"Resize Column\",\n                        visible: false,\n                        resizable: true,\n                        minWidth: 350\n                    },\n                    totalWidth = propertyGrid.table.width();\n\n                    adjustColWidths(that.propertyGrid);\n                    propertyGrid.table.width(totalWidth);\n\n                    function apply(e) {\n                        let delta;\n                        let oldColumnWidth = dialog.wrapper.find(\".k-form\").data(\"kendoForm\").options.formData.columnsize;\n                        let newColumnWidth = dialog.wrapper.find(COLUMNSIZE).data(\"kendoNumericTextBox\").value();\n\n                        if (oldColumnWidth == newColumnWidth) {\n                            close(e);\n                            return;\n                        } else if (oldColumnWidth > newColumnWidth) {\n                            delta = oldColumnWidth - newColumnWidth;\n                            propertyGrid.table.width(totalWidth - delta);\n                        } else {\n                            delta = newColumnWidth - oldColumnWidth;\n                            propertyGrid.table.width(totalWidth + delta);\n                        }\n\n                        propertyGrid.columns[columnIndex].width = newColumnWidth;\n                        propertyGrid.table.children(\"colgroup\").find(\"col\").eq(tableColumnIndex).width(newColumnWidth);\n\n                        propertyGrid.trigger(\"columnResize\", {\n                            column: propertyGrid.columns[columnIndex],\n                            oldWidth: oldColumnWidth,\n                            newWidth: newColumnWidth\n                        });\n\n                        close(e);\n                    }\n\n                    function close(e) {\n                        e.preventDefault();\n                        form.destroy();\n                        dialog.destroy();\n                    }\n\n                    function keyDown(e) {\n                        if (e.keyCode == keys.ENTER) {\n                            apply(e);\n                        } else if (e.keyCode == keys.ESC) {\n                            close(e);\n                        }\n                    }\n\n                    function adjustColWidths(component) {\n                        const columnSelector = (columnIndex) => `tr:not(.k-table-group-row):first > td:nth-child(${columnIndex + 1})`,\n                        colCount = component.table.children(\"colgroup\").find(\"col\").length;\n                        let widths = [];\n                        for (let idx = 0; idx < colCount; idx++) {\n                            widths.push(component.table.find(columnSelector(idx)).outerWidth());\n                        }\n\n                        component.table.children(\"colgroup\").find(\"col\").each((idx,col) => {\n                            $(col).width(widths[idx]);\n                        });\n                    }\n\n                    dialogOptions.close = close;\n\n                    dialog = $(\"<div/>\").appendTo(document.body).kendoWindow(dialogOptions).data(\"kendoWindow\");\n                    form = that._createForm(dialog, oldColumnWidth);\n                    dialog.element.after($(that._actionButtonsTemplate({ apply: \"Apply\", cancel: \"Cancel\" , insertButtonIcon: \"check\", cancelButtonIcon: \"cancel-outline\" })));\n\n                    dialog.wrapper\n                        .find(\".k-dialog-apply\").on(\"click\", apply).end()\n                        .find(\".k-dialog-close\").on(\"click\", close).end()\n                        .find(\".k-form-field input\").on(\"keydown\", keyDown).end();\n\n                        dialog.center().open();\n            },\n\n            _createForm: function(dialog, currentColumnWidth) {\n                let formElement = $(\"<div/>\").appendTo(dialog.element);\n\n                return formElement.kendoForm({\n                    formData: {\n                        columnsize: currentColumnWidth\n                    },\n                    validation: {\n                        validateOnBlur: false,\n                        validaitonSummary: false\n                    },\n                    renderButtons: false,\n                    items: [\n                        {\n                            field: \"columnsize\",\n                            label: \"Set column Size\",\n                            editor: \"NumericTextBox\",\n                            editorOptions: {\n                                min: 0\n                            }\n                        }\n                    ]\n                }).data(\"kendoForm\");\n            }\n        });\n\n        let ToggleItemCommand = Command.extend({\n            exec: function() {\n                let that = this,\n                propertyGrid = that.propertyGrid,\n                    target = that.options.target,\n                    options = that.options,\n                    expand = options.expand === 'true';\n\n                    if (expand) {\n                        propertyGrid.expand(target);\n                    } else {\n                        propertyGrid.collapse(target);\n                    }\n            }\n        });\n\n        let ToggleGroupLayout = Command.extend({\n            exec: function() {\n                let that = this,\n                propertyGrid = that.propertyGrid,\n                grouped = propertyGrid.grouped;\n\n                propertyGrid.grouped = !grouped;\n                if ( !propertyGrid.grouped) {\n                    propertyGrid.wrapper.find(\"tr:not(.k-details-box)\").removeClass(\"k-hidden\");\n                }\n\n                propertyGrid._refreshLayout();\n                propertyGrid._updateDetails();\n            }\n        });\n\n        let ToggleDetails = Command.extend({\n            exec: function() {\n                let that = this,\n                propertyGrid = that.propertyGrid,\n                visible = propertyGrid.visibleDetails;\n\n                propertyGrid.visibleDetails = !visible;\n                if ( !propertyGrid.visible) {\n                    propertyGrid.table.find(\"tr.k-details-box\").toggleClass(\"k-hidden\");\n                }\n            }\n        });\n\n        let ExcelExport = Command.extend({\n            exec: function() {\n                let that = this,\n                propertyGrid = that.propertyGrid;\n\n                propertyGrid.saveAsExcel();\n            }\n        });\n\n        let PDFExport = Command.extend({\n            exec: function() {\n                let that = this,\n                propertyGrid = that.propertyGrid;\n\n                propertyGrid.saveAsPDF();\n            }\n        });\n\n        kendo.ui.propertygrid = kendo.ui.propertygrid || {};\n\n        extend(kendo.ui.propertygrid, {\n            PropertyGridCommand: Command,\n            commands: {\n                ResetCommand: ResetCommand,\n                CopyCommand: CopyCommand,\n                ResizeColumnCommand: ResizeColumnCommand,\n                ToggleItemCommand: ToggleItemCommand,\n                ToggleGroupLayout: ToggleGroupLayout,\n                ToggleDetails: ToggleDetails,\n                ExcelExport: ExcelExport,\n                PDFExport: PDFExport,\n            }\n        });\n    })(window.kendo.jQuery);\n\n    let __meta__ = {\n        id: \"propertygrid\",\n        name: \"PropertyGrid\",\n        category: \"web\",\n        description: \"The PropertyGrid widget displays objects as hierarchical structure and provides means to edit the properties and attributes of objects.\",\n        depends: [ \"excel\", \"menu\", \"treelist\" ]\n    };\n\n    (function($, undefined$1) {\n        const kendo = window.kendo,\n            ui = kendo.ui,\n            NS = \".kendoPropertyGrid\",\n            extend = $.extend,\n            kendoDom = kendo.dom,\n            kendoDomElement = kendoDom.element,\n            kendoHtmlElement = kendoDom.html,\n            kendoTextElement = kendoDom.text,\n            keys = $.extend({ F10: 121 }, kendo.keys),\n            Editable = ui.Editable,\n            TreeList = ui.TreeList,\n            isArray = Array.isArray,\n            isPlainObject = $.isPlainObject,\n            CHANGE = \"change\",\n            CLICK = \"click\",\n            EDIT = \"edit\",\n            EXPAND = \"expand\",\n            COLLAPSE = \"collapse\",\n            GROUP_EXPAND = \"groupExpand\",\n            GROUP_COLLAPSE = \"groupCollapse\",\n            COLUMNRESIZE = \"columnResize\",\n            CELL_CLOSE = \"cellClose\",\n            SAVE = \"save\",\n            CANCEL = \"cancel\",\n            BEFORE_EDIT = \"beforeEdit\",\n            PDF_EXPORT = \"pdfExport\",\n            CARET_ALT_DOWN = \"a[class*='-i-caret-alt-down']\",\n            CARET_ALT_RIGHT = \"a[class*='-i-caret-alt-right']\",\n            DOT = \".\",\n            GROUPING_ROW = \"k-grouping-row\",\n            TR = \"tr\",\n            TD = \"td\",\n            ARIA_LABEL = \"aria-label\",\n            COLLAPSE_ICON = \"caret-alt-down\",\n            EXPAND_ICON = \"caret-alt-right\";\n\n        const defaultBodyContextMenu = [\n            \"copy\",\n            \"copyName\",\n            \"copyDeclaration\",\n            \"separator\",\n            \"reset\",\n            \"separator\",\n            \"resize\",\n            \"separator\",\n            \"expandItem\",\n            \"collapseItem\",\n            \"separator\"\n        ];\n\n        const defaultCommands = {\n            group: {\n                name: \"group\",\n                type: \"button\",\n                text: 'Group Items',\n                togglable: true,\n                showText: \"overflow\",\n                icon: \"categorize\",\n                commandName: \"ToggleGroupLayout\",\n                attributes: {\n                    title: \"Group Items\"\n                },\n                overflow: \"never\"\n            },\n            details: {\n                name: \"details\",\n                type: \"button\",\n                text: 'Toggle Info box',\n                togglable: true,\n                icon: \"info-circle\",\n                commandName: \"ToggleDetails\",\n                showText: \"overflow\",\n                attributes: {\n                    title: \"Toggle Info box\"\n                },\n                overflow: \"never\"\n            },\n            sort: {\n                name: \"sort\",\n                component: \"DropDownList\",\n                componentOptions: {\n                    commandOn: CHANGE,\n                    dataTextField: \"text\",\n                    dataValueField: \"value\",\n                    dataSource: [\n                        { text: \"Default Sort\", value: \"none\" },\n                        { text: \"Sort A-Z\", value: \"asc\" },\n                        { text: \"Sort Z-A\", value: \"desc\" }\n                    ],\n                },\n                attributes: {\n                    class: \"k-property-grid-sort\",\n                    title: \"Sort\"\n                },\n                overflow: \"never\"\n            },\n            search: {\n                name: \"search\",\n                component: \"TextBox\",\n                componentOptions: {\n                    prefixOptions: {\n                        icon: \"search\"\n                    },\n                    placeholder: \"Search...\",\n                },\n                attributes: {\n                    class: \"k-grid-search\"\n                },\n                overflow: \"never\"\n            },\n            separator: {\n                name: \"separator\",\n                type: \"separator\",\n            },\n            spacer: {\n                name: \"spacer\",\n                type: \"spacer\",\n            },\n            excel: {\n                name: \"excel\",\n                type: \"button\",\n                text: \"Export to Excel\",\n                showText: false,\n                icon: \"file-excel\",\n                commandName: \"ExcelExport\",\n                overflow: \"auto\"\n            },\n            pdf: {\n                name: \"excel\",\n                type: \"button\",\n                text: \"Export to PDF\",\n                showText: false,\n                icon: \"file-pdf\",\n                commandName: \"PDFExport\",\n                overflow: \"auto\"\n            },\n        };\n\n        function isNullorUndefined(value) {\n            return value === undefined$1 || value === null;\n        }\n\n        function isCollection(value) {\n            return typeof value === 'object' && isArray(value);\n        }\n\n        function isComplexObject(value) {\n            return typeof value === 'object' && !kendo.isDate(value);\n        }\n\n        function isEditable(value) {\n            return (kendo.type(value) != 'object' && kendo.type(value) != 'function');\n        }\n\n        function isColumnEditable(column, model) {\n            if (!column || !model || !column.field || column.selectable || column.command || column.draggable || (column.editable && !column.editable(model))) {\n                return false;\n            }\n\n            return (column.field && model.editable && model.editable(column.field));\n        }\n\n        function asArray(obj) {\n            return Object.entries(obj).map(x=>x[1]);\n        }\n\n        let PropertyGridDataSource = kendo.data.TreeListDataSource.extend({\n            groupedItemsTree: function(field) {\n                let map = this._childrenMap(this.view()),\n                    defaultParentId = this._defaultParentId(),\n                    currentChildren = map[defaultParentId] || [],\n                    grouped = new kendo.data.Query(currentChildren).group({ field: field }).toArray();\n\n                return grouped;\n            },\n            filterGroupedItemsTree: function(expression, field) {\n                let dataSource = this;\n                let sort = this.sort() || {};\n                let filterExpression = expression || { filters: [], logic: \"or\" };\n                let map = this._childrenMap(this.data()),\n                defaultParentId = this._defaultParentId(),\n                currentChildren = map[defaultParentId] || [],\n                groups = new kendo.data.Query(currentChildren).sort(sort).group({ field: field }).toArray();\n                let filterItems = function(filterExpression, items) {\n                    let filtered = [];\n                    for (let i = 0; i < items.length; i++) {\n                        if (items[i].hasChildren && filterItems(filterExpression, dataSource.childNodes(items[i])).length > 0) {\n                            filtered.push(items[i]);\n                        }\n                    }\n\n                    return filtered.length != 0 ? filtered : new kendo.data.Query(items).sort(sort).filter(filterExpression).toArray();\n                };\n                let filteredGroups = [];\n                groups.forEach(function(itm) {\n                    if (itm.items) {\n                        itm.items = filterItems(filterExpression,itm.items);\n                    }\n                    filteredGroups.push(itm);\n                });\n\n                return filteredGroups;\n            }\n        });\n\n        const DynamicInCellEditor = kendo.ui.treelist.editor.extend({\n            createEditable: function() {\n                let options = this.options;\n\n                this.fields[0].editor = options.model.editor;\n                this.fields[0].editorOptions = { ...options.model.editorOptions };\n\n                this.editable = new Editable(this.wrapper, {\n                    fields: this.fields,\n                    target: options.target,\n                    clearContainer: options.clearContainer,\n                    model: this.model,\n                    change: options.change,\n                });\n\n            },\n            destroy: function() {\n                let that = this;\n\n                that.editable.destroy();\n\n                that.editable.element\n                    .off()\n                    .empty()\n                    .removeAttr(kendo.attr(\"role\"));\n\n                that.model = that.wrapper = that.element = that.columns = that.editable = null;\n            }\n        });\n\n        const PropertyGrid = TreeList.extend({\n            init: function(element, options) {\n                const that = this;\n                that._processOptions(options);\n                that.options = extend(true, {}, that.options, options);\n                that._processedModel = that._processModel();\n                that._createDataSource();\n\n                TreeList.fn.init.call(that, element, that.options);\n                that._wrapper();\n                that._detailsBox();\n                that._groupable();\n\n                kendo.notify(that);\n            },\n\n            options: {\n                name: 'PropertyGrid',\n                model: {},\n                items: [],\n                columns: [{ field: \"field\" },{ field: \"value\", editable: function(e) { return isEditable(e.value); } }],\n                hasHeader: false,\n                groupable: true,\n                resizable: true,\n                contextMenu: false,\n                sortable: true,\n                selectable: true,\n                scrollable: true,\n                showDetails: true,\n                editable: \"incell\",\n                size: \"medium\",\n                defaultTools: [defaultCommands.search, defaultCommands.sort, defaultCommands.group, defaultCommands.details],\n                messages: {\n                    defaultGroupName: \"Other\"\n                }\n            },\n\n            events: [\n                BEFORE_EDIT,\n                EDIT,\n                CHANGE,\n                EXPAND,\n                COLLAPSE,\n                COLUMNRESIZE,\n                GROUP_EXPAND,\n                GROUP_COLLAPSE,\n                CELL_CLOSE,\n                SAVE,\n                CANCEL,\n                PDF_EXPORT\n            ],\n\n            defaultEditors: {\n                string: \"TextBox\",\n                date: \"DatePicker\",\n                number: \"NumericTextBox\",\n                boolean: \"CheckBox\"\n            },\n\n            _groupContentTemplate: ({ groupName, action, icon }) => `<p class=\"k-reset\">${kendo.ui.icon($('<a href=\"#\" tabindex=\"-1\" ' + ARIA_LABEL + '=' + action + '></a>'), icon)}${groupName}</p>`,\n\n            _detailsTemplate: ({ description }) => `<span>${description || '&nbsp;'}</span>`,\n\n            _setEditable: function(value) {\n                const that = this;\n                that.options.editable = value;\n            },\n\n            _processOptions: function(options) {\n                const that = this;\n\n                kendo.type(options.editMode) === \"boolean\" && !options.editMode ? that._setEditable(false) : that._setEditable(\"incell\");\n                if (isNullorUndefined(options.toolbar)) {\n                    options.toolbar = that.options.defaultTools;\n                }\n                that._extendColumnOptions(options);\n            },\n\n            _extendColumnOptions: function(options) {\n                const that = this;\n                if (!options.columns) {\n                    return;\n                }\n                that.options.columns[0] = extend(true, options.columns.fieldColumn, that.options.columns[0]);\n                that.options.columns[1] = extend(true, options.columns.valueColumn, that.options.columns[1]);\n                delete options.columns;\n            },\n\n            _processSettings: function(obj, settings) {\n                const that = this;\n                settings.forEach((item) => {\n                    if (obj[item.field]) {\n                        extend(obj[item.field], item);\n\n                        if (obj[item.field].items) {\n                            that._processSettings(obj[item.field].value, obj[item.field].items);\n                        }\n                    }\n                });\n            },\n\n            _processModel: function() {\n                const that = this,\n                model = that.options.model,\n                options = that.options;\n\n                let flatData = that._flatten(model);\n                that._setDefaults(flatData);\n                that._processSettings(flatData, options.items );\n\n                return asArray(flatData);\n            },\n\n            _createDataSource: function() {\n                const that = this,\n                dataSource = new PropertyGridDataSource({\n                    data: that._processedModel,\n                    serverGrouping: false,\n                    schema: {\n                        model: {\n                            id: \"id\",\n                            parentId: \"parentId\",\n                            expanded: true,\n                            fields: {\n                                field: { editable: false },\n                                value: { editable: true }\n                            }\n                        },\n                    }\n                });\n\n                that.options.dataSource = dataSource;\n            },\n\n            _flatten: function(model) {\n                let id = 1;\n\n                function appendNested(result, key, nestedKeys, nestedObject, collectionIdx) {\n                    if (!isNullorUndefined(collectionIdx)) {\n                        nestedKeys.forEach (nestedKey => {\n                            result[`${key}.${collectionIdx}.${nestedKey}`] = nestedObject[nestedKey];\n                            result[`${key}.${collectionIdx}.${nestedKey}`].parentId = result[`${key}.${collectionIdx}`].id;\n                        });\n                    } else {\n                        nestedKeys.forEach (nestedKey => {\n                            result[`${key}.${nestedKey}`] = nestedObject[nestedKey];\n                        });\n                    }\n                }\n\n                function flattenCollection(result, obj, key, parentId) {\n                    const collection = obj[key];\n\n                    result[key] = {\n                        id: id++,\n                        parentId: parentId,\n                        propType: \"Array\",\n                        field: key,\n                        value: collection,\n                    };\n\n                    for (let i = 0; i < collection.length; i++) {\n                        const nested = typeof collection[i] === \"object\" ?\n                            flattenObject(collection[i], result[key].id) :\n                            collection[i];\n\n                        result[`${key}.${i}`] = {\n                            id: id++,\n                            parentId: result[key].id,\n                            propType: typeof obj[key],\n                            field: `${key}[${i}]`,\n                            value: nested\n                        };\n\n                        if (typeof collection[i] === \"object\") {\n                            const nestedKeys = Object.keys(nested);\n                            appendNested(result, key, nestedKeys, nested, i);\n                        }\n                    }\n                }\n\n                function flattenObject(obj, parentId) {\n                    const result = {},\n                    keys = Object.keys(obj || { } );\n\n                    keys.forEach ((key) => {\n                        if (isNullorUndefined(obj[key])) {\n                            result[key] = {\n                                id: id++,\n                                parentId: parentId,\n                                propType: typeof obj[key],\n                                field: key,\n                                value: obj[key]\n                            };\n                        } else if (isCollection(obj[key])) {\n                            flattenCollection(result, obj, key, parentId);\n                        } else if (isComplexObject(obj[key])) {\n                            let tempId = id++;\n                            const nestedObject = flattenObject(obj[key], tempId);\n                            const nestedKeys = Object.keys(nestedObject);\n\n                            result[key] = {\n                                id: tempId,\n                                parentId: parentId,\n                                propType: typeof obj[key],\n                                field: key,\n                                value: nestedObject,\n                            };\n\n                            appendNested(result, key, nestedKeys, nestedObject);\n                        } else {\n                            let parsed = kendo.parseDate(obj[key].toString());\n                            result[key] = {\n                                id: id++,\n                                parentId: parentId,\n                                propType: parsed != null ? typeof parsed : typeof obj[key],\n                                field: key,\n                                value: parsed != null ? parsed : obj[key]\n                            };\n                        }\n                    });\n\n                    return result;\n                }\n\n                return flattenObject(model, null);\n            },\n\n            _setDefaults: function(obj) {\n                const that = this;\n\n                Object.keys(obj).forEach(key => {\n                    if (that.options.groupable && !obj[key].group) {\n                        obj[key].group = that.options.messages.defaultGroupName;\n                    }\n                    that._setDefaultEditor(obj[key]);\n                });\n            },\n\n            _setDefaultEditor: function(obj) {\n                const that = this,\n                type = kendo.type(obj.value);\n                switch (type) {\n                    case \"date\":\n                        obj.editor = that.defaultEditors.date;\n                        break;\n                    case \"boolean\":\n                        obj.editor = that.defaultEditors.boolean;\n                        break;\n                    case \"number\":\n                        obj.editor = that.defaultEditors.number;\n                        break;\n                    default:\n                        obj.editor = that.defaultEditors.string;\n                        break;\n                }\n            },\n\n            _createIncellEditor: function(cell, options) {\n                const that = this;\n                let column = extend({}, options.columns[0]);\n                options.model.fields.value.validation = options.model.validation ? options.model.validation.toJSON() : {};\n                delete column.parentColumn;\n\n                return new DynamicInCellEditor(cell, extend({}, {\n                    fieldRenderer: that._cellContent.bind(that),\n                    appendTo: that.wrapper,\n                    clearContainer: false,\n                    target: that,\n                    columns: [column],\n                    model: options.model,\n                    change: options.change\n                }));\n            },\n\n            _createDirtyTemplate: function(model) {\n                const that = this;\n                let templateSettings = that._customTemplateSettings();\n                let dirtyIndicator = function(data) {\n                        return '<span class=\"k-dirty\"></span>';\n                    };\n                let templateFunction = function(data) {\n                    return (dirtyIndicator() + kendo.template(model.template)(model));\n                };\n\n                return kendo.template(templateFunction, templateSettings).bind({ columnTemplate: model.template });\n            },\n\n            _cellContent: function(column, model) {\n                const that = this,\n                incellEditing = that._isIncellEditable(),\n                isValueColumn = column.field == \"value\";\n                let value, dirtyIndicator, template;\n\n                if (isValueColumn && model.template) {\n                    template = model.dirty ? that._createDirtyTemplate(model) : kendo.template(model.template);\n                    value = template(model);\n                } else if (column.field) {\n                    value = model.get(column.field);\n                    dirtyIndicator = incellEditing ? column.dirtyIndicatorTemplate(model) : \"\";\n                    if (!isNullorUndefined(value)) {\n                        if (model.format) {\n                            value = kendo.format(model.format, value);\n                        }\n\n                        value = dirtyIndicator + value;\n                    } else {\n                        value = dirtyIndicator;\n                    }\n                } else if (isNullorUndefined(value)) {\n                    value = \"\";\n                }\n\n                if (model.template) {\n                    return kendoHtmlElement(value);\n                } else {\n                    if (incellEditing) {\n                        return isEditable(model.value) && isValueColumn ? that._editableCellContent(value) : kendoHtmlElement(value);\n                    } else {\n                        return kendoTextElement(value);\n                    }\n                }\n            },\n\n            _editableCellContent: function(value) {\n                let bTag = kendoDomElement(\"b\");\n                let content = kendoHtmlElement(value);\n                bTag.children.push(content);\n                return bTag;\n            },\n\n            _generateGroupRow: function(item) {\n                const that = this;\n                let groupRowContent = (kendo.template(that._groupContentTemplate)({\n                    groupName: item.value,\n                    action: item.visible ? COLLAPSE : EXPAND,\n                    icon: item.visible ? COLLAPSE_ICON : EXPAND_ICON\n                }));\n                let tdElement = kendoDomElement(TD, { className: \"k-table-td\", class: \"k-table-td\", colSpan: \"3\" , role: \"gridcell\", \"aria-expanded\": item.visible, visible: true }, [kendo.dom.html(groupRowContent)] );\n                let trElement = kendoDomElement(TR, { className: \"k-table-group-row k-grouping-row k-table-row\", role: \"row\" , \"data-uid\": item.uid }, [tdElement] );\n                return trElement;\n            },\n\n            _generateDetailsBox: function() {\n                const that = this;\n                let tdElement = kendoDomElement(TD, { className: \"k-table-td\", class: \"k-table-td\", colSpan: that.grouped ? 3 : 2 , role: \"gridcell\", visible: true }, [kendo.dom.html(\"<span>&nbsp;</span>\")] );\n                let trElement = kendoDomElement(TR, {\n                    className: `k-details-box k-bottom k-sticky k-footer-template k-table-row ${!that.visibleDetails ? 'k-hidden' : ''}`,\n                    role: \"row\"\n                }, [tdElement] );\n                return trElement;\n            },\n\n            _renderRows: function(options, data, columns, selected, childrenMap, viewChildrenMap, hasFooterTemplate) {\n                const that = this;\n                let selectedRow = selected.length ? selected : that._selectedRowUid;\n                let rows = [];\n                if (that.grouped) {\n                    if (that.table.find(\">colgroup>col.k-group-col\").length === 0) {\n                        that.table.find(\">colgroup\").prepend('<col class=\"k-group-col\">');\n                    }\n                    that._groupedData.forEach(item => {\n                        let groupTr = that._generateGroupRow(item);\n\n                        rows.push(groupTr);\n                        rows = rows.concat(that._trs({\n                            columns: columns,\n                            editedColumn: options.editedColumn,\n                            editedColumnIndex: options.editedColumnIndex,\n                            aggregates: options.aggregates,\n                            selected: selectedRow,\n                            data: item.items,\n                            childrenMap: childrenMap,\n                            viewChildrenMap: viewChildrenMap,\n                            hasFooterTemplate: hasFooterTemplate,\n                            visible: item.visible,\n                            level: 0\n                        }));\n                    });\n                } else {\n                    that.table.find(\">colgroup>col.k-group-col\").remove();\n                    rows = rows.concat(this._trs({\n                        columns: columns,\n                        editedColumn: options.editedColumn,\n                        editedColumnIndex: options.editedColumnIndex,\n                        aggregates: options.aggregates,\n                        selected: selectedRow,\n                        data: data,\n                        childrenMap: childrenMap,\n                        viewChildrenMap: viewChildrenMap,\n                        hasFooterTemplate: hasFooterTemplate,\n                        visible: true,\n                        level: 0\n                    }));\n                }\n\n                if (that.options.showDetails) {\n                    rows.push(that._generateDetailsBox());\n                }\n\n                that._contentTree.render(rows);\n            },\n\n            _generateRowOptions: function(model, attr, pageable, options, level, hasChildren) {\n                const that = this;\n\n                let rowOptions = {\n                    model: model,\n                    attr: attr,\n                    level: pageable ? that._renderedModelLevel(model, options) : level,\n                    editedColumn: options.editedColumn,\n                    editedColumnIndex: options.editedColumnIndex,\n                    hasChildren: hasChildren,\n                    visible: options.visible,\n                    isAlt: this._absoluteIndex % 2 === 0,\n                    grouped: that.options.groupable && that.grouped\n                };\n                return rowOptions;\n            },\n\n            _renderRow: function(rowOptions, columns, renderer) {\n                let row = this._tds(rowOptions, columns, renderer);\n\n                if (rowOptions.grouped) {\n                    let groupTdElement = kendoDomElement(TD, { class: \"k-table-td k-group-cell\", className: \"k-table-td k-group-cell\" });\n                    row.children.splice(0,0,groupTdElement);\n                }\n                return row;\n            },\n\n            editCell: function(cell) {\n                const that = this;\n                let cellIndex;\n                cell = $(cell);\n                cellIndex = that.grouped ? that.cellIndex(cell) - 1 : that.cellIndex(cell);\n                let column = that.columns[cellIndex];\n                let model = that.dataItem(cell);\n\n                if (that._isIncellEditable() && model && isColumnEditable(column, model)) {\n                    that._editCell(cell, column, model, cellIndex);\n                }\n            },\n\n            _wrapper: function() {\n                const that = this;\n                that.element.css(\"width\", this.options.width);\n                that.wrapper.addClass(\"k-property-grid\");\n            },\n\n            _toolbar: function() {\n                const that = this,\n                options = that.options;\n                let toolbarOptions = options.toolbar;\n                let toolbar = this.toolbar;\n\n\n                if (!toolbarOptions) {\n                    return;\n                }\n\n                if (Array.isArray(toolbarOptions)) {\n                    let items = that._processToolbarItems(toolbarOptions);\n                    items = that._verifyItems(items);\n\n                    toolbar.kendoToolBar({\n                        size: \"medium\",\n                        resizable: true,\n                        navigateOnTab: !options.navigatable,\n                        items: items,\n                    });\n\n                    toolbar.find(\".k-grid-search .k-input-inner\").attr({\n                        placeholder: options.messages.commands.search,\n                        title: options.messages.commands.search\n                    });\n\n                    that._attachToolbarHandlers();\n                } else {\n                    toolbar.append(kendo.template(toolbarOptions)({}));\n                }\n\n            },\n\n            _attachToolbarHandlers: function() {\n                const that = this;\n                let toolbarWidget = that.toolbar.getKendoToolBar();\n                let sortElement = toolbarWidget.element.find('[data-command=\"sort\"] input');\n\n                toolbarWidget.bind(\"toggle\", that._toolbarClick.bind(that));\n                toolbarWidget.bind(\"click\", that._toolbarClick.bind(that));\n\n                if (sortElement.length > 0) {\n                    sortElement.getKendoDropDownList().bind(\"change\", that._sortItems.bind(that));\n                }\n            },\n\n            _verifyItems: function(items) {\n                const that = this;\n                if ((!that.options.groupable || !that.options.items.some(x=>x.hasOwnProperty(\"group\")) )) {\n                    items = items.filter(x=>x.name != \"group\");\n                }\n                if (!(that.options.showDetails && that.options.selectable) && items.findIndex(x=>x.name == \"details\") > 0) {\n                    items = items.filter(x=>x.name != \"details\");\n                }\n                return items;\n            },\n\n            _getCommandType: function(command) {\n                if (command.type) {\n                    return command.type;\n                }\n\n                if (command.template) {\n                    return null;\n                }\n\n                return \"button\";\n            },\n\n            _processToolbarItems: function(commands) {\n                const that = this,\n                messages = that.options.messages.commands;\n                let items = [];\n\n                commands.map(command => {\n                    let name = (isPlainObject(command) ? command.name || \"\" : command).toLowerCase();\n                    let text = messages[name];\n\n                    if (!name && !(isPlainObject(command) && command.template)) {\n                        throw new Error(\"Commands should have name specified\");\n                    }\n\n                    command = extend({}, defaultCommands[name], {\n                        name: name,\n                        text: text || (defaultCommands[name] || {}).text,\n                        type: that._getCommandType(defaultCommands[name] || {})\n                    }, command);\n\n                    if (command.imageClass) {\n                        command.spriteCssClass = command.imageClass;\n                        command.iconClass = command.imageClass;\n                    }\n\n                    if (!command.attributes) {\n                        command.attributes = {};\n                    }\n\n                    command.attributes[\"data-command\"] = command.commandName || name;\n\n                    if (command.menuButtons || command.buttons) {\n                        delete command.name;\n                    }\n\n                    command.click = (e) => {\n                        let origEvent = e.event || e.originalEvent;\n                        if (origEvent) {\n                            origEvent.preventDefault();\n                            origEvent.stopPropagation();\n                        }\n\n                        that._commandClick({\n                            currentTarget: e.target\n                        });\n                    };\n\n                    if (command.className) {\n                        if (!command.attributes) {\n                            command.attributes = {};\n                        }\n\n                        command.attributes[\"class\"] = command.className;\n                    }\n                    command.attributes[\"title\"] = text || command.attributes[\"title\"];\n\n                    items.push(command);\n                });\n\n                return items;\n            },\n\n            _toolbarClick: function(ev) {\n                let command = $(ev.target).data(\"command\"),\n                    options = $(ev.target).data(\"options\");\n\n                if (!!$(ev.target).val()) {\n                    options = extend({}, options, { value: $(ev.target).val() });\n                }\n\n                if (!command || !ui.propertygrid.commands[command] ) {\n                    return;\n                }\n\n                this._action({\n                    command: command,\n                    options: options\n                });\n            },\n\n            _sortItems: function(e) {\n                const that = this,\n\n                dataSource = that.dataSource,\n                dir = e.sender.value();\n                let sort = dir === \"none\" ? {} : { field: \"field\", dir: dir };\n\n                dataSource.sort(sort);\n                that._groupedData = dataSource.filterGroupedItemsTree(dataSource.filter(),\"group\").map(itm => ({\n                    ...itm,\n                    visible: that._groupedData.filter(x=>x.value == itm.value)[0].visible,\n                    uid: that._groupedData.filter(x=>x.value == itm.value)[0].uid\n                }));\n\n                if (that.grouped) {\n                    that.refresh();\n                }\n            },\n\n            _initContextMenu: function() {\n                const that = this,\n                options = that.options;\n\n                if (!options.contextMenu) {\n                    return;\n                }\n\n                let tbodyContextMenu = isPlainObject(options.contextMenu) && isArray(options.contextMenu.body) ? { items: options.contextMenu.body } : { items: defaultBodyContextMenu };\n\n                let mainOptions = isPlainObject(options.contextMenu) ? options.contextMenu : {};\n\n                tbodyContextMenu = extend({}, {\n                    messages: options.messages,\n                    target: that.tbody,\n                    filter: \".k-table-row:not(.k-grouping-row,.k-details-box) > .k-table-td\",\n                    action: that._action.bind(that),\n                    states: that._buildStates()\n                }, mainOptions, tbodyContextMenu);\n\n                that.tbodyContextMenu = new ui.propertygrid.ContextMenu(\"<ul></ul>\", tbodyContextMenu);\n            },\n\n            _buildStates: function() {\n                const that = this;\n\n                return {\n                    isResizable: that.options.resizable,\n                    isEditable: that.options.editable,\n                    windowHasSelection: () => (typeof window.getSelection != 'undefined' && window.getSelection().rangeCount != 0 && window.getSelection().getRangeAt(0).toString() != ''),\n                    isDirty: (target)=> {\n                        let dataItem = this.dataItem(target);\n                        return dataItem.dirty;\n                    },\n                    isNotInEditMode: (target) => !target.closest(\"td\").hasClass(\"k-edit-cell\"),\n                    isNotGroupColumn: (target) => !target.closest(\"td\").hasClass(\"k-group-cell\"),\n                    isExpandable: (target) => {\n                        let dataItem = this.dataItem(target);\n                        return (dataItem && dataItem.hasChildren && !dataItem.expanded);\n                    },\n                    isCollapsible: (target) => {\n                        let dataItem = this.dataItem(target);\n                        return (dataItem && dataItem.hasChildren && dataItem.expanded);\n                    }\n                };\n            },\n\n            _action: function(args) {\n                let commandName = args.command,\n                    commandOptions = extend({ propertyGrid: this }, args.options),\n                    command = new ui.propertygrid.commands[commandName](commandOptions);\n\n                return command.exec();\n            },\n\n            _objectFromNodes: function(rootNodes) {\n                const that = this,\n                hashTable = Object.create(null),\n                dataSource = that.dataSource;\n                rootNodes = isArray(rootNodes) ? rootNodes : [rootNodes];\n\n                rootNodes.forEach((node) => {\n                    if (node.propType == \"Array\") {\n                        hashTable[node.field] = [];\n                        dataSource.childNodes(node).forEach((childNode) => {\n                            hashTable[node.field].push(childNode.hasChildren ? that._objectFromNodes(dataSource.childNodes(childNode)) : childNode.value);\n                        });\n                    } else {\n                        hashTable[node.field] = node.hasChildren ? that._objectFromNodes(dataSource.childNodes(node)) : node.value;\n                    }\n                });\n\n                return hashTable;\n            },\n\n            _groupable: function() {\n                const that = this;\n                that._groupedData = that.dataSource.groupedItemsTree(\"group\").map(itm => ({ ...itm, visible: true, uid: kendo.guid() }));\n                that._groupableClickHandler = function(e) {\n                    let element = $(this),\n                    groupRow = element.closest(TR);\n\n                    let group = that._groupedData.filter(x=>x.value === groupRow.text())[0];\n                    group.visible = !group.visible;\n\n                    if (element.is(CARET_ALT_DOWN)) {\n                        if (!that.trigger(GROUP_COLLAPSE, { group: group.items, element: groupRow })) {\n                            that.refresh();\n                        }\n                    } else {\n                        if (!that.trigger(GROUP_EXPAND, { group: group.items, element: groupRow })) {\n                            that.refresh();\n                        }\n                    }\n                    e.preventDefault();\n                    e.stopPropagation();\n                };\n\n                that.table.on(CLICK + NS, \".k-grouping-row \" + CARET_ALT_RIGHT + \", .k-grouping-row \" + CARET_ALT_DOWN, that._groupableClickHandler)\n                    .on(\"keydown\" + NS, that._groupRowKeyDown.bind(that));\n\n            },\n\n            _groupRowKeyDown: function(e) {\n                const that = this,\n                current = that.current();\n                let handled = false;\n\n                if (!that.options.navigatable) {\n                    return;\n                }\n\n                if (e.keyCode == keys.ENTER) {\n                    kendo.focusElement(that.table);\n                    that._setCurrent(that._findCurrentCell());\n                    handled = true;\n                }\n\n                if ((e.keyCode == keys.LEFT || e.keyCode == keys.RIGHT) && e.altKey) {\n                    handled = this._handleGroupRowExpandCollapse(current, e.keyCode);\n                }\n\n                if (handled) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                }\n            },\n\n            _handleGroupRowExpandCollapse: function(current, keyCode) {\n                const that = this,\n                    row = current.parent();\n\n                if (row.is(DOT + GROUPING_ROW)) {\n                    let visible = that._groupedData.filter(x=>x.value === row.text())[0].visible;\n\n                    if (visible && keyCode == keys.LEFT || !visible && keyCode == keys.RIGHT) {\n                        that._toggleGroup(row);\n                        return true;\n                    }\n\n                }\n            },\n\n            _toggleGroup: function(groupRow) {\n                const that = this;\n                let group = that._groupedData.filter(x=>x.value === groupRow.text())[0];\n                    group.visible = !group.visible;\n                    that.refresh();\n            },\n\n            _search: function(e) {\n                let that = this;\n                let input = e.currentTarget;\n                clearTimeout(that._searchTimeOut);\n                that._searchTimeOut = setTimeout(function() {\n                    that._searchTimeOut = null;\n                    let options = that.options,\n                    searchFields = options.search ? options.search.fields : [\"field\",\"value\"],\n                    expression = { filters: [], logic: \"or\" },\n                    value = input.value;\n\n                    if (value) {\n                        for (let i = 0; i < searchFields.length; i++) {\n                            expression.filters.push({ field: searchFields[i], operator: \"contains\", value: value });\n                        }\n                    }\n\n                    that._groupedData = that.dataSource.filterGroupedItemsTree(expression,\"group\").map(itm => ({ ...itm, visible: true, uid: that._groupedData.filter(x=>x.value == itm.value)[0].uid }));\n                    that.dataSource.filter(expression);\n                    that._refreshLayout();\n                    that._updateDetails();\n                }, 300);\n            },\n\n            _refreshLayout: function() {\n                const that = this;\n                that._selectedRowUid = that.select().removeClass(\"k-selected\").map(function(_, row) {\n                    return $(row).attr(\"data-uid\");\n                });\n                that._contentTree.render([]);\n                that._render();\n            },\n\n            _detailsBox: function() {\n                const that = this,\n                options = that.options;\n\n                that._detailsTemplate = options.detailsTemplate ? options.detailsTemplate : that._detailsTemplate;\n\n                if (!options.showDetails) {\n                    return;\n                }\n\n                that.detailsContainer = that.wrapper.find(\"table > tr.k-details-box > td\");\n                that.bind(CHANGE, that._updateDetails);\n            },\n\n            _updateDetails: function() {\n                const that = this;\n                if (!that.options.selectable) {\n                    return;\n                }\n                let dataItem = that.dataItem(that.select());\n\n                dataItem ? that.table.find(\"tr.k-details-box > td\").html(kendo.template(that._detailsTemplate)(dataItem)) : that._clearDetails();\n            },\n\n            _clearDetails: function() {\n                const that = this;\n                let content = '<span>&nbsp;</span>';\n                that.table.find(\"tr.k-details-box > td\").html(content);\n            },\n\n            model: function(model, items) {\n                const that = this;\n                if (!model) {\n                    return that._objectFromNodes(that.dataSource.rootNodes());\n                }\n\n                that.options.model = model;\n                if (items) {\n                    that.options.items = items;\n                }\n\n                that._processedModel = that._processModel();\n                that.setDataSource(new PropertyGridDataSource({\n                    data: that._processedModel,\n                    serverGrouping: false,\n                    schema: {\n                        model: {\n                            id: \"id\",\n                            parentId: \"parentId\",\n                            expanded: true,\n                            fields: {\n                                field: { editable: false },\n                                value: { editable: true }\n                            }\n                        },\n                    }\n                }));\n\n            },\n\n            selectItem: function(value) {\n                const that = this;\n                return that.select(value);\n            },\n\n            toggleItem: function(row) {\n                const that = this;\n                const dataItem = that.dataItem(row);\n\n                dataItem.expanded ? that.collapse(row) : that.expand(row);\n            },\n\n            toggleGroup: function(row) {\n                const that = this;\n                if (!$(row).is(DOT + GROUPING_ROW)) {\n                    return;\n                }\n\n               that._toggleGroup(row);\n            },\n\n            toggleDetails: function() {\n                const that = this;\n                if (!that.options.showDetails) {\n                    return;\n                }\n\n                that._action({ command: \"ToggleDetails\" });\n            },\n\n            edit: function(cell) {\n                const that = this;\n                that.editCell(cell);\n            },\n\n            saveState: function() {\n                const that = this;\n                that.saveChanges();\n            },\n\n            resetState: function() {\n                const that = this;\n                that.cancelChanges();\n            },\n\n            setOptions: function(options) {\n                const that = this;\n                let currentOptions = that.getOptions(),\n                wrapper = that.wrapper,\n                events = that._events,\n                element = that.element;\n\n                delete currentOptions.model;\n                kendo.deepExtend(currentOptions, options);\n                that.model = that.options.model = options.model || { };\n\n                that.destroy();\n\n                if (wrapper[0] !== element[0]) {\n                    wrapper.before(element);\n                    wrapper.remove();\n                }\n                element.empty();\n\n                that.init(element, currentOptions, events);\n                that._setEvents(currentOptions);\n            },\n\n            destroy: function() {\n                const that = this;\n                if (this.tbodyContextMenu) {\n                    this.tbodyContextMenu.destroy();\n                    this.tbodyContextMenu = null;\n                }\n\n                TreeList.fn.destroy.call(that);\n            },\n\n        });\n\n        let PropertyGridExcelExporter = kendo.excel.ExcelExporter.extend({\n            init: function(options) {\n                options.columns = this._trimColumns(options.columns || []);\n\n                this.allColumns = $.map(this._leafColumns(options.columns || []), this._prepareColumn);\n\n                this.columns = this._visibleColumns(this.allColumns);\n                this.widget = options.widget;\n                this.options = options;\n                this.data = options.data || [];\n                this.aggregates = options.aggregates || {};\n                this.groups = [].concat(options.groups || []);\n                this.hasGroups = this.groups.length > 0;\n                this.hierarchy = options.hierarchy;\n                this.hasGroupHeaderColumn = this.columns.some(function(column) { return column.groupHeaderColumnTemplate; });\n                this.collapsible = this.options.collapsible;\n            },\n\n            _recursiveRows: function(rows, item) {\n                let this$1$1 = this;\n                let level = this$1$1.widget.dataSource.level(item);\n                rows.push(...this$1$1._dataRow(item, level + 1, this._depth()));\n\n                if (item.hasChildren) {\n                    let children = this$1$1.widget.dataSource.childNodes(item);\n                    for (let itmIdx = 0; itmIdx < children.length; itmIdx++) {\n                        let item = children[itmIdx];\n\n                        this._recursiveRows(rows,item);\n                    }\n                }\n            },\n\n            _buildGroupedDataRows: function(data, rows, colSpan) {\n                for (let idx = 0; idx < data.length; idx++) {\n                    let groupItem = data[idx];\n                    rows.push({\n                        type: \"group-header\",\n                        cells: [ {\n                            value: groupItem.value,\n                            colSpan: colSpan,\n                            background: \"#dfdfdf\",\n                            color: \"#333\",\n                        } ],\n                        level: null\n                    });\n                    for (let itmIdx = 0; itmIdx < groupItem.items.length; itmIdx++) {\n                        let item = groupItem.items[itmIdx];\n\n                        this._recursiveRows(rows,item);\n                    }\n                }\n            },\n\n            _buildDataRows: function(data, rows, parents) {\n                let this$1$1 = this;\n                let depth = this._depth();\n                let itemLevel = this.hierarchy.itemLevel;\n                let itemId = this.hierarchy.itemId;\n                let hasFooter = this._hasFooterTemplate();\n                let previousLevel = 0;\n                let previousItemId;\n\n                for (let idx = 0; idx < data.length; idx++) {\n                    let item = data[idx];\n                    let level = itemLevel(item, idx);\n\n                    if (hasFooter) {\n                        if (level > previousLevel) {\n                            parents.push({ id: previousItemId, level: previousLevel });\n                        } else if (level < previousLevel) {\n                            rows.push(...this$1$1._hierarchyFooterRows(parents, level, depth));\n                        }\n\n                        previousLevel = level;\n                        previousItemId = itemId(item, idx);\n                    }\n\n                    rows.push(...this$1$1._dataRow(item, level + 1, depth));\n                }\n\n                if (hasFooter) {\n                    rows.push(...this._hierarchyFooterRows(parents, 0, depth));\n\n                    let rootAggregate = data.length ? this.aggregates[data[0].parentId] : {};\n                    rows.push(this._hierarchyFooter(rootAggregate, 0, depth));\n                }\n            },\n\n            _hierarchyRows: function() {\n                let this$1$1 = this;\n\n                let depth = this._depth();\n                let data = this.data;\n                let hasFooter = this._hasFooterTemplate();\n                let rows = [];\n                let parents = [];\n\n                if (!hasFooter) {\n                    this.collapsible = false;\n                }\n\n                if (this$1$1.widget.grouped) {\n                    data = this$1$1.widget.dataSource.groupedItemsTree(\"group\");\n                    let colSpan = depth + this$1$1.widget.columns.length;\n                    this$1$1._buildGroupedDataRows(data, rows, colSpan);\n                } else {\n                    this$1$1._buildDataRows(data, rows, parents);\n                }\n                this._prependHeaderRows(rows);\n\n                return rows;\n            }\n        });\n\n        kendo.PropertyGridExcelExporter = kendo.ExcelExporter.extend({\n            workbook: function() {\n                return $.Deferred((function(d) {\n                    this.dataSource.fetch()\n                        .then((function() {\n\n                            let workbook = new PropertyGridExcelExporter(extend({}, this.options, this._hierarchy(), {\n                                data: this.dataSource.view(),\n                                groups: this.dataSource.group(),\n                                aggregates: this.dataSource.aggregates()\n                            })).workbook();\n\n                            d.resolve(workbook, this.dataSource.view());\n                        }).bind(this));\n                }).bind(this)).promise();\n            }\n        });\n\n        let PropertyGridExcelMixin = {\n            extend: function(proto) {\n               proto.events.push(\"excelExport\");\n               proto.options.excel = $.extend(proto.options.excel, this.options);\n               proto.saveAsExcel = this.saveAsExcel;\n            },\n            options: {\n                proxyURL: \"\",\n                filterable: false,\n                fileName: \"Export.xlsx\"\n            },\n            saveAsExcel: function() {\n                let excel = this.options.excel || {};\n\n                let exporter = new kendo.PropertyGridExcelExporter({\n                    widget: this,\n                    columns: this.columns,\n                    dataSource: this.dataSource,\n                    data: this.dataSource.data(),\n                    allPages: excel.allPages,\n                    filterable: excel.filterable,\n                    hierarchy: excel.hierarchy,\n                    collapsible: excel.collapsible\n                });\n\n                exporter.workbook().then((function(book, data) {\n                    if (!this.trigger(\"excelExport\", { workbook: book, data: data })) {\n                        let workbook = new kendo.ooxml.Workbook(book);\n\n                        if (!workbook.options) {\n                            workbook.options = {};\n                        }\n                        workbook.options.skipCustomHeight = true;\n\n                        workbook.toDataURLAsync().then(function(dataURI) {\n                            kendo.saveAs({\n                                dataURI: dataURI,\n                                fileName: book.fileName || excel.fileName,\n                                proxyURL: excel.proxyURL,\n                                forceProxy: excel.forceProxy\n                            });\n\n                            exporter._restoreExpandedState();\n                        });\n\n                    }\n                }).bind(this));\n            },\n        };\n\n        kendo.PropertyGridExcelMixin = PropertyGridExcelMixin;\n\n        if (kendo.ooxml && kendo.ooxml.Workbook) {\n            PropertyGridExcelMixin.extend(PropertyGrid.prototype);\n        }\n\n        kendo.ui.propertygrid = kendo.ui.propertygrid || {};\n\n        extend(kendo.ui.propertygrid, {\n            defaultBodyContextMenu: defaultBodyContextMenu,\n        });\n\n        kendo.cssProperties.propertyDictionary[\"PropertyGrid\"] = kendo.cssProperties.propertyDictionary[\"TreeList\"];\n        kendo.cssProperties.registerPrefix(\"PropertyGrid\", \"k-property-grid-\");\n\n        kendo.ui.plugin(PropertyGrid);\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}