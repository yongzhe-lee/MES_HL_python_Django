{"version":3,"sources":["raw-js/kendo.dataviz.barcode.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendodataviz","barcode","js","this","$","undefined$1","kendo","window","Widget","ui","extend","deepExtend","inArray","isPlainObject","draw","drawing","geom","geometry","defined","util","dataviz","Box2D","TextBox","numberRegex","alphanumericRegex","getNext","value","index","count","substring","Encoding","Class","init","options","setOptions","that","quietZoneLength","addQuietZone","encode","width","height","initValue","addData","baseUnit","pattern","addCheckSum","push","invalidCharacterError","character","Error","format","name","encodings","code39Base","minBaseUnitLength","addStart","idx","length","addCharacter","charAt","pushCheckSum","addStop","prepareValues","charData","characterMap","addBase","code39ExtendedBase","charCodeAt","addExtended","code","patterns","i","extendedMappings","call","j","dataLength","shiftCharacters","String","fromCharCode","result","dataCharacter","specialAsciiCodes","Math","floor","shiftValuesAsciiCodes","code39","checkSumMod","minRatio","maxRatio","gapWidth","splitCharacter","patternString","minBaseUnit","ratio","minHeight","max","getBaseUnit","parseFloat","toFixed","minWidth","ceil","getBaseWidth","concat","replace","split","characterLength","addPattern","START","addCharacterGap","patternMappings","b","w","B","W","A","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","X","Y","Z","code39extended","SHIFT0","SHIFT1","SHIFT2","SHIFT3","code93","cCheckSumTotal","kCheckSumTotal","values","setBaseUnit","TERMINATION_BAR","checkValues","_getCheckValues","checksum","join","_findCharacterByValue","cValue","wightedSum","weightedValue","total","parseInt","code93extended","state128","encoding","is","move","pushState","state128AB","FNC4","states","_initMoves","isCode","encodingState","_moves","maxLength","numberMatch","substr","match","indexOf","getValue","_moveFNC","shiftKey","_shiftState","_moveState","fnc","previousState","key","SHIFT","shifted","MOVE","states128","next4","test","dependentStates","_initSubStates","subState","_getSubState","_initSubState","state","_pushStart","pushData","subStates","_getAll","FNC1","startState","startAI","endAI","current","nextStart","separatorLength","regexSeparators","RegExp","getBySeparator","getByLength","ai","id","validate","type","min","getAI","unsupportedAIError","start","end","applicationIdentifiers","multiKey","ids","ranges","code128Base","fn","_initStates","checkSum","totalUnits","position","getNextState","temp","STOP","toString","code128a","code128b","code128c","code128","msiBase","checkSumLength","checkSums","checkSumType","Modulo10","evenSum","oddSum","odd","Modulo11","checkValue","weightedSum","Modulo11Modulo10","mod11Value","Modulo10Modulo10","mod10Value","msimod10","msimod11","msimod1110","msimod1010","code11","kCheckSumMinLength","DASH_VALUE","DASH","getWeightedSum","kValue","isNaN","postnet","VALID_CODE_LENGTHS","DIGIT_SEPARATOR","baseHeight","pop","y1","y2","ean13","calculateChecksum","leftKey","leftPart","rightPart","addPieces","addSide","middle","keyTable","Array","prototype","slice","digits","reverse","arrToAdd","limitedHeight","even","ean8","Barcode","element","wrapper","addClass","css","surfaceWrap","appendTo","surface","Surface","create","renderAs","_setOptions","redraw","size","_getSize","clear","setSize","createVisual","visual","getSize","dimensions","_resize","_render","textToDisplay","textOptions","text","textMargin","getSpacing","margin","border","contentBox","unpad","padding","barHeight","Group","append","_getBackground","visible","measureText","font","top","bottom","_getText","_bandsGroup","_getBands","exportVisual","Size","step","item","x1","group","rect","Rect","fromPoints","Point","path","Path","fromRect","fill","color","stroke","box","toRect","background","dashType","_textbox","align","vAlign","reflow","renderVisual","toLowerCase","left","right","ExportMixin","plugin","jQuery"],"mappings":"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","file":"kendo.dataviz.barcode.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.dataviz.core.js'), require('kendo.drawing.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.dataviz.core', 'kendo.drawing'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendodataviz = global.kendodataviz || {}, global.kendodataviz.barcode = global.kendodataviz.barcode || {}, global.kendodataviz.barcode.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n        id: \"dataviz.barcode\",\n        name: \"Barcode\",\n        category: \"dataviz\",\n        description: \"Barcode widget\",\n        depends: [ \"dataviz.core\" ]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n\n            extend = $.extend,\n            deepExtend = kendo.deepExtend,\n            inArray = $.inArray,\n            isPlainObject = $.isPlainObject,\n\n            draw = kendo.drawing,\n            geom = kendo.geometry,\n            util = kendo.drawing.util,\n            defined = util.defined,\n            dataviz = kendo.dataviz,\n            Box2D = dataviz.Box2D,\n            TextBox = dataviz.TextBox,\n            DEFAULT_WIDTH = 300,\n            DEFAULT_HEIGHT = 100,\n            DEFAULT_QUIETZONE_LENGTH = 10,\n            numberRegex = /^\\d+$/,\n            alphanumericRegex = /^[a-z0-9]+$/i,\n            InvalidCharacterErrorTemplate = \"Character '{0}' is not valid for symbology {1}\";\n\n        function getNext(value, index, count) {\n            return value.substring(index, index + count);\n        }\n\n        var Encoding = kendo.Class.extend({\n            init: function(options) {\n                this.setOptions(options);\n            },\n            setOptions: function(options) {\n                var that = this;\n                that.options = extend({}, that.options, options);\n                that.quietZoneLength = that.options.addQuietZone ? 2 * that.options.quietZoneLength : 0;\n            },\n            encode: function(value, width, height) {\n                var that = this;\n                if (defined(value)) {\n                    value += '';\n                }\n\n                that.initValue(value, width, height);\n\n                if (that.options.addQuietZone) {\n                    that.addQuietZone();\n                }\n\n                that.addData();\n\n                if (that.options.addQuietZone) {\n                    that.addQuietZone();\n                }\n\n                return {\n                    baseUnit: that.baseUnit,\n                    pattern: that.pattern\n                };\n            },\n            options: {\n                quietZoneLength: DEFAULT_QUIETZONE_LENGTH,\n                addQuietZone: true,\n                addCheckSum: true\n            },\n            initValue: function() {},\n            addQuietZone: function() {\n                this.pattern.push(this.options.quietZoneLength || DEFAULT_QUIETZONE_LENGTH);\n            },\n            addData: function() {\n            },\n            invalidCharacterError: function(character) {\n                throw new Error(kendo.format(InvalidCharacterErrorTemplate, character, this.name));\n            }\n        });\n\n        var encodings = {};\n\n        var code39Base = Encoding.extend({\n            minBaseUnitLength: 0.7,\n            addData: function() {\n                var that = this,\n                    value = that.value;\n\n                that.addStart();\n\n                for (var idx = 0; idx < value.length; idx++) {\n                    that.addCharacter(value.charAt(idx));\n                }\n\n                if (that.options.addCheckSum) {\n                    that.pushCheckSum();\n                }\n\n                that.addStop();\n                that.prepareValues();\n            },\n            addCharacter: function(character) {\n                var that = this,\n                    charData = that.characterMap[character];\n                if (!charData) {\n                    that.invalidCharacterError(character);\n                }\n                that.addBase(charData);\n            },\n            addBase: function() {}\n        });\n\n        var code39ExtendedBase = {\n            addCharacter: function(character) {\n                var that = this;\n                if (that.characterMap[character]) {\n                    that.addBase(that.characterMap[character]);\n                }\n                else if (character.charCodeAt(0) > 127) {\n                    that.invalidCharacterError(character);\n                }\n                else {\n                    that.addExtended(character.charCodeAt(0));\n                }\n            },\n            addExtended: function(code) {\n                var that = this,\n                    patterns;\n                for (var i = 0; i < that.extendedMappings.length; i++) {\n                    if ((patterns = that.extendedMappings[i].call(that, code))) {\n                        for (var j = 0; j < patterns.length; j++) {\n                            that.addBase(patterns[j]);\n                        }\n                        that.dataLength += patterns.length - 1;\n                        return;\n                    }\n                }\n            },\n            extendedMappings: [\n                function(code) {\n                    if (97 <= code && code <= 122) {\n                        var that = this;\n                        return [that.characterMap[that.shiftCharacters[0]], that.characterMap[String.fromCharCode(code - 32)]];\n                    }\n                },\n                function(code) {\n                    if (33 <= code && code <= 58) {\n                        var that = this;\n                        return [that.characterMap[that.shiftCharacters[1]], that.characterMap[String.fromCharCode(code + 32)]];\n                    }\n                },\n                function(code) {\n                    if (1 <= code && code <= 26) {\n                        var that = this;\n                        return [that.characterMap[that.shiftCharacters[2]], that.characterMap[String.fromCharCode(code + 64)]];\n                    }\n                },\n                function(code) {\n                    var that = this,\n                        result,\n                        dataCharacter;\n                    if (!that.specialAsciiCodes[code]) {\n                        dataCharacter = Math.floor(code / 32) * 6 + (code - 27) % 32 + 64;\n                        result = [that.characterMap[that.shiftCharacters[3]], that.characterMap[String.fromCharCode(dataCharacter)]];\n                    }\n                    else {\n                        result = [];\n                        for (var i = 0; i < that.specialAsciiCodes[code].length; i++) {\n                            result.push(that.characterMap[that.shiftCharacters[3]]);\n                            result.push(that.characterMap[that.specialAsciiCodes[code][i]]);\n                        }\n                    }\n\n                    return result;\n                }\n            ],\n            specialAsciiCodes: {\n                \"0\": [\"U\"],\n                \"64\": [\"V\"],\n                \"96\": [\"W\"],\n                \"127\": [\"T\",\"X\",\"Y\",\"Z\"]\n            },\n            shiftValuesAsciiCodes: {\n                \"39\": 36,\n                \"40\": 47,\n                \"41\": 43,\n                \"42\": 37\n            },\n            characterMap: {\n                \"+\": false,\n                \"/\": false,\n                \"$\": false,\n                \"%\": false\n            },\n            shiftCharacters: [\"SHIFT0\", \"SHIFT1\", \"SHIFT2\", \"SHIFT3\"]\n        };\n\n        encodings.code39 = code39Base.extend({\n            name: \"Code 39\",\n            checkSumMod: 43,\n            minRatio: 2.5,\n            maxRatio: 3,\n            gapWidth: 1,\n            splitCharacter: \"|\",\n            initValue: function(value, width, height) {\n                var that = this;\n                that.width = width;\n                that.height = height;\n                that.value = value;\n                that.dataLength = value.length;\n                that.pattern = [];\n                that.patternString = \"\";\n            },\n            prepareValues: function() {\n                var that = this,\n                    baseUnit,\n                    minBaseUnit = that.minBaseUnitLength,\n                    ratio = that.maxRatio,\n                    minRatio = that.minRatio,\n                    minHeight = Math.max(0.15 * that.width, 24);\n                if (that.height < minHeight) {\n                    throw new Error(\"Insufficient Height. The minimum height for value: \" + that.value + \" is: \" + minHeight);\n                }\n\n                while ((baseUnit = that.getBaseUnit(ratio)) < minBaseUnit && ratio > minRatio) {\n                    ratio = parseFloat((ratio - 0.1).toFixed(1));\n                }\n\n                if (baseUnit < minBaseUnit) {\n                    var minWidth = Math.ceil(that.getBaseWidth(minRatio) * minBaseUnit);\n                    throw new Error(\"Insufficient width. The minimum width for value: \" + that.value + \" is: \" + minWidth);\n                }\n\n                that.ratio = ratio;\n                that.baseUnit = baseUnit;\n                that.patternString = that.patternString.substring(0, that.patternString.length - 1);\n                that.pattern = that.pattern.concat(that.patternString.replace(/ratio/g, ratio).split(that.splitCharacter));\n            },\n            getBaseUnit: function(ratio) {\n                return this.width / this.getBaseWidth(ratio);\n            },\n            getBaseWidth: function(ratio) {\n                var that = this,\n                    characterLength = 3 * (ratio + 2);\n                return that.quietZoneLength + characterLength * (that.dataLength + 2) + that.gapWidth * (that.dataLength + 1);\n            },\n            addStart: function() {\n                var that = this;\n                that.addPattern(that.characterMap.START.pattern);\n                that.addCharacterGap();\n            },\n            addBase: function(character) {\n                this.addPattern(character.pattern);\n                this.addCharacterGap();\n            },\n            addStop: function() {\n                this.addPattern(this.characterMap.START.pattern);\n            },\n            addPattern: function(pattern) {\n                for (var i = 0; i < pattern.length; i++) {\n                     this.patternString += this.patternMappings[pattern.charAt(i)];\n                }\n            },\n            addCharacterGap: function() {\n                var that = this;\n                that.patternString += that.gapWidth + that.splitCharacter;\n            },\n            patternMappings: {\n                \"b\": \"1|\",\n                \"w\": \"1|\",\n                \"B\": \"ratio|\",\n                \"W\": \"ratio|\"\n            },\n            characterMap: {\n                \"0\": { \"pattern\": \"bwbWBwBwb\",\"value\": 0 },\n                \"1\": { \"pattern\": \"BwbWbwbwB\",\"value\": 1 },\n                \"2\": { \"pattern\": \"bwBWbwbwB\",\"value\": 2 },\n                \"3\": { \"pattern\": \"BwBWbwbwb\",\"value\": 3 },\n                \"4\": { \"pattern\": \"bwbWBwbwB\",\"value\": 4 },\n                \"5\": { \"pattern\": \"BwbWBwbwb\",\"value\": 5 },\n                \"6\": { \"pattern\": \"bwBWBwbwb\",\"value\": 6 },\n                \"7\": { \"pattern\": \"bwbWbwBwB\",\"value\": 7 },\n                \"8\": { \"pattern\": \"BwbWbwBwb\",\"value\": 8 },\n                \"9\": { \"pattern\": \"bwBWbwBwb\",\"value\": 9 },\n                \"A\": { \"pattern\": \"BwbwbWbwB\",\"value\": 10 },\n                \"B\": { \"pattern\": \"bwBwbWbwB\",\"value\": 11 },\n                \"C\": { \"pattern\": \"BwBwbWbwb\",\"value\": 12 },\n                \"D\": { \"pattern\": \"bwbwBWbwB\",\"value\": 13 },\n                \"E\": { \"pattern\": \"BwbwBWbwb\",\"value\": 14 },\n                \"F\": { \"pattern\": \"bwBwBWbwb\",\"value\": 15 },\n                \"G\": { \"pattern\": \"bwbwbWBwB\",\"value\": 16 },\n                \"H\": { \"pattern\": \"BwbwbWBwb\",\"value\": 17 },\n                \"I\": { \"pattern\": \"bwBwbWBwb\",\"value\": 18 },\n                \"J\": { \"pattern\": \"bwbwBWBwb\",\"value\": 19 },\n                \"K\": { \"pattern\": \"BwbwbwbWB\",\"value\": 20 },\n                \"L\": { \"pattern\": \"bwBwbwbWB\",\"value\": 21 },\n                \"M\": { \"pattern\": \"BwBwbwbWb\",\"value\": 22 },\n                \"N\": { \"pattern\": \"bwbwBwbWB\",\"value\": 23 },\n                \"O\": { \"pattern\": \"BwbwBwbWb\",\"value\": 24 },\n                \"P\": { \"pattern\": \"bwBwBwbWb\",\"value\": 25 },\n                \"Q\": { \"pattern\": \"bwbwbwBWB\",\"value\": 26 },\n                \"R\": { \"pattern\": \"BwbwbwBWb\",\"value\": 27 },\n                \"S\": { \"pattern\": \"bwBwbwBWb\",\"value\": 28 },\n                \"T\": { \"pattern\": \"bwbwBwBWb\",\"value\": 29 },\n                \"U\": { \"pattern\": \"BWbwbwbwB\",\"value\": 30 },\n                \"V\": { \"pattern\": \"bWBwbwbwB\",\"value\": 31 },\n                \"W\": { \"pattern\": \"BWBwbwbwb\",\"value\": 32 },\n                \"X\": { \"pattern\": \"bWbwBwbwB\",\"value\": 33 },\n                \"Y\": { \"pattern\": \"BWbwBwbwb\",\"value\": 34 },\n                \"Z\": { \"pattern\": \"bWBwBwbwb\",\"value\": 35 },\n                \"-\": { \"pattern\": \"bWbwbwBwB\",\"value\": 36 },\n                \".\": { \"pattern\": \"BWbwbwBwb\",\"value\": 37 },\n                \" \": { \"pattern\": \"bWBwbwBwb\",\"value\": 38 },\n                \"$\": { \"pattern\": \"bWbWbWbwb\",\"value\": 39 },\n                \"/\": { \"pattern\": \"bWbWbwbWb\",\"value\": 40 },\n                \"+\": { \"pattern\": \"bWbwbWbWb\",\"value\": 41 },\n                \"%\": { \"pattern\": \"bwbWbWbWb\",\"value\": 42 },\n                START: { pattern: \"bWbwBwBwb\" }\n            },\n            options: {\n                addCheckSum: false\n            }\n        });\n\n        encodings.code39extended = encodings.code39.extend(deepExtend({}, code39ExtendedBase, {\n            name: \"Code 39 extended\",\n            characterMap: {\n                SHIFT0: { \"pattern\": \"bWbwbWbWb\",\"value\": 41 },\n                SHIFT1: { \"pattern\": \"bWbWbwbWb\",\"value\": 40 },\n                SHIFT2: { \"pattern\": \"bWbWbWbwb\",\"value\": 39 },\n                SHIFT3: { \"pattern\": \"bwbWbWbWb\",\"value\": 42 }\n            }\n        }));\n\n        encodings.code93 = code39Base.extend({\n            name: \"Code 93\",\n            cCheckSumTotal: 20,\n            kCheckSumTotal: 15,\n            checkSumMod: 47,\n            initValue: function(value, width, height) {\n                var that = this;\n                that.value = value;\n                that.width = width;\n                that.height = height;\n                that.pattern = [];\n                that.values = [];\n                that.dataLength = value.length;\n            },\n            prepareValues: function() {\n                var that = this,\n                    minHeight = Math.max(0.15 * that.width, 24);\n                if (that.height < minHeight) {\n                    throw new Error(\"Insufficient Height\");\n                }\n\n                that.setBaseUnit();\n\n                if (that.baseUnit < that.minBaseUnitLength) {\n                    throw new Error(\"Insufficient Width\");\n                }\n            },\n            setBaseUnit: function() {\n                var that = this,\n                    checkSumLength = 2;\n                that.baseUnit = that.width / (9 * (that.dataLength + 2 + checkSumLength) + that.quietZoneLength + 1);\n            },\n            addStart: function() {\n                var pattern = this.characterMap.START.pattern;\n                this.addPattern(pattern);\n            },\n            addStop: function() {\n                var that = this;\n                that.addStart();\n                that.pattern.push(that.characterMap.TERMINATION_BAR);\n            },\n            addBase: function(charData) {\n                this.addPattern(charData.pattern);\n                this.values.push(charData.value);\n            },\n            pushCheckSum: function() {\n                var that = this,\n                    checkValues = that._getCheckValues(),\n                    charData;\n\n                that.checksum = checkValues.join(\"\");\n                for (var i = 0; i < checkValues.length; i++) {\n                    charData = that.characterMap[that._findCharacterByValue(checkValues[i])];\n                    that.addPattern(charData.pattern);\n                }\n            },\n            _getCheckValues: function() {\n                var that = this,\n                    values = that.values,\n                    length = values.length,\n                    wightedSum = 0,\n                    cValue,\n                    kValue,\n                    idx;\n\n                for (idx = length - 1; idx >= 0; idx--) {\n                    wightedSum += that.weightedValue(values[idx],length - idx, that.cCheckSumTotal);\n                }\n                cValue = wightedSum % that.checkSumMod;\n\n                wightedSum = that.weightedValue(cValue, 1, that.kCheckSumTotal);\n                for (idx = length - 1; idx >= 0; idx--) {\n                    wightedSum += that.weightedValue(values[idx], length - idx + 1, that.kCheckSumTotal);\n                }\n\n                kValue = wightedSum % that.checkSumMod;\n                return [cValue, kValue];\n            },\n            _findCharacterByValue: function(value) {\n                for (var character in this.characterMap) {\n                    if (this.characterMap[character].value === value) {\n                        return character;\n                    }\n                }\n            },\n            weightedValue: function(value, index, total) {\n                return (index % total || total) * value;\n            },\n            addPattern: function(pattern) {\n                var value;\n\n                for (var i = 0; i < pattern.length; i++) {\n                    value = parseInt(pattern.charAt(i),10);\n                    this.pattern.push(value);\n                }\n            },\n            characterMap: {\n                \"0\": { \"pattern\": \"131112\",\"value\": 0 },\n                \"1\": { \"pattern\": \"111213\",\"value\": 1 },\n                \"2\": { \"pattern\": \"111312\",\"value\": 2 },\n                \"3\": { \"pattern\": \"111411\",\"value\": 3 },\n                \"4\": { \"pattern\": \"121113\",\"value\": 4 },\n                \"5\": { \"pattern\": \"121212\",\"value\": 5 },\n                \"6\": { \"pattern\": \"121311\",\"value\": 6 },\n                \"7\": { \"pattern\": \"111114\",\"value\": 7 },\n                \"8\": { \"pattern\": \"131211\",\"value\": 8 },\n                \"9\": { \"pattern\": \"141111\",\"value\": 9 },\n                \"A\": { \"pattern\": \"211113\",\"value\": 10 },\n                \"B\": { \"pattern\": \"211212\",\"value\": 11 },\n                \"C\": { \"pattern\": \"211311\",\"value\": 12 },\n                \"D\": { \"pattern\": \"221112\",\"value\": 13 },\n                \"E\": { \"pattern\": \"221211\",\"value\": 14 },\n                \"F\": { \"pattern\": \"231111\",\"value\": 15 },\n                \"G\": { \"pattern\": \"112113\",\"value\": 16 },\n                \"H\": { \"pattern\": \"112212\",\"value\": 17 },\n                \"I\": { \"pattern\": \"112311\",\"value\": 18 },\n                \"J\": { \"pattern\": \"122112\",\"value\": 19 },\n                \"K\": { \"pattern\": \"132111\",\"value\": 20 },\n                \"L\": { \"pattern\": \"111123\",\"value\": 21 },\n                \"M\": { \"pattern\": \"111222\",\"value\": 22 },\n                \"N\": { \"pattern\": \"111321\",\"value\": 23 },\n                \"O\": { \"pattern\": \"121122\",\"value\": 24 },\n                \"P\": { \"pattern\": \"131121\",\"value\": 25 },\n                \"Q\": { \"pattern\": \"212112\",\"value\": 26 },\n                \"R\": { \"pattern\": \"212211\",\"value\": 27 },\n                \"S\": { \"pattern\": \"211122\",\"value\": 28 },\n                \"T\": { \"pattern\": \"211221\",\"value\": 29 },\n                \"U\": { \"pattern\": \"221121\",\"value\": 30 },\n                \"V\": { \"pattern\": \"222111\",\"value\": 31 },\n                \"W\": { \"pattern\": \"112122\",\"value\": 32 },\n                \"X\": { \"pattern\": \"112221\",\"value\": 33 },\n                \"Y\": { \"pattern\": \"122121\",\"value\": 34 },\n                \"Z\": { \"pattern\": \"123111\",\"value\": 35 },\n                \"-\": { \"pattern\": \"121131\",\"value\": 36 },\n                \".\": { \"pattern\": \"311112\",\"value\": 37 },\n                \" \": { \"pattern\": \"311211\",\"value\": 38 },\n                \"$\": { \"pattern\": \"321111\",\"value\": 39 },\n                \"/\": { \"pattern\": \"112131\",\"value\": 40 },\n                \"+\": { \"pattern\": \"113121\",\"value\": 41 },\n                \"%\": { \"pattern\": \"211131\",\"value\": 42 },\n                SHIFT0: { \"pattern\": \"122211\",\"value\": 46 },\n                SHIFT1: { \"pattern\": \"311121\",\"value\": 45 },\n                SHIFT2: { \"pattern\": \"121221\",\"value\": 43 },\n                SHIFT3: { \"pattern\": \"312111\",\"value\": 44 },\n                START: { \"pattern\": \"111141\" },\n                TERMINATION_BAR: \"1\"\n            }\n        });\n\n        encodings.code93extended = encodings.code93.extend(deepExtend({}, code39ExtendedBase, {\n            name: \"Code 93 extended\",\n            pushCheckSum: function() {\n                var that = this,\n                    checkValues = that._getCheckValues(),\n                    value;\n\n                that.checksum = checkValues.join(\"\");\n\n                for (var i = 0; i < checkValues.length; i++) {\n                    value = checkValues[i];\n                    if (that.shiftValuesAsciiCodes[value]) {\n                        that.addExtended(that.shiftValuesAsciiCodes[value]);\n                    }\n                    else {\n                        that.addPattern(that.characterMap[that._findCharacterByValue(value)].pattern);\n                    }\n                }\n            }\n        }));\n\n        var state128 = kendo.Class.extend({\n            init: function(encoding) {\n                this.encoding = encoding;\n            },\n            addStart: function() {},\n            is: function() {},\n            move: function() {},\n            pushState: function() {}\n        });\n\n        var state128AB = state128.extend({\n            FNC4: \"FNC4\",\n            init: function(encoding, states) {\n                var that = this;\n                that.encoding = encoding;\n                that.states = states;\n                that._initMoves(states);\n            },\n            addStart: function() {\n                this.encoding.addPattern(this.START);\n            },\n            is: function(value, index) {\n                var code = value.charCodeAt(index);\n                return this.isCode(code);\n            },\n            move: function(encodingState) {\n                var that = this,\n                    idx = 0;\n\n                while (!that._moves[idx].call(that, encodingState) && idx < that._moves.length) {\n                    idx++;\n                }\n            },\n            pushState: function(encodingState) {\n                var that = this,\n                    states = that.states,\n                    value = encodingState.value,\n                    maxLength = value.length,\n                    code;\n\n                if (inArray(\"C\", states) >= 0) {\n                    var numberMatch = value.substr(encodingState.index).match(/\\d{4,}/g);\n                    if (numberMatch) {\n                        maxLength = value.indexOf(numberMatch[0], encodingState.index);\n                    }\n                }\n\n                while ((code = encodingState.value.charCodeAt(encodingState.index)) >= 0 &&\n                    that.isCode(code) && encodingState.index < maxLength) {\n                    that.encoding.addPattern(that.getValue(code));\n                    encodingState.index++;\n                }\n            },\n            _initMoves: function(states) {\n                var that = this;\n                that._moves = [];\n\n                if (inArray(that.FNC4, states) >= 0) {\n                    that._moves.push(that._moveFNC);\n                }\n\n                if (inArray(that.shiftKey, states) >= 0) {\n                    that._moves.push(that._shiftState);\n                }\n                that._moves.push(that._moveState);\n            },\n            _moveFNC: function(encodingState) {\n                if (encodingState.fnc) {\n                    encodingState.fnc = false;\n                    return encodingState.previousState == this.key;\n                }\n            },\n            _shiftState: function(encodingState) {\n                var that = this;\n                if (encodingState.previousState == that.shiftKey &&\n                    (encodingState.index + 1 >= encodingState.value.length ||\n                        that.encoding[that.shiftKey].is(encodingState.value, encodingState.index + 1))) {\n                    that.encoding.addPattern(that.SHIFT);\n                    encodingState.shifted = true;\n                    return true;\n                }\n            },\n            _moveState: function() {\n                this.encoding.addPattern(this.MOVE);\n                return true;\n            },\n            SHIFT: 98\n        });\n\n        var states128 = {};\n\n        states128.A = state128AB.extend({\n            key: \"A\",\n            shiftKey: \"B\",\n            isCode: function(code) {\n                return code >= 0 && code < 96;\n            },\n            getValue: function(code) {\n                if (code < 32) {\n                    return code + 64;\n                }\n\n                return code - 32;\n            },\n            MOVE: 101,\n            START: 103\n        });\n\n        states128.B = state128AB.extend({\n            key: \"B\",\n            shiftKey: \"A\",\n            isCode: function(code) {\n                return code >= 32 && code < 128;\n            },\n            getValue: function(code) {\n                return code - 32;\n            },\n            MOVE: 100,\n            START: 104\n        });\n\n        states128.C = state128.extend({\n            key: \"C\",\n            addStart: function() {\n                this.encoding.addPattern(this.START);\n            },\n            is: function(value, index) {\n                var next4 = getNext(value, index, 4);\n                return (index + 4 <= value.length || value.length == 2) && numberRegex.test(next4);\n            },\n            move: function() {\n                this.encoding.addPattern(this.MOVE);\n            },\n            pushState: function(encodingState) {\n                var code;\n                while (( code = getNext(encodingState.value, encodingState.index, 2)) &&\n                    numberRegex.test(code) && code.length == 2)\n                {\n                    this.encoding.addPattern(parseInt(code, 10));\n                    encodingState.index += 2;\n                }\n            },\n            getValue: function(code) {\n                return code;\n            },\n            MOVE: 99,\n            START: 105\n        });\n\n        states128.FNC4 = state128.extend({\n            key: \"FNC4\",\n            dependentStates: [\"A\",\"B\"],\n            init: function(encoding, states) {\n                this.encoding = encoding;\n                this._initSubStates(states);\n            },\n            addStart: function(encodingState) {\n                var code = encodingState.value.charCodeAt(0) - 128,\n                    subState = this._getSubState(code);\n\n                this.encoding[subState].addStart();\n            },\n            is: function(value, index) {\n                var code = value.charCodeAt(index);\n                return this.isCode(code);\n            },\n            isCode: function(code) {\n                return code >= 128 && code < 256;\n            },\n            pushState: function(encodingState) {\n                var that = this,\n                    subState = that._initSubState(encodingState),\n                    encoding = that.encoding,\n                    length = subState.value.length;\n                encodingState.index += length;\n\n                if (length < 3) {\n                    var code;\n                    for (; subState.index < length; subState.index++) {\n                        code = subState.value.charCodeAt(subState.index);\n                        subState.state = that._getSubState(code);\n                        if (subState.previousState != subState.state) {\n                            subState.previousState = subState.state;\n                            encoding[subState.state].move(subState);\n                        }\n                        encoding.addPattern(encoding[subState.state].MOVE);\n                        encoding.addPattern(encoding[subState.state].getValue(code));\n                    }\n                }\n                else {\n                    if (subState.state != subState.previousState) {\n                        encoding[subState.state].move(subState);\n                    }\n                    that._pushStart(subState);\n                    encoding.pushData(subState, that.subStates);\n                    if (encodingState.index < encodingState.value.length) {\n                        that._pushStart(subState);\n                    }\n                }\n\n                encodingState.fnc = true;\n                encodingState.state = subState.state;\n            },\n            _pushStart: function(subState) {\n                var that = this;\n                that.encoding.addPattern(that.encoding[subState.state].MOVE);\n                that.encoding.addPattern(that.encoding[subState.state].MOVE);\n            },\n            _initSubState: function(encodingState) {\n                var that = this,\n                    subState = {\n                        value: that._getAll(encodingState.value, encodingState.index),\n                        index: 0\n                    };\n                subState.state = that._getSubState(subState.value.charCodeAt(0));\n                subState.previousState = encodingState.previousState == that.key ?\n                    subState.state : encodingState.previousState;\n                return subState;\n            },\n            _initSubStates: function(states) {\n                var that = this;\n                that.subStates = [];\n                for (var i = 0; i < states.length; i++) {\n                    if (inArray(states[i], that.dependentStates) >= 0) {\n                        that.subStates.push(states[i]);\n                    }\n                }\n            },\n            _getSubState: function(code) {\n                var that = this;\n                for (var i = 0; i < that.subStates.length; i++) {\n                    if (that.encoding[that.subStates[i]].isCode(code)) {\n                        return that.subStates[i];\n                    }\n                }\n            },\n            _getAll: function(value, index) {\n                var code,\n                    result = \"\";\n                while ((code = value.charCodeAt(index++)) && this.isCode(code)) {\n                    result += String.fromCharCode(code - 128);\n                }\n                return result;\n            }\n        });\n\n        states128.FNC1 = state128.extend({\n            key: \"FNC1\",\n            startState: \"C\",\n            dependentStates: [\"C\",\"B\"],\n            startAI: \"(\",\n            endAI: \")\",\n            init: function(encoding, states) {\n                this.encoding = encoding;\n                this.states = states;\n            },\n            addStart: function() {\n                this.encoding[this.startState].addStart();\n            },\n            is: function() {\n                return inArray(this.key, this.states) >= 0;\n            },\n            pushState: function(encodingState) {\n                var that = this,\n                    encoding = that.encoding,\n                    value = encodingState.value.replace(/\\s/g, \"\"),\n                    regexSeparators = new RegExp(\"[\" + that.startAI + that.endAI + \"]\", \"g\"),\n                    index = encodingState.index,\n                    subState = {\n                        state: that.startState\n                    },\n                    current,\n                    nextStart,\n                    separatorLength;\n\n                encoding.addPattern(that.START);\n\n                while (true) {\n                    subState.index = 0;\n\n                    separatorLength = value.charAt(index) === that.startAI ? 2 : 0;\n                    current = separatorLength > 0 ? that.getBySeparator(value, index) : that.getByLength(value, index);\n                    if (current.ai.length) {\n                        nextStart = index + separatorLength + current.id.length + current.ai.length;\n                    }\n                    else {\n                        nextStart = value.indexOf(that.startAI, index + 1);\n                        if (nextStart < 0) {\n                            if (index + current.ai.max + current.id.length + separatorLength < value.length) {\n                                throw new Error(\"Separators are required after variable length identifiers\");\n                            }\n                            nextStart = value.length;\n                        }\n                    }\n                    subState.value = value.substring(index, nextStart).replace(regexSeparators, \"\");\n                    that.validate(current, subState.value);\n\n                    encoding.pushData(subState, that.dependentStates);\n\n                    if (nextStart >= value.length) {\n                        break;\n                    }\n\n                    index = nextStart;\n\n                    if (subState.state != that.startState) {\n                        encoding[that.startState].move(subState);\n                        subState.state = that.startState;\n                    }\n\n                    if (!current.ai.length) {\n                        encoding.addPattern(that.START);\n                    }\n                }\n                encodingState.index = encodingState.value.length;\n            },\n            validate: function(current, value) {\n                var code = value.substr(current.id.length),\n                    ai = current.ai;\n                if (!ai.type && !numberRegex.test(code)) {\n                    throw new Error(\"Application identifier \" + current.id + \" is numeric only but contains non numeric character(s).\");\n                }\n\n                if (ai.type == \"alphanumeric\" && !alphanumericRegex.test(code)) {\n                     throw new Error(\"Application identifier \" + current.id + \" is alphanumeric only but contains non alphanumeric character(s).\");\n                }\n\n                if (ai.length && ai.length !== code.length) {\n                     throw new Error(\"Application identifier \" + current.id + \" must be \" + ai.length + \" characters long.\");\n                }\n\n                if (ai.min && ai.min > code.length) {\n                     throw new Error(\"Application identifier \" + current.id + \" must be at least \" + ai.min + \" characters long.\");\n                }\n\n                if (ai.max && ai.max < code.length) {\n                     throw new Error(\"Application identifier \" + current.id + \" must be at most \" + ai.max + \" characters long.\");\n                }\n            },\n            getByLength: function(value, index) {\n                var that = this,\n                    id,\n                    ai;\n                for (var i = 2; i <= 4; i++) {\n                    id = getNext(value, index, i);\n                    ai = that.getAI(id) || that.getAI(id.substring(0, id.length - 1));\n                    if (ai) {\n                        return {\n                            id: id,\n                            ai: ai\n                        };\n                    }\n                }\n                that.unsupportedAIError(id);\n            },\n            unsupportedAIError: function(id) {\n                throw new Error(kendo.format(\"'{0}' is not a supported Application Identifier\"),id);\n            },\n            getBySeparator: function(value, index) {\n                var that = this,\n                    start = value.indexOf(that.startAI, index),\n                    end = value.indexOf(that.endAI, start),\n                    id = value.substring(start + 1,end),\n                    ai = that.getAI(id) || that.getAI(id.substr(id.length - 1));\n                if (!ai) {\n                    that.unsupportedAIError(id);\n                }\n\n                return {\n                    ai: ai,\n                    id: id\n                };\n            },\n            getAI: function(id) {\n                var ai = this.applicationIdentifiers,\n                    multiKey = ai.multiKey;\n                if (ai[id]) {\n                    return ai[id];\n                }\n\n                for (var i = 0; i < multiKey.length; i++) {\n                    if (multiKey[i].ids && inArray(id, multiKey[i].ids) >= 0) {\n                        return multiKey[i].type;\n                    }\n                    else if (multiKey[i].ranges) {\n                        var ranges = multiKey[i].ranges;\n                        for (var j = 0; j < ranges.length; j++) {\n                            if (ranges[j][0] <= id && id <= ranges[j][1]) {\n                                return multiKey[i].type;\n                            }\n                        }\n                    }\n                }\n            },\n            applicationIdentifiers: {\n                \"22\": { max: 29, type: \"alphanumeric\" },\n                \"402\": { length: 17 },\n                \"7004\": { max: 4, type: \"alphanumeric\" },\n                \"242\": { max: 6, type: \"alphanumeric\" },\n                \"8020\": { max: 25, type: \"alphanumeric\" },\n                \"703\": { min: 3, max: 30, type: \"alphanumeric\" },\n                \"8008\": { min: 8, max: 12, type: \"alphanumeric\" },\n                \"253\": { min: 13, max: 17, type: \"alphanumeric\" },\n                \"8003\": { min: 14, max: 30, type: \"alphanumeric\" },\n                multiKey: [{\n                    ids: [\"15\", \"17\", \"8005\", \"8100\"],\n                    ranges: [\n                        [11, 13],\n                        [310, 316],\n                        [320, 336],\n                        [340, 369]\n                    ],\n                    type: { length: 6 }\n                },{\n                    ids: [\"240\", \"241\", \"250\", \"251\", \"400\", \"401\", \"403\", \"7002\", \"8004\", \"8007\", \"8110\"],\n                    ranges: [[90 - 99]],\n                    type: { max: 30, type: \"alphanumeric\" }\n                },{\n                    ids: [\"7001\"],\n                    ranges: [[410, 414]],\n                    type: { length: 13 }\n                },{\n                    ids: [\"10\",\"21\", \"254\", \"420\", \"8002\"],\n                    type: { max: 20, type: \"alphanumeric\" }\n                },{\n                    ids: [\"00\", \"8006\", \"8017\", \"8018\"],\n                    type: { length: 18 }\n                },{\n                    ids: [\"01\", \"02\", \"8001\"],\n                    type: { length: 14 }\n                },{\n                    ids: [\"422\"],\n                    ranges: [\n                        [424, 426]\n                    ],\n                    type: { length: 3 }\n                },{\n                    ids: [\"20\", \"8102\"],\n                    type: { length: 2 }\n                },{\n                    ids: [\"30\",\"37\"],\n                    type: { max: 8, type: \"alphanumeric\" }\n                },{\n                    ids: [\"390\",\"392\"],\n                    type: { max: 15, type: \"alphanumeric\" }\n                },{\n                    ids: [\"421\", \"423\"],\n                    type: { min: 3, max: 15, type: \"alphanumeric\" }\n                }, {\n                    ids: [\"391\", \"393\"],\n                    type: { min: 3, max: 18, type: \"alphanumeric\" }\n                },{\n                    ids: [\"7003\", \"8101\"],\n                    type: { length: 10 }\n                }]\n            },\n            START: 102\n        });\n\n        var code128Base = Encoding.extend({\n            init: function(options) {\n                Encoding.fn.init.call(this, options);\n                this._initStates();\n            },\n            _initStates: function() {\n                var that = this;\n                for (var i = 0; i < that.states.length; i++) {\n                    that[that.states[i]] = new states128[that.states[i]](that, that.states);\n                }\n            },\n            initValue: function(value, width, height) {\n               var that = this;\n               that.pattern = [];\n               that.value = value;\n               that.width = width;\n               that.height = height;\n               that.checkSum = 0;\n               that.totalUnits = 0;\n               that.index = 0;\n               that.position = 1;\n            },\n            addData: function() {\n                var that = this,\n                    encodingState = {\n                        value: that.value,\n                        index: 0,\n                        state: \"\"\n                    };\n                if (that.value.length === 0) {\n                    return;\n                }\n\n                encodingState.state =\n                    encodingState.previousState = that.getNextState(encodingState, that.states);\n\n                that.addStart(encodingState);\n\n                that.pushData(encodingState, that.states);\n\n                that.addCheckSum();\n                that.addStop();\n                that.setBaseUnit();\n            },\n            pushData: function(encodingState, states) {\n                var that = this;\n                while (true) {\n                    that[encodingState.state].pushState(encodingState);\n                    if (encodingState.index >= encodingState.value.length) {\n                        break;\n                    }\n\n                    if (!encodingState.shifted) {\n                        encodingState.previousState = encodingState.state;\n                        encodingState.state = that.getNextState(encodingState, states);\n                        that[encodingState.state].move(encodingState);\n                    }\n                    else {\n                       var temp = encodingState.state;\n                       encodingState.state = encodingState.previousState;\n                       encodingState.previousState = temp;\n                       encodingState.shifted = false;\n                    }\n                }\n            },\n            addStart: function(encodingState) {\n                this[encodingState.state].addStart(encodingState);\n                this.position = 1;\n            },\n            addCheckSum: function() {\n                var that = this;\n\n                that.checksum = that.checkSum % 103;\n                that.addPattern(that.checksum);\n            },\n            addStop: function() {\n                this.addPattern(this.STOP);\n            },\n            setBaseUnit: function() {\n                var that = this;\n                that.baseUnit = that.width / (that.totalUnits + that.quietZoneLength);\n            },\n            addPattern: function(code) {\n                var that = this,\n                    pattern = that.characterMap[code].toString(),\n                    value;\n\n                for (var i = 0; i < pattern.length; i++) {\n                    value = parseInt(pattern.charAt(i),10);\n                    that.pattern.push(value);\n                    that.totalUnits += value;\n                }\n                that.checkSum += code * that.position++;\n            },\n            getNextState: function(encodingState, states) {\n                for (var i = 0; i < states.length; i++) {\n                    if (this[states[i]].is(encodingState.value, encodingState.index)) {\n                        return states[i];\n                    }\n                }\n                this.invalidCharacterError(encodingState.value.charAt(encodingState.index));\n            },\n            characterMap: [\n                212222,222122,222221,121223,121322,131222,122213,122312,132212,221213,\n                221312,231212,112232,122132,122231,113222,123122,123221,223211,221132,\n                221231,213212,223112,312131,311222,321122,321221,312212,322112,322211,\n                212123,212321,232121,111323,131123,131321,112313,132113,132311,211313,\n                231113,231311,112133,112331,132131,113123,113321,133121,313121,211331,\n                231131,213113,213311,213131,311123,311321,331121,312113,312311,332111,\n                314111,221411,431111,111224,111422,121124,121421,141122,141221,112214,\n                112412,122114,122411,142112,142211,241211,221114,413111,241112,134111,\n                111242,121142,121241,114212,124112,124211,411212,421112,421211,212141,\n                214121,412121,111143,111341,131141,114113,114311,411113,411311,113141,\n                114131,311141,411131,211412,211214,211232,2331112\n            ],\n            STOP: 106\n        });\n\n        encodings.code128a = code128Base.extend({\n            name: \"Code 128 A\",\n            states: [\"A\"]\n        });\n\n\n        encodings.code128b = code128Base.extend({\n            name: \"Code 128 B\",\n            states: [\"B\"]\n        });\n\n        encodings.code128c = code128Base.extend({\n            name: \"Code 128 C\",\n            states: [\"C\"]\n        });\n\n        encodings.code128 = code128Base.extend({\n            name: \"Code 128\",\n            states: [\"C\", \"B\", \"A\", \"FNC4\"]\n        });\n\n        encodings[\"gs1-128\"] = code128Base.extend({\n           name: \"Code GS1-128\",\n           states: [\"FNC1\", \"C\", \"B\"]\n        });\n\n        var msiBase = Encoding.extend({\n            initValue: function(value, width) {\n                var that = this;\n                that.pattern = [];\n                that.value = value;\n                that.checkSumLength = 0;\n                that.width = width;\n            },\n            setBaseUnit: function() {\n                var that = this,\n                    startStopLength = 7;\n\n                that.baseUnit = that.width /\n                        ( 12 * (that.value.length + that.checkSumLength) + that.quietZoneLength + startStopLength);\n            },\n            addData: function() {\n                var that = this,\n                    value = that.value;\n                that.addPattern(that.START);\n\n                for (var i = 0; i < value.length; i++) {\n                    that.addCharacter(value.charAt(i));\n                }\n\n                if (that.options.addCheckSum) {\n                    that.addCheckSum();\n                }\n\n                that.addPattern(that.STOP);\n                that.setBaseUnit();\n            },\n            addCharacter: function(character) {\n                var that = this,\n                    pattern = that.characterMap[character];\n                if (!pattern) {\n                    that.invalidCharacterError(character);\n                }\n                that.addPattern(pattern);\n            },\n            addPattern: function(pattern) {\n                for (var i = 0; i < pattern.length; i++) {\n                    this.pattern.push(parseInt(pattern.charAt(i),10));\n                }\n            },\n            addCheckSum: function() {\n                var that = this,\n                    checkSumFunction = that.checkSums[that.checkSumType],\n                    checkValues;\n\n                checkValues = checkSumFunction.call(that.checkSums, that.value);\n\n                that.checksum = checkValues.join(\"\");\n                for (var i = 0; i < checkValues.length; i++) {\n                    that.checkSumLength++;\n                    that.addPattern(that.characterMap[checkValues[i]]);\n                }\n            },\n            checkSums: {\n                Modulo10: function(value) {\n                    var checkValues = [0, \"\"],\n                    odd = value.length % 2,\n                    idx,\n                    evenSum,\n                    oddSum;\n\n                    for (idx = 0; idx < value.length; idx++) {\n                        checkValues[(idx + odd) % 2] += parseInt(value.charAt(idx),10);\n                    }\n\n                    oddSum = checkValues[0];\n                    evenSum = (checkValues[1] * 2).toString();\n\n                    for (idx = 0; idx < evenSum.length; idx++) {\n                        oddSum += parseInt(evenSum.charAt(idx),10);\n                    }\n\n                    return [(10 - (oddSum % 10)) % 10];\n                },\n                Modulo11: function(value) {\n                    var weightedSum = 0,\n                        mod = 11,\n                        length = value.length,\n                        weight,\n                        checkValue;\n\n                    for (var i = 0; i < length; i++) {\n                        weight = ((length - i) % 6 || 6) + 1;\n                        weightedSum += weight * value.charAt(i);\n                    }\n                    checkValue = (mod - weightedSum % mod) % mod;\n                    if (checkValue != 10) {\n                        return [checkValue];\n                    }\n                    return [1, 0];\n                },\n                Modulo11Modulo10: function(value) {\n                    var checkValues = this.Modulo11(value),\n                        mod11Value;\n                    mod11Value = value + checkValues[0];\n\n                    return checkValues.concat(this.Modulo10(mod11Value));\n                },\n                Modulo10Modulo10: function(value) {\n                    var checkValues = this.Modulo10(value),\n                        mod10Value;\n                    mod10Value = value + checkValues[0];\n\n                    return checkValues.concat(this.Modulo10(mod10Value));\n                }\n            },\n            characterMap: [\"12121212\", \"12121221\",\"12122112\", \"12122121\", \"12211212\", \"12211221\", \"12212112\", \"12212121\", \"21121212\", \"21121221\"],\n            START: \"21\",\n            STOP: \"121\",\n            checkSumType: \"\"\n        });\n\n        encodings.msimod10 = msiBase.extend({\n            name: \"MSI Modulo10\",\n            checkSumType: \"Modulo10\"\n        });\n\n        encodings.msimod11 = msiBase.extend({\n            name: \"MSI Modulo11\",\n            checkSumType: \"Modulo11\"\n        });\n\n        encodings.msimod1110 = msiBase.extend({\n            name: \"MSI Modulo11 Modulo10\",\n            checkSumType: \"Modulo11Modulo10\"\n        });\n\n        encodings.msimod1010 = msiBase.extend({\n            name: \"MSI Modulo10 Modulo10\",\n            checkSumType: \"Modulo10Modulo10\"\n        });\n\n        encodings.code11 = Encoding.extend({\n            name: \"Code 11\",\n            cCheckSumTotal: 10,\n            kCheckSumTotal: 9,\n            kCheckSumMinLength: 10,\n            checkSumMod: 11,\n            DASH_VALUE: 10,\n            DASH: \"-\",\n            START: \"112211\",\n            STOP: \"11221\",\n            initValue: function(value, width) {\n                var that = this;\n                that.pattern = [];\n                that.value = value;\n                that.width = width;\n                that.totalUnits = 0;\n            },\n            addData: function() {\n                var that = this;\n                var value = that.value;\n                that.addPattern(that.START);\n\n                for (var i = 0; i < value.length; i++) {\n                    that.addCharacter(value.charAt(i));\n                }\n\n                if (that.options.addCheckSum) {\n                    that.addCheckSum();\n                }\n\n                that.addPattern(that.STOP);\n                that.setBaseUnit();\n            },\n            setBaseUnit: function() {\n                var that = this;\n                that.baseUnit = that.width / (that.totalUnits + that.quietZoneLength);\n            },\n            addCheckSum: function() {\n                var that = this,\n                    value = that.value,\n                    length = value.length,\n                    cValue;\n\n                cValue = that.getWeightedSum(value, length, that.cCheckSumTotal) % that.checkSumMod;\n                that.checksum = cValue + \"\";\n                that.addPattern(that.characterMap[cValue]);\n\n                length++;\n                if (length >= that.kCheckSumMinLength) {\n                    var kValue = (cValue + that.getWeightedSum(value, length, that.kCheckSumTotal)) % that.checkSumMod;\n                    that.checksum += kValue;\n                    that.addPattern(that.characterMap[kValue]);\n                }\n            },\n            getWeightedSum: function(value, length, total) {\n                var weightedSum = 0;\n                for (var i = 0; i < value.length; i++) {\n                    weightedSum += this.weightedValue(this.getValue(value.charAt(i)), length, i, total);\n                }\n\n                return weightedSum;\n            },\n            weightedValue: function(value, length, index, total) {\n                var weight = (length - index) % total || total;\n                return weight * value;\n            },\n            getValue: function(character) {\n                var that = this;\n                if (!isNaN(character)) {\n                    return parseInt(character,10);\n                }\n                else if (character !== that.DASH) {\n                    that.invalidCharacterError(character);\n                }\n                return that.DASH_VALUE;\n            },\n            addCharacter: function(character) {\n                var that = this,\n                    value = that.getValue(character),\n                    pattern = that.characterMap[value];\n                that.addPattern(pattern);\n            },\n            addPattern: function(pattern) {\n                var value;\n                for (var i = 0; i < pattern.length; i++) {\n                    value = parseInt(pattern.charAt(i),10);\n                    this.pattern.push(value);\n                    this.totalUnits += value;\n                }\n            },\n            characterMap: [\"111121\", \"211121\", \"121121\", \"221111\", \"112121\", \"212111\", \"122111\", \"111221\", \"211211\", \"211111\", \"112111\"],\n            options: {\n                addCheckSum: true\n            }\n        });\n\n        encodings.postnet = Encoding.extend({\n            name: \"Postnet\",\n            START: \"2\",\n            VALID_CODE_LENGTHS: [5,9, 11],\n            DIGIT_SEPARATOR: \"-\",\n            initValue: function(value, width, height) {\n                var that = this;\n                that.height = height;\n                that.width = width;\n                that.baseHeight = height / 2;\n                that.value = value.replace(new RegExp(that.DIGIT_SEPARATOR,\"g\"), \"\");\n                that.pattern = [];\n                that.validate(that.value);\n                that.checkSum = 0;\n                that.setBaseUnit();\n            },\n            addData: function() {\n                var that = this,\n                    value = that.value;\n                that.addPattern(that.START);\n\n                for (var i = 0; i < value.length; i++) {\n                    that.addCharacter(value.charAt(i));\n                }\n\n                if (that.options.addCheckSum) {\n                    that.addCheckSum();\n                }\n\n                that.addPattern(that.START);\n                that.pattern.pop();\n            },\n            addCharacter: function(character) {\n                var that = this,\n                    pattern = that.characterMap[character];\n                that.checkSum += parseInt(character,10);\n                that.addPattern(pattern);\n            },\n            addCheckSum: function() {\n                var that = this;\n                that.checksum = (10 - (that.checkSum % 10)) % 10;\n                that.addCharacter(that.checksum);\n            },\n            setBaseUnit: function() {\n                var that = this,\n                    startStopLength = 3;\n                that.baseUnit = that.width / ((that.value.length + 1) * 10 + startStopLength + that.quietZoneLength);\n            },\n            validate: function(value) {\n                var that = this;\n\n                if (!numberRegex.test(value)) {\n                    that.invalidCharacterError(value.match(/[^0-9]/)[0]);\n                }\n                if (inArray(value.length, that.VALID_CODE_LENGTHS) < 0) {\n                    throw new Error(\"Invalid value length. Valid lengths for the Postnet symbology are \" + that.VALID_CODE_LENGTHS.join(\",\"));\n                }\n            },\n            addPattern: function(pattern) {\n                var that = this,\n                    y1;\n                for (var i = 0; i < pattern.length; i++) {\n                    y1 = that.height - that.baseHeight * pattern.charAt(i);\n                    that.pattern.push({ width: 1, y1: y1, y2: that.height });\n                    that.pattern.push(1);\n                }\n            },\n            characterMap: [\"22111\", \"11122\", \"11212\", \"11221\", \"12112\", \"12121\", \"12211\", \"21112\", \"21121\", \"21211\"]\n        });\n\n        encodings.ean13 = Encoding.extend({\n            initValue: function(value, width, height) {\n                value += \"\";\n\n                if (value.length != 12 || /\\D/.test(value)) {\n                    throw new Error('The value of the \"EAN13\" encoding should be 12 symbols');\n                }\n\n                var that = this;\n                that.pattern = [];\n                that.options.height = height;\n                that.baseUnit = width / (95 + that.quietZoneLength);\n                that.value = value;\n                that.checksum = that.calculateChecksum();\n                that.leftKey = value[0];\n                that.leftPart = value.substr(1,6);\n                that.rightPart = value.substr(7) + that.checksum;\n            },\n            addData: function() {\n                var that = this;\n                that.addPieces(that.characterMap.start);\n                that.addSide(that.leftPart,that.leftKey);\n                that.addPieces(that.characterMap.middle);\n                that.addSide(that.rightPart);\n                that.addPieces(that.characterMap.start);\n            },\n            addSide: function(leftPart,key) {\n                var that = this;\n                for (var i = 0; i < leftPart.length; i++) {\n                    if (key && parseInt(that.keyTable[key].charAt(i),10)) {\n                        that.addPieces(Array.prototype.slice.call(that.characterMap.digits[leftPart.charAt(i)]).reverse(),true);\n                    } else {\n                        that.addPieces(that.characterMap.digits[leftPart.charAt(i)],true);\n                    }\n                }\n            },\n            addPieces: function(arrToAdd,limitedHeight) {\n                var that = this;\n                for (var i = 0; i < arrToAdd.length; i++) {\n                    if (limitedHeight) {\n                        that.pattern.push({\n                            y1: 0,\n                            y2: that.options.height * 0.95,\n                            width: arrToAdd[i]\n                        });\n                    } else {\n                        that.pattern.push(arrToAdd[i]);\n                    }\n                }\n            },\n            calculateChecksum: function() {\n                var odd = 0,\n                    even = 0,\n                    value = this.value.split(\"\").reverse().join(\"\");\n                for (var i = 0; i < value.length; i++) {\n                    if (i % 2) {\n                        even += parseInt(value.charAt(i),10);\n                    }\n                    else {\n                        odd += parseInt(value.charAt(i),10);\n                    }\n                }\n                var checksum = (10 - ((3 * odd + even) % 10)) % 10;\n                return checksum;\n            },\n            keyTable: [\n                '000000',\n                '001011',\n                '001101',\n                '001110',\n                '010011',\n                '011001',\n                '011100',\n                '010101',\n                '010110',\n                '011010'\n            ],\n            characterMap: {\n                digits: [\n                    [3,2,1,1],\n                    [2,2,2,1],\n                    [2,1,2,2],\n                    [1,4,1,1],\n                    [1,1,3,2],\n                    [1,2,3,1],\n                    [1,1,1,4],\n                    [1,3,1,2],\n                    [1,2,1,3],\n                    [3,1,1,2]\n                ],\n                start: [1,1,1],\n                middle: [1,1,1,1,1]\n            }\n        });\n\n        encodings.ean8 = encodings.ean13.extend({\n            initValue: function(value, width, height) {\n                var that = this;\n                if (value.length != 7 || /\\D/.test(value)) {\n                    throw new Error('Invalid value provided');\n                }\n                that.value = value;\n                that.options.height = height;\n                that.checksum = that.calculateChecksum(that.value);\n                that.leftPart = that.value.substr(0,4);\n                that.rightPart = that.value.substr(4) + that.checksum;\n                that.pattern = [];\n                that.baseUnit = width / (67 + that.quietZoneLength);\n            }\n        });\n\n        var Barcode = Widget.extend({\n            init: function(element, options) {\n                 var that = this;\n                 Widget.fn.init.call(that, element, options);\n                 that.element = $(element);\n                 that.wrapper = that.element;\n                 that.element.addClass(\"k-barcode\").css(\"display\", \"block\");\n                 that.surfaceWrap = $(\"<div />\").css(\"position\", \"relative\").appendTo(this.element);\n                 that.surface = draw.Surface.create(that.surfaceWrap, {\n                     type: that.options.renderAs\n                 });\n                 that._setOptions(options);\n                 if (options && defined(options.value)) {\n                     that.redraw();\n                 }\n            },\n\n            setOptions: function(options) {\n                this._setOptions(options);\n                this.redraw();\n            },\n\n            redraw: function() {\n                var size = this._getSize();\n\n                this.surface.clear();\n                this.surface.setSize({\n                    width: size.width,\n                    height: size.height\n                });\n\n                this.createVisual();\n                this.surface.draw(this.visual);\n            },\n\n            getSize: function() {\n                return kendo.dimensions(this.element);\n            },\n\n            _resize: function() {\n                this.redraw();\n            },\n\n            createVisual: function() {\n                this.visual = this._render();\n            },\n\n            _render: function() {\n                var that = this,\n                    options = that.options,\n                    value = options.value,\n                    textOptions = options.text,\n                    textMargin = dataviz.getSpacing(textOptions.margin),\n                    size = that._getSize(),\n                    border = options.border || {},\n                    encoding = that.encoding,\n                    contentBox = new Box2D(0, 0, size.width, size.height).unpad(border.width).unpad(options.padding),\n                    barHeight = contentBox.height(),\n                    result, textToDisplay,\n                    textHeight;\n\n                var visual = new draw.Group();\n\n                that.contentBox = contentBox;\n                visual.append(that._getBackground(size));\n\n                if (textOptions.visible) {\n                    textHeight = draw.util.measureText(value, { font: textOptions.font }).height;\n                    barHeight -= textHeight + textMargin.top + textMargin.bottom;\n                }\n\n                result = encoding.encode(value, contentBox.width(), barHeight);\n\n                if (textOptions.visible) {\n                    textToDisplay = value;\n                    if (options.checksum && defined(encoding.checksum)) {\n                        textToDisplay += \" \" + encoding.checksum;\n                    }\n\n                    visual.append(that._getText(textToDisplay));\n                }\n\n                that.barHeight = barHeight;\n                this._bandsGroup = this._getBands(result.pattern, result.baseUnit);\n                visual.append(this._bandsGroup);\n\n                return visual;\n            },\n\n            exportVisual: function() {\n                return this._render();\n            },\n\n            _getSize: function() {\n                var that = this,\n                    element = that.element,\n                    size = new geom.Size(DEFAULT_WIDTH, DEFAULT_HEIGHT);\n\n                if (element.width() > 0) {\n                    size.width = element.width();\n                }\n                if (element.height() > 0) {\n                    size.height = element.height();\n                }\n                if (that.options.width) {\n                   size.width = that.options.width;\n                }\n                if (that.options.height) {\n                   size.height = that.options.height;\n                }\n\n                return size;\n            },\n\n            value: function(value) {\n                var that = this;\n                if (!defined(value)) {\n                    return that.options.value;\n                }\n                that.options.value = value + '';\n                that.redraw();\n            },\n\n            _getBands: function(pattern, baseUnit) {\n                var that = this,\n                    contentBox = that.contentBox,\n                    position = contentBox.x1,\n                    step,\n                    item;\n\n                var group = new draw.Group();\n                for (var i = 0; i < pattern.length; i++) {\n                    item = isPlainObject(pattern[i]) ? pattern[i] : {\n                        width: pattern[i],\n                        y1: 0,\n                        y2: that.barHeight\n                    };\n\n                    step = item.width * baseUnit;\n\n                    if (i % 2) {\n                        var rect = geom.Rect.fromPoints(\n                            new geom.Point(position, item.y1 + contentBox.y1),\n                            new geom.Point(position + step, item.y2 + contentBox.y1)\n                        );\n\n                        var path = draw.Path.fromRect(rect, {\n                            fill: {\n                                color: that.options.color\n                            },\n                            stroke: null\n                        });\n\n                        group.append(path);\n                    }\n\n                    position += step;\n                }\n\n                return group;\n            },\n\n            _getBackground: function(size) {\n                var that = this,\n                    options = that.options,\n                    border = options.border || {};\n\n                var box = new Box2D(0,0, size.width, size.height).unpad(border.width / 2);\n                var path = draw.Path.fromRect(box.toRect(), {\n                    fill: {\n                        color: options.background\n                    },\n                    stroke: {\n                        color: border.width ? border.color : \"\",\n                        width: border.width,\n                        dashType: border.dashType\n                    }\n                });\n\n                return path;\n            },\n\n            _getText: function(value) {\n                var that = this,\n                    textOptions = that.options.text,\n                    text = that._textbox = new TextBox(value, {\n                        font: textOptions.font,\n                        color: textOptions.color,\n                        align: \"center\",\n                        vAlign: \"bottom\",\n                        margin: textOptions.margin\n                    });\n\n                text.reflow(that.contentBox);\n                text.renderVisual();\n\n                return text.visual;\n            },\n\n            _setOptions: function(options) {\n                var that = this;\n                that.type = (options.type || that.options.type).toLowerCase();\n\n                if (that.type == \"upca\") { //extend instead\n                    that.type = \"ean13\";\n                    options.value = '0' + options.value;\n                }\n\n                if (that.type == \"upce\") {\n                    that.type = \"ean8\";\n                    options.value = '0' + options.value;\n                }\n\n                if (!encodings[that.type]) {\n                    throw new Error('Encoding ' + that.type + 'is not supported.');\n                }\n\n                that.encoding = new encodings[that.type]();\n\n                that.options = extend(true, that.options, options);\n            },\n\n            options: {\n                name: \"Barcode\",\n                renderAs: \"svg\",\n                value: \"\",\n                type: \"code39\",\n                checksum: false,\n                width: 0,\n                height: 0,\n                color: \"black\",\n                background: \"white\",\n                text: {\n                    visible: true,\n                    font: \"16px Consolas, Monaco, Sans Mono, monospace, sans-serif\",\n                    color: \"black\",\n                    margin: {\n                        top: 0,\n                        bottom: 0,\n                        left: 0,\n                        right: 0\n                    }\n                },\n                border: {\n                    width: 0,\n                    dashType: \"solid\",\n                    color: \"black\"\n                },\n                padding: {\n                    top: 0,\n                    bottom: 0,\n                    left: 0,\n                    right: 0\n                }\n            }\n        });\n        dataviz.ExportMixin.extend(Barcode.fn);\n\n        dataviz.ui.plugin(Barcode);\n\n        kendo.deepExtend(dataviz, {\n            encodings: encodings,\n            Encoding: Encoding\n        });\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}