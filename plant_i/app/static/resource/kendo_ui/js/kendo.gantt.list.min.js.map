{"version":3,"sources":["raw-js/kendo.gantt.list.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendogantt","list","js","this","$","extend","map","isFunction","ui","TreeList","outerHeight","activeElement","mobileOS","DATATYPE","BINDING","FORMAT","STRING","defaultDateFormat","titleFromField","SIZE_CALCULATION_TEMPLATE","listStyles","GanttList","window","kendo","jQuery","_outerHeight","_activeElement","support","attr","getCulture","calendar","patterns","d","title","start","end","percentComplete","parentId","id","orderId","gridHeader","gridContentWrap","editCell","iconCollapse","iconExpand","init","element","options","columns","length","push","fn","call","_unbindDataSource","_setWidth","name","autoBind","sortable","selectable","_editCellEvent","_tabCycleStop","navigatable","editable","move","mode","resizable","renderAllRows","destroy","closeCell","isCancel","tr","model","that","cell","editor","_isIncellEditable","dataItem","_cancelEditor","removeClass","parent","editRow","lockedContent","_relatedRow","_render","trigger","item","data","ns","_adjustRowHeight","css","insertAfter","nodeData","referenceNode","taskInfo","task","updateInfo","insertBefore","_adjustHeight","height","contentWrap","find","header","scrollbar","_isHeightSet","_hasLockedColumns","table","offsetWidth","clientWidth","row1","row2","offsetHeight1","offsetHeight","offsetHeight2","style","el","initialHeight","newHeight","_attachCellEditingEventHandlers","update","touch","content","kendoTouch","filter","touchstart","e","_mouseDownHandler","doubletap","event","target","classList","contains","_openEditorHandler","_blurActiveElement","nodeName","toLowerCase","_columns","_hasExpandable","forEach","expandable","_eachColumn","bind","_columnEditor","column","field","required","_extractFormat","format","container","validation","fields","dateCompare","message","hide","appendTo","prependTo","kendoDateTimePicker","_columnFromElement","td","closest","idx","children","index","resourcesField","isSortable","hasNestedColumns","indexOf","template","value","get","formatedValue","i","join","_editCell","editedCell","modelCopy","dataSource","_createNewModel","toJSON","clearTimeout","_closeCellTimeout","_restorePageSizeAfterAddChild","_edit","editedColumn","editedColumnIndex","add","lockedTable","first","_createIncellEditor","change","values","preventDefault","_current","_modelFromElement","row","getByUid","currentTarget","hasClass","isLockedCell","multiple","has","tbody","is","_renderTree","taskTree","addClass","rowHeight","_rowHeight","tasks","applyStylesFromKendoAttributes","append","remove","_setData","listWidth","plugin"],"mappings":"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","file":"kendo.gantt.list.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.treelist.js'), require('kendo.treeview.draganddrop.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.treelist', 'kendo.treeview.draganddrop'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendogantt = global.kendogantt || {}, global.kendogantt.list = global.kendogantt.list || {}, global.kendogantt.list.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n        id: \"gantt.list\",\n        name: \"Gantt List\",\n        category: \"web\",\n        description: \"The Gantt List\",\n        depends: [ \"treelist\", \"treeview.draganddrop\" ],\n        hidden: true\n    };\n\n    (function($) {\n        var extend = $.extend,\n            map = $.map,\n            isFunction = kendo.isFunction,\n\n            ui = kendo.ui,\n            TreeList = ui.TreeList,\n            outerHeight = kendo._outerHeight,\n            activeElement = kendo._activeElement,\n            mobileOS = kendo.support.mobileOS,\n\n            DATATYPE = kendo.attr(\"type\"),\n            BINDING = kendo.attr(\"bind\"),\n            FORMAT = kendo.attr(\"format\"),\n\n            STRING = \"string\",\n            BEFORE_EDIT = \"beforeEdit\",\n            EDIT = \"edit\",\n            SAVE = \"save\",\n            RENDER = \"render\",\n            DOT = \".\",\n\n            defaultDateFormat = \"{0:\" + kendo.getCulture().calendar.patterns.d + \"}\",\n\n            titleFromField = {\n                \"title\": \"Title\",\n                \"start\": \"Start Time\",\n                \"end\": \"End Time\",\n                \"percentComplete\": \"% Done\",\n                \"parentId\": \"Predecessor ID\",\n                \"id\": \"ID\",\n                \"orderId\": \"Order ID\"\n            },\n\n            SIZE_CALCULATION_TEMPLATE = `<table ${kendo.attr(\"style-visibility\")}=\"hidden\">` +\n                \"<tbody>\" +\n                    `<tr ${kendo.attr(\"style-height\")}=\"{0}\">` +\n                        \"<td>&nbsp;</td>\" +\n                    \"</tr>\" +\n                \"</tbody>\" +\n            \"</table>\",\n\n            listStyles = {\n                gridHeader: \"k-grid-header\",\n                gridContentWrap: \"k-grid-content\",\n                editCell: \"k-edit-cell\",\n                iconCollapse: \"caret-alt-down\",\n                iconExpand: \"caret-alt-right\"\n            };\n\n        var GanttList = ui.GanttList = TreeList.extend({\n            init: function(element, options) {\n                if (this.options.columns.length === 0) {\n                    this.options.columns.push(\"title\");\n                }\n\n                TreeList.fn.init.call(this, element, options);\n\n                this._unbindDataSource();\n                this._setWidth();\n            },\n\n            options: {\n                name: \"GanttList\",\n                autoBind: false,\n                sortable: true,\n                selectable: true,\n                _editCellEvent: \"dblclick\",\n                _tabCycleStop: true,\n                navigatable: false,\n                editable: {\n                    move: true,\n                    mode: \"incell\"\n                },\n                resizable: false,\n                renderAllRows: false\n            },\n\n            destroy: function() {\n                TreeList.fn.destroy.call(this);\n                kendo.destroy(this.element);\n            },\n\n            closeCell: function(isCancel) {\n                var that = this;\n                var cell = (that.editor || {}).element;\n                var tr;\n                var model;\n\n                if (!cell || !cell[0] || !that._isIncellEditable()) {\n                    return;\n                }\n\n                model = that.dataItem(cell);\n                that._cancelEditor();\n                cell.removeClass(listStyles.editCell);\n                tr = cell.parent().removeClass(listStyles.editRow);\n\n                if (that.lockedContent) {\n                    that._relatedRow(tr).removeClass(listStyles.editRow);\n                }\n\n                if (isCancel) {\n                    that._render();\n                }\n\n                that.trigger(\"itemChange\", { item: tr, data: model, ns: ui });\n\n                if (that.lockedContent) {\n                    that._adjustRowHeight(tr.css(\"height\", \"\")[0], that._relatedRow(tr).css(\"height\", \"\")[0]);\n                }\n            },\n\n            insertAfter: function(nodeData, referenceNode) {\n                if (!nodeData || !referenceNode) {\n                    return;\n                }\n\n                var orderId = referenceNode.orderId;\n                var taskInfo = {\n                    parentId: referenceNode.parentId\n                };\n\n                if (referenceNode.parentId === nodeData.parentId && referenceNode.orderId > nodeData.orderId) {\n                    taskInfo.orderId = orderId;\n                } else {\n                    taskInfo.orderId = orderId + 1;\n                }\n\n                this.trigger(\"reorder\", {\n                    task: nodeData,\n                    updateInfo: taskInfo\n                });\n            },\n\n            insertBefore: function(nodeData, referenceNode) {\n                if (!nodeData || !referenceNode) {\n                    return;\n                }\n\n                var orderId = referenceNode.orderId;\n                var taskInfo = {\n                    parentId: referenceNode.parentId\n                };\n\n                if (referenceNode.parentId === nodeData.parentId &&\n                    referenceNode.orderId > nodeData.orderId) {\n                        taskInfo.orderId = orderId - 1;\n                } else {\n                    taskInfo.orderId = orderId;\n                }\n\n                this.trigger(\"reorder\", {\n                    task: nodeData,\n                    updateInfo: taskInfo\n                });\n            },\n\n            _adjustHeight: function() {\n                var element = this.element;\n                var contentWrap = element.find(DOT + listStyles.gridContentWrap);\n                var header = element.find(DOT + listStyles.gridHeader);\n                var height;\n                var scrollbar = kendo.support.scrollbar();\n\n                if (this._isHeightSet(element)) {\n                    height = element.height() - outerHeight(header);\n\n                    contentWrap.height(height);\n\n                    if (this._hasLockedColumns) {\n                        scrollbar = this.table[0].offsetWidth > this.table.parent()[0].clientWidth ? scrollbar : 0;\n                        this.lockedContent.height(height - scrollbar);\n                    }\n                }\n            },\n\n            _adjustRowHeight: function(row1, row2) {\n                var height;\n                var offsetHeight1 = row1.offsetHeight;\n                var offsetHeight2 = row2.offsetHeight;\n\n                if (offsetHeight1 > offsetHeight2) {\n                    height = offsetHeight1 + \"px\";\n                } else if (offsetHeight1 < offsetHeight2) {\n                    height = offsetHeight2 + \"px\";\n                }\n\n                if (height) {\n                    row1.style.height = row2.style.height = height;\n                }\n             },\n\n            // identical code found in treelist, grid & scheduler :(\n            _isHeightSet: function(el) {\n                var initialHeight, newHeight;\n                if (el[0].style.height) {\n                    return true;\n                } else {\n                    initialHeight = el.height();\n                }\n\n                el.height(\"auto\");\n                newHeight = el.height();\n                el.height(\"\");\n\n                return (initialHeight != newHeight);\n            },\n\n            _attachCellEditingEventHandlers: function() {\n                var that = this,\n                    editable = that.options.editable;\n\n                TreeList.fn._attachCellEditingEventHandlers.call(that);\n\n                if (that._isIncellEditable() && editable.update !== false) {\n\n                    if (mobileOS) {\n                        that.touch = that.content\n                            .kendoTouch({\n                                filter: \"td\",\n                                touchstart: function(e) {\n                                    that._mouseDownHandler(e.touch);\n                                },\n                                doubletap: function(e) {\n                                    if (e.event.target.classList.contains(\"k-icon\") || e.event.target.classList.contains(\"k-svg-icon\")) {\n                                        return;\n                                    }\n                                    that._openEditorHandler(e.touch);\n                                }\n                            }).data(\"kendoTouch\");\n                    }\n                }\n            },\n\n            _blurActiveElement: function() {\n                var activeElement = kendo._activeElement();\n\n                if (activeElement && activeElement.nodeName.toLowerCase() !== \"body\") {\n                    $(activeElement).trigger(\"blur\");\n                }\n            },\n\n            _columns: function() {\n                var that = this,\n                    columns = this.options.columns;\n\n                that._hasExpandable = false;\n\n                columns.forEach(function(item) {\n                    if (item.expandable) {\n                        that._hasExpandable = true;\n                    }\n                });\n\n                that.columns = that.options.columns = map(columns, that._eachColumn.bind(that));\n\n                TreeList.fn._columns.call(that);\n            },\n\n            _columnEditor: function(column) {\n                var attr = {\n                    \"name\": column.field,\n                    \"required\": true\n                };\n\n                attr[BINDING] = \"value:\" + column.field;\n                attr[DATATYPE] = \"date\";\n                attr[FORMAT] = kendo._extractFormat(column.format);\n\n                return function(container, options) {\n                    var model = options.model,\n                        field = model.fields[column.field] || model[column.field],\n                        validation = field.validation;\n\n                    if (validation && validation.dateCompare && isFunction(validation.dateCompare) && validation.message) {\n                        $('<span ' + kendo.attr(\"for\") + '=\"' + column.field + '\" class=\"k-invalid-msg\"/>')\n                            .hide()\n                            .appendTo(container);\n\n                        attr[kendo.attr(\"dateCompare-msg\")] = validation.message;\n                    }\n\n                    $('<input type=\"text\"/>')\n                        .attr(attr)\n                        .prependTo(container)\n                        .kendoDateTimePicker({ format: options.format });\n                };\n            },\n\n            _columnFromElement: function(element) {\n                var td = element.closest(\"td\"),\n                    tr = td.parent(),\n                    idx = tr.children().index(td);\n\n                return this.columns[idx];\n            },\n\n            _eachColumn: function(column) {\n                var that = this,\n                    resourcesField = that.options.resourcesField,\n                    isSortable = this.options.sortable;\n\n                var model = function() {\n                    this.field = \"\";\n                    this.title = \"\";\n                    this.editable = function() { return false; };\n                    this.sortable = false;\n                };\n\n                var formatResources = function(task) {\n                    var value = task.get(resourcesField) || [],\n                        formatedValue = [];\n\n                    for (var i = 0; i < value.length; i++) {\n                        formatedValue.push(kendo.format(\"{0} [{1}]\", value[i].get(\"name\"), value[i].get(\"formatedValue\")));\n                    }\n\n                    return formatedValue.join(\", \");\n                };\n\n                if (column.columns) {\n                    that.hasNestedColumns = true;\n                    column.columns = map(column.columns, this._eachColumn.bind(this));\n                }\n\n                if (typeof column === STRING) {\n                    column = {\n                        field: column,\n                        title: titleFromField[column]\n                    };\n                }\n\n                if (column.editable === true) {\n                    column.editable = function() {\n                        return true;\n                    };\n                } else {\n                    column.editable = function() {\n                        return false;\n                    };\n                }\n\n                if (column.field === \"start\" || column.field === \"end\") {\n                    column.format = kendo.getCulture().calendar.patterns[column.format] || column.format || defaultDateFormat;\n\n                    if (!column.editor) {\n                        if (column.format === defaultDateFormat || column.format.toLowerCase().indexOf(\"h\") > -1) {\n                            column.editor = that._columnEditor(column);\n                        }\n                    }\n                }\n                if (column.field === resourcesField) {\n                    column.sortable = false;\n                    column.template = column.template || formatResources;\n                }\n                if (!that._hasExpandable && column.field === \"title\") {\n                    column.expandable = true;\n                }\n\n                if (isSortable && !column.sortable) {\n                    column.sortable = false;\n                }\n\n                return extend(new model(), column);\n            },\n\n            _editCell: function(cell, column, model) {\n                var that = this,\n                    resourcesField = that.options.resourcesField,\n                    modelCopy = that.dataSource._createNewModel(model.toJSON()),\n                    editedCell;\n\n                clearTimeout(that._closeCellTimeout);\n                if (column.field === resourcesField) {\n                    column.editor(cell, modelCopy);\n                    return;\n                } else {\n                    if (that.trigger(BEFORE_EDIT, { model: model, container: cell })) {\n                        that.dataSource._restorePageSizeAfterAddChild();\n                        return;\n                    }\n\n                    that.closeCell();\n\n                    model._edit = true;\n\n                    that._cancelEditor();\n\n                    that._render({\n                        editedColumn: column,\n                        editedColumnIndex: cell.index()\n                    });\n\n                    editedCell = that.table.add(that.lockedTable).find(DOT + listStyles.editCell).first();\n\n                    that.editor = that._createIncellEditor(editedCell, {\n                        columns: [column],\n                        model: model,\n                        change: function(e) {\n                            if (that.trigger(SAVE, { values: e.values, container: cell, model: model } )) {\n                                e.preventDefault();\n                            }\n                        }\n                    });\n\n                    // refresh the current element as the DOM element reference can be changed after render()\n                    that._current = editedCell;\n\n                    that.trigger(EDIT, { container: cell, model: model });\n                }\n            },\n\n            _modelFromElement: function(element) {\n                var row = element.closest(\"tr\"),\n                    model = this.dataSource.getByUid(row.attr(kendo.attr(\"uid\")));\n\n                return model;\n            },\n\n            _mouseDownHandler: function(e) {\n                var currentTarget = $(e.currentTarget);\n\n                if (!currentTarget.hasClass(listStyles.editCell)) {\n                    this._blurActiveElement();\n                }\n            },\n\n            _openEditorHandler: function(e) {\n                var that = this,\n                    td = $(e.currentTarget),\n                    isLockedCell = that.lockedTable && td.closest(\"table\")[0] === that.lockedTable[0],\n                    selectable = that.selectable && that.selectable.options.multiple;\n\n                if (td.hasClass(listStyles.editCell) ||\n                    td.has(\"a.k-grid-delete\").length ||\n                    td.has(\"button.k-grid-delete\").length ||\n                    (td.closest(\"tbody\")[0] !== that.tbody[0] && !isLockedCell) ||\n                    $(e.target).is(\":input\") ||\n                    $(e.target).is(`[class*=${listStyles.iconExpand}]`) ||\n                    $(e.target).is(`[class*=${listStyles.iconCollapse}]`)) {\n\n                    return;\n                }\n\n                if (that.editor) {\n                    if (that.editor.end()) {\n                        if (selectable) {\n                            $(activeElement()).trigger(\"blur\");\n                        }\n                        that.closeCell();\n                        that.editCell(td);\n                    }\n                } else {\n                    that.editCell(td);\n                }\n            },\n\n            _renderTree: function(taskTree) {\n                TreeList.fn._render.call(this);\n\n                if (this.hasNestedColumns) {\n                    this.element.addClass(\"k-gantt-treelist-nested-columns\");\n                }\n\n                if (taskTree && taskTree.length && !taskTree.editedColumn) {\n                    if (this.options.rowHeight) {\n                        this._rowHeight(taskTree);\n                    }\n\n                    this.trigger(RENDER);\n                }\n\n                this._adjustHeight();\n            },\n\n            _rowHeight: function(tasks) {\n                var content = this.content,\n                    options = this.options,\n                    rowHeight = typeof options.rowHeight === STRING ? options.rowHeight : options.rowHeight + \"px\",\n                    table = $(kendo.format(SIZE_CALCULATION_TEMPLATE, rowHeight)),\n                    height;\n\n                kendo.applyStylesFromKendoAttributes(table, [\"height\", \"visibility\"]);\n                content.append(table);\n                height = outerHeight(table.find(\"tr\"));\n                table.remove();\n\n                this.element.find('[role=\"treegrid\"]').css(\"height\", (tasks.length * height) + \"px\");\n            },\n\n            _setData: function(tasks) {\n                this.dataSource.data(tasks);\n            },\n\n            _setWidth: function() {\n                this.element.find(\".k-grid-header table\").css(\"minWidth\", this.options.listWidth);\n                this.content.find(\"table\").css(\"minWidth\", this.options.listWidth);\n            }\n        });\n\n        ui.plugin(GanttList);\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}