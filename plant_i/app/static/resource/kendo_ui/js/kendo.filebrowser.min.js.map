{"version":3,"sources":["raw-js/kendo.filebrowser.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendofilebrowser","js","this","$","undefined$1","kendo","window","Widget","ui","isPlainObject","extend","encode","htmlEncode","placeholderSupported","support","placeholder","isFunction","trimSlashesRegExp","CHANGE","APPLY","ERROR","CLICK","NS","SEARCHBOXNS","NAMEFIELD","SIZEFIELD","TYPEFIELD","DEFAULTSORTORDER","field","dir","EMPTYTILE","template","text","TOOLBARTMPL","showCreate","showUpload","showDelete","messages","icon","iconClass","uploadFile","UPLOADTEMPLATE","orderBy","concatPaths","path","name","match","data","schemas","filebrowser","items","model","id","fields","size","type","transports","RemoteTransport","init","options","fn","call","_call","read","create","destroy","update","FileBrowser","element","that","addClass","on","_deleteClick","bind","_addClick","_directoryKeyDown","_directoryBlur","_dataSource","refresh","orderByName","orderBySize","directoryNotFound","emptyFolder","deleteFile","invalidFileType","overwriteFile","dropFilesHere","search","transport","fileTypes","events","dataSource","unbind","_errorHandler","add","list","toolbar","off","value","selected","_selectedItem","fileUrl","get","replace","format","encodeURIComponent","listView","select","length","getByUid","attr","_toolbar","arrangeBy","uploadUrl","appendTo","find","kendoUpload","multiple","localization","async","saveUrl","autoUpload","upload","_fileUpload","error","e","_error","xhr","XMLHttpRequest","status","end","kendoDropDownList","dataTextField","dataValueField","change","searchBox","kendoSearchBox","label","_attachDropzoneEvents","onDragEnter","onDragLeave","hideInterval","lastDrag","document","documentElement","_dropEnter","_dropLeave","Date","setInterval","clearInterval","_scrollHandler","_positionDropzone","_removeDropzone","offset","css","width","clientWidth","height","clientHeight","lineHeight","removeClass","top","left","item","message","_showMessage","remove","createDirectory","_getFieldName","descriptor","from","fieldName","reader","file","filterRegExp","RegExp","split","join","fileName","files","fileSize","fileNameField","sizeField","test","_createFile","one","_insertFileToList","_override","set","response","pushUpdate","_tiles","filter","preventDefault","_findFile","idx","result","typeField","nameField","toLowerCase","index","view","i","insert","lastDirectoryIdx","_nameDirectory","uid","edit","scrollTop","offsetHeight","setTimeout","_nameExists","keyCode","currentTarget","blur","save","candidate","directoryNames","indexOf","push","inArray","sort","operator","_content","_dblClick","ListView","layout","flex","direction","wrap","_itemTmpl","editTemplate","_editTmpl","selectable","autoBind","dataBinding","parent","action","progress","content","wrapper","dataBound","append","_listViewChange","li","hasClass","folder","breadcrumbs","trigger","typeSortOrder","nameSortOrder","schema","DataSource","_navigation","navigation","first","kendoBreadcrumb","editable","gap","statusText","hasChanges","cancelChanges","suffix","Math","round","sizeFormatter","_path","SearchBox","_wrapper","_keydown","_updateValue","_click","_focus","_blur","val","_toggleLabel","toggle","hide","parents","style","insertBefore","plugin","jQuery"],"mappings":"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","file":"kendo.filebrowser.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.listview.js'), require('kendo.dropdownlist.js'), require('kendo.upload.js'), require('kendo.breadcrumb.js'), require('kendo.icons.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.listview', 'kendo.dropdownlist', 'kendo.upload', 'kendo.breadcrumb', 'kendo.icons'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendofilebrowser = global.kendofilebrowser || {}, global.kendofilebrowser.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n        id: \"filebrowser\",\n        name: \"FileBrowser\",\n        category: \"web\",\n        description: \"\",\n        hidden: true,\n        depends: [ \"selectable\", \"listview\", \"dropdownlist\", \"upload\", \"breadcrumb\", \"icons\" ]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            isPlainObject = $.isPlainObject,\n            extend = $.extend,\n            encode = kendo.htmlEncode,\n            placeholderSupported = kendo.support.placeholder,\n            isFunction = kendo.isFunction,\n            trimSlashesRegExp = /(^\\/|\\/$)/g,\n            CHANGE = \"change\",\n            APPLY = \"apply\",\n            ERROR = \"error\",\n            CLICK = \"click\",\n            NS = \".kendoFileBrowser\",\n            SEARCHBOXNS = \".kendoSearchBox\",\n            NAMEFIELD = \"name\",\n            SIZEFIELD = \"size\",\n            TYPEFIELD = \"type\",\n            DEFAULTSORTORDER = { field: TYPEFIELD, dir: \"asc\" },\n            EMPTYTILE = kendo.template(({ text }) => `<div class=\"k-listview-item k-listview-item-empty\"><span class=\"k-file-preview\"><span class=\"k-file-icon k-icon k-svg-icon k-i-none\"></span></span><span class=\"k-file-name\">${kendo.htmlEncode(text)}</span></div>`),\n            UPLOADTEMPLATE = ({ messages }) =>\n                '<div class=\"k-upload k-upload-button-wrap\">' +\n                    '<div class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-upload-button\">' +\n                        kendo.ui.icon({ icon: \"plus\", iconClass: \"k-button-icon\" }) +\n                        `<span class=\"k-button-text\">${kendo.htmlEncode(messages.uploadFile)}</span>` +\n                    '</div>' +\n                    '<input type=\"file\" name=\"file\" />' +\n                '</div>',\n            TOOLBARTMPL = ({ showCreate, showUpload, showDelete, messages }) =>\n                '<div class=\"k-widget k-filebrowser-toolbar k-toolbar k-toolbar-md k-floatwrap\">' +\n                    `${showCreate ? '<button type=\"button\" class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button\">' + kendo.ui.icon({ icon: \"folder-add\", iconClass: \"k-button-icon\" }) + '</button>' : ''}` +\n                    `${showUpload ? UPLOADTEMPLATE({ messages }) : ''}` +\n                    `${showDelete ? '<button type=\"button\" class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button k-disabled\">' + kendo.ui.icon({ icon: \"x\", iconClass: \"k-button-icon\" }) + '</button>' : ''}` +\n                    '<div class=\"k-tiles-arrange\">' +\n                        `<label>${kendo.htmlEncode(messages.orderBy)}: <select></select></label>` +\n                    '</div>' +\n                    '<span class=\"k-toolbar-spacer\"></span>' +\n                    '<input data-role=\"searchbox\" />' +\n                '</div>';\n\n        extend(true, kendo.data, {\n            schemas: {\n                \"filebrowser\": {\n                    data: function(data) {\n                        return data.items || data || [];\n                    },\n                    model: {\n                        id: \"name\",\n                        fields: {\n                            name: \"name\",\n                            size: \"size\",\n                            type: \"type\"\n                        }\n                    }\n                }\n            }\n        });\n\n        extend(true, kendo.data, {\n            transports: {\n                \"filebrowser\": kendo.data.RemoteTransport.extend({\n                    init: function(options) {\n                        kendo.data.RemoteTransport.fn.init.call(this, $.extend(true, {}, this.options, options));\n                    },\n                    _call: function(type, options) {\n                        options.data = $.extend({}, options.data, { path: this.options.path() });\n\n                        if (isFunction(this.options[type])) {\n                            this.options[type].call(this, options);\n                        } else {\n                            kendo.data.RemoteTransport.fn[type].call(this, options);\n                        }\n                    },\n                    read: function(options) {\n                        this._call(\"read\", options);\n                    },\n                    create: function(options) {\n                        this._call(\"create\", options);\n                    },\n                    destroy: function(options) {\n                        this._call(\"destroy\", options);\n                    },\n                    update: function() {\n                        //updates are handled by the upload\n                    },\n                    options: {\n                        read: {\n                            type: \"POST\"\n                        },\n                        update: {\n                            type: \"POST\"\n                        },\n                        create: {\n                            type: \"POST\"\n                        },\n                        destroy: {\n                            type: \"POST\"\n                        }\n                    }\n                })\n            }\n        });\n\n        function bindDragEventWrappers(element, onDragEnter, onDragLeave) {\n            var hideInterval, lastDrag;\n\n            element\n                .on(\"dragenter\" + NS, function() {\n                    onDragEnter();\n                    lastDrag = new Date();\n\n                    if (!hideInterval) {\n                        hideInterval = setInterval(function() {\n                            var sinceLastDrag = new Date() - lastDrag;\n                            if (sinceLastDrag > 100) {\n                                onDragLeave();\n\n                                clearInterval(hideInterval);\n                                hideInterval = null;\n                            }\n                        }, 100);\n                    }\n                })\n                .on(\"dragover\" + NS, function() {\n                    lastDrag = new Date();\n                });\n        }\n\n        function concatPaths(path, name) {\n            if (path === undefined$1 || !path.match(/\\/$/)) {\n                path = (path || \"\") + \"/\";\n            }\n            return path + name;\n        }\n\n        function sizeFormatter(value) {\n            if (!value) {\n                return \"\";\n            }\n\n            var suffix = \" bytes\";\n\n            if (value >= 1073741824) {\n                suffix = \" GB\";\n                value /= 1073741824;\n            } else if (value >= 1048576) {\n                suffix = \" MB\";\n                value /= 1048576;\n            } else if (value >= 1024) {\n                suffix = \" KB\";\n                value /= 1024;\n            }\n\n            return Math.round(value * 100) / 100 + suffix;\n        }\n\n        function fieldName(fields, name) {\n            var descriptor = fields[name];\n\n            if (isPlainObject(descriptor)) {\n                return descriptor.from || descriptor.field || name;\n            }\n            return descriptor;\n        }\n\n        var FileBrowser = Widget.extend({\n            init: function(element, options) {\n                var that = this;\n\n                options = options || {};\n\n                Widget.fn.init.call(that, element, options);\n\n                that.element.addClass(\"k-filebrowser\");\n\n                that.element\n                    .on(CLICK + NS, \".k-filebrowser-toolbar button:not(.k-disabled):has(.k-i-x,.k-svg-i-x)\", that._deleteClick.bind(that))\n                    .on(CLICK + NS, \".k-filebrowser-toolbar button:not(.k-disabled):has(.k-i-folder-add,.k-svg-i-folder-add)\", that._addClick.bind(that))\n                    .on(\"keydown\" + NS, \".k-listview-item.k-selected input\", that._directoryKeyDown.bind(that))\n                    .on(\"blur\" + NS, \".k-listview-item.k-selected input\", that._directoryBlur.bind(that));\n\n                that._dataSource();\n\n                that.refresh();\n\n                that.path(that.options.path);\n            },\n\n            options: {\n                name: \"FileBrowser\",\n                messages: {\n                    uploadFile: \"Upload\",\n                    orderBy: \"Arrange by\",\n                    orderByName: \"Name\",\n                    orderBySize: \"Size\",\n                    directoryNotFound: \"A directory with this name was not found.\",\n                    emptyFolder: \"Empty Folder\",\n                    deleteFile: 'Are you sure you want to delete \"{0}\"?',\n                    invalidFileType: \"The selected file \\\"{0}\\\" is not valid. Supported file types are {1}.\",\n                    overwriteFile: \"A file with name \\\"{0}\\\" already exists in the current directory. Do you want to overwrite it?\",\n                    dropFilesHere: \"drop file here to upload\",\n                    search: \"Search\"\n                },\n                transport: {},\n                path: \"/\",\n                fileTypes: \"*.*\"\n            },\n\n            events: [ERROR, CHANGE, APPLY],\n\n            destroy: function() {\n                var that = this;\n\n                Widget.fn.destroy.call(that);\n\n                that.dataSource\n                    .unbind(ERROR, that._errorHandler);\n\n                that.element\n                    .add(that.list)\n                    .add(that.toolbar)\n                    .off(NS);\n\n                kendo.destroy(that.element);\n            },\n\n            value: function() {\n                var that = this,\n                    selected = that._selectedItem(),\n                    path,\n                    fileUrl = that.options.transport.fileUrl;\n\n                if (selected && selected.get(TYPEFIELD) === \"f\") {\n                    path = concatPaths(that.path(), selected.get(NAMEFIELD)).replace(trimSlashesRegExp, \"\");\n                    if (fileUrl) {\n                        path = isFunction(fileUrl) ? fileUrl(path) : kendo.format(fileUrl, encodeURIComponent(path));\n                    }\n                    return path;\n                }\n            },\n\n            _selectedItem: function() {\n                var listView = this.listView,\n                    selected = listView.select();\n\n                if (selected.length) {\n                    return this.dataSource.getByUid(selected.attr(kendo.attr(\"uid\")));\n                }\n            },\n\n            _toolbar: function() {\n                var that = this,\n                    template = kendo.template(TOOLBARTMPL),\n                    messages = that.options.messages,\n                    arrangeBy = [\n                        { text: messages.orderByName, value: \"name\" },\n                        { text: messages.orderBySize, value: \"size\" }\n                    ];\n\n                that.toolbar = $(template({\n                        messages: messages,\n                        showUpload: that.options.transport.uploadUrl,\n                        showCreate: that.options.transport.create,\n                        showDelete: that.options.transport.destroy\n                    }))\n                    .appendTo(that.element)\n                    .find(\".k-upload input\")\n                    .kendoUpload({\n                        multiple: false,\n                        localization: {\n                            dropFilesHere: messages.dropFilesHere\n                        },\n                        async: {\n                            saveUrl: that.options.transport.uploadUrl,\n                            autoUpload: true\n                        },\n                        upload: that._fileUpload.bind(that),\n                        error: function(e) {\n                            that._error({ xhr: e.XMLHttpRequest, status: \"error\" });\n                        }\n                    }).end();\n\n                that.upload = that.toolbar\n                    .find(\".k-upload input\")\n                    .data(\"kendoUpload\");\n\n                that.arrangeBy = that.toolbar.find(\".k-tiles-arrange select\")\n                    .kendoDropDownList({\n                        dataSource: arrangeBy,\n                        dataTextField: \"text\",\n                        dataValueField: \"value\",\n                        change: function() {\n                            that.orderBy(this.value());\n                        }\n                    })\n                    .data(\"kendoDropDownList\");\n\n                that.searchBox = that.toolbar.find(\"input[data-role='searchbox']\")\n                    .kendoSearchBox({\n                        label: that.options.messages.search,\n                        change: function() {\n                            that.search(this.value());\n                        }\n                    }).data(\"kendoSearchBox\");\n\n                that._attachDropzoneEvents();\n            },\n\n            _attachDropzoneEvents: function() {\n                var that = this;\n\n                if (that.options.transport.uploadUrl) {\n                    bindDragEventWrappers($(document.documentElement),\n                        that._dropEnter.bind(that),\n                        that._dropLeave.bind(that)\n                    );\n                    that._scrollHandler = that._positionDropzone.bind(that);\n                }\n            },\n\n            _dropEnter: function() {\n                this._positionDropzone();\n                $(document).on(\"scroll\" + NS, this._scrollHandler);\n            },\n\n            _dropLeave: function() {\n                this._removeDropzone();\n                $(document).off(\"scroll\" + NS, this._scrollHandler);\n            },\n\n            _positionDropzone: function() {\n                var that = this,\n                    element = that.element,\n                    offset = element.offset();\n\n                that.toolbar.find(\".k-dropzone\")\n                    .addClass(\"k-filebrowser-dropzone\")\n                    .offset(offset)\n                    .css({\n                        width: element[0].clientWidth,\n                        height: element[0].clientHeight,\n                        lineHeight: element[0].clientHeight + \"px\"\n                    });\n            },\n\n            _removeDropzone: function() {\n                this.toolbar.find(\".k-dropzone\")\n                    .removeClass(\"k-filebrowser-dropzone\")\n                    .css({ width: \"\", height: \"\", lineHeight: \"\", top: \"\", left: \"\" });\n            },\n\n            _deleteClick: function() {\n                var that = this,\n                    item = that.listView.select(),\n                    message = encode(kendo.format(that.options.messages.deleteFile, item.find(\".k-file-name\").text()));\n\n                if (item.length && that._showMessage(message, \"confirm\")) {\n                    that.listView.remove(item);\n                }\n            },\n\n            _addClick: function() {\n                this.createDirectory();\n            },\n\n            _getFieldName: function(name) {\n                return fieldName(this.dataSource.reader.model.fields, name);\n            },\n\n            _fileUpload: function(e) {\n                var that = this,\n                    options = that.options,\n                    fileTypes = options.fileTypes,\n                    filterRegExp = new RegExp((\"(\" + fileTypes.split(\",\").join(\")|(\") + \")\").replace(/\\*\\./g , \".*.\"), \"i\"),\n                    fileName = e.files[0].name,\n                    fileSize = e.files[0].size,\n                    fileNameField = NAMEFIELD,\n                    sizeField = SIZEFIELD,\n                    file;\n\n                if (filterRegExp.test(fileName)) {\n                    e.data = { path: that.path() };\n\n                    file = that._createFile(fileName, fileSize);\n\n                    if (!file) {\n                        e.preventDefault();\n                    } else {\n                        that.upload.one(\"success\", function(e) {\n                            var model = that._insertFileToList(file);\n\n                            if (model._override) {\n                                model.set(fileNameField, e.response[that._getFieldName(fileNameField)]);\n                                model.set(sizeField, e.response[that._getFieldName(sizeField)]);\n\n                                that.listView.dataSource.pushUpdate(model);\n                            }\n\n                            that._tiles = that.listView.items().filter(\"[\" + kendo.attr(\"type\") + \"=f]\");\n                        });\n                    }\n                } else {\n                    e.preventDefault();\n                    that._showMessage(encode(kendo.format(options.messages.invalidFileType, fileName, fileTypes)));\n                }\n            },\n\n            _findFile: function(name) {\n                var data = this.dataSource.data(),\n                    idx,\n                    result,\n                    typeField = TYPEFIELD,\n                    nameField = NAMEFIELD,\n                    length;\n\n                name = name.toLowerCase();\n\n                for (idx = 0, length = data.length; idx < length; idx++) {\n                    if (data[idx].get(typeField) === \"f\" &&\n                        data[idx].get(nameField).toLowerCase() === name) {\n\n                        result = data[idx];\n                        break;\n                    }\n                }\n                return result;\n            },\n\n            _createFile: function(fileName, fileSize) {\n                var that = this,\n                    model = {},\n                    typeField = TYPEFIELD,\n                    file = that._findFile(fileName);\n\n                if (file) {\n                    if (!that._showMessage(encode(kendo.format(that.options.messages.overwriteFile, fileName)), \"confirm\")) {\n                        return null;\n                    } else {\n                        file._override = true;\n                        return file;\n                    }\n                }\n\n                model[typeField] = \"f\";\n                model[NAMEFIELD] = fileName;\n                model[SIZEFIELD] = fileSize;\n\n                return model;\n            },\n\n            _insertFileToList: function(model) {\n                var index;\n                if (model._override) {\n                    return model;\n                }\n\n                var dataSource = this.dataSource;\n                var view = dataSource.view();\n\n                for (var i = 0, length = view.length; i < length; i++) {\n                    if (view[i].get(TYPEFIELD) === \"f\") {\n                        index = i;\n                        break;\n                    }\n                }\n\n                return dataSource.insert(++index, model);\n            },\n\n            createDirectory: function() {\n                var that = this,\n                    idx,\n                    length,\n                    lastDirectoryIdx = 0,\n                    typeField = TYPEFIELD,\n                    nameField = NAMEFIELD,\n                    view = that.dataSource.data(),\n                    name = that._nameDirectory(),\n                    model = new that.dataSource.reader.model();\n\n                for (idx = 0, length = view.length; idx < length; idx++) {\n                    if (view[idx].get(typeField) === \"d\") {\n                        lastDirectoryIdx = idx;\n                    }\n                }\n\n                model.set(typeField, \"d\");\n                model.set(nameField, name);\n\n                that.listView.one(\"dataBound\", function() {\n                    var selected = that.listView.items()\n                        .filter(\"[\" + kendo.attr(\"uid\") + \"=\" + model.uid + \"]\");\n\n                    if (selected.length) {\n                        this.edit(selected);\n                    }\n\n                    this.element.scrollTop(selected.attr(\"offsetTop\") - this.element[0].offsetHeight);\n\n                    setTimeout(function() {\n                        that.listView.element.find('.k-edit-item input').select();\n                    });\n                })\n                .one(\"save\", function(e) {\n                    var value = e.model.get(nameField);\n\n                    if (!value) {\n                        e.model.set(nameField, name);\n                    } else {\n                        e.model.set(nameField, that._nameExists(value, model.uid) ? that._nameDirectory() : value);\n                    }\n                });\n\n                that.dataSource.insert(++lastDirectoryIdx, model);\n            },\n\n            _directoryKeyDown: function(e) {\n                if (e.keyCode == 13) {\n                    e.currentTarget.blur();\n                }\n            },\n\n            _directoryBlur: function() {\n                this.listView.save();\n            },\n\n            _nameExists: function(name, uid) {\n                var data = this.dataSource.data(),\n                    typeField = TYPEFIELD,\n                    nameField = NAMEFIELD,\n                    idx,\n                    length;\n\n                for (idx = 0, length = data.length; idx < length; idx++) {\n                    if (data[idx].get(typeField) === \"d\" &&\n                        data[idx].get(nameField).toLowerCase() === name.toLowerCase() &&\n                        data[idx].uid !== uid) {\n                        return true;\n                    }\n                }\n                return false;\n            },\n\n            _nameDirectory: function() {\n                var name = \"New folder\",\n                    data = this.dataSource.data(),\n                    directoryNames = [],\n                    typeField = TYPEFIELD,\n                    nameField = NAMEFIELD,\n                    candidate,\n                    idx,\n                    length;\n\n                for (idx = 0, length = data.length; idx < length; idx++) {\n                    if (data[idx].get(typeField) === \"d\" && data[idx].get(nameField).toLowerCase().indexOf(name.toLowerCase()) > -1) {\n                        directoryNames.push(data[idx].get(nameField));\n                    }\n                }\n\n                if ($.inArray(name, directoryNames) > -1) {\n                    idx = 2;\n\n                    do {\n                        candidate = name + \" (\" + idx + \")\";\n                        idx++;\n                    } while ($.inArray(candidate, directoryNames) > -1);\n\n                    name = candidate;\n                }\n\n                return name;\n            },\n\n            orderBy: function(field) {\n                this.dataSource.sort([\n                    { field: TYPEFIELD, dir: \"asc\" },\n                    { field: field, dir: \"asc\" }\n                ]);\n            },\n\n            search: function(name) {\n                this.dataSource.filter({\n                    field: NAMEFIELD,\n                    operator: \"contains\",\n                    value: name\n                });\n            },\n\n            _content: function() {\n                var that = this;\n\n                that.list = $('<div class=\"k-filemanager-listview\" />')\n                    .appendTo(that.element)\n                    .on(\"dblclick\" + NS, \".k-listview-item\", that._dblClick.bind(that));\n\n                that.listView = new kendo.ui.ListView(that.list, {\n                    layout: \"flex\",\n                    flex: {\n                        direction: \"row\",\n                        wrap: \"wrap\"\n                    },\n                    dataSource: that.dataSource,\n                    template: that._itemTmpl(),\n                    editTemplate: that._editTmpl(),\n                    selectable: true,\n                    autoBind: false,\n                    dataBinding: function(e) {\n                        that.toolbar.find(\".k-i-x,.k-svg-i-x\").parent().addClass(\"k-disabled\");\n\n                        if (e.action === \"remove\" || e.action === \"sync\") {\n                            e.preventDefault();\n                            kendo.ui.progress(that.listView.content, false);\n                            /* If there are no files left the loader is displayed over the wrapper instead of the content. */\n                            kendo.ui.progress(that.listView.wrapper, false);\n                        }\n                    },\n                    dataBound: function() {\n                        if (that.dataSource.view().length) {\n                            that._tiles = this.items().filter(\"[\" + kendo.attr(\"type\") + \"=f]\");\n                        } else {\n                            this.content.append(EMPTYTILE({ text: that.options.messages.emptyFolder }));\n                        }\n                    },\n                    change: that._listViewChange.bind(that)\n                });\n            },\n\n            _dblClick: function(e) {\n                var that = this,\n                    li = $(e.currentTarget);\n\n                if (li.hasClass(\"k-edit-item\")) {\n                    that._directoryBlur();\n                }\n\n                if (li.filter(\"[\" + kendo.attr(\"type\") + \"=d]\").length) {\n                    var folder = that.dataSource.getByUid(li.attr(kendo.attr(\"uid\")));\n                    if (folder) {\n                        that.path(concatPaths(that.path(), folder.get(NAMEFIELD)));\n                        that.breadcrumbs.value(\"/\" + that.path());\n                    }\n                } else if (li.filter(\"[\" + kendo.attr(\"type\") + \"=f]\").length) {\n                    that.trigger(APPLY);\n                }\n            },\n\n            _listViewChange: function() {\n                var selected = this._selectedItem();\n\n                if (selected) {\n                    this.toolbar.find(\".k-i-x,.k-svg-i-x\").parent().removeClass(\"k-disabled\");\n                    this.trigger(CHANGE, { selected: selected });\n                }\n            },\n\n            _dataSource: function() {\n                var that = this,\n                    options = that.options,\n                    transport = options.transport,\n                    typeSortOrder = extend({}, DEFAULTSORTORDER),\n                    nameSortOrder = { field: NAMEFIELD, dir: \"asc\" },\n                    schema,\n                    dataSource = {\n                        type: transport.type || \"filebrowser\",\n                        sort: [typeSortOrder, nameSortOrder]\n                    };\n\n                if (isPlainObject(transport)) {\n                    transport.path = that.path.bind(that);\n                    dataSource.transport = transport;\n                }\n\n                if (isPlainObject(options.schema)) {\n                    dataSource.schema = options.schema;\n                } else if (transport.type && isPlainObject(kendo.data.schemas[transport.type])) {\n                    schema = kendo.data.schemas[transport.type];\n                }\n\n                if (that.dataSource && that._errorHandler) {\n                    that.dataSource.unbind(ERROR, that._errorHandler);\n                } else {\n                    that._errorHandler = that._error.bind(that);\n                }\n\n                that.dataSource = kendo.data.DataSource.create(dataSource)\n                    .bind(ERROR, that._errorHandler);\n            },\n\n            _navigation: function() {\n                var that = this,\n                    navigation = $('<div class=\"k-floatwrap\"><nav></nav></div>')\n                        .appendTo(this.element);\n\n                that.breadcrumbs = navigation.find(\"nav\").first()\n                        .kendoBreadcrumb({\n                            editable: true,\n                            gap: 50,\n                            value: that.options.path || \"/\",\n                            change: function() {\n                                that.path(this.value());\n                            }\n                        }).data(\"kendoBreadcrumb\");\n            },\n\n            _error: function(e) {\n                var that = this,\n                    status;\n\n                if (!that.trigger(ERROR, e)) {\n                    status = e.xhr.status;\n\n                    if (e.status == 'error') {\n                        if (status == '404') {\n                            that._showMessage(kendo.htmlEncode(that.options.messages.directoryNotFound));\n                        } else if (status != '0') {\n                            that._showMessage('Error! The requested URL returned ' + status + ' - ' + e.xhr.statusText);\n                        }\n                    } else if (status == 'timeout') {\n                        that._showMessage('Error! Server timeout.');\n                    }\n\n                    var dataSource = that.dataSource;\n                    if (dataSource.hasChanges()) {\n                        dataSource.cancelChanges();\n                    }\n                }\n            },\n\n            _showMessage: function(message, type) {\n                return window[type || \"alert\"](message);\n            },\n\n            refresh: function() {\n                var that = this;\n                that._navigation();\n                that._toolbar();\n                that._content();\n            },\n\n            _editTmpl: function() {\n                const result = (data) => `<div class=\"k-listview-item k-selected\" ${kendo.attr(\"uid\")}=\"${data.uid}\">` +\n                        `${data[TYPEFIELD] === 'd' ?\n                        '<div class=\"k-file-preview\">' + kendo.ui.icon({ icon: \"folder\", iconClass: \"k-file-icon\", size: \"xxxlarge\" }) + '</div>' :\n                        '<div class=\"k-file-preview\"><span class=\"k-file-icon k-icon k-i-loading\"></span></div>'}` +\n                        `${data[TYPEFIELD] === 'd' ?\n                        `<span class=\"k-file-name\">\n                            <span class=\"k-textbox k-input k-input-md k-rounded-md k-input-solid\">\n                                <input class=\"k-input-inner\" ${kendo.attr(\"bind\")}=\"value:${NAMEFIELD}\"/>\n                            </span>\n                        </span>` : ''}` +\n                    `</div>`;\n\n                return kendo.template(result);\n            },\n\n            _itemTmpl: function() {\n                const result = (data) =>\n                    `<div class=\"k-listview-item\" ${kendo.attr(\"uid\")}=\"${data.uid}\" ${kendo.attr(\"type\")}=\"${data[TYPEFIELD]}\">` +\n                        `${data[TYPEFIELD] === 'd' ?\n                        '<div class=\"k-file-preview\">' + kendo.ui.icon({ icon: \"folder\", iconClass: \"k-file-icon\", size: \"xxxlarge\" }) + '</div>' :\n                        '<div class=\"k-file-preview\">' + kendo.ui.icon({ icon: \"file\", iconClass: \"k-file-icon\", size: \"xxxlarge\" }) + '</div>'}` +\n                        `<span class=\"k-file-name\">${data[NAMEFIELD]}</span>` +\n                        `${data[TYPEFIELD] === 'f' ? `<span class=\"k-file-size\">${sizeFormatter(data[SIZEFIELD])}</span>` : '' }` +\n                    `</div>`;\n\n                return kendo.template(result);\n            },\n\n            path: function(value) {\n                var that = this,\n                    path = that._path || \"\";\n\n                if (value !== undefined$1) {\n                    that._path = value.replace(trimSlashesRegExp, \"\") + \"/\";\n                    that.dataSource.read({ path: that._path });\n                    return;\n                }\n\n                if (path) {\n                    path = path.replace(trimSlashesRegExp, \"\");\n                }\n\n                return path === \"/\" || path === \"\" ? \"\" : (path + \"/\");\n            }\n        });\n\n        var SearchBox = Widget.extend({\n            init: function(element, options) {\n                var that = this;\n\n                options = options || {};\n\n                Widget.fn.init.call(that, element, options);\n\n                if (placeholderSupported) {\n                    that.element.attr(\"placeholder\", that.options.label);\n                }\n\n                that._wrapper();\n\n                that.element\n                    .on(\"keydown\" + SEARCHBOXNS, that._keydown.bind(that))\n                    .on(\"change\" + SEARCHBOXNS, that._updateValue.bind(that));\n\n                that.wrapper\n                    .on(CLICK + SEARCHBOXNS, \"a\", that._click.bind(that));\n\n                if (!placeholderSupported) {\n                    that.element.on(\"focus\" + SEARCHBOXNS, that._focus.bind(that))\n                        .on(\"blur\" + SEARCHBOXNS, that._blur.bind(that));\n                }\n            },\n\n            options: {\n                name: \"SearchBox\",\n                label: \"Search\",\n                value: \"\"\n            },\n\n            events: [ CHANGE ],\n\n            destroy: function() {\n                var that = this;\n\n                that.wrapper\n                    .add(that.element)\n                    .add(that.label)\n                    .off(SEARCHBOXNS);\n\n                Widget.fn.destroy.call(that);\n            },\n\n            _keydown: function(e) {\n                if (e.keyCode === 13) {\n                    this._updateValue();\n                }\n            },\n\n            _click: function(e) {\n                e.preventDefault();\n                this._updateValue();\n            },\n\n            _updateValue: function() {\n                var that = this,\n                    value = that.element.val();\n\n                if (value !== that.value()) {\n                    that.value(value);\n\n                    that.trigger(CHANGE);\n                }\n            },\n\n            _blur: function() {\n                this._updateValue();\n                this._toggleLabel();\n            },\n\n            _toggleLabel: function() {\n                if (!placeholderSupported) {\n                    this.label.toggle(!this.element.val());\n                }\n            },\n\n            _focus: function() {\n                this.label.hide();\n            },\n\n            _wrapper: function() {\n                var element = this.element,\n                    wrapper = element.parents(\".k-search-wrap\");\n\n                element[0].style.width = \"\";\n                element.addClass(\"k-input-inner\");\n\n                if (!wrapper.length) {\n                    wrapper = element.wrap($('<div class=\"k-widget k-search-wrap\"><span class=\"k-textbox k-input k-input-md k-rounded-md k-input-solid\"></span></div>')).parents(\".k-search-wrap\");\n                    if (!placeholderSupported) {\n                        $('<label>' + this.options.label + '</label>').css(\"display\", \"block\").insertBefore(element);\n                    }\n                    $('<span class=\"k-input-suffix\">' + kendo.ui.icon($('<a href=\"#\" />'), { icon: \"search\", iconClass: \"k-search\" }) + '</span>').appendTo(wrapper.find(\".k-textbox\"));\n                }\n\n                this.wrapper = wrapper;\n                this.label = wrapper.find(\">label\");\n            },\n\n            value: function(value) {\n                var that = this;\n\n                if (value !== undefined$1) {\n                    that.options.value = value;\n                    that.element.val(value);\n                    that._toggleLabel();\n                    return;\n                }\n                return that.options.value;\n            }\n        });\n\n        kendo.ui.plugin(FileBrowser);\n        kendo.ui.plugin(SearchBox);\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}