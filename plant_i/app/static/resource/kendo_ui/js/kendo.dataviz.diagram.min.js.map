{"version":3,"sources":["raw-js/kendo.dataviz.diagram.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendodataviz","diagram","js","this","$","undefined$1","kendo","window","dataviz","deepExtend","isArray","Array","Utils","isNearZero","num","Math","abs","isDefined","obj","isUndefined","isObject","Object","has","key","hasOwnProperty","call","isString","prototype","toString","isBoolean","isType","type","isNumber","isNaN","parseFloat","isFinite","isEmpty","length","simpleExtend","destination","source","name","initArray","size","value","array","i","serializePoints","points","res","p","push","x","y","join","deserializePoints","s","v","split","Point","parseInt","randomInteger","lower","upper","floor","random","DFT","el","func","childNodes","item","getMatrixAngle","m","d","atan2","b","PI","getMatrixScaling","sqrt","a","c","sign","number","findAngle","center","end","start","sngXComp","sngYComp","atan","findRadian","forEach","arr","iterator","thisRef","any","predicate","remove","what","ax","indexOf","splice","contains","inArray","fold","list","acc","context","initial","arguments","find","result","index","first","constraint","insert","element","position","all","clear","bisort","sortfunc","sort","n","addRange","range","apply","Easing","pos","cos","Ticker","Class","extend","init","adapters","target","tick","interval","duration","lastTime","handlers","_this","transition","timerDelegate","onTimerEvent","addAdapter","onComplete","handler","removeHandler","grep","h","trigger","caller","onStep","seekTo","to","seekFromTo","from","max","min","Date","getTime","intervalId","setInterval","stop","clearInterval","play","origin","initState","reverse","propagate","update","now","timePassed","movement","ui","Range","step","Infinity","j","k","rangeIntegerScale","jQuery","Point2D","isFunction","map","EPSILON","fn","plus","minus","offset","times","normalize","lengthSquared","middleOf","q","toPolar","useDegrees","factor","halfpi","len","Polar","isOnLine","temp","o1","u1","r1","Rect","inflate","r2","union","height","width","parse","str","xy","slice","PathDefiner","left","right","point","dx","dy","r","x1","y1","x2","y2","top","bottom","topLeft","topRight","bottomLeft","bottomRight","clone","equals","rect","rotatedBounds","angle","rotatedPoints","tl","tr","br","bl","rotate","delimiter","scale","scaleX","scaleY","staicPoint","adornerCenter","thisCenter","delta","scaled","zoom","overlaps","rectBottomRight","Size","intersectLine","start1","end1","start2","end2","isSegment","tangensdiff","Empty","toRect","empty","fromPoints","Intersect","lines","segments","rectWithLine","rects","rect1","rect2","intersect","reverseAngle","RectAlign","container","align","content","alignment","alignValues","toLowerCase","_singleAlign","_align","_left","_center","_right","stretch","_stretch","_top","middle","_middle","_bottom","alignCalc","Matrix","e","f","applyRect","fromSVGMatrix","vm","fromMatrixVector","fromList","translation","unit","rotation","sin","scaling","parts","nums","trim","substr","MatrixVector","fromMatrix","randomId","chars","charAt","round","Geometry","_distanceToLineSquared","d2","pt1","pt2","vx","vy","dot","distanceToLine","distanceToPolyline","minimum","Number","MAX_VALUE","p1","p2","HashTable","_buckets","add","_createGetBucket","get","_bucketExists","set","containsKey","hashId","_hash","hashes","_hashes","hash","bucket","ht","_hashString","_objectHashId","charCodeAt","id","_hashId","Dictionary","Observable","dictionary","_hashTable","entry","Error","forEachValue","forEachKey","keys","Queue","_tail","_head","enqueue","next","dequeue","current","Set","resource","kv","toArray","Node","shape","links","outgoing","incoming","weight","associatedShape","bounds","data","shortForm","isVirtual","isIsolated","isLinkedTo","node","that","link","getComplement","getChildren","children","getParents","parents","copy","balance","owner","adjacentTo","removeLink","hasLinkTo","degree","incidentWith","getLinksWith","getNeighbors","neighbors","Link","connection","sourceFound","targetFound","associatedConnection","getCommonNode","isBridging","v1","v2","getNodes","changeSource","changeTarget","changesNodes","w","oldSource","oldTarget","directTo","createReverseEdge","reversed","Graph","idOrDiagram","nodes","_nodeMap","_root","_hasCachedRelationships","cacheRelationships","forceRebuild","assignLevels","startNode","visited","level","child","root","found","getConnectedComponents","componentIndex","setItemIndices","componentId","_collectConnectedNodes","components","addNodeAndOutgoings","setIds","nodeIndex","nextId","calcBounds","getSpanningTree","tree","remaining","_addNode","levelCount","pop","ni","cn","newLink","addLink","treeLevels","takeRandomNode","excludedNodes","incidenceLessThan","pool","isHealthy","hasNode","sourceOrLink","addExistingLink","foundSource","getNode","addNode","foundTarget","removeAllLinks","hasLink","t","linkOrId","nodeOrId","_removeNode","removeNode","areConnected","n1","n2","layoutRect","newNode","newLinks","saveMapping","save","nodeMap","linkMap","nOriginal","nCopy","linkOriginal","linkCopy","linearize","addIds","depthFirstTraversal","action","foundNode","_dftIterator","breadthFirstTraversal","queue","_stronglyConnectedComponents","excludeSingleItems","indices","lowLinks","connected","stack","component","findCycles","isAcyclic","isSubGraph","other","otherArray","thisArray","makeAcyclic","oneNode","rev","N","intensityCatalog","flowIntensity","catalogEqualIntensity","intensity","sourceStack","targetStack","targets","li","targetLink","unshift","sources","si","sourceLink","ri","ril","u","concat","vertexOrder","kk","reversedEdges","Predefined","EightGraph","Mindmap","ThreeGraph","BinaryTree","levels","createBalancedTree","Linear","Tree","siblingsCount","Forest","trees","createBalancedForest","Workflow","Grid","g","previous","graphString","previousLink","graph","part","lin","_addShape","kendoDiagram","shapeDefaults","radius","fill","undoable","addShape","_addConnection","options","connect","createDiagramFromGraph","doLayout","randomSize","clientWidth","clientHeight","opt","color","gli","sourceShape","targetShape","SpringLayout","layoutGraph","limitToView","shi","news","counter","lastAdded","parent","treeCount","createRandomConnectedGraph","nodeCount","maxIncidence","isTree","poolNode","randomAdditions","randomDiagram","shapeCount","normalVariable","mean","deviation","log","geometry","drawing","defined","util","TRANSPARENT","Markers","none","arrowStart","filledCircle","arrowEnd","START","END","WIDTH","HEIGHT","diffNumericOptions","fields","field","elementOptions","hasChanges","Scale","toMatrix","format","invert","Translation","toMatrixVector","Length","Rotation","ZERO","create","values","CompositeTransform","translate","transform","render","visual","_transform","_renderTransform","rotateMatrix","scaleMatrix","translatePoint","AutoSizeableMixin","_setScale","originWidth","_originWidth","originHeight","_originHeight","_setTranslate","_initSize","autoSize","_measure","_updateSize","_diffNumericOptions","Element","_originSize","visible","drawingContainer","redraw","drawingElement","matrix","_hover","force","_measured","box","_boundingBox","startPoint","rawBBox","VisualBase","normalizeDrawingOptions","stroke","opacity","_fill","getColor","_stroke","show","hover","strokeOptions","dashType","fillOptions","gradient","GradientClass","RadialGradient","LinearGradient","TextBlock","_textColor","_font","_initText","fontSize","fontFamily","Text","text","font","fontOptions","fontStyle","fontWeight","sizeChanged","textOptions","Rectangle","_initPath","_setPosition","_drawPath","Path","closed","sizeOptions","sizeOptionsOrDefault","elements","createSegment","MarkerBase","anchor","createElement","_transformToPath","path","transformCopy","CircleMarker","Circle","positionMarker","targetSegment","ArrowMarker","xDiff","yDiff","_linePoints","deg","endPoint","controlOut","nextSegment","controlIn","prevSegment","MarkerPathMixin","_getPath","MultiPath","paths","_normalizeMarkerOptions","startCap","endCap","_removeMarker","marker","_markers","_createMarkers","_createMarker","markerType","append","_positionMarker","_capMap","_redrawMarker","pathChange","pathOptions","cap","pathCapType","optionsCap","created","_redrawMarkers","Group","_createElements","_setData","multipath","Line","Polyline","_updatePath","_pointsDiffer","currentPoints","differ","Image","_initImage","src","_rect","_childrenChange","_remove","removeAt","toFront","visuals","toBack","_reorderChildren","toIndex","group","drawingChildren","fixedPosition","boundingBox","childBoundingBox","_includeInBBox","clippedBBox","Layout","toDrawingRect","drawingRect","reflow","_initCircle","circleOptions","move","_circle","setRadius","Canvas","surface","Surface","_translate","_viewBox","viewBox","setSize","draw","insertBefore","destroy","clearHtml","drawingOptions","Color","toHex","Segment","Movable","Cursors","arrow","grip","cross","select","south","east","west","north","rowresize","colresize","HIT_TEST_DISTANCE","AUTO","TOP","RIGHT","LEFT","BOTTOM","DRAG_START","DRAG","DRAG_END","ITEMBOUNDSCHANGE","ROTATED","TARGET","HANDLE_NAMES","PositionAdapter","layoutState","froms","tos","subjects","getShapeById","LayoutUndoUnit","initialState","finalState","animate","_initialState","_finalState","title","undo","setState","redo","state","conn","ticker","CompositeUnit","units","undoUnit","ConnectionEditUnit","redoSource","redoTarget","_redoSource","_redoTarget","_undoSource","_undoTarget","_updateConnector","updateModel","ConnectionEditUndoUnit","undoSource","undoTarget","DeleteConnectionUnit","targetConnector","DeleteShapeUnit","TransformUnit","shapes","undoStates","adorner","redoStates","layout","refreshBounds","refresh","AddConnectionUnit","AddShapeUnit","deselect","PanUndoUnit","initialPosition","finalPosition","finalPos","pan","RotateUnit","undoRotates","redoRotates","redoAngle","_angle","_innerBounds","_initialize","ToFrontUnit","items","initialIndices","_toIndex","ToBackUnit","UndoRedoService","bind","events","capacity","begin","composite","cancel","commit","execute","_restart","addCompositeItem","count","EmptyTool","toolService","tryActivate","getCursor","ScrollerTool","tool","friction","support","mobileOS","canvas","scroller","scrollable","kendoMobileScroller","velocityMultiplier","mousewheelScrolling","scroll","_move","movableCanvas","virtualScroll","dimension","makeVirtual","virtualSize","dimensions","disable","meta","pannable","enabled","ctrlKey","noMeta","hoveredItem","hoveredAdorner","_hoveredConnector","enable","args","scrollPos","scrollLeft","scrollTop","_storePan","moveTo","_pan","PointerTool","selectSingle","handle","_hitTest","_resizingAdorner","isDragHandle","connections","undoRedoService","_getCursor","SelectionTool","selectable","multiple","selector","isSelected","selectArea","ConnectionTool","connector","_createConnection","_c","canDrag","connectionHandle","_connectionManipulation","_removeHover","activeConnection","_cachedTouchTarget","cachedTouchTarget","sourceConnector","Shape","getConnector","_syncConnectionChanges","_connectorsAdorner","ConnectionEditTool","isActive","handleName","testKey","toUpperCase","ToolService","tools","activeTool","_updateHoveredItem","_activateTool","_updateCursor","focus","suspendTracking","updateHovered","resumeTracking","keyDown","metaKey","altKey","toRemove","_triggerRemove","_syncChanges","_destroyToolBar","_discardNewConnection","selectAll","cut","paste","wheel","z","zoomRate","zoomOptions","zoomMin","zoomMax","setTool","addToSelection","newConnection","cursor","css","disabledShape","isNew","hit","_visible","selectedConnections","_selectedItems","Connection","_hitTestItems","_hitTestElements","shapeHit","connectionHit","idx","connectors","hitTestShapeConnectors","mainLayer","ConnectionRouterBase","LinearConnectionRouter","hitTest","getBounds","allPoints","PolylineRouter","route","CascadingRouter","SAME_SIDE_DISTANCE_RATIO","routePoints","_connectorPoints","_floatingPoints","_resolvedSourceConnector","_resolvedTargetConnector","sourcePoint","targetPoint","_connectorSides","axis","boundsPoint","secondarySign","_connectorSide","sideDistance","minSide","side","shapeBounds","sides","MAX_NUM","_sameSideDistance","pointX","pointY","sourceConnectorSide","targetConnectorSide","deltaX","deltaY","sameSideDistance","shiftX","shiftY","cascadeStartHorizontal","_startHorizontal","sourceSide","AdornerBase","_adorners","ConnectionEditAdorner","_ts","sp","tp","spVisual","handles","epVisual","_initialSource","_initialTarget","ts","radiusX","radiusY","sourcePointDistance","distanceTo","targetPointDistance","sourceHandle","targetHandle","modelToLayer","ConnectorsAdorner","_refreshHandler","ctr","_clearVisual","ConnectorVisual","_keepCachedTouchTarget","visualChildren","childrenCount","unbind","each","ResizingAdorner","_manipulating","_initSelection","_createHandles","selected","_internalChange","_rotatedHandler","_resizable","editable","resize","_handleOptions","_bounds","handleBounds","handlesCount","_getHandleBounds","_rotationOffset","_startAngle","_rotates","_positions","initialRotates","initialStates","handleOptions","_sp","_cp","_lp","shapeStates","visibleHandles","currentAngle","dragging","newBounds","staticPoint","dtl","dbr","changed","_truncateAngle","_rotating","shouldSnap","thr","_truncateDistance","hitToOppositeSide","_displaceBounds","newCenter","minWidth","minHeight","oldBounds","states","_truncatePositionToGuides","ruler","truncatePositionToGuides","_truncateSizeToGuides","truncateSizeToGuides","snap","snapOptions","snapAngle","snapSize","drag","_diffStates","_syncShapeChanges","rotationThumb","thumb","_rotationThumbBounds","Selector","_ep","_adorn","visualBounds","modelToView","relative","_visualBounds","shiftKey","HyperTree","DEG_TO_RAD","LayoutBase","defaultOptions","subtype","roots","nodeDistance","iterations","horizontalSeparation","verticalSeparation","underneathVerticalTopOffset","underneathHorizontalOffset","underneathVerticalSeparation","grid","offsetX","offsetY","componentSpacingX","componentSpacingY","layerSeparation","layeredIterations","startRadialAngle","endRadialAngle","radialSeparation","radialFirstLevelSeparation","keepComponentsInOneRadialLayout","ignoreContainers","layoutContainerChildren","ignoreInvisible","animateTransitions","gridLayoutComponents","maxWidth","startX","resultLinkSet","resultNodeSet","moveToOffset","boundingRect","currentHeight","currentWidth","deltax","deltay","nodeBounds","newpoints","pt","currentHorizontalOffset","transferOptions","DiagramToHyperTreeAdapter","shapeMap","edges","edgeMap","finalNodes","finalLinks","ignoredConnections","ignoredShapes","hyperMap","hyperTree","finalGraph","convert","_renormalizeShapes","_renormalizeConnections","l","mapConnection","mapShape","getEdge","listToRoot","containerGraph","parentContainer","firstNonIgnorableContainer","isContainer","_isIgnorableItem","isContainerConnection","isDescendantOf","scope","containers","isIgnorableItem","isCollapsed","_isVisible","_isTop","isShapeMapped","leastCommonAncestor","al","xa","xb","_isCollapsed","sink","sourceNode","sinkNode","areConnectedAlready","newEdge","finalNodeSet","LayoutState","initialTemperature","temperature","guessBounds","_expectedBounds","refineStage","_repulsion","_attraction","_shake","rho","alpha","_InverseSquareForce","wn","hn","wm","hm","pow","_SquareForce","distance","squareSize","area","ceil","TreeLayoutProcessor","treeGraph","layoutSwitch","layoutLeft","setChildrenDirection","setChildrenLayout","TreeDirection","measure","Width","arrange","layoutRight","layoutUp","up","layoutDown","down","treeDirection","layoutRadialTree","previousRoot","startAngle","endAngle","maxDepth","calculateAngularWidth","radialLayout","Angle","tipOverTree","startFromLevel","aw","diameter","sectorAngle","sortChildren","basevalue","pl","nl","normalizeAngle","col","deltaTheta","deltaThetaHalf","parentSector","fraction","sorted","childNode","cp","childAngleFraction","setPolarLocation","BoundingRectangle","direction","includeStart","rootDirection","rootLayout","childrenLayout","givenSize","shapeWidth","shapeHeight","AngleToParent","SectorAngle","pp","childrenwidth","selfLocation","single","male","female","leftcount","tipOverTreeStartLevel","TreeLayout","adapter","layoutComponents","getTree","getTreeForRoot","LayeredLayout","_initRuntimeProperties","layer","downstreamLinkCount","upstreamLinkCount","uBaryCenter","dBaryCenter","upstreamPriority","downstreamPriority","gridPosition","_prepare","targetLayer","layerMap","layerCount","shift","sortedNodes","o2","o1layer","o2layer","minLayer","layers","linksTo","_dummify","_optimizeCrossings","_swapPairs","arrangeNodes","_moveThingsAround","_dedummify","setMinDist","minDist","layerIndex","minDistances","getMinDist","dist","i1","i2","placeLeftToRight","leftClasses","leftPos","classNodes","placeLeft","POSITIVE_INFINITY","rightSibling","nodeLeftClass","D","upNodes","downNodes","neighbor","intDiv","placeRightToLeft","rightClasses","rightPos","placeRight","NEGATIVE_INFINITY","leftSibling","nodeRightClass","_getLeftWing","leftWing","computeClasses","_getRightWing","rightWing","wingPair","currentWing","wing","ndsinl","_nodesInLink","vnode","wings","classIndex","_isVerticalLayout","_isHorizontalLayout","_isIncreasingLayout","_gridPositionComparer","dest","currentNode","currDown","downNode","order","placed","sequenceStart","virtualStartIndex","_firstVirtualNode","virtualStart","sequence","_sequencer","virtualEnd","nextVirtualNode","virtualEndIndex","adjustDirections","ctx","fromLayerIndex","layerIncrement","maximumHeight","MIN_VALUE","prevBridge","prevBridgeTarget","nextBridge","nextBridgeTarget","getNeighborOnLayer","clayer","j1","j2","dir","_sequenceSingle","combineSequences","pair","leftHeap","_positionDescendingComparer","rightHeap","_positionAscendingComparer","leftRes","rightRes","leftClass","_getComposite","rightClass","it","layoutLayer","gridPos","iconsidered","considered","n1Priority","n2Priority","nodeGridPos","nodeBaryCenter","calcBaryCenter","nodePriority","moveRight","moveLeft","calcDownData","calcUpData","priority","rightNode","rightNodePriority","leftNode","leftNodePriority","mapVirtualNode","nodeToLinkMap","linkToNodeMap","addLinkBetweenLayers","upLayer","downLayer","o","oLayer","dLayer","oPos","dPos","depthOfDumminess","dedum","prevLink","moves","iter","optimizeLayerCrossings","sum","total","presorted","n1BaryCenter","n2BaryCenter","compareByIndex","compareValue","inode","maxIterations","downwards","secondPass","hasSwapped","calcCrossings","memCrossings","crossBefore","countLinksCrossingBetweenTwoLayers","node1","node2","node1GridPos","node2GridPos","crossAfter","ulayer","dlayer","link1","link2","n11","n12","n21","n22","l1","l2","crossings","n11gp","n12gp","numerator","denominator","graphOrNodes","capture","diagramOrGraphOrNodes","GraphAdapter","geom","Widget","outerWidth","_outerWidth","outerHeight","_outerHeight","HierarchicalDataSource","isPlainObject","math","NS","CASCADING","CHANGE","CLICK","ERROR","MAXINT","SELECT","ITEMROTATE","PAN","ZOOM_START","ZOOM_END","NONE","TRANSFORMED","MOUSEWHEEL_NS","BUTTON_TEMPLATE","className","icon","themeColor","html","renderButton","DefaultConnectors","getPosition","defaultButtons","imageClass","isAutoConnector","closestConnector","resCtr","minimumDistance","indicesOfItems","extra","defaults","DiagramElement","dataItem","_template","serializable","serialize","json","_content","contentOptions","_contentVisual","_updateContentVisual","_createContentVisual","template","elementTemplate","paramName","_canSelect","toJSON","Connector","shapeId","tempStr","updateOptionsFromModel","createShapeVisual","updateBounds","_createConnectors","_setOptionsFromModel","model","modelOptions","filterShapeDataItem","redrawVisual","_isEditable","_redrawVisual","syncChanges","_suspendModelRefresh","_resumeModelRefresh","_rotate","_alignContent","contentVisual","containerRect","aligner","contentBounds","bbox","contentRect","alignedBounds","connectorDefaults","_transformedBounds","_rotatedBounds","_setBounds","_triggerBoundsChange","_layouting","refreshConnections","cloneDataItem","deselected","_internalSelection","_selectionChanged","deltaAngle","newPosition","sc","con","cons","nameOrPoint","toLocaleLowerCase","fnName","_transformPoint","boundsChange","shapeOptions","shapeVisual","_visualOptions","_updateConnectors","_showConnectors","rotatedPoint","visualOptions","visualTemplate","_initRouter","_sourcePoint","_targetPoint","_setSource","_setTarget","definers","fromConnector","toConnector","dataMap","_dataMap","fromX","fromY","toX","toY","filterConnectionDataItem","connectionsDataSource","getByUid","uid","clearField","shapeSource","defaultConnector","_removeFromSourceConnector","_clearSourceConnector","_setFromOptions","fromPoint","sourceDefiner","_sourceDefiner","shapeTarget","_removeFromTargetConnector","_clearTargetConnector","_setToOptions","toPoint","targetDefiner","_targetDefiner","instance","connectorName","setNewTarget","inactiveItem","_inactiveShapeItems","_deferredConnectionUpdates","onActivate","endIdx","startIdx","alignToPath","midIdx","selection","_router","pts","definition","_resolveConnectors","_refreshPath","sourceConnectors","targetConnectors","_resolveAutoConnectors","minNonConflictSource","minNonConflictTarget","minSource","minTarget","sourceIdx","targetIdx","minNonConflict","_testRoutePoints","router","passRoute","exclude","_getRouteExclude","_shapesQuadTree","hitTestRect","_isPointInsideShape","boundsX","boundsY","Diagram","userOptions","_initTheme","_initElements","_extendLayoutOptions","_initDefaults","_interactionDefaults","_initCanvas","ShapesQuadTree","adornerLayer","_createHandlers","_clipboard","pauseMouseHandlers","_fetchFreshData","_createGlobalToolBar","_createOptionElements","theme","dataSource","draggable","autoBind","tooltip","connectionDefaults","toolBar","DiagramToolBar","click","_toolBarClick","modal","textAlign","prepend","_resize","createShape","editor","view","createModel","_createShape","edit","createConnection","_connectionsDataMap","addConnection","editModel","editorType","editors","cancelEdit","shapeEditors","shapeTemplate","connectionSelectorHandler","connectionSelector","connectionEditors","connectionTemplate","PopupEditor","_update","_cancel","_editArgs","_getEditDataSource","cancelChanges","_destroyEditor","saveEdit","sync","wrapper","close","attr","addClass","appendTo","userShapeDefaults","copyDefaultOptions","mobile","canvasContainer","viewPort","viewport","on","_wheel","_keydown","_userEvents","UserEvents","multiTouch","fastTap","tap","_tap","_dragStart","_drag","_dragEnd","gesturestart","_gestureStart","gesturechange","_gestureChange","gestureend","_gestureEnd","doubleTap","_doubleTap","supportDoubleTap","_mouseover","_mouseout","_mouseMove","_mouseDown","_mouseUp","_syncHandler","_resizeHandler","onResize","_pauseMouseHandlers","_eventPositions","event","_meta","preventDefault","_createToolBar","focused","ctrlPressed","keyCode","origEvent","originalEvent","wheelDelta","detail","mwDelta","touch","pageX","pageY","documentToModel","initialCenter","eventArgs","_gesture","_initialCenter","previousGesture","documentToView","scaleDelta","_zoom","updateZoom","_getValidZoom","zoomedPoint","_panTransform","_updateAdorners","pointPosition","_kendoNode","srcElement","themeOptions","themeName","themes","SASS_THEMES","autoTheme","shapesLength","_createShapes","_createConnections","_findConnectionTarget","unbindResize","off","destroyScroller","_destroyGlobalToolBar","is","_activeElement","scrollContainer","offsets","documentElement","document","parentNode","scrollHeight","load","setOptions","added","removed","_parseBounds","splitDiagramElements","_removeItem","_removeShapeDataItem","_removeConnectionDataItem","_getDiagramItems","_fixOrdering","bringIntoView","original","newPan","_zoomMainLayer","alignShapes","val","raw","hideTooltip","_getPan","animatedScrollTo","scrollTo","_copyOffset","copied","mapping","_updateCopiedConnection","sourceConnection","di","_containerOffset","containerOffset","viewToDocument","viewToModel","_transformWithMatrix","_matrixInvert","_matrix","_layerMatrix","layerToModel","_layerMatrixInvert","viewPoint","modelToDocument","setDataSource","_dataSource","fetch","setConnectionsDataSource","_connectionDataSource","_redrawConnections","getShapeByModelId","getShapeByModelUid","getConnectionByModelId","getConnectionByModelUid","_transformMainLayer","_finishPan","NaN","_storeViewMatrix","_storeLayerMatrix","canvasTransform","shapePos","conPos","removedConnections","_removeShape","_removeConnection","_removeDataItems","recursive","_removeShapeConnections","hasChildren","loaded","_addDataItem","_addDataItemByUid","_addDataItems","parentShape","_refreshSource","dataBound","_bindingRoots","_addItem","preventClosing","singleToolBar","popupZIndex","closest","popupWidth","_popup","popupHeight","connectionBounds","showAt","one","_normalizePointZoom","InactiveItemsCollection","undone","redone","_loadingShapes","_loadingConnections","dsOptions","ds","_shapesRefreshHandler","_shapesRequestStartHandler","_shapesErrorHandler","_refreshShapes","_shapesRequestStart","_error","DataSource","_treeDataSource","_connectionsRefreshHandler","_connectionsRequestStartHandler","_connectionsErrorHandler","_refreshConnections","_connectionsRequestStart","_connectionsError","_shouldRefresh","_removeShapes","_updateShapes","_syncShapes","_suspended","_rebindShapesAndConnections","_addShapes","_addConnections","inactiveItems","activate","dataItems","_removeConnections","_updateConnections","_addConnectionDataItem","_validateConnector","_unbindDataSource","_errorHandler","adorners","_refresh","hide","exportDOMVisual","scrollOffset","viewRect","clipPath","fromRect","wrap","clipWrap","clip","exportVisual","when","then","deferredConnectionUpdates","ExportMixin","PDFMixin","_tools","createToolBar","createTools","appendTools","createPopup","kendoPopup","getKendoPopup","buttons","_toolBar","kendoToolBar","resizable","getKendoToolBar","createTool","toolName","attributes","_setAttributes","open","newGroup","editTool","showText","deleteTool","rotateAnticlockwiseTool","_appendGroup","_rotateGroup","rotateClockwiseTool","createShapeTool","_createGroup","createConnectionTool","undoTool","_historyGroup","redoTool","prop","_getAttributes","eventData","selectedElements","delete","selectedElemens","rotateClockwise","rotateAnticlockwise","Editor","_getFields","_initContainer","createEditable","Editable","clearContainer","modelFields","columns","formContent","_renderTemplate","_renderFields","_renderButtons","Window","userTriggered","sender","_cancelClick","_attachButtonEvents","unescape","form","_createButton","_cancelClickHandler","_updateClickHandler","_updateClick","_editUpdateClickHandler","reader","textField","idField","kendoDropDownList","dataValueField","dataTextField","optionLabel","valuePrimitive","InactiveItem","callbacks","callback","deffered","Deferred","deferred","resolve","QuadRoot","_add","_quadNode","_testRect","QuadNode","inBounds","nodeRect","nodeBottomRight","overlapsBounds","inserted","_initChildren","childIdx","shapeIdx","halfWidth","halfHeight","ROOT_SIZE","boundsChangeHandler","_boundsChange","initRoots","rootMap","rootSize","sectors","getSectors","inRoot","bottomX","bottomY","xIdx","yIdx","Model","_defaultId","ObservableObject","mainOptions","plugin"],"mappings":"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","file":"kendo.dataviz.diagram.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.data.js'), require('kendo.draganddrop.js'), require('kendo.userevents.js'), require('kendo.mobile.scroller.js'), require('kendo.drawing.js'), require('kendo.core.js'), require('kendo.dataviz.core.js'), require('kendo.toolbar.js'), require('kendo.editable.js'), require('kendo.window.js'), require('kendo.dropdownlist.js'), require('kendo.dataviz.themes.js'), require('kendo.html.button.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.data', 'kendo.draganddrop', 'kendo.userevents', 'kendo.mobile.scroller', 'kendo.drawing', 'kendo.core', 'kendo.dataviz.core', 'kendo.toolbar', 'kendo.editable', 'kendo.window', 'kendo.dropdownlist', 'kendo.dataviz.themes', 'kendo.html.button'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendodataviz = global.kendodataviz || {}, global.kendodataviz.diagram = global.kendodataviz.diagram || {}, global.kendodataviz.diagram.js = factory()));\n})(this, (function () {\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            diagram = kendo.dataviz.diagram = {},\n            deepExtend = kendo.deepExtend,\n            isArray = Array.isArray,\n            EPSILON = 1e-06;\n\n        /*-------------------Diverse utilities----------------------------*/\n        var Utils = {\n        };\n\n        deepExtend(Utils, {\n            isNearZero: function(num) {\n                return Math.abs(num) < EPSILON;\n            },\n            isDefined: function(obj) {\n                return typeof obj !== 'undefined';\n            },\n\n            isUndefined: function(obj) {\n                return (typeof obj === 'undefined') || obj === null;\n            },\n            /**\n             * Returns whether the given object is an object or a value.\n             */\n            isObject: function(obj) {\n                return obj === Object(obj);\n            },\n            /**\n             * Returns whether the object has a property with the given name.\n             */\n            has: function(obj, key) {\n                return Object.hasOwnProperty.call(obj, key);\n            },\n            /**\n             * Returns whether the given object is a string.\n             */\n            isString: function(obj) {\n                return Object.prototype.toString.call(obj) == '[object String]';\n            },\n            isBoolean: function(obj) {\n                return Object.prototype.toString.call(obj) == '[object Boolean]';\n            },\n            isType: function(obj, type) {\n                return Object.prototype.toString.call(obj) == '[object ' + type + ']';\n            },\n            /**\n             * Returns whether the given object is a number.\n             */\n            isNumber: function(obj) {\n                return !isNaN(parseFloat(obj)) && isFinite(obj);\n            },\n            /**\n             * Return whether the given object (array or dictionary).\n             */\n            isEmpty: function(obj) {\n                if (obj === null) {\n                    return true;\n                }\n                if (isArray(obj) || Utils.isString(obj)) {\n                    return obj.length === 0;\n                }\n                for (var key in obj) {\n                    if (Utils.has(obj, key)) {\n                        return false;\n                    }\n                }\n                return true;\n            },\n            simpleExtend: function(destination, source) {\n                if (!Utils.isObject(source)) {\n                    return;\n                }\n\n                for (var name in source) {\n                    destination[name] = source[name];\n                }\n            },\n            /**\n             * Returns an array of the specified size and with each entry set to the given value.\n             * @param size\n             * @param value\n             * @returns {Array}\n             */\n            initArray: function createIdArray(size, value) {\n                var array = [];\n                for (var i = 0; i < size; ++i) {\n                    array[i] = value;\n                }\n                return array;\n            },\n            serializePoints: function(points) {\n                var res = [];\n                for (var i = 0; i < points.length; i++) {\n                    var p = points[i];\n                    res.push(p.x + \";\" + p.y);\n                }\n                return res.join(\";\");\n            },\n            deserializePoints: function(s) {\n                var v = s.split(\";\"), points = [];\n                if (v.length % 2 !== 0) {\n                    throw \"Not an array of points.\";\n                }\n                for (var i = 0; i < v.length; i += 2) {\n                    points.push(new diagram.Point(\n                        parseInt(v[i], 10),\n                        parseInt(v[i + 1], 10)\n                    ));\n                }\n                return points;\n            },\n            /**\n             * Returns an integer within the given bounds.\n             * @param lower The inclusive lower bound.\n             * @param upper The exclusive upper bound.\n             * @returns {number}\n             */\n            randomInteger: function(lower, upper) {\n                return parseInt(Math.floor(Math.random() * upper) + lower, 10);\n            } ,\n            /*\n             Depth-first traversal of the given node.\n             */\n            DFT: function(el, func) {\n                func(el);\n                if (el.childNodes) {\n                    for (var i = 0; i < el.childNodes.length; i++) {\n                        var item = el.childNodes[i];\n                        this.DFT(item, func);\n                    }\n                }\n            },\n            /*\n             Returns the angle in degrees for the given matrix\n             */\n            getMatrixAngle: function(m) {\n                if (m === null || m.d === 0) {\n                    return 0;\n                }\n                return Math.atan2(m.b, m.d) * 180 / Math.PI;\n            },\n\n            /*\n             Returns the scaling factors for the given matrix.\n             */\n            getMatrixScaling: function(m) {\n                var sX = Math.sqrt(m.a * m.a + m.c * m.c);\n                var sY = Math.sqrt(m.b * m.b + m.d * m.d);\n                return [sX, sY];\n            }\n\n        });\n\n        /**\n         * The Range defines an array of equally separated numbers.\n         * @param start The start-value of the Range.\n         * @param stop The end-value of the Range.\n         * @param step The separation between the values (default:1).\n         * @returns {Array}\n         */\n        function Range(start, stop, step) {\n            if (typeof start == 'undefined' || typeof stop == 'undefined') {\n                return [];\n            }\n            if (step && Utils.sign(stop - start) != Utils.sign(step)) {\n                throw \"The sign of the increment should allow to reach the stop-value.\";\n            }\n            step = step || 1;\n            start = start || 0;\n            stop = stop || start;\n            if ((stop - start) / step === Infinity) {\n                throw \"Infinite range defined.\";\n            }\n            var range = [], i = -1, j;\n\n            function rangeIntegerScale(x) {\n                var k = 1;\n                while (x * k % 1) {\n                    k *= 10;\n                }\n                return k;\n            }\n\n            var k = rangeIntegerScale(Math.abs(step));\n            start *= k;\n            stop *= k;\n            step *= k;\n            if (start > stop && step > 0) {\n                step = -step;\n            }\n            if (step < 0) {\n                while ((j = start + step * ++i) >= stop) {\n                    range.push(j / k);\n                }\n            }\n            else {\n                while ((j = start + step * ++i) <= stop) {\n                    range.push(j / k);\n                }\n            }\n            return range;\n        }\n\n        /*-------------------Diverse math functions----------------------------*/\n\n        function findRadian(start, end) {\n            if (start == end) {\n                return 0;\n            }\n            var sngXComp = end.x - start.x,\n                sngYComp = start.y - end.y,\n                atan = Math.atan(sngXComp / sngYComp);\n            if (sngYComp >= 0) {\n                return sngXComp < 0 ? atan + (2 * Math.PI) : atan;\n            }\n            return atan + Math.PI;\n        }\n\n        Utils.sign = function(number) {\n            return number ? number < 0 ? -1 : 1 : 0;\n        };\n\n        Utils.findAngle = function(center, end) {\n            return findRadian(center, end) * 180 / Math.PI;\n        };\n\n        /*-------------------Array Helpers ----------------------------*/\n\n        Utils.forEach = function(arr, iterator, thisRef) {\n            for (var i = 0; i < arr.length; i++) {\n                iterator.call(thisRef, arr[i], i, arr);\n            }\n        };\n\n        Utils.any = function(arr, predicate) {\n            for (var i = 0; i < arr.length; ++i) {\n                if (predicate(arr[i])) {\n                    return arr[i];\n                }\n            }\n            return null;\n        };\n\n        Utils.remove = function(arr, what) {\n            var ax;\n            while ((ax = Utils.indexOf(arr, what)) !== -1) {\n                arr.splice(ax, 1);\n            }\n            return arr;\n        };\n\n        Utils.contains = function(arr, obj) {\n            return Utils.indexOf(arr, obj) !== -1;\n        };\n\n        Utils.indexOf = function(arr, what) {\n            return $.inArray(what, arr);\n        };\n\n        Utils.fold = function(list, iterator, acc, context) {\n            var initial = arguments.length > 2;\n\n            for (var i = 0; i < list.length; i++) {\n                var value = list[i];\n                if (!initial) {\n                    acc = value;\n                    initial = true;\n                }\n                else {\n                    acc = iterator.call(context, acc, value, i, list);\n                }\n            }\n\n            if (!initial) {\n                throw 'Reduce of empty array with no initial value';\n            }\n\n            return acc;\n        };\n\n        Utils.find = function(arr, iterator, context) {\n            var result;\n            Utils.any(arr, function(value, index, list) {\n                if (iterator.call(context, value, index, list)) {\n                    result = value;\n                    return true;\n                }\n                return false;\n            });\n            return result;\n        };\n\n        Utils.first = function(arr, constraint, context) {\n            if (arr.length === 0) {\n                return null;\n            }\n            if (Utils.isUndefined(constraint)) {\n                return arr[0];\n            }\n\n            return Utils.find(arr, constraint, context);\n        };\n\n        /**\n         * Inserts the given element at the specified position and returns the result.\n         */\n        Utils.insert = function(arr, element, position) {\n            arr.splice(position, 0, element);\n            return arr;\n        };\n\n        Utils.all = function(arr, iterator, context) {\n            var result = true;\n            var value;\n\n            for (var i = 0; i < arr.length; i++) {\n                value = arr[i];\n                result = result && iterator.call(context, value, i, arr);\n\n                if (!result) {\n                    break;\n                }\n            }\n\n            return result;\n        };\n\n        Utils.clear = function(arr) {\n            arr.splice(0, arr.length);\n        };\n\n        /**\n         * Sort the arrays on the basis of the first one (considered as keys and the other array as values).\n         * @param a\n         * @param b\n         * @param sortfunc (optiona) sorting function for the values in the first array\n         */\n        Utils.bisort = function(a, b, sortfunc) {\n            if (Utils.isUndefined(a)) {\n                throw \"First array is not specified.\";\n            }\n            if (Utils.isUndefined(b)) {\n                throw \"Second array is not specified.\";\n            }\n            if (a.length != b.length) {\n                throw \"The two arrays should have equal length\";\n            }\n\n            var all = [], i;\n\n            for (i = 0; i < a.length; i++) {\n                all.push({ 'x': a[i], 'y': b[i] });\n            }\n            if (Utils.isUndefined(sortfunc)) {\n                all.sort(function(m, n) {\n                    return m.x - n.x;\n                });\n            }\n            else {\n                all.sort(function(m, n) {\n                    return sortfunc(m.x, n.x);\n                });\n            }\n\n            Utils.clear(a);\n            Utils.clear(b);\n\n            for (i = 0; i < all.length; i++) {\n                a.push(all[i].x);\n                b.push(all[i].y);\n            }\n        };\n\n        Utils.addRange = function(arr, range) {\n            arr.push.apply(arr, range);\n        };\n\n        var Easing = {\n            easeInOut: function(pos) {\n                return ((-Math.cos(pos * Math.PI) / 2) + 0.5);\n            }\n        };\n\n        /**\n         * An animation ticker driving an adapter which sets a particular\n         * property in function of the tick.\n         * @type {*}\n         */\n        var Ticker = kendo.Class.extend({\n            init: function() {\n                this.adapters = [];\n                this.target = 0;\n                this.tick = 0;\n                this.interval = 20;\n                this.duration = 800;\n                this.lastTime = null;\n                this.handlers = [];\n                var _this = this;\n                this.transition = Easing.easeInOut;\n                this.timerDelegate = function() {\n                    _this.onTimerEvent();\n                };\n            },\n            addAdapter: function(a) {\n                this.adapters.push(a);\n            },\n            onComplete: function(handler) {\n                this.handlers.push(handler);\n            },\n            removeHandler: function(handler) {\n                this.handlers = $.grep(this.handlers, function(h) {\n                    return h !== handler;\n                });\n            },\n            trigger: function() {\n                var _this = this;\n                if (this.handlers) {\n                    Utils.forEach(this.handlers, function(h) {\n                        return h.call(_this.caller !== null ? _this.caller : _this);\n                    });\n                }\n            },\n            onStep: function() {\n            },\n            seekTo: function(to) {\n                this.seekFromTo(this.tick, to);\n            },\n            seekFromTo: function(from, to) {\n                this.target = Math.max(0, Math.min(1, to));\n                this.tick = Math.max(0, Math.min(1, from));\n                this.lastTime = new Date().getTime();\n                if (!this.intervalId) {\n                    this.intervalId = window.setInterval(this.timerDelegate, this.interval);\n                }\n            },\n            stop: function() {\n                if (this.intervalId) {\n                    window.clearInterval(this.intervalId);\n                    this.intervalId = null;\n\n                    //this.trigger.call(this);\n                    this.trigger();\n                    // this.next();\n                }\n            },\n            play: function(origin) {\n                if (this.adapters.length === 0) {\n                    return;\n                }\n                if (origin !== null) {\n                    this.caller = origin;\n                }\n                this.initState();\n                this.seekFromTo(0, 1);\n            },\n            reverse: function() {\n                this.seekFromTo(1, 0);\n            },\n            initState: function() {\n                if (this.adapters.length === 0) {\n                    return;\n                }\n                for (var i = 0; i < this.adapters.length; i++) {\n                    this.adapters[i].initState();\n                }\n            },\n            propagate: function() {\n                var value = this.transition(this.tick);\n\n                for (var i = 0; i < this.adapters.length; i++) {\n                    this.adapters[i].update(value);\n                }\n            },\n            onTimerEvent: function() {\n                var now = new Date().getTime();\n                var timePassed = now - this.lastTime;\n                this.lastTime = now;\n                var movement = (timePassed / this.duration) * (this.tick < this.target ? 1 : -1);\n                if (Math.abs(movement) >= Math.abs(this.tick - this.target)) {\n                    this.tick = this.target;\n                } else {\n                    this.tick += movement;\n                }\n\n                try {\n                    this.propagate();\n                } finally {\n                    this.onStep.call(this);\n                    if (this.target == this.tick) {\n                        this.stop();\n                    }\n                }\n            }\n        });\n\n        kendo.deepExtend(diagram, {\n            init: function(element) {\n                kendo.init(element, diagram.ui);\n            },\n\n            Utils: Utils,\n            Range: Range,\n            Ticker: Ticker\n        });\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n        // Imports ================================================================\n        var kendo = window.kendo,\n            diagram = kendo.dataviz.diagram,\n            Class = kendo.Class,\n            deepExtend = kendo.deepExtend,\n            dataviz = kendo.dataviz,\n            Utils = diagram.Utils,\n            Point = dataviz.Point2D,\n            isFunction = kendo.isFunction,\n            contains = Utils.contains,\n            map = $.map;\n\n        // Constants ==============================================================\n        var HITTESTAREA = 3,\n            EPSILON = 1e-06;\n\n        deepExtend(Point.fn, {\n            plus: function(p) {\n                return new Point(this.x + p.x, this.y + p.y);\n            },\n            minus: function(p) {\n                return new Point(this.x - p.x, this.y - p.y);\n            },\n            offset: function(value) {\n                return new Point(this.x - value, this.y - value);\n            },\n            times: function(s) {\n                return new Point(this.x * s, this.y * s);\n            },\n            normalize: function() {\n                if (this.length() === 0) {\n                    return new Point();\n                }\n                return this.times(1 / this.length());\n            },\n            length: function() {\n                return Math.sqrt(this.x * this.x + this.y * this.y);\n            },\n            toString: function() {\n                return \"(\" + this.x + \",\" + this.y + \")\";\n            },\n            lengthSquared: function() {\n                return (this.x * this.x + this.y * this.y);\n            },\n            middleOf: function MiddleOf(p, q) {\n                return new Point(q.x - p.x, q.y - p.y).times(0.5).plus(p);\n            },\n            toPolar: function(useDegrees) {\n                var factor = 1;\n                if (useDegrees) {\n                    factor = 180 / Math.PI;\n                }\n                var a = Math.atan2(Math.abs(this.y), Math.abs(this.x));\n                var halfpi = Math.PI / 2;\n                var len = this.length();\n                if (this.x === 0) {\n                    // note that the angle goes down and not the usual mathematical convention\n\n                    if (this.y === 0) {\n                        return new Polar(0, 0);\n                    }\n                    if (this.y > 0) {\n                        return new Polar(len, factor * halfpi);\n                    }\n                    if (this.y < 0) {\n                        return new Polar(len, factor * 3 * halfpi);\n                    }\n                }\n                else if (this.x > 0) {\n                    if (this.y === 0) {\n                        return new Polar(len, 0);\n                    }\n                    if (this.y > 0) {\n                        return new Polar(len, factor * a);\n                    }\n                    if (this.y < 0) {\n                        return new Polar(len, factor * (4 * halfpi - a));\n                    }\n                }\n                else {\n                    if (this.y === 0) {\n                        return new Polar(len, 2 * halfpi);\n                    }\n                    if (this.y > 0) {\n                        return new Polar(len, factor * (2 * halfpi - a));\n                    }\n                    if (this.y < 0) {\n                        return new Polar(len, factor * (2 * halfpi + a));\n                    }\n                }\n            },\n            isOnLine: function(from, to) {\n                if (from.x > to.x) { // from must be the leftmost point\n                    var temp = to;\n                    to = from;\n                    from = temp;\n                }\n                var r1 = new Rect(from.x, from.y).inflate(HITTESTAREA, HITTESTAREA),\n                    r2 = new Rect(to.x, to.y).inflate(HITTESTAREA, HITTESTAREA), o1, u1;\n                if (r1.union(r2).contains(this)) {\n                    if (from.x === to.x || from.y === to.y) {\n                        return true;\n                    }\n                    else if (from.y < to.y) {\n                        o1 = r1.x + (((r2.x - r1.x) * (this.y - (r1.y + r1.height))) / ((r2.y + r2.height) - (r1.y + r1.height)));\n                        u1 = (r1.x + r1.width) + ((((r2.x + r2.width) - (r1.x + r1.width)) * (this.y - r1.y)) / (r2.y - r1.y));\n                    }\n                    else {\n                        o1 = r1.x + (((r2.x - r1.x) * (this.y - r1.y)) / (r2.y - r1.y));\n                        u1 = (r1.x + r1.width) + ((((r2.x + r2.width) - (r1.x + r1.width)) * (this.y - (r1.y + r1.height))) / ((r2.y + r2.height) - (r1.y + r1.height)));\n                    }\n                    return (this.x > o1 && this.x < u1);\n                }\n                return false;\n            }\n        });\n\n        deepExtend(Point, {\n            parse: function(str) {\n                var tempStr = str.slice(1, str.length - 1),\n                    xy = tempStr.split(\",\"),\n                    x = parseInt(xy[0], 10),\n                    y = parseInt(xy[1], 10);\n                if (!isNaN(x) && !isNaN(y)) {\n                    return new Point(x, y);\n                }\n            }\n        });\n\n        /**\n         * Structure combining a Point with two additional points representing the handles or tangents attached to the first point.\n         * If the additional points are null or equal to the first point the path will be sharp.\n         * Left and right correspond to the direction of the underlying path.\n         */\n        var PathDefiner = Class.extend(\n            {\n                init: function(p, left, right) {\n                    this.point = p;\n                    this.left = left;\n                    this.right = right;\n                }\n            }\n        );\n\n        /**\n         * Defines a rectangular region.\n         */\n        var Rect = Class.extend({\n            init: function(x, y, width, height) {\n                this.x = x || 0;\n                this.y = y || 0;\n                this.width = width || 0;\n                this.height = height || 0;\n            },\n            contains: function(point) {\n                return ((point.x >= this.x) && (point.x <= (this.x + this.width)) && (point.y >= this.y) && (point.y <= (this.y + this.height)));\n            },\n            inflate: function(dx, dy) {\n                if (dy === undefined$1) {\n                    dy = dx;\n                }\n\n                this.x -= dx;\n                this.y -= dy;\n                this.width += 2 * dx + 1;\n                this.height += 2 * dy + 1;\n                return this;\n            },\n            offset: function(dx, dy) {\n                var x = dx, y = dy;\n                if (dx instanceof Point) {\n                    x = dx.x;\n                    y = dx.y;\n                }\n                this.x += x;\n                this.y += y;\n                return this;\n            },\n            union: function(r) {\n                var x1 = Math.min(this.x, r.x);\n                var y1 = Math.min(this.y, r.y);\n                var x2 = Math.max((this.x + this.width), (r.x + r.width));\n                var y2 = Math.max((this.y + this.height), (r.y + r.height));\n                return new Rect(x1, y1, x2 - x1, y2 - y1);\n            },\n            center: function() {\n                return new Point(this.x + this.width / 2, this.y + this.height / 2);\n            },\n            top: function() {\n                return new Point(this.x + this.width / 2, this.y);\n            },\n            right: function() {\n                return new Point(this.x + this.width, this.y + this.height / 2);\n            },\n            bottom: function() {\n                return new Point(this.x + this.width / 2, this.y + this.height);\n            },\n            left: function() {\n                return new Point(this.x, this.y + this.height / 2);\n            },\n            topLeft: function() {\n                return new Point(this.x, this.y);\n            },\n            topRight: function() {\n                return new Point(this.x + this.width, this.y);\n            },\n            bottomLeft: function() {\n                return new Point(this.x, this.y + this.height);\n            },\n            bottomRight: function() {\n                return new Point(this.x + this.width, this.y + this.height);\n            },\n            clone: function() {\n                return new Rect(this.x, this.y, this.width, this.height);\n            },\n            isEmpty: function() {\n                return !this.width && !this.height;\n            },\n            equals: function(rect) {\n                return this.x === rect.x && this.y === rect.y && this.width === rect.width && this.height === rect.height;\n            },\n            rotatedBounds: function(angle) {\n                var rect = this.clone(),\n                    points = this.rotatedPoints(angle),\n                    tl = points[0],\n                    tr = points[1],\n                    br = points[2],\n                    bl = points[3];\n\n                rect.x = Math.min(br.x, tl.x, tr.x, bl.x);\n                rect.y = Math.min(br.y, tl.y, tr.y, bl.y);\n                rect.width = Math.max(br.x, tl.x, tr.x, bl.x) - rect.x;\n                rect.height = Math.max(br.y, tl.y, tr.y, bl.y) - rect.y;\n\n                return rect;\n            },\n            rotatedPoints: function(angle) {\n                var rect = this,\n                    c = rect.center(),\n                    br = rect.bottomRight().rotate(c, 360 - angle),\n                    tl = rect.topLeft().rotate(c, 360 - angle),\n                    tr = rect.topRight().rotate(c, 360 - angle),\n                    bl = rect.bottomLeft().rotate(c, 360 - angle);\n\n                return [tl, tr, br, bl];\n            },\n            toString: function(delimiter) {\n                delimiter = delimiter || \" \";\n\n                return this.x + delimiter + this.y + delimiter + this.width + delimiter + this.height;\n            },\n            scale: function(scaleX, scaleY, staicPoint, adornerCenter, angle) {\n                var tl = this.topLeft();\n                var thisCenter = this.center();\n                tl.rotate(thisCenter, 360 - angle).rotate(adornerCenter, angle);\n\n                var delta = staicPoint.minus(tl);\n                var scaled = new Point(delta.x * scaleX, delta.y * scaleY);\n                var position = delta.minus(scaled);\n                tl = tl.plus(position);\n                tl.rotate(adornerCenter, 360 - angle).rotate(thisCenter, angle);\n\n                this.x = tl.x;\n                this.y = tl.y;\n\n                this.width *= scaleX;\n                this.height *= scaleY;\n            },\n\n            zoom: function(zoom) {\n                this.x *= zoom;\n                this.y *= zoom;\n                this.width *= zoom;\n                this.height *= zoom;\n                return this;\n            },\n\n            overlaps: function(rect) {\n                var bottomRight = this.bottomRight();\n                var rectBottomRight = rect.bottomRight();\n                var overlaps = !(bottomRight.x < rect.x || bottomRight.y < rect.y ||\n                    rectBottomRight.x < this.x || rectBottomRight.y < this.y);\n                return overlaps;\n            }\n        });\n\n        var Size = Class.extend({\n            init: function(width, height) {\n                this.width = width;\n                this.height = height;\n            }\n        });\n\n        Size.prototype.Empty = new Size(0, 0);\n\n        Rect.toRect = function(rect) {\n            if (!(rect instanceof Rect)) {\n                rect = new Rect(rect.x, rect.y, rect.width, rect.height);\n            }\n\n            return rect;\n        };\n\n        Rect.empty = function() {\n            return new Rect(0, 0, 0, 0);\n        };\n\n        Rect.fromPoints = function(p, q) {\n            if (isNaN(p.x) || isNaN(p.y) || isNaN(q.x) || isNaN(q.y)) {\n                throw \"Some values are NaN.\";\n            }\n            return new Rect(Math.min(p.x, q.x), Math.min(p.y, q.y), Math.abs(p.x - q.x), Math.abs(p.y - q.y));\n        };\n\n        function isNearZero(num) {\n            return Math.abs(num) < EPSILON;\n        }\n\n        function intersectLine(start1, end1, start2, end2, isSegment) {\n            var tangensdiff = ((end1.x - start1.x) * (end2.y - start2.y)) - ((end1.y - start1.y) * (end2.x - start2.x));\n            if (isNearZero(tangensdiff)) {\n                //parallel lines\n                return;\n            }\n\n            var num1 = ((start1.y - start2.y) * (end2.x - start2.x)) - ((start1.x - start2.x) * (end2.y - start2.y));\n            var num2 = ((start1.y - start2.y) * (end1.x - start1.x)) - ((start1.x - start2.x) * (end1.y - start1.y));\n            var r = num1 / tangensdiff;\n            var s = num2 / tangensdiff;\n\n            if (isSegment && (r < 0 || r > 1 || s < 0 || s > 1)) {\n                //r < 0 => line 1 is below line 2\n                //r > 1 => line 1 is above line 2\n                //s < 0 => line 2 is below line 1\n                //s > 1 => line 2 is above line 1\n                return;\n            }\n\n            return new Point(start1.x + (r * (end1.x - start1.x)), start1.y + (r * (end1.y - start1.y)));\n        }\n\n        var Intersect = {\n            lines: function(start1, end1, start2, end2) {\n                return intersectLine(start1, end1, start2, end2);\n            },\n            segments: function(start1, end1, start2, end2) {\n                return intersectLine(start1, end1, start2, end2, true);\n            },\n            rectWithLine: function(rect, start, end) {\n                return Intersect.segments(start, end, rect.topLeft(), rect.topRight()) ||\n                    Intersect.segments(start, end, rect.topRight(), rect.bottomRight()) ||\n                    Intersect.segments(start, end, rect.bottomLeft(), rect.bottomRight()) ||\n                    Intersect.segments(start, end, rect.topLeft(), rect.bottomLeft());\n            },\n            rects: function(rect1, rect2, angle) {\n                var tl = rect2.topLeft(),\n                    tr = rect2.topRight(),\n                    bl = rect2.bottomLeft(),\n                    br = rect2.bottomRight();\n                var center = rect2.center();\n                if (angle) {\n                    tl = tl.rotate(center, angle);\n                    tr = tr.rotate(center, angle);\n                    bl = bl.rotate(center, angle);\n                    br = br.rotate(center, angle);\n                }\n\n                var intersect = rect1.contains(tl) ||\n                    rect1.contains(tr) ||\n                    rect1.contains(bl) ||\n                    rect1.contains(br) ||\n                    Intersect.rectWithLine(rect1, tl, tr) ||\n                    Intersect.rectWithLine(rect1, tl, bl) ||\n                    Intersect.rectWithLine(rect1, tr, br) ||\n                    Intersect.rectWithLine(rect1, bl, br);\n\n                if (!intersect) {//last possible case is rect1 to be completely within rect2\n                    tl = rect1.topLeft();\n                    tr = rect1.topRight();\n                    bl = rect1.bottomLeft();\n                    br = rect1.bottomRight();\n\n                    if (angle) {\n                        var reverseAngle = 360 - angle;\n                        tl = tl.rotate(center, reverseAngle);\n                        tr = tr.rotate(center, reverseAngle);\n                        bl = bl.rotate(center, reverseAngle);\n                        br = br.rotate(center, reverseAngle);\n                    }\n\n                    intersect = rect2.contains(tl) ||\n                        rect2.contains(tr) ||\n                        rect2.contains(bl) ||\n                        rect2.contains(br);\n                }\n\n                return intersect;\n            }\n        };\n\n        /**\n         * Aligns two rectangles, where one is the container and the other is content.\n         */\n        var RectAlign = Class.extend({\n            init: function(container) {\n                this.container = Rect.toRect(container);\n            },\n\n            align: function(content, alignment) {\n                var alignValues = alignment.toLowerCase().split(\" \");\n\n                for (var i = 0; i < alignValues.length; i++) {\n                    content = this._singleAlign(content, alignValues[i]);\n                }\n\n                return content;\n            },\n            _singleAlign: function(content, alignment) {\n                if (isFunction(this[alignment])) {\n                    return this[alignment](content);\n                }\n                else {\n                    return content;\n                }\n            },\n\n            left: function(content) {\n                return this._align(content, this._left);\n            },\n            center: function(content) {\n                return this._align(content, this._center);\n            },\n            right: function(content) {\n                return this._align(content, this._right);\n            },\n            stretch: function(content) {\n                return this._align(content, this._stretch);\n            },\n            top: function(content) {\n                return this._align(content, this._top);\n            },\n            middle: function(content) {\n                return this._align(content, this._middle);\n            },\n            bottom: function(content) {\n                return this._align(content, this._bottom);\n            },\n\n            _left: function(container, content) {\n                content.x = container.x;\n            },\n            _center: function(container, content) {\n                content.x = ((container.width - content.width) / 2) || 0;\n            },\n            _right: function(container, content) {\n                content.x = container.width - content.width;\n            },\n            _top: function(container, content) {\n                content.y = container.y;\n            },\n            _middle: function(container, content) {\n                content.y = ((container.height - content.height) / 2) || 0;\n            },\n            _bottom: function(container, content) {\n                content.y = container.height - content.height;\n            },\n            _stretch: function(container, content) {\n                content.x = 0;\n                content.y = 0;\n                content.height = container.height;\n                content.width = container.width;\n            },\n            _align: function(content, alignCalc) {\n                content = Rect.toRect(content);\n                alignCalc(this.container, content);\n\n                return content;\n            }\n        });\n\n        var Polar = Class.extend({\n            init: function(r, a) {\n                this.r = r;\n                this.angle = a;\n            }\n        });\n\n        /**\n         * SVG transformation matrix.\n         */\n        var Matrix = Class.extend({\n            init: function(a, b, c, d, e, f) {\n                this.a = a || 0;\n                this.b = b || 0;\n                this.c = c || 0;\n                this.d = d || 0;\n                this.e = e || 0;\n                this.f = f || 0;\n            },\n            plus: function(m) {\n                this.a += m.a;\n                this.b += m.b;\n                this.c += m.c;\n                this.d += m.d;\n                this.e += m.e;\n                this.f += m.f;\n            },\n            minus: function(m) {\n                this.a -= m.a;\n                this.b -= m.b;\n                this.c -= m.c;\n                this.d -= m.d;\n                this.e -= m.e;\n                this.f -= m.f;\n            },\n            times: function(m) {\n                return new Matrix(\n                    this.a * m.a + this.c * m.b,\n                    this.b * m.a + this.d * m.b,\n                    this.a * m.c + this.c * m.d,\n                    this.b * m.c + this.d * m.d,\n                    this.a * m.e + this.c * m.f + this.e,\n                    this.b * m.e + this.d * m.f + this.f\n                );\n            },\n            apply: function(p) {\n                return new Point(this.a * p.x + this.c * p.y + this.e, this.b * p.x + this.d * p.y + this.f);\n            },\n            applyRect: function(r) {\n                return Rect.fromPoints(this.apply(r.topLeft()), this.apply(r.bottomRight()));\n            },\n            toString: function() {\n                return \"matrix(\" + this.a + \" \" + this.b + \" \" + this.c + \" \" + this.d + \" \" + this.e + \" \" + this.f + \")\";\n            }\n        });\n\n        deepExtend(Matrix, {\n            fromSVGMatrix: function(vm) {\n                var m = new Matrix();\n                m.a = vm.a;\n                m.b = vm.b;\n                m.c = vm.c;\n                m.d = vm.d;\n                m.e = vm.e;\n                m.f = vm.f;\n                return m;\n            },\n            fromMatrixVector: function(v) {\n                var m = new Matrix();\n                m.a = v.a;\n                m.b = v.b;\n                m.c = v.c;\n                m.d = v.d;\n                m.e = v.e;\n                m.f = v.f;\n                return m;\n            },\n            fromList: function(v) {\n                if (v.length !== 6) {\n                    throw \"The given list should consist of six elements.\";\n                }\n                var m = new Matrix();\n                m.a = v[0];\n                m.b = v[1];\n                m.c = v[2];\n                m.d = v[3];\n                m.e = v[4];\n                m.f = v[5];\n                return m;\n            },\n            translation: function(x, y) {\n                var m = new Matrix();\n                m.a = 1;\n                m.b = 0;\n                m.c = 0;\n                m.d = 1;\n                m.e = x;\n                m.f = y;\n                return m;\n            },\n            unit: function() {\n                return new Matrix(1, 0, 0, 1, 0, 0);\n            },\n            rotation: function(angle, x, y) {\n                var m = new Matrix();\n                m.a = Math.cos(angle * Math.PI / 180);\n                m.b = Math.sin(angle * Math.PI / 180);\n                m.c = -m.b;\n                m.d = m.a;\n                m.e = (x - x * m.a + y * m.b) || 0;\n                m.f = (y - y * m.a - x * m.b) || 0;\n                return m;\n            },\n            scaling: function(scaleX, scaleY) {\n                var m = new Matrix();\n                m.a = scaleX;\n                m.b = 0;\n                m.c = 0;\n                m.d = scaleY;\n                m.e = 0;\n                m.f = 0;\n                return m;\n            },\n            parse: function(v) {\n                var parts, nums;\n                if (v) {\n                    v = v.trim();\n                    // of the form \"matrix(...)\"\n                    if (v.slice(0, 6).toLowerCase() === \"matrix\") {\n                        nums = v.slice(7, v.length - 1).trim();\n                        parts = nums.split(\",\");\n                        if (parts.length === 6) {\n                            return Matrix.fromList(map(parts, function(p) {\n                                return parseFloat(p);\n                            }));\n                        }\n                        parts = nums.split(\" \");\n                        if (parts.length === 6) {\n                            return Matrix.fromList(map(parts, function(p) {\n                                return parseFloat(p);\n                            }));\n                        }\n                    }\n                    // of the form \"(...)\"\n                    if (v.slice(0, 1) === \"(\" && v.slice(v.length - 1) === \")\") {\n                        v = v.substr(1, v.length - 1);\n                    }\n                    if (v.indexOf(\",\") > 0) {\n                        parts = v.split(\",\");\n                        if (parts.length === 6) {\n                            return Matrix.fromList(map(parts, function(p) {\n                                return parseFloat(p);\n                            }));\n                        }\n                    }\n                    if (v.indexOf(\" \") > 0) {\n                        parts = v.split(\" \");\n                        if (parts.length === 6) {\n                            return Matrix.fromList(map(parts, function(p) {\n                                return parseFloat(p);\n                            }));\n                        }\n                    }\n                }\n                return parts;\n            }\n        });\n\n        /**\n         * SVG transformation represented as a vector.\n         */\n        var MatrixVector = Class.extend({\n            init: function(a, b, c, d, e, f) {\n                this.a = a || 0;\n                this.b = b || 0;\n                this.c = c || 0;\n                this.d = d || 0;\n                this.e = e || 0;\n                this.f = f || 0;\n            },\n            fromMatrix: function FromMatrix(m) {\n                var v = new MatrixVector();\n                v.a = m.a;\n                v.b = m.b;\n                v.c = m.c;\n                v.d = m.d;\n                v.e = m.e;\n                v.f = m.f;\n                return v;\n            }\n        });\n\n        /**\n         * Returns a value with Gaussian (normal) distribution.\n         * @param mean The mean value of the distribution.\n         * @param deviation The deviation (spreading at half-height) of the distribution.\n         * @returns {number}\n         */\n        function normalVariable(mean, deviation) {\n            var x, y, r;\n            do {\n                x = Math.random() * 2 - 1;\n                y = Math.random() * 2 - 1;\n                r = x * x + y * y;\n            }\n            while (!r || r > 1);\n            return mean + deviation * x * Math.sqrt(-2 * Math.log(r) / r);\n        }\n\n        /**\n         * Returns a random identifier which can be used as an ID of objects, eventually augmented with a prefix.\n         * @returns {string}\n         */\n        function randomId(length) {\n            if (Utils.isUndefined(length)) {\n                length = 10;\n            }\n            // old version return Math.floor((1 + Math.random()) * 0x1000000).toString(16).substring(1);\n            var result = '';\n            var chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n            for (var i = length; i > 0; --i) {\n                result += chars.charAt(Math.round(Math.random() * (chars.length - 1)));\n            }\n            return result;\n        }\n\n        var Geometry = {\n\n            /**\n             * Returns the squared distance to the line defined by the two given Points.\n             * @param p An arbitrary Point.\n             * @param a An endpoint of the line or segment.\n             * @param b The complementary endpoint of the line or segment.\n             */\n            _distanceToLineSquared: function(p, a, b) {\n                function d2(pt1, pt2) {\n                    return (pt1.x - pt2.x) * (pt1.x - pt2.x) + (pt1.y - pt2.y) * (pt1.y - pt2.y);\n                }\n\n                if (a === b) { // returns the distance of p to a\n                    return d2(p, a);\n                }\n\n                var vx = b.x - a.x,\n                    vy = b.y - a.y,\n                    dot = (p.x - a.x) * vx + (p.y - a.y) * vy;\n                if (dot < 0) {\n                    return d2(a, p); // sits on side of a\n                }\n\n                dot = (b.x - p.x) * vx + (b.y - p.y) * vy;\n                if (dot < 0) {\n                    return d2(b, p); // sits on side of b\n                }\n                // regular case, use crossproduct to get the sine out\n                dot = (b.x - p.x) * vy - (b.y - p.y) * vx;\n                return dot * dot / (vx * vx + vy * vy);\n            },\n\n            /**\n             * Returns the distance to the line defined by the two given Points.\n             * @param p An arbitrary Point.\n             * @param a An endpoint of the line or segment.\n             * @param b The complementary endpoint of the line or segment.\n             */\n            distanceToLine: function(p, a, b) {\n                return Math.sqrt(this._distanceToLineSquared(p, a, b));\n            },\n\n            /**\n             * Returns the distance of the given points to the polyline defined by the points.\n             * @param p An arbitrary point.\n             * @param points The points defining the polyline.\n             * @returns {Number}\n             */\n            distanceToPolyline: function(p, points) {\n                var minimum = Number.MAX_VALUE;\n                if (Utils.isUndefined(points) || points.length === 0) {\n                    return Number.MAX_VALUE;\n                }\n                for (var s = 0; s < points.length - 1; s++) {\n                    var p1 = points[s];\n                    var p2 = points[s + 1];\n\n                    var d = this._distanceToLineSquared(p, p1, p2);\n                    if (d < minimum) {\n                        minimum = d;\n                    }\n                }\n                return Math.sqrt(minimum);\n            }\n        };\n\n        /*---------------The HashTable structure--------------------------------*/\n\n        /**\n         * Represents a collection of key-value pairs that are organized based on the hash code of the key.\n         * _buckets[hashId] = {key: key, value:...}\n         * Important: do not use the standard Array access method, use the get/set methods instead.\n         * See http://en.wikipedia.org/wiki/Hash_table\n         */\n        var HashTable = kendo.Class.extend({\n            init: function() {\n                this._buckets = [];\n                this.length = 0;\n            },\n\n            /**\n             * Adds the literal object with the given key (of the form {key: key,....}).\n             */\n            add: function(key, value) {\n\n                var obj = this._createGetBucket(key);\n                if (Utils.isDefined(value)) {\n                    obj.value = value;\n                }\n                return obj;\n            },\n\n            /**\n             * Gets the literal object with the given key.\n             */\n            get: function(key) {\n                if (this._bucketExists(key)) {\n                    return this._createGetBucket(key);\n                }\n                return null;\n            },\n\n            /**\n             * Set the key-value pair.\n             * @param key The key of the entry.\n             * @param value The value to set. If the key already exists the value will be overwritten.\n             */\n            set: function(key, value) {\n                this.add(key, value);\n            },\n\n            /**\n             * Determines whether the HashTable contains a specific key.\n             */\n            containsKey: function(key) {\n                return this._bucketExists(key);\n            },\n\n            /**\n             * Removes the element with the specified key from the hashtable.\n             * Returns the removed bucket.\n             */\n            remove: function(key) {\n                if (this._bucketExists(key)) {\n                    var hashId = this._hash(key);\n                    delete this._buckets[hashId];\n                    this.length--;\n                    return key;\n                }\n            },\n\n            /**\n             * Foreach with an iterator working on the key-value pairs.\n             * @param func\n             */\n            forEach: function(func) {\n                var hashes = this._hashes();\n                for (var i = 0, len = hashes.length; i < len; i++) {\n                    var hash = hashes[i];\n                    var bucket = this._buckets[hash];\n                    if (Utils.isUndefined(bucket)) {\n                        continue;\n                    }\n                    func(bucket);\n                }\n            },\n\n            /**\n             * Returns a (shallow) clone of the current HashTable.\n             * @returns {HashTable}\n             */\n            clone: function() {\n                var ht = new HashTable();\n                var hashes = this._hashes();\n                for (var i = 0, len = hashes.length; i < len; i++) {\n                    var hash = hashes[i];\n                    var bucket = this._buckets[hash];\n                    if (Utils.isUndefined(bucket)) {\n                        continue;\n                    }\n                    ht.add(bucket.key, bucket.value);\n                }\n                return ht;\n            },\n\n            /**\n             * Returns the hashes of the buckets.\n             * @returns {Array}\n             * @private\n             */\n            _hashes: function() {\n                var hashes = [];\n                for (var hash in this._buckets) {\n                    if (this._buckets.hasOwnProperty(hash)) {\n                        hashes.push(hash);\n                    }\n                }\n                return hashes;\n            },\n\n            _bucketExists: function(key) {\n                var hashId = this._hash(key);\n                return Utils.isDefined(this._buckets[hashId]);\n            },\n\n            /**\n             * Returns-adds the createGetBucket with the given key. If not present it will\n             * be created and returned.\n             * A createGetBucket is a literal object of the form {key: key, ...}.\n             */\n            _createGetBucket: function(key) {\n                var hashId = this._hash(key);\n                var bucket = this._buckets[hashId];\n                if (Utils.isUndefined(bucket)) {\n                    bucket = { key: key };\n                    this._buckets[hashId] = bucket;\n                    this.length++;\n                }\n                return bucket;\n            },\n\n            /**\n             * Hashing of the given key.\n             */\n            _hash: function(key) {\n                if (Utils.isNumber(key)) {\n                    return key;\n                }\n                if (Utils.isString(key)) {\n                    return this._hashString(key);\n                }\n                if (Utils.isObject(key)) {\n                    return this._objectHashId(key);\n                }\n                throw \"Unsupported key type.\";\n            },\n\n            /**\n             * Hashing of a string.\n             */\n            _hashString: function(s) {\n                // see for example http://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript-jquery\n                var result = 0;\n                if (s.length === 0) {\n                    return result;\n                }\n                for (var i = 0; i < s.length; i++) {\n                    var ch = s.charCodeAt(i);\n                    result = ((result * 32) - result) + ch;\n                }\n                return result;\n            },\n\n            /**\n             * Returns the unique identifier for an object. This is automatically assigned and add on the object.\n             */\n            _objectHashId: function(key) {\n                var id = key._hashId;\n                if (Utils.isUndefined(id)) {\n                    id = randomId();\n                    key._hashId = id;\n                }\n                return id;\n            }\n        });\n\n        /*---------------The Dictionary structure--------------------------------*/\n\n        /**\n         * Represents a collection of key-value pairs.\n         * Important: do not use the standard Array access method, use the get/Set methods instead.\n         */\n        var Dictionary = kendo.Observable.extend({\n            /**\n             * Initializes a new instance of the Dictionary class.\n             * @param dictionary Loads the content of the given dictionary into this new one.\n             */\n            init: function(dictionary) {\n                var that = this;\n                kendo.Observable.fn.init.call(that);\n                this._hashTable = new HashTable();\n                this.length = 0;\n                if (Utils.isDefined(dictionary)) {\n                    if (Array.isArray(dictionary)) {\n                        for (var i = 0; i < dictionary.length; i++) {\n                            this.add(dictionary[i]);\n                        }\n                    } else {\n                        dictionary.forEach(function(k, v) {\n                            this.add(k, v);\n                        }, this);\n                    }\n                }\n            },\n\n            /**\n             * Adds a key-value to the dictionary.\n             * If the key already exists this will assign the given value to the existing entry.\n             */\n            add: function(key, value) {\n                var entry = this._hashTable.get(key);\n                if (!entry) {\n                    entry = this._hashTable.add(key);\n                    this.length++;\n                    this.trigger('changed');\n                }\n                entry.value = value;\n            },\n\n            /**\n             * Set the key-value pair.\n             * @param key The key of the entry.\n             * @param value The value to set. If the key already exists the value will be overwritten.\n             */\n            set: function(key, value) {\n                this.add(key, value);\n            },\n\n            /**\n             * Gets the value associated with the given key in the dictionary.\n             */\n            get: function(key) {\n                var entry = this._hashTable.get(key);\n                if (entry) {\n                    return entry.value;\n                }\n                throw new Error(\"Cannot find key \" + key);\n            },\n\n            /**\n             * Returns whether the dictionary contains the given key.\n             */\n            containsKey: function(key) {\n                return this._hashTable.containsKey(key);\n            },\n\n            /**\n             * Removes the element with the specified key from the dictionary.\n             */\n            remove: function(key) {\n                if (this.containsKey(key)) {\n                    this.trigger(\"changed\");\n                    this.length--;\n                    return this._hashTable.remove(key);\n                }\n            },\n\n            /**\n             * The functional gets the key and value as parameters.\n             */\n            forEach: function(func, thisRef) {\n                this._hashTable.forEach(function(entry) {\n                    func.call(thisRef, entry.key, entry.value);\n                });\n            },\n\n            /**\n             * Same as forEach except that only the value is passed to the functional.\n             */\n            forEachValue: function(func, thisRef) {\n                this._hashTable.forEach(function(entry) {\n                    func.call(thisRef, entry.value);\n                });\n            },\n\n            /**\n             * Calls a defined callback function for each key in the dictionary.\n             */\n            forEachKey: function(func, thisRef) {\n                this._hashTable.forEach(function(entry) {\n                    func.call(thisRef, entry.key);\n                });\n            },\n\n            /**\n             * Gets an array with all keys in the dictionary.\n             */\n            keys: function() {\n                var keys = [];\n                this.forEachKey(function(key) {\n                    keys.push(key);\n                });\n                return keys;\n            }\n        });\n\n        /*---------------Queue structure--------------------------------*/\n\n        var Queue = kendo.Class.extend({\n\n            init: function() {\n                this._tail = null;\n                this._head = null;\n                this.length = 0;\n            },\n\n            /**\n             * Enqueues an object to the end of the queue.\n             */\n            enqueue: function(value) {\n                var entry = { value: value, next: null };\n                if (!this._head) {\n                    this._head = entry;\n                    this._tail = this._head;\n                }\n                else {\n                    this._tail.next = entry;\n                    this._tail = this._tail.next;\n                }\n                this.length++;\n            },\n\n            /**\n             * Removes and returns the object at top of the queue.\n             */\n            dequeue: function() {\n                if (this.length < 1) {\n                    throw new Error(\"The queue is empty.\");\n                }\n                var value = this._head.value;\n                this._head = this._head.next;\n                this.length--;\n                return value;\n            },\n\n            contains: function(item) {\n                var current = this._head;\n                while (current) {\n                    if (current.value === item) {\n                        return true;\n                    }\n                    current = current.next;\n                }\n                return false;\n            }\n        });\n\n\n        /**\n         * While other data structures can have multiple times the same item a Set owns only\n         * once a particular item.\n         * @type {*}\n         */\n        var Set = kendo.Observable.extend({\n            init: function(resource) {\n                var that = this;\n                kendo.Observable.fn.init.call(that);\n                this._hashTable = new HashTable();\n                this.length = 0;\n                if (Utils.isDefined(resource)) {\n                    if (resource instanceof HashTable) {\n                        resource.forEach(function(d) {\n                            this.add(d);\n                        });\n                    }\n                    else if (resource instanceof Dictionary) {\n                        resource.forEach(function(k, v) {\n                            this.add({ key: k, value: v });\n                        }, this);\n                    }\n                }\n            },\n\n            contains: function(item) {\n                return this._hashTable.containsKey(item);\n            },\n\n            add: function(item) {\n                var entry = this._hashTable.get(item);\n                if (!entry) {\n                    this._hashTable.add(item, item);\n                    this.length++;\n                    this.trigger('changed');\n                }\n            },\n\n            get: function(item) {\n                if (this.contains(item)) {\n                    return this._hashTable.get(item).value;\n                }\n                else {\n                    return null;\n                }\n            },\n\n            /**\n             * Returns the hash of the item.\n             * @param item\n             * @returns {*}\n             */\n            hash: function(item) {\n                return this._hashTable._hash(item);\n            },\n\n            /**\n             * Removes the given item from the set. No exception is thrown if the item is not in the Set.\n             * @param item\n             */\n            remove: function(item) {\n                if (this.contains(item)) {\n                    this._hashTable.remove(item);\n                    this.length--;\n                    this.trigger('changed');\n                }\n            },\n            /**\n             * Foreach with an iterator working on the key-value pairs.\n             * @param func\n             */\n            forEach: function(func, context) {\n                this._hashTable.forEach(function(kv) {\n                    func(kv.value);\n                }, context);\n            },\n            toArray: function() {\n                var r = [];\n                this.forEach(function(d) {\n                    r.push(d);\n                });\n                return r;\n            }\n        });\n\n        /*----------------Node-------------------------------*/\n\n        /**\n         * Defines the node (vertex) of a Graph.\n         */\n        var Node = kendo.Class.extend({\n\n            init: function(id, shape) {\n\n                /**\n                 * Holds all the links incident with the current node.\n                 * Do not use this property to manage the incoming links, use the appropriate add/remove methods instead.\n                 */\n                this.links = [];\n\n                /**\n                 * Holds the links from the current one to another Node .\n                 * Do not use this property to manage the incoming links, use the appropriate add/remove methods instead.\n                 */\n                this.outgoing = [];\n\n                /**\n                 * Holds the links from another Node to the current one.\n                 * Do not use this property to manage the incoming links, use the appropriate add/remove methods instead.\n                 */\n                this.incoming = [];\n\n                /**\n                 * Holds the weight of this Node.\n                 */\n                this.weight = 1;\n\n                if (Utils.isDefined(id)) {\n                    this.id = id;\n                }\n                else {\n                    this.id = randomId();\n                }\n                if (Utils.isDefined(shape)) {\n                    this.associatedShape = shape;\n                    // transfer the shape's bounds to the runtime props\n                    var b = shape.bounds();\n                    this.width = b.width;\n                    this.height = b.height;\n                    this.x = b.x;\n                    this.y = b.y;\n                }\n                else {\n                    this.associatedShape = null;\n                }\n                /**\n                 * The payload of the node.\n                 * @type {null}\n                 */\n                this.data = null;\n                this.type = \"Node\";\n                this.shortForm = \"Node '\" + this.id + \"'\";\n                /**\n                 * Whether this is an injected node during the analysis or layout process.\n                 * @type {boolean}\n                 */\n                this.isVirtual = false;\n            },\n\n            /**\n             * Returns whether this node has no links attached.\n             */\n            isIsolated: function() {\n                return Utils.isEmpty(this.links);\n            },\n\n            /**\n             * Gets or sets the bounding rectangle of this node.\n             * This should be considered as runtime data, the property is not hotlinked to a SVG item.\n             */\n            bounds: function(r) {\n                if (!Utils.isDefined(r)) {\n                    return new diagram.Rect(this.x, this.y, this.width, this.height);\n                }\n\n                this.x = r.x;\n                this.y = r.y;\n                this.width = r.width;\n                this.height = r.height;\n            },\n\n            /**\n             * Returns whether there is at least one link with the given (complementary) node. This can be either an\n             * incoming or outgoing link.\n             */\n            isLinkedTo: function(node) {\n                var that = this;\n                return Utils.any(that.links, function(link) {\n                    return link.getComplement(that) === node;\n                });\n            },\n\n            /**\n             * Gets the children of this node, defined as the adjacent nodes with a link from this node to the adjacent one.\n             * @returns {Array}\n             */\n            getChildren: function() {\n                if (this.outgoing.length === 0) {\n                    return [];\n                }\n                var children = [];\n                for (var i = 0, len = this.outgoing.length; i < len; i++) {\n                    var link = this.outgoing[i];\n                    children.push(link.getComplement(this));\n                }\n                return children;\n            },\n\n            /**\n             * Gets the parents of this node, defined as the adjacent nodes with a link from the adjacent node to this one.\n             * @returns {Array}\n             */\n            getParents: function() {\n                if (this.incoming.length === 0) {\n                    return [];\n                }\n                var parents = [];\n                for (var i = 0, len = this.incoming.length; i < len; i++) {\n                    var link = this.incoming[i];\n                    parents.push(link.getComplement(this));\n                }\n                return parents;\n            },\n\n            /**\n             * Returns a clone of the Node. Note that the identifier is not cloned since it's a different Node instance.\n             * @returns {Node}\n             */\n            clone: function() {\n                var copy = new Node();\n                if (Utils.isDefined(this.weight)) {\n                    copy.weight = this.weight;\n                }\n                if (Utils.isDefined(this.balance)) {\n                    copy.balance = this.balance;\n                }\n                if (Utils.isDefined(this.owner)) {\n                    copy.owner = this.owner;\n                }\n                copy.associatedShape = this.associatedShape;\n                copy.x = this.x;\n                copy.y = this.y;\n                copy.width = this.width;\n                copy.height = this.height;\n                return copy;\n            },\n\n            /**\n             * Returns whether there is a link from the current node to the given node.\n             */\n            adjacentTo: function(node) {\n                return this.isLinkedTo(node) !== null;\n            },\n\n            /**\n             * Removes the given link from the link collection this node owns.\n             * @param link\n             */\n            removeLink: function(link) {\n                if (link.source === this) {\n                    Utils.remove(this.links, link);\n                    Utils.remove(this.outgoing, link);\n                    link.source = null;\n                }\n\n                if (link.target === this) {\n                    Utils.remove(this.links, link);\n                    Utils.remove(this.incoming, link);\n                    link.target = null;\n                }\n            },\n\n            /**\n             * Returns whether there is a (outgoing) link from the current node to the given one.\n             */\n            hasLinkTo: function(node) {\n                return Utils.any(this.outgoing, function(link) {\n                    return link.target === node;\n                });\n            },\n\n            /**\n             * Returns the degree of this node, i.e. the sum of incoming and outgoing links.\n             */\n            degree: function() {\n                return this.links.length;\n            },\n\n            /**\n             * Returns whether this node is either the source or the target of the given link.\n             */\n            incidentWith: function(link) {\n                return contains(this.links, link);\n            },\n\n            /**\n             * Returns the links between this node and the given one.\n             */\n            getLinksWith: function(node) {\n                return Utils.all(this.links, function(link) {\n                    return link.getComplement(this) === node;\n                }, this);\n            },\n\n            /**\n             * Returns the nodes (either parent or child) which are linked to the current one.\n             */\n            getNeighbors: function() {\n                var neighbors = [];\n                Utils.forEach(this.incoming, function(e) {\n                    neighbors.push(e.getComplement(this));\n                }, this);\n                Utils.forEach(this.outgoing, function(e) {\n                    neighbors.push(e.getComplement(this));\n                }, this);\n                return neighbors;\n            }\n        });\n\n        /**\n         * Defines a directed link (edge, connection) of a Graph.\n         */\n        var Link = kendo.Class.extend({\n\n            init: function(source, target, id, connection) {\n                if (Utils.isUndefined(source)) {\n                    throw \"The source of the new link is not set.\";\n                }\n                if (Utils.isUndefined(target)) {\n                    throw \"The target of the new link is not set.\";\n                }\n                var sourceFound, targetFound;\n                if (Utils.isString(source)) {\n                    sourceFound = new Node(source);\n                }\n                else {\n                    sourceFound = source;\n                }\n                if (Utils.isString(target)) {\n                    targetFound = new Node(target);\n                }\n                else {\n                    targetFound = target;\n                }\n\n                this.source = sourceFound;\n                this.target = targetFound;\n                this.source.links.push(this);\n                this.target.links.push(this);\n                this.source.outgoing.push(this);\n                this.target.incoming.push(this);\n                if (Utils.isDefined(id)) {\n                    this.id = id;\n                }\n                else {\n                    this.id = randomId();\n                }\n                if (Utils.isDefined(connection)) {\n                    this.associatedConnection = connection;\n                }\n                else {\n                    this.associatedConnection = null;\n                }\n                this.type = \"Link\";\n                this.shortForm = \"Link '\" + this.source.id + \"->\" + this.target.id + \"'\";\n            },\n\n            /**\n             * Returns the complementary node of the given one, if any.\n             */\n            getComplement: function(node) {\n                if (this.source !== node && this.target !== node) {\n                    throw \"The given node is not incident with this link.\";\n                }\n                return this.source === node ? this.target : this.source;\n            },\n\n            /**\n             * Returns the overlap of the current link with the given one, if any.\n             */\n            getCommonNode: function(link) {\n                if (this.source === link.source || this.source === link.target) {\n                    return this.source;\n                }\n                if (this.target === link.source || this.target === link.target) {\n                    return this.target;\n                }\n                return null;\n            },\n\n            /**\n             * Returns whether the current link is bridging the given nodes.\n             */\n            isBridging: function(v1, v2) {\n                return this.source === v1 && this.target === v2 || this.source === v2 && this.target === v1;\n            },\n\n            /**\n             * Returns the source and target of this link as a tuple.\n             */\n            getNodes: function() {\n                return [this.source, this.target];\n            },\n\n            /**\n             * Returns whether the given node is either the source or the target of the current link.\n             */\n            incidentWith: function(node) {\n                return this.source === node || this.target === node;\n            },\n\n            /**\n             * Returns whether the given link is a continuation of the current one. This can be both\n             * via an incoming or outgoing link.\n             */\n            adjacentTo: function(link) {\n                return contains(this.source.links, link) || contains(this.target.links, link);\n            },\n\n            /**\n             * Changes the source-node of this link.\n             */\n            changeSource: function(node) {\n                Utils.remove(this.source.links, this);\n                Utils.remove(this.source.outgoing, this);\n\n                node.links.push(this);\n                node.outgoing.push(this);\n\n                this.source = node;\n            },\n\n            /**\n             * Changes the target-node of this link.\n             * @param node\n             */\n            changeTarget: function(node) {\n                Utils.remove(this.target.links, this);\n                Utils.remove(this.target.incoming, this);\n\n                node.links.push(this);\n                node.incoming.push(this);\n\n                this.target = node;\n            },\n\n            /**\n             * Changes both the source and the target nodes of this link.\n             */\n            changesNodes: function(v, w) {\n                if (this.source === v) {\n                    this.changeSource(w);\n                }\n                else if (this.target === v) {\n                    this.changeTarget(w);\n                }\n            },\n\n            /**\n             * Reverses the direction of this link.\n             */\n            reverse: function() {\n                var oldSource = this.source;\n                var oldTarget = this.target;\n\n                this.source = oldTarget;\n                Utils.remove(oldSource.outgoing, this);\n                this.source.outgoing.push(this);\n\n                this.target = oldSource;\n                Utils.remove(oldTarget.incoming, this);\n                this.target.incoming.push(this);\n                return this;\n            },\n\n            /**\n             * Ensures that the given target defines the endpoint of this link.\n             */\n            directTo: function(target) {\n                if (this.source !== target && this.target !== target) {\n                    throw \"The given node is not incident with this link.\";\n                }\n                if (this.target !== target) {\n                    this.reverse();\n                }\n            },\n\n            /**\n             * Returns a reversed clone of this link.\n             */\n            createReverseEdge: function() {\n                var r = this.clone();\n                r.reverse();\n                r.reversed = true;\n                return r;\n            },\n\n            /**\n             * Returns a clone of this link.\n             */\n            clone: function() {\n                var clone = new Link(this.source, this.target);\n                return clone;\n            }\n        });\n\n        /*--------------Graph structure---------------------------------*/\n        /**\n         * Defines a directed graph structure.\n         * Note that the incidence structure resides in the nodes through the incoming and outgoing links collection, rahter than\n         * inside the Graph.\n         */\n        var Graph = kendo.Class.extend({\n            init: function(idOrDiagram) {\n                /**\n                 * The links or edge collection of this Graph.\n                 * @type {Array}\n                 */\n                this.links = [];\n                /**\n                 * The node or vertex collection of this Graph.\n                 * @type {Array}\n                 */\n                this.nodes = [];\n\n                this._nodeMap = new Dictionary();\n                /**\n                 * The optional reference to the Diagram on which this Graph is based.\n                 * @type {null}\n                 */\n                this.diagram = null;\n\n                /**\n                 * The root of this Graph. If not set explicitly the first Node with zero incoming links will be taken.\n                 * @type {null}\n                 * @private\n                 */\n                this._root = null;\n                if (Utils.isDefined(idOrDiagram)) {\n                    if (Utils.isString(idOrDiagram)) {\n                        this.id = idOrDiagram;\n                    }\n                    else {\n                        this.diagram = idOrDiagram;\n                        this.id = idOrDiagram.id;\n                    }\n                }\n                else {\n                    this.id = randomId();\n                }\n\n                /**\n                 * The bounds of this graph if the nodes have spatial extension defined.\n                 * @type {Rect}\n                 */\n                this.bounds = new Rect();\n                // keeps track whether the children & parents have been created\n                this._hasCachedRelationships = false;\n                this.type = \"Graph\";\n            },\n            /**\n             * Caches the relational information of parents and children in the 'parents' and 'children'\n             * properties.\n             * @param forceRebuild If set to true the relational info will be rebuild even if already present.\n             */\n            cacheRelationships: function(forceRebuild) {\n                if (Utils.isUndefined(forceRebuild)) {\n                    forceRebuild = false;\n                }\n                if (this._hasCachedRelationships && !forceRebuild) {\n                    return;\n                }\n                for (var i = 0, len = this.nodes.length; i < len; i++) {\n                    var node = this.nodes[i];\n                    node.children = this.getChildren(node);\n                    node.parents = this.getParents(node);\n                }\n                this._hasCachedRelationships = true;\n            },\n\n            /**\n             * Assigns tree-levels to the nodes assuming this is a tree graph.\n             * If not connected or not a tree the process will succeed but\n             * will have little meaning.\n             * @param startNode The node from where the level numbering starts, usually the root of the tree.\n             * @param visited The collection of visited nodes.\n             * @param offset The offset or starting counter of the level info.\n             */\n            assignLevels: function(startNode, offset, visited) {\n                if (!startNode) {\n                    throw \"Start node not specified.\";\n                }\n                if (Utils.isUndefined(offset)) {\n                    offset = 0;\n                }\n                // if not done before, cache the parents and children\n                this.cacheRelationships();\n                if (Utils.isUndefined(visited)) {\n                    visited = new Dictionary();\n                    Utils.forEach(this.nodes, function(n) {\n                        visited.add(n, false);\n                    });\n                }\n                visited.set(startNode, true);\n                startNode.level = offset;\n                var children = startNode.children;\n                for (var i = 0, len = children.length; i < len; i++) {\n                    var child = children[i];\n                    if (!child || visited.get(child)) {\n                        continue;\n                    }\n                    this.assignLevels(child, offset + 1, visited);\n                }\n            },\n\n            /**\n             * Gets or set the root of this graph.\n             * If not set explicitly the first Node with zero incoming links will be taken.\n             * @param value\n             * @returns {*}\n             */\n            root: function(value) {\n                if (Utils.isUndefined(value)) {\n                    if (!this._root) {\n                        // TODO: better to use the longest path for the most probable root?\n                        var found = Utils.first(this.nodes, function(n) {\n                            return n.incoming.length === 0;\n                        });\n                        if (found) {\n                            return found;\n                        }\n                        return Utils.first(this.nodes);\n                    }\n                    else {\n                        return this._root;\n                    }\n                }\n                else {\n                    this._root = value;\n                }\n            },\n\n            /**\n             * Returns the connected components of this graph.\n             * Note that the returned graphs are made up of the nodes and links of this graph, i.e. a pointer to the items of this graph.\n             * If you alter the items of the components you'll alter the original graph and vice versa.\n             * @returns {Array}\n             */\n            getConnectedComponents: function() {\n                this.componentIndex = 0;\n                this.setItemIndices();\n                var componentId = Utils.initArray(this.nodes.length, -1);\n\n                for (var v = 0; v < this.nodes.length; v++) {\n                    if (componentId[v] === -1) {\n                        this._collectConnectedNodes(componentId, v);\n                        this.componentIndex++;\n                    }\n                }\n\n                var components = [], i;\n                for (i = 0; i < this.componentIndex; ++i) {\n                    components[i] = new Graph();\n                }\n                for (i = 0; i < componentId.length; ++i) {\n                    var graph = components[componentId[i]];\n                    graph.addNodeAndOutgoings(this.nodes[i]);\n                }\n                // sorting the components in decreasing order of node count\n                components.sort(function(a, b) {\n                    return b.nodes.length - a.nodes.length;\n                });\n                return components;\n            },\n\n            _collectConnectedNodes: function(setIds, nodeIndex) {\n                setIds[nodeIndex] = this.componentIndex; // part of the current component\n                var node = this.nodes[nodeIndex];\n                Utils.forEach(node.links,\n                    function(link) {\n                        var next = link.getComplement(node);\n                        var nextId = next.index;\n                        if (setIds[nextId] === -1) {\n                            this._collectConnectedNodes(setIds, nextId);\n                        }\n                    }, this);\n            },\n\n            /**\n             * Calculates the bounds of this Graph if the Nodes have spatial dimensions defined.\n             * @returns {Rect}\n             */\n            calcBounds: function() {\n                if (this.isEmpty()) {\n                    this.bounds = new Rect();\n                    return this.bounds;\n                }\n                var b = null;\n                for (var i = 0, len = this.nodes.length; i < len; i++) {\n                    var node = this.nodes[i];\n                    if (!b) {\n                        b = node.bounds();\n                    }\n                    else {\n                        b = b.union(node.bounds());\n                    }\n                }\n                this.bounds = b;\n                return this.bounds;\n            },\n\n            /**\n             * Creates a spanning tree for the current graph.\n             * Important: this will not return a spanning forest if the graph is disconnected.\n             * Prim's algorithm  finds a minimum-cost spanning tree of an edge-weighted, connected, undirected graph;\n             * see http://en.wikipedia.org/wiki/Prim%27s_algorithm .\n             * @param root The root of the spanning tree.\n             * @returns {Graph}\n             */\n            getSpanningTree: function(root) {\n                var tree = new Graph();\n                var map = new Dictionary(), source, target;\n                tree.root = root.clone();\n                tree.root.level = 0;\n                tree.root.id = root.id;\n                map.add(root, tree.root);\n                root.level = 0;\n\n                var visited = [];\n                var remaining = [];\n                tree._addNode(tree.root);\n                visited.push(root);\n                remaining.push(root);\n\n                var levelCount = 1;\n                while (remaining.length > 0) {\n                    var next = remaining.pop();\n                    for (var ni = 0; ni < next.links.length; ni++) {\n                        var link = next.links[ni];\n                        var cn = link.getComplement(next);\n                        if (contains(visited, cn)) {\n                            continue;\n                        }\n\n                        cn.level = next.level + 1;\n                        if (levelCount < cn.level + 1) {\n                            levelCount = cn.level + 1;\n                        }\n                        if (!contains(remaining, cn)) {\n                            remaining.push(cn);\n                        }\n                        if (!contains(visited, cn)) {\n                            visited.push(cn);\n                        }\n                        if (map.containsKey(next)) {\n                            source = map.get(next);\n                        }\n                        else {\n                            source = next.clone();\n                            source.level = next.level;\n                            source.id = next.id;\n                            map.add(next, source);\n                        }\n                        if (map.containsKey(cn)) {\n                            target = map.get(cn);\n                        }\n                        else {\n                            target = cn.clone();\n                            target.level = cn.level;\n                            target.id = cn.id;\n                            map.add(cn, target);\n                        }\n                        var newLink = new Link(source, target);\n                        tree.addLink(newLink);\n                    }\n\n                }\n\n                var treeLevels = [];\n                for (var i = 0; i < levelCount; i++) {\n                    treeLevels.push([]);\n                }\n\n                Utils.forEach(tree.nodes, function(node) {\n                    treeLevels[node.level].push(node);\n                });\n\n                tree.treeLevels = treeLevels;\n                tree.cacheRelationships();\n                return tree;\n            },\n\n            /**\n             * Returns a random node in this graph.\n             * @param excludedNodes The collection of nodes which should not be considered.\n             * @param incidenceLessThan The maximum degree or incidence the random node should have.\n             * @returns {*}\n             */\n            takeRandomNode: function(excludedNodes, incidenceLessThan) {\n                if (Utils.isUndefined(excludedNodes)) {\n                    excludedNodes = [];\n                }\n                if (Utils.isUndefined(incidenceLessThan)) {\n                    incidenceLessThan = 4;\n                }\n                if (this.nodes.length === 0) {\n                    return null;\n                }\n                if (this.nodes.length === 1) {\n                    return contains(excludedNodes, this.nodes[0]) ? null : this.nodes[0];\n                }\n                var pool = $.grep(this.nodes, function(node) {\n                    return !contains(excludedNodes, node) && node.degree() <= incidenceLessThan;\n                });\n                if (Utils.isEmpty(pool)) {\n                    return null;\n                }\n                return pool[Utils.randomInteger(0, pool.length)];\n            },\n\n            /**\n             * Returns whether this is an empty graph.\n             */\n            isEmpty: function() {\n                return Utils.isEmpty(this.nodes);\n            },\n\n            /**\n             * Checks whether the endpoints of the links are all in the nodes collection.\n             */\n            isHealthy: function() {\n                return Utils.all(this.links, function(link) {\n                    return contains(this.nodes, link.source) && contains(this.nodes, link.target);\n                }, this);\n            },\n\n            /**\n             * Gets the parents of this node, defined as the adjacent nodes with a link from the adjacent node to this one.\n             * @returns {Array}\n             */\n            getParents: function(n) {\n                if (!this.hasNode(n)) {\n                    throw \"The given node is not part of this graph.\";\n                }\n                return n.getParents();\n            },\n\n            /**\n             * Gets the children of this node, defined as the adjacent nodes with a link from this node to the adjacent one.\n             * @returns {Array}\n             */\n            getChildren: function(n) {\n                if (!this.hasNode(n)) {\n                    throw \"The given node is not part of this graph.\";\n                }\n                return n.getChildren();\n            },\n\n            /**\n             * Adds a new link to the graph between the given nodes.\n             */\n            addLink: function(sourceOrLink, target, owner) {\n\n                if (Utils.isUndefined(sourceOrLink)) {\n                    throw \"The source of the link is not defined.\";\n                }\n                if (Utils.isUndefined(target)) {\n                    // can only be undefined if the first one is a Link\n                    if (Utils.isDefined(sourceOrLink.type) && sourceOrLink.type === \"Link\") {\n                        this.addExistingLink(sourceOrLink);\n                        return;\n                    }\n                    else {\n                        throw \"The target of the link is not defined.\";\n                    }\n                }\n\n                var foundSource = this.getNode(sourceOrLink);\n                if (Utils.isUndefined(foundSource)) {\n                    foundSource = this.addNode(sourceOrLink);\n                }\n                var foundTarget = this.getNode(target);\n                if (Utils.isUndefined(foundTarget)) {\n                    foundTarget = this.addNode(target);\n                }\n\n                var newLink = new Link(foundSource, foundTarget);\n\n                if (Utils.isDefined(owner)) {\n                    newLink.owner = owner;\n                }\n\n                /*newLink.source.outgoing.push(newLink);\n                 newLink.source.links.push(newLink);\n                 newLink.target.incoming.push(newLink);\n                 newLink.target.links.push(newLink);*/\n\n                this.links.push(newLink);\n\n                return newLink;\n            },\n\n            /**\n             * Removes all the links in this graph.\n             */\n            removeAllLinks: function() {\n                while (this.links.length > 0) {\n                    var link = this.links[0];\n                    this.removeLink(link);\n                }\n            },\n\n            /**\n             * Adds the given link to the current graph.\n             */\n            addExistingLink: function(link) {\n\n                if (this.hasLink(link)) {\n                    return;\n                }\n                this.links.push(link);\n                if (this.hasNode(link.source.id)) {\n                    // priority to the existing node with the id even if other props are different\n                    var s = this.getNode(link.source.id);\n                    link.changeSource(s);\n                }\n                else {\n                    this.addNode(link.source);\n                }\n\n                if (this.hasNode(link.target.id)) {\n                    var t = this.getNode(link.target.id);\n                    link.changeTarget(t);\n                }\n                else {\n                    this.addNode(link.target);\n                }\n\n                /*  if (!link.source.outgoing.contains(link)) {\n                 link.source.outgoing.push(link);\n                 }\n                 if (!link.source.links.contains(link)) {\n                 link.source.links.push(link);\n                 }\n                 if (!link.target.incoming.contains(link)) {\n                 link.target.incoming.push(link);\n                 }\n                 if (!link.target.links.contains(link)) {\n                 link.target.links.push(link);\n                 }*/\n            },\n\n            /**\n             * Returns whether the given identifier or Link is part of this graph.\n             * @param linkOrId An identifier or a Link object.\n             * @returns {*}\n             */\n            hasLink: function(linkOrId) {\n                if (Utils.isString(linkOrId)) {\n                    return Utils.any(this.links, function(link) {\n                        return link.id === linkOrId;\n                    });\n                }\n                if (linkOrId.type === \"Link\") {\n                    return contains(this.links, linkOrId);\n                }\n                throw \"The given object is neither an identifier nor a Link.\";\n            },\n            /**\n             * Gets the node with the specified Id or null if not part of this graph.\n             */\n            getNode: function(nodeOrId) {\n                var id = nodeOrId.id || nodeOrId;\n                if (this._nodeMap.containsKey(id)) {\n                    return this._nodeMap.get(id);\n                }\n            },\n\n            /**\n             * Returns whether the given node or node Id is part of this graph.\n             */\n            hasNode: function(nodeOrId) {\n                var id = nodeOrId.id || nodeOrId;\n                return this._nodeMap.containsKey(id);\n            },\n\n            _addNode: function(node) {\n                this.nodes.push(node);\n                this._nodeMap.add(node.id, node);\n            },\n\n            _removeNode: function(node) {\n                Utils.remove(this.nodes, node);\n                this._nodeMap.remove(node.id);\n            },\n\n            /**\n             * Removes the given node from this graph.\n             * The node can be specified as an object or as an identifier (string).\n             */\n            removeNode: function(nodeOrId) {\n                var n = nodeOrId;\n                if (Utils.isString(nodeOrId)) {\n                    n = this.getNode(nodeOrId);\n                }\n\n                if (Utils.isDefined(n)) {\n                    var links = n.links;\n                    n.links = [];\n                    for (var i = 0, len = links.length; i < len; i++) {\n                        var link = links[i];\n                        this.removeLink(link);\n                    }\n                    this._removeNode(n);\n                }\n                else {\n                    throw \"The identifier should be a Node or the Id (string) of a node.\";\n                }\n            },\n\n            /**\n             * Returns whether the given nodes are connected with a least one link independently of the direction.\n             */\n            areConnected: function(n1, n2) {\n                return Utils.any(this.links, function(link) {\n                    return link.source == n1 && link.target == n2 || link.source == n2 && link.target == n1;\n                });\n            },\n\n            /**\n             * Removes the given link from this graph.\n             */\n            removeLink: function(link) {\n                /*    if (!this.links.contains(link)) {\n                 throw \"The given link is not part of the Graph.\";\n                 }\n                 */\n                Utils.remove(this.links, link);\n\n                Utils.remove(link.source.outgoing, link);\n                Utils.remove(link.source.links, link);\n                Utils.remove(link.target.incoming, link);\n                Utils.remove(link.target.links, link);\n            },\n\n            /**\n             * Adds a new node to this graph, if not already present.\n             * The node can be an existing Node or the identifier of a new node.\n             * No error is thrown if the node is already there and the existing one is returned.\n             */\n            addNode: function(nodeOrId, layoutRect, owner) {\n\n                var newNode = null;\n\n                if (!Utils.isDefined(nodeOrId)) {\n                    throw \"No Node or identifier for a new Node is given.\";\n                }\n\n                if (Utils.isString(nodeOrId)) {\n                    if (this.hasNode(nodeOrId)) {\n                        return this.getNode(nodeOrId);\n                    }\n                    newNode = new Node(nodeOrId);\n                }\n                else {\n                    if (this.hasNode(nodeOrId)) {\n                        return this.getNode(nodeOrId);\n                    }\n                    // todo: ensure that the param is a Node?\n                    newNode = nodeOrId;\n                }\n\n                if (Utils.isDefined(layoutRect)) {\n                    newNode.bounds(layoutRect);\n                }\n\n                if (Utils.isDefined(owner)) {\n                    newNode.owner = owner;\n                }\n                this._addNode(newNode);\n                return newNode;\n            },\n\n            /**\n             * Adds the given Node and its outgoing links.\n             */\n            addNodeAndOutgoings: function(node) {\n                if (!this.hasNode(node)) {\n                    this._addNode(node);\n                }\n\n                var newLinks = node.outgoing;\n                node.outgoing = [];\n                Utils.forEach(newLinks, function(link) {\n                    this.addExistingLink(link);\n                }, this);\n            },\n\n            /**\n             * Sets the 'index' property on the links and nodes of this graph.\n             */\n            setItemIndices: function() {\n                var i;\n                for (i = 0; i < this.nodes.length; ++i) {\n                    this.nodes[i].index = i;\n                }\n\n                for (i = 0; i < this.links.length; ++i) {\n                    this.links[i].index = i;\n                }\n            },\n\n            /**\n             * Returns a clone of this graph.\n             */\n            clone: function(saveMapping) {\n                var copy = new Graph();\n                var save = Utils.isDefined(saveMapping) && saveMapping === true;\n                if (save) {\n                    copy.nodeMap = new Dictionary();\n                    copy.linkMap = new Dictionary();\n                }\n                // we need a map even if the saveMapping is not set\n                var map = new Dictionary();\n                Utils.forEach(this.nodes, function(nOriginal) {\n                    var nCopy = nOriginal.clone();\n                    map.set(nOriginal, nCopy);\n                    copy._addNode(nCopy);\n\n                    if (save) {\n                        copy.nodeMap.set(nCopy, nOriginal);\n                    }\n                });\n\n                Utils.forEach(this.links, function(linkOriginal) {\n                    if (map.containsKey(linkOriginal.source) && map.containsKey(linkOriginal.target)) {\n                        var linkCopy = copy.addLink(map.get(linkOriginal.source), map.get(linkOriginal.target));\n                        if (save) {\n                            copy.linkMap.set(linkCopy, linkOriginal);\n                        }\n                    }\n                });\n\n                return copy;\n            },\n\n            /**\n             * The parsing allows a quick way to create graphs.\n             *  - [\"n1->n2\", \"n2->n3\"]: creates the three nodes and adds the links\n             *  - [\"n1->n2\", {id: \"QSDF\"}, \"n2->n3\"]: same as previous but also performs a deep extend of the link between n1 and n2 with the given object.\n             */\n            linearize: function(addIds) {\n                return Graph.Utils.linearize(this, addIds);\n            },\n\n            /**\n             * Performs a depth-first traversal starting at the given node.\n             * @param startNode a node or id of a node in this graph\n             * @param action\n             */\n            depthFirstTraversal: function(startNode, action) {\n                if (Utils.isUndefined(startNode)) {\n                    throw \"You need to supply a starting node.\";\n                }\n                if (Utils.isUndefined(action)) {\n                    throw \"You need to supply an action.\";\n                }\n                if (!this.hasNode(startNode)) {\n                    throw \"The given start-node is not part of this graph\";\n                }\n                var foundNode = this.getNode(startNode);// case the given one is an Id\n                var visited = [];\n                this._dftIterator(foundNode, action, visited);\n            },\n\n            _dftIterator: function(node, action, visited) {\n\n                action(node);\n                visited.push(node);\n                var children = node.getChildren();\n                for (var i = 0, len = children.length; i < len; i++) {\n                    var child = children[i];\n                    if (contains(visited, child)) {\n                        continue;\n                    }\n                    this._dftIterator(child, action, visited);\n                }\n            },\n\n            /**\n             * Performs a breadth-first traversal starting at the given node.\n             * @param startNode a node or id of a node in this graph\n             * @param action\n             */\n            breadthFirstTraversal: function(startNode, action) {\n\n                if (Utils.isUndefined(startNode)) {\n                    throw \"You need to supply a starting node.\";\n                }\n                if (Utils.isUndefined(action)) {\n                    throw \"You need to supply an action.\";\n                }\n\n                if (!this.hasNode(startNode)) {\n                    throw \"The given start-node is not part of this graph\";\n                }\n                var foundNode = this.getNode(startNode);// case the given one is an Id\n                var queue = new Queue();\n                var visited = [];\n                queue.enqueue(foundNode);\n\n                while (queue.length > 0) {\n                    var node = queue.dequeue();\n                    action(node);\n                    visited.push(node);\n                    var children = node.getChildren();\n                    for (var i = 0, len = children.length; i < len; i++) {\n                        var child = children[i];\n                        if (contains(visited, child) || contains(queue, child)) {\n                            continue;\n                        }\n                        queue.enqueue(child);\n                    }\n                }\n            },\n\n            /**\n             * This is the classic Tarjan algorithm for strongly connected components.\n             * See e.g. http://en.wikipedia.org/wiki/Tarjan's_strongly_connected_components_algorithm\n             * @param excludeSingleItems Whether isolated nodes should be excluded from the analysis.\n             * @param node The start node from which the analysis starts.\n             * @param indices  Numbers the nodes consecutively in the order in which they are discovered.\n             * @param lowLinks The smallest index of any node known to be reachable from the node, including the node itself\n             * @param connected The current component.\n             * @param stack The bookkeeping stack of things to visit.\n             * @param index The counter of visited nodes used to assign the indices.\n             * @private\n             */\n            _stronglyConnectedComponents: function(excludeSingleItems, node, indices, lowLinks, connected, stack, index) {\n                indices.add(node, index);\n                lowLinks.add(node, index);\n                index++;\n\n                stack.push(node);\n\n                var children = node.getChildren(), next;\n                for (var i = 0, len = children.length; i < len; i++) {\n                    next = children[i];\n                    if (!indices.containsKey(next)) {\n                        this._stronglyConnectedComponents(excludeSingleItems, next, indices, lowLinks, connected, stack, index);\n                        lowLinks.add(node, Math.min(lowLinks.get(node), lowLinks.get(next)));\n                    }\n                    else if (contains(stack, next)) {\n                        lowLinks.add(node, Math.min(lowLinks.get(node), indices.get(next)));\n                    }\n                }\n                // If v is a root node, pop the stack and generate a strong component\n                if (lowLinks.get(node) === indices.get(node)) {\n                    var component = [];\n                    do {\n                        next = stack.pop();\n                        component.push(next);\n                    }\n                    while (next !== node);\n                    if (!excludeSingleItems || (component.length > 1)) {\n                        connected.push(component);\n                    }\n                }\n            },\n\n            /**\n             * Returns the cycles found in this graph.\n             * The returned arrays consist of the nodes which are strongly coupled.\n             * @param excludeSingleItems Whether isolated nodes should be excluded.\n             * @returns {Array} The array of cycles found.\n             */\n            findCycles: function(excludeSingleItems) {\n                if (Utils.isUndefined(excludeSingleItems)) {\n                    excludeSingleItems = true;\n                }\n                var indices = new Dictionary();\n                var lowLinks = new Dictionary();\n                var connected = [];\n                var stack = [];\n                for (var i = 0, len = this.nodes.length; i < len; i++) {\n                    var node = this.nodes[i];\n                    if (indices.containsKey(node)) {\n                        continue;\n                    }\n                    this._stronglyConnectedComponents(excludeSingleItems, node, indices, lowLinks, connected, stack, 0);\n                }\n                return connected;\n            },\n\n            /**\n             * Returns whether this graph is acyclic.\n             * @returns {*}\n             */\n            isAcyclic: function() {\n                return Utils.isEmpty(this.findCycles());\n            },\n\n            /**\n             * Returns whether the given graph is a subgraph of this one.\n             * @param other Another graph instance.\n             */\n            isSubGraph: function(other) {\n                var otherArray = other.linearize();\n                var thisArray = this.linearize();\n                return Utils.all(otherArray, function(s) {\n                    return contains(thisArray, s);\n                });\n            },\n\n            /**\n             *  Makes an acyclic graph from the current (connected) one.\n             * * @returns {Array} The reversed links.\n             */\n            makeAcyclic: function() {\n                // if empty or almost empty\n                if (this.isEmpty() || this.nodes.length <= 1 || this.links.length <= 1) {\n                    return [];\n                }\n                // singular case of just two nodes\n                if (this.nodes.length == 2) {\n                    var result = [];\n                    if (this.links.length > 1) {\n                        var oneLink = this.links[0];\n                        var oneNode = oneLink.source;\n                        for (var i = 0, len = this.links.length; i < len; i++) {\n                            var link = this.links[i];\n                            if (link.source == oneNode) {\n                                continue;\n                            }\n                            var rev = link.reverse();\n                            result.push(rev);\n                        }\n                    }\n                    return result;\n                }\n\n                var copy = this.clone(true); // copy.nodeMap tells you the mapping\n                var N = this.nodes.length;\n\n                var intensityCatalog = new Dictionary();\n\n                /**\n                 * If there are both incoming and outgoing links this will return the flow intensity (out-in).\n                 * Otherwise the node acts as a flow source with N specifying the (equal) intensity.\n                 * @param node\n                 * @returns {number}\n                 */\n                var flowIntensity = function(node) {\n                    if (node.outgoing.length === 0) {\n                        return (2 - N);\n                    }\n                    else if (node.incoming.length === 0) {\n                        return (N - 2);\n                    }\n                    else {\n                        return node.outgoing.length - node.incoming.length;\n                    }\n                };\n\n                /**\n                 * Collects the nodes with the same intensity.\n                 * @param node\n                 * @param intensityCatalog\n                 */\n                var catalogEqualIntensity = function(node, intensityCatalog) {\n                    var intensity = flowIntensity(node, N);\n                    if (!intensityCatalog.containsKey(intensity)) {\n                        intensityCatalog.set(intensity, []);\n                    }\n                    intensityCatalog.get(intensity).push(node);\n                };\n\n                Utils.forEach(copy.nodes, function(v) {\n                    catalogEqualIntensity(v, intensityCatalog);\n                });\n\n                var sourceStack = [];\n                var targetStack = [];\n\n                while (copy.nodes.length > 0) {\n                    var source, target, intensity;\n                    if (intensityCatalog.containsKey(2 - N)) {\n                        var targets = intensityCatalog.get(2 - N); // nodes without outgoings\n                        while (targets.length > 0) {\n                            target = targets.pop();\n                            for (var li = 0; li < target.links.length; li++) {\n                                var targetLink = target.links[li];\n                                source = targetLink.getComplement(target);\n                                intensity = flowIntensity(source, N);\n                                Utils.remove(intensityCatalog.get(intensity), source);\n                                source.removeLink(targetLink);\n                                catalogEqualIntensity(source, intensityCatalog);\n                            }\n                            copy._removeNode(target);\n                            targetStack.unshift(target);\n                        }\n                    }\n\n                    // move sources to sourceStack\n                    if (intensityCatalog.containsKey(N - 2)) {\n                        var sources = intensityCatalog.get(N - 2); // nodes without incomings\n                        while (sources.length > 0) {\n                            source = sources.pop();\n                            for (var si = 0; si < source.links.length; si++) {\n                                var sourceLink = source.links[si];\n                                target = sourceLink.getComplement(source);\n                                intensity = flowIntensity(target, N);\n                                Utils.remove(intensityCatalog.get(intensity), target);\n                                target.removeLink(sourceLink);\n                                catalogEqualIntensity(target, intensityCatalog);\n                            }\n                            sourceStack.push(source);\n                            copy._removeNode(source);\n                        }\n                    }\n\n                    if (copy.nodes.length > 0) {\n                        for (var k = N - 3; k > 2 - N; k--) {\n                            if (intensityCatalog.containsKey(k) &&\n                                intensityCatalog.get(k).length > 0) {\n                                var maxdiff = intensityCatalog.get(k);\n                                var v = maxdiff.pop();\n                                for (var ri = 0; ri < v.links.length; ri++) {\n                                    var ril = v.links[ri];\n                                    var u = ril.getComplement(v);\n                                    intensity = flowIntensity(u, N);\n                                    Utils.remove(intensityCatalog.get(intensity), u);\n                                    u.removeLink(ril);\n                                    catalogEqualIntensity(u, intensityCatalog);\n                                }\n                                sourceStack.push(v);\n                                copy._removeNode(v);\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                sourceStack = sourceStack.concat(targetStack);\n\n                var vertexOrder = new Dictionary();\n                for (var kk = 0; kk < this.nodes.length; kk++) {\n                    vertexOrder.set(copy.nodeMap.get(sourceStack[kk]), kk);\n                }\n\n                var reversedEdges = [];\n                Utils.forEach(this.links, function(link) {\n                    if (vertexOrder.get(link.source) > vertexOrder.get(link.target)) {\n                        link.reverse();\n                        reversedEdges.push(link);\n                    }\n                });\n                return reversedEdges;\n            }\n        });\n\n        /**\n         * A collection of predefined graphs for demo and testing purposes.\n         */\n        Graph.Predefined = {\n            /**\n             * Eight-shapes graph all connected in a cycle.\n             * @returns {*}\n             * @constructor\n             */\n            EightGraph: function() {\n                return Graph.Utils.parse([ \"1->2\", \"2->3\", \"3->4\", \"4->1\", \"3->5\", \"5->6\", \"6->7\", \"7->3\"]);\n            },\n\n            /**\n             * Creates a typical mindmap diagram.\n             * @returns {*}\n             * @constructor\n             */\n            Mindmap: function() {\n                return Graph.Utils.parse([\"0->1\", \"0->2\", \"0->3\", \"0->4\", \"0->5\", \"1->6\", \"1->7\", \"7->8\", \"2->9\", \"9->10\", \"9->11\", \"3->12\",\n                    \"12->13\", \"13->14\", \"4->15\", \"4->16\", \"15->17\", \"15->18\", \"18->19\", \"18->20\", \"14->21\", \"14->22\", \"5->23\", \"23->24\", \"23->25\", \"6->26\"]);\n            },\n\n            /**\n             * Three nodes connected in a cycle.\n             * @returns {*}\n             * @constructor\n             */\n            ThreeGraph: function() {\n                return Graph.Utils.parse([ \"1->2\", \"2->3\", \"3->1\"]);\n            },\n\n            /**\n             * A tree with each node having two children.\n             * @param levels How many levels the binary tree should have.\n             * @returns {diagram.Graph}\n             * @constructor\n             */\n            BinaryTree: function(levels) {\n                if (Utils.isUndefined(levels)) {\n                    levels = 5;\n                }\n                return Graph.Utils.createBalancedTree(levels, 2);\n            },\n\n            /**\n             * A linear graph (discrete line segment).\n             * @param length How many segments (the node count is hence (length+1)).\n             * @returns {diagram.Graph}\n             * @constructor\n             */\n            Linear: function(length) {\n                if (Utils.isUndefined(length)) {\n                    length = 10;\n                }\n                return Graph.Utils.createBalancedTree(length, 1);\n            },\n\n            /**\n             * A standard tree-graph with the specified levels and children (siblings) count.\n             * Note that for a balanced tree of level N and sibling count s, counting the root as level zero:\n             *  - NodeCount = (1-s^(N+1))/(1-s)]\n             *  - LinkCount = s.(1-s^N)/(1-s)\n             * @param levels How many levels the tree should have.\n             * @param siblingsCount How many siblings each level should have.\n             * @returns {diagram.Graph}\n             * @constructor\n             */\n            Tree: function(levels, siblingsCount) {\n                return Graph.Utils.createBalancedTree(levels, siblingsCount);\n            },\n\n            /**\n             * Creates a forest.\n             * Note that for a balanced forest of level N, sibling count s and tree count t, counting the root as level zero:\n             *  - NodeCount = t.(1-s^(N+1))/(1-s)]\n             *  - LinkCount = t.s.(1-s^N)/(1-s)\n             * @param levels How many levels the tree should have.\n             * @param siblingsCount How many siblings each level should have.\n             * @param trees The amount of trees the forest should have.\n             * @returns {diagram.Graph}\n             * @constructor\n             */\n            Forest: function(levels, siblingsCount, trees) {\n                return Graph.Utils.createBalancedForest(levels, siblingsCount, trees);\n            },\n\n            /**\n             * A workflow-like graph with cycles.\n             * @returns {*}\n             * @constructor\n             */\n            Workflow: function() {\n                return Graph.Utils.parse(\n                    [\"0->1\", \"1->2\", \"2->3\", \"1->4\", \"4->3\", \"3->5\", \"5->6\", \"6->3\", \"6->7\", \"5->4\"]\n                );\n            },\n\n            /**\n             * A grid graph with the direction of the links avoiding cycles.\n             * Node count: (n+1).(m+1)\n             * Link count: n.(m+1) + m.(n+1)\n             * @param n Horizontal count of grid cells. If zero this will result in a linear graph.\n             * @param m Vertical count of grid cells. If zero this will result in a linear graph.\n             * @constructor\n             */\n            Grid: function(n, m) {\n                var g = new diagram.Graph();\n                if (n <= 0 && m <= 0) {\n                    return g;\n                }\n\n                for (var i = 0; i < n + 1; i++) {\n                    var previous = null;\n                    for (var j = 0; j < m + 1; j++) {\n                        // using x-y coordinates to name the nodes\n                        var node = new Node(i.toString() + \".\" + j.toString());\n                        g.addNode(node);\n                        if (previous) {\n                            g.addLink(previous, node);\n                        }\n                        if (i > 0) {\n                            var left = g.getNode((i - 1).toString() + \".\" + j.toString());\n                            g.addLink(left, node);\n                        }\n                        previous = node;\n                    }\n                }\n                return g;\n            }\n\n        };\n\n        /**\n         * Graph generation and other utilities.\n         */\n        Graph.Utils = {\n            /**\n             * The parsing allows a quick way to create graphs.\n             *  - [\"n1->n2\", \"n2->n3\"]: creates the three nodes and adds the links\n             *  - [\"n1->n2\", {id: \"id177\"}, \"n2->n3\"]: same as previous but also performs a deep extend of the link between n1 and n2 with the given object.\n             */\n            parse: function(graphString) {\n\n                var previousLink, graph = new diagram.Graph(), parts = graphString.slice();\n                for (var i = 0, len = parts.length; i < len; i++) {\n                    var part = parts[i];\n                    if (Utils.isString(part)) // link spec\n                    {\n                        if (part.indexOf(\"->\") < 0) {\n                            throw \"The link should be specified as 'a->b'.\";\n                        }\n                        var p = part.split(\"->\");\n                        if (p.length != 2) {\n                            throw \"The link should be specified as 'a->b'.\";\n                        }\n                        previousLink = new Link(p[0], p[1]);\n                        graph.addLink(previousLink);\n                    }\n                    if (Utils.isObject(part)) {\n                        if (!previousLink) {\n                            throw \"Specification found before Link definition.\";\n                        }\n                        kendo.deepExtend(previousLink, part);\n                    }\n                }\n                return graph;\n            },\n\n            /**\n             * Returns a linearized representation of the given Graph.\n             * See also the Graph.Utils.parse method for the inverse operation.\n             */\n            linearize: function(graph, addIds) {\n                if (Utils.isUndefined(graph)) {\n                    throw \"Expected an instance of a Graph object in slot one.\";\n                }\n                if (Utils.isUndefined(addIds)) {\n                    addIds = false;\n                }\n                var lin = [];\n                for (var i = 0, len = graph.links.length; i < len; i++) {\n                    var link = graph.links[i];\n                    lin.push(link.source.id + \"->\" + link.target.id);\n                    if (addIds) {\n                        lin.push({ id: link.id });\n                    }\n                }\n                return lin;\n            },\n\n            /**\n             * The method used by the diagram creation to instantiate a shape.\n             * @param kendoDiagram The Kendo diagram where the diagram will be created.\n             * @param p The position at which to place the shape.\n             * @param shapeDefaults Optional Shape options.\n             * @param id Optional identifier of the shape.\n             * @returns {*}\n             * @private\n             */\n            _addShape: function(kendoDiagram, p, id, shapeDefaults) {\n                if (Utils.isUndefined(p)) {\n                    p = new diagram.Point(0, 0);\n                }\n\n                if (Utils.isUndefined(id)) {\n                    id = randomId();\n                }\n\n                shapeDefaults = kendo.deepExtend({\n                    width: 20,\n                    height: 20,\n                    id: id,\n                    radius: 10,\n                    fill: \"#778899\",\n                    data: \"circle\",\n                    undoable: false,\n                    x: p.x,\n                    y: p.y\n                }, shapeDefaults);\n\n                return kendoDiagram.addShape(shapeDefaults);\n            },\n            /**\n             * The method used by the diagram creation to instantiate a connection.\n             * @param diagram he Kendo diagram where the diagram will be created.\n             * @param from The source shape.\n             * @param to The target shape.\n             * @param options Optional Connection options.\n             * @returns {*}\n             * @private\n             */\n            _addConnection: function(diagram, from, to, options) {\n                return diagram.connect(from, to, options);\n            },\n\n            /**\n             * Creates a diagram from the given Graph.\n             * @param diagram The Kendo diagram where the diagram will be created.\n             * @param graph The graph structure defining the diagram.\n             */\n            createDiagramFromGraph: function(diagram, graph, doLayout, randomSize) {\n\n                if (Utils.isUndefined(diagram)) {\n                    throw \"The diagram surface is undefined.\";\n                }\n                if (Utils.isUndefined(graph)) {\n                    throw \"No graph specification defined.\";\n                }\n                if (Utils.isUndefined(doLayout)) {\n                    doLayout = true;\n                }\n                if (Utils.isUndefined(randomSize)) {\n                    randomSize = false;\n                }\n\n                var width = diagram.element.clientWidth || 200;\n                var height = diagram.element.clientHeight || 200;\n                var map = [], node, shape;\n                for (var i = 0, len = graph.nodes.length; i < len; i++) {\n                    node = graph.nodes[i];\n                    var p = node.position;\n                    if (Utils.isUndefined(p)) {\n                        if (Utils.isDefined(node.x) && Utils.isDefined(node.y)) {\n                            p = new Point(node.x, node.y);\n                        }\n                        else {\n                            p = new Point(Utils.randomInteger(10, width - 20), Utils.randomInteger(10, height - 20));\n                        }\n                    }\n                    var opt = {};\n\n                    if (node.id === \"0\") {\n                        /* kendo.deepExtend(opt,\n                         {\n                         fill: \"Orange\",\n                         data: 'circle',\n                         width: 100,\n                         height: 100,\n                         center: new Point(50, 50)\n                         });*/\n                    }\n                    else if (randomSize) {\n                        kendo.deepExtend(opt, {\n                            width: Math.random() * 150 + 20,\n                            height: Math.random() * 80 + 50,\n                            data: 'rectangle',\n                            fill: {\n                                color: \"#778899\"\n                            }\n                        });\n                    }\n\n                    shape = this._addShape(diagram, p, node.id, opt);\n                    //shape.content(node.id);\n\n                    var bounds = shape.bounds();\n                    if (Utils.isDefined(bounds)) {\n                        node.x = bounds.x;\n                        node.y = bounds.y;\n                        node.width = bounds.width;\n                        node.height = bounds.height;\n                    }\n                    map[node.id] = shape;\n                }\n                for (var gli = 0; gli < graph.links.length; gli++) {\n                    var link = graph.links[gli];\n                    var sourceShape = map[link.source.id];\n                    if (Utils.isUndefined(sourceShape)) {\n                        continue;\n                    }\n                    var targetShape = map[link.target.id];\n                    if (Utils.isUndefined(targetShape)) {\n                        continue;\n                    }\n                    this._addConnection(diagram, sourceShape, targetShape, { id: link.id });\n\n                }\n                if (doLayout) {\n                    var l = new diagram.SpringLayout(diagram);\n                    l.layoutGraph(graph, { limitToView: false });\n                    for (var shi = 0; shi < graph.nodes.length; shi++) {\n                        node = graph.nodes[shi];\n                        shape = map[node.id];\n                        shape.bounds(new Rect(node.x, node.y, node.width, node.height));\n                    }\n                }\n            },\n\n            /**\n             * Creates a balanced tree with the specified number of levels and siblings count.\n             * Note that for a balanced tree of level N and sibling count s, counting the root as level zero:\n             *  - NodeCount = (1-s^(N+1))/(1-s)]\n             *  - LinkCount = s.(1-s^N)/(1-s)\n             * @param levels How many levels the tree should have.\n             * @param siblingsCount How many siblings each level should have.\n             * @returns {diagram.Graph}\n             */\n            createBalancedTree: function(levels, siblingsCount) {\n                if (Utils.isUndefined(levels)) {\n                    levels = 3;\n                }\n                if (Utils.isUndefined(siblingsCount)) {\n                    siblingsCount = 3;\n                }\n\n                var g = new diagram.Graph(), counter = -1, lastAdded = [], news;\n                if (levels <= 0 || siblingsCount <= 0) {\n                    return g;\n                }\n                var root = new Node((++counter).toString());\n                g.addNode(root);\n                g.root = root;\n                lastAdded.push(root);\n                for (var i = 0; i < levels; i++) {\n                    news = [];\n                    for (var j = 0; j < lastAdded.length; j++) {\n                        var parent = lastAdded[j];\n                        for (var k = 0; k < siblingsCount; k++) {\n                            var item = new Node((++counter).toString());\n                            g.addLink(parent, item);\n                            news.push(item);\n                        }\n                    }\n                    lastAdded = news;\n                }\n                return g;\n            },\n\n            /**\n             * Creates a balanced tree with the specified number of levels and siblings count.\n             * Note that for a balanced forest of level N, sibling count s and tree count t, counting the root as level zero:\n             *  - NodeCount = t.(1-s^(N+1))/(1-s)]\n             *  - LinkCount = t.s.(1-s^N)/(1-s)\n             * @param levels How many levels the tree should have.\n             * @param siblingsCount How many siblings each level should have.\n             * @returns {diagram.Graph}\n             * @param treeCount The number of trees the forest should have.\n             */\n            createBalancedForest: function(levels, siblingsCount, treeCount) {\n                if (Utils.isUndefined(levels)) {\n                    levels = 3;\n                }\n                if (Utils.isUndefined(siblingsCount)) {\n                    siblingsCount = 3;\n                }\n                if (Utils.isUndefined(treeCount)) {\n                    treeCount = 5;\n                }\n                var g = new diagram.Graph(), counter = -1, lastAdded = [], news;\n                if (levels <= 0 || siblingsCount <= 0 || treeCount <= 0) {\n                    return g;\n                }\n\n                for (var t = 0; t < treeCount; t++) {\n                    var root = new Node((++counter).toString());\n                    g.addNode(root);\n                    lastAdded = [root];\n                    for (var i = 0; i < levels; i++) {\n                        news = [];\n                        for (var j = 0; j < lastAdded.length; j++) {\n                            var parent = lastAdded[j];\n                            for (var k = 0; k < siblingsCount; k++) {\n                                var item = new Node((++counter).toString());\n                                g.addLink(parent, item);\n                                news.push(item);\n                            }\n                        }\n                        lastAdded = news;\n                    }\n                }\n                return g;\n            },\n\n            /**\n             * Creates a random graph (uniform distribution) with the specified amount of nodes.\n             * @param nodeCount The amount of nodes the random graph should have.\n             * @param maxIncidence The maximum allowed degree of the nodes.\n             * @param isTree Whether the return graph should be a tree (default: false).\n             * @returns {diagram.Graph}\n             */\n            createRandomConnectedGraph: function(nodeCount, maxIncidence, isTree) {\n\n                /* Swa's Mathematica export of random Bernoulli graphs\n                 gr[n_,p_]:=Module[{g=RandomGraph[BernoulliGraphDistribution[n,p],VertexLabels->\"Name\",DirectedEdges->True]},\n                 While[Not[ConnectedGraphQ[g]],g=RandomGraph[BernoulliGraphDistribution[n,p],VertexLabels->\"Name\",DirectedEdges->True]];g];\n                 project[a_]:=(\"\\\"\"<>ToString[Part[#,1]]<>\"->\"<>ToString[Part[#,2]]<>\"\\\"\")&     @ a;\n                 export[g_]:=project/@ EdgeList[g]\n                 g = gr[12,.1]\n                 export [g]\n                 */\n\n                if (Utils.isUndefined(nodeCount)) {\n                    nodeCount = 40;\n                }\n                if (Utils.isUndefined(maxIncidence)) {\n                    maxIncidence = 4;\n                }\n                if (Utils.isUndefined(isTree)) {\n                    isTree = false;\n                }\n\n                var g = new diagram.Graph(), counter = -1;\n                if (nodeCount <= 0) {\n                    return g;\n                }\n\n                var root = new Node((++counter).toString());\n                g.addNode(root);\n                if (nodeCount === 1) {\n                    return g;\n                }\n                if (nodeCount > 1) {\n                    // random tree\n                    for (var i = 1; i < nodeCount; i++) {\n                        var poolNode = g.takeRandomNode([], maxIncidence);\n                        if (!poolNode) {\n                            //failed to find one so the graph will have less nodes than specified\n                            break;\n                        }\n                        var newNode = g.addNode(i.toString());\n                        g.addLink(poolNode, newNode);\n                    }\n                    if (!isTree && nodeCount > 1) {\n                        var randomAdditions = Utils.randomInteger(1, nodeCount);\n                        for (var ri = 0; ri < randomAdditions; ri++) {\n                            var n1 = g.takeRandomNode([], maxIncidence);\n                            var n2 = g.takeRandomNode([], maxIncidence);\n                            if (n1 && n2 && !g.areConnected(n1, n2)) {\n                                g.addLink(n1, n2);\n                            }\n                        }\n                    }\n                    return g;\n                }\n            },\n\n            /**\n             * Generates a random diagram.\n             * @param diagram The host diagram.\n             * @param shapeCount The number of shapes the random diagram should contain.\n             * @param maxIncidence The maximum degree the shapes can have.\n             * @param isTree Whether the generated diagram should be a tree\n             * @param layoutType The optional layout type to apply after the diagram is generated.\n             */\n            randomDiagram: function(diagram, shapeCount, maxIncidence, isTree, randomSize) {\n                var g = kendo.dataviz.diagram.Graph.Utils.createRandomConnectedGraph(shapeCount, maxIncidence, isTree);\n                Graph.Utils.createDiagramFromGraph(diagram, g, false, randomSize);\n            }\n        };\n\n        kendo.deepExtend(diagram, {\n            init: function(element) {\n                kendo.init(element, diagram.ui);\n            },\n\n            Point: Point,\n            Intersect: Intersect,\n            Geometry: Geometry,\n            Rect: Rect,\n            Size: Size,\n            RectAlign: RectAlign,\n            Matrix: Matrix,\n            MatrixVector: MatrixVector,\n            normalVariable: normalVariable,\n            randomId: randomId,\n            Dictionary: Dictionary,\n            HashTable: HashTable,\n            Queue: Queue,\n            Set: Set,\n            Node: Node,\n            Link: Link,\n            Graph: Graph,\n            PathDefiner: PathDefiner\n        });\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n        // Imports ================================================================\n        var kendo = window.kendo,\n            diagram = kendo.dataviz.diagram,\n            Class = kendo.Class,\n            deepExtend = kendo.deepExtend,\n            Point = diagram.Point,\n            Rect = diagram.Rect,\n            Matrix = diagram.Matrix,\n            Utils = diagram.Utils,\n            isNumber = Utils.isNumber,\n            isString = Utils.isString,\n            MatrixVector = diagram.MatrixVector,\n\n            g = kendo.geometry,\n            d = kendo.drawing,\n\n            defined = d.util.defined,\n\n            inArray = $.inArray;\n\n        // Constants ==============================================================\n        var TRANSPARENT = \"transparent\",\n            Markers = {\n                none: \"none\",\n                arrowStart: \"ArrowStart\",\n                filledCircle: \"FilledCircle\",\n                arrowEnd: \"ArrowEnd\"\n            },\n            FULL_CIRCLE_ANGLE = 360,\n            START = \"start\",\n            END = \"end\",\n            WIDTH = \"width\",\n            HEIGHT = \"height\",\n            X = \"x\",\n            Y = \"y\";\n\n        diagram.Markers = Markers;\n\n        function diffNumericOptions(options, fields) {\n            var elementOptions = this.options;\n            var hasChanges = false;\n            var value, field;\n            for (var i = 0; i < fields.length; i++) {\n                field = fields[i];\n                value = options[field];\n                if (isNumber(value) && elementOptions[field] !== value) {\n                    elementOptions[field] = value;\n                    hasChanges = true;\n                }\n            }\n\n            return hasChanges;\n        }\n\n        var Scale = Class.extend({\n            init: function(x, y) {\n                this.x = x;\n                this.y = y;\n            },\n            toMatrix: function() {\n                return Matrix.scaling(this.x, this.y);\n            },\n            toString: function() {\n                return kendo.format(\"scale({0},{1})\", this.x, this.y);\n            },\n            invert: function() {\n                return new Scale(1 / this.x, 1 / this.y);\n            }\n        });\n\n        var Translation = Class.extend({\n            init: function(x, y) {\n                this.x = x;\n                this.y = y;\n            },\n            toMatrixVector: function() {\n                return new MatrixVector(0, 0, 0, 0, this.x, this.y);\n            },\n            toMatrix: function() {\n                return Matrix.translation(this.x, this.y);\n            },\n            toString: function() {\n                return kendo.format(\"translate({0},{1})\", this.x, this.y);\n            },\n            plus: function(delta) {\n                this.x += delta.x;\n                this.y += delta.y;\n            },\n            times: function(factor) {\n                this.x *= factor;\n                this.y *= factor;\n            },\n            length: function() {\n                return Math.sqrt(this.x * this.x + this.y * this.y);\n            },\n            normalize: function() {\n                if (this.Length === 0) {\n                    return;\n                }\n                this.times(1 / this.length());\n            },\n            invert: function() {\n                return new Translation(-this.x, -this.y);\n            }\n        });\n\n        var Rotation = Class.extend({\n            init: function(angle, x, y) {\n                this.x = x || 0;\n                this.y = y || 0;\n                this.angle = angle;\n            },\n            toString: function() {\n                if (this.x && this.y) {\n                    return kendo.format(\"rotate({0},{1},{2})\", this.angle, this.x, this.y);\n                } else {\n                    return kendo.format(\"rotate({0})\", this.angle);\n                }\n            },\n            toMatrix: function() {\n                return Matrix.rotation(this.angle, this.x, this.y); // T*R*T^-1\n            },\n            center: function() {\n                return new Point(this.x, this.y);\n            },\n            invert: function() {\n                return new Rotation(FULL_CIRCLE_ANGLE - this.angle, this.x, this.y);\n            }\n        });\n\n        Rotation.ZERO = new Rotation(0);\n\n        Rotation.create = function(rotation) {\n            return new Rotation(rotation.angle, rotation.x, rotation.y);\n        };\n\n        Rotation.parse = function(str) {\n            var values = str.slice(1, str.length - 1).split(\",\"),\n                angle = values[0],\n                x = values[1],\n                y = values[2];\n            var rotation = new Rotation(angle, x, y);\n            return rotation;\n        };\n\n        var CompositeTransform = Class.extend({\n            init: function(x, y, scaleX, scaleY, angle, center) {\n                this.translate = new Translation(x, y);\n                if (scaleX !== undefined$1 && scaleY !== undefined$1) {\n                    this.scale = new Scale(scaleX, scaleY);\n                }\n                if (angle !== undefined$1) {\n                    this.rotate = center ? new Rotation(angle, center.x, center.y) : new Rotation(angle);\n                }\n            },\n            toString: function() {\n                var toString = function(transform) {\n                    return transform ? transform.toString() : \"\";\n                };\n\n                return toString(this.translate) +\n                    toString(this.rotate) +\n                    toString(this.scale);\n            },\n\n            render: function(visual) {\n                visual._transform = this;\n                visual._renderTransform();\n            },\n\n            toMatrix: function() {\n                var m = Matrix.unit();\n\n                if (this.translate) {\n                    m = m.times(this.translate.toMatrix());\n                }\n                if (this.rotate) {\n                    m = m.times(this.rotate.toMatrix());\n                }\n                if (this.scale) {\n                    m = m.times(this.scale.toMatrix());\n                }\n                return m;\n            },\n            invert: function() {\n                var rotate = this.rotate ? this.rotate.invert() : undefined$1,\n                    rotateMatrix = rotate ? rotate.toMatrix() : Matrix.unit(),\n                    scale = this.scale ? this.scale.invert() : undefined$1,\n                    scaleMatrix = scale ? scale.toMatrix() : Matrix.unit();\n\n                var translatePoint = new Point(-this.translate.x, -this.translate.y);\n                translatePoint = rotateMatrix.times(scaleMatrix).apply(translatePoint);\n                var translate = new Translation(translatePoint.x, translatePoint.y);\n\n                var transform = new CompositeTransform();\n                transform.translate = translate;\n                transform.rotate = rotate;\n                transform.scale = scale;\n\n                return transform;\n            }\n        });\n\n        var AutoSizeableMixin = {\n            _setScale: function() {\n                var options = this.options;\n                var originWidth = this._originWidth;\n                var originHeight = this._originHeight;\n                var scaleX = options.width / originWidth;\n                var scaleY = options.height / originHeight;\n\n                if (!isNumber(scaleX)) {\n                    scaleX = 1;\n                }\n                if (!isNumber(scaleY)) {\n                    scaleY = 1;\n                }\n\n                this._transform.scale = new Scale(scaleX, scaleY);\n            },\n\n            _setTranslate: function() {\n                var options = this.options;\n                var x = options.x || 0;\n                var y = options.y || 0;\n                this._transform.translate = new Translation(x, y);\n            },\n\n            _initSize: function() {\n                var options = this.options;\n                var transform = false;\n                if (options.autoSize !== false && (defined(options.width) || defined(options.height))) {\n                    this._measure(true);\n                    this._setScale();\n                    transform = true;\n                }\n\n                if (defined(options.x) || defined(options.y)) {\n                    this._setTranslate();\n                    transform = true;\n                }\n\n                if (transform) {\n                    this._renderTransform();\n                }\n            },\n\n            _updateSize: function(options) {\n                var update = false;\n\n                if (this.options.autoSize !== false && this._diffNumericOptions(options, [WIDTH, HEIGHT])) {\n                    update = true;\n                    this._measure(true);\n                    this._setScale();\n                }\n\n                if (this._diffNumericOptions(options, [X, Y])) {\n                    update = true;\n                    this._setTranslate();\n                }\n\n                if (update) {\n                    this._renderTransform();\n                }\n\n                return update;\n            }\n        };\n\n        var Element = Class.extend({\n            init: function(options) {\n                var element = this;\n                element.options = deepExtend({}, element.options, options);\n                element.id = element.options.id;\n                element._originSize = Rect.empty();\n                element._transform = new CompositeTransform();\n            },\n\n            visible: function(value) {\n                return this.drawingContainer().visible(value);\n            },\n\n            redraw: function(options) {\n                if (options && options.id) {\n                     this.id = options.id;\n                }\n            },\n\n            position: function(x, y) {\n                var options = this.options;\n                if (!defined(x)) {\n                   return new Point(options.x, options.y);\n                }\n\n                if (defined(y)) {\n                    options.x = x;\n                    options.y = y;\n                } else if (x instanceof Point) {\n                    options.x = x.x;\n                    options.y = x.y;\n                }\n\n                this._transform.translate = new Translation(options.x, options.y);\n                this._renderTransform();\n            },\n\n            rotate: function(angle, center) {\n                if (defined(angle)) {\n                    this._transform.rotate = new Rotation(angle, center.x, center.y);\n                    this._renderTransform();\n                }\n                return this._transform.rotate || Rotation.ZERO;\n            },\n\n            drawingContainer: function() {\n                return this.drawingElement;\n            },\n\n            _renderTransform: function() {\n                var matrix = this._transform.toMatrix();\n                this.drawingContainer().transform(new g.Matrix(matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f));\n            },\n\n            _hover: function() {},\n\n            _diffNumericOptions: diffNumericOptions,\n\n            _measure: function(force) {\n                var rect;\n                if (!this._measured || force) {\n                    var box = this._boundingBox() || new g.Rect();\n                    var startPoint = box.topLeft();\n                    rect = new Rect(startPoint.x, startPoint.y, box.width(), box.height());\n                    this._originSize = rect;\n                    this._originWidth = rect.width;\n                    this._originHeight = rect.height;\n                    this._measured = true;\n                } else {\n                    rect = this._originSize;\n                }\n                return rect;\n            },\n\n            _boundingBox: function() {\n                return this.drawingElement.rawBBox();\n            }\n        });\n\n        var VisualBase = Element.extend({\n            init: function(options) {\n                Element.fn.init.call(this, options);\n\n                options = this.options;\n                options.fill = normalizeDrawingOptions(options.fill);\n                options.stroke = normalizeDrawingOptions(options.stroke);\n            },\n\n            options: {\n                stroke: {\n                    color: \"gray\",\n                    width: 1\n                },\n                fill: {\n                    color: TRANSPARENT\n                }\n            },\n\n            fill: function(color, opacity) {\n                this._fill({\n                    color: getColor(color),\n                    opacity: opacity\n                });\n            },\n\n            stroke: function(color, width, opacity) {\n                this._stroke({\n                    color: getColor(color),\n                    width: width,\n                    opacity: opacity\n                });\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    var stroke = options.stroke;\n                    var fill = options.fill;\n                    if (stroke) {\n                        this._stroke(normalizeDrawingOptions(stroke));\n                    }\n                    if (fill) {\n                        this._fill(normalizeDrawingOptions(fill));\n                    }\n\n                    Element.fn.redraw.call(this, options);\n                }\n            },\n\n            _hover: function(show) {\n                var drawingElement = this.drawingElement;\n                var options = this.options;\n                var hover = options.hover;\n\n                if (hover && hover.fill) {\n                    var fill = show ? normalizeDrawingOptions(hover.fill) : options.fill;\n                    drawingElement.fill(fill.color, fill.opacity);\n                }\n            },\n\n            _stroke: function(strokeOptions) {\n                var options = this.options;\n                deepExtend(options, {\n                    stroke: strokeOptions\n                });\n\n                strokeOptions = options.stroke;\n\n                var stroke = null;\n                if (strokeOptions.width > 0) {\n                    stroke = {\n                        color: strokeOptions.color,\n                        width: strokeOptions.width,\n                        opacity: strokeOptions.opacity,\n                        dashType: strokeOptions.dashType\n                    };\n                }\n\n                this.drawingElement.options.set(\"stroke\", stroke);\n            },\n\n            _fill: function(fillOptions) {\n                var options = this.options;\n                deepExtend(options, {\n                    fill: fillOptions || {}\n                });\n                var fill = options.fill;\n\n                if (fill.gradient) {\n                    var gradient = fill.gradient;\n                    var GradientClass = (gradient.type === \"radial\" ? d.RadialGradient : d.LinearGradient);\n                    this.drawingElement.fill(new GradientClass(gradient));\n                } else {\n                    this.drawingElement.fill(fill.color, fill.opacity);\n                }\n            }\n        });\n\n        var TextBlock = VisualBase.extend({\n            init: function(options) {\n                options = this._textColor(options);\n                VisualBase.fn.init.call(this, options);\n\n                this._font();\n                this._initText();\n                this._initSize();\n            },\n\n            options: {\n                fontSize: 15,\n                fontFamily: \"sans-serif\",\n                stroke: {\n                    width: 0\n                },\n                fill: {\n                    color: \"black\"\n                },\n                autoSize: true\n            },\n\n            _initText: function() {\n                var options = this.options;\n\n                this.drawingElement = new d.Text(defined(options.text) ? options.text : \"\", new g.Point(), {\n                    font: options.font\n                });\n\n                this._fill();\n                this._stroke();\n            },\n\n            _textColor: function(options) {\n                if (options && options.color) {\n                    options = deepExtend({}, options, {\n                        fill: {\n                            color: options.color\n                        }\n                    });\n                }\n                return options;\n            },\n\n            _font: function() {\n                var options = this.options;\n                if (options.fontFamily && defined(options.fontSize)) {\n                    var fontOptions = [];\n\n                    if (options.fontStyle) {\n                        fontOptions.push(options.fontStyle);\n                    }\n\n                    if (options.fontWeight) {\n                        fontOptions.push(options.fontWeight);\n                    }\n\n                    fontOptions.push(options.fontSize + (isNumber(options.fontSize) ? \"px\" : \"\"));\n                    fontOptions.push(options.fontFamily);\n\n                    options.font = fontOptions.join(\" \");\n                } else {\n                    delete options.font;\n                }\n            },\n\n            content: function(text) {\n                return this.drawingElement.content(text);\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    var sizeChanged = false;\n                    var textOptions = this.options;\n\n                    options = this._textColor(options);\n\n                    VisualBase.fn.redraw.call(this, options);\n\n                    if (options.fontFamily || defined(options.fontSize) || options.fontStyle || options.fontWeight) {\n                        deepExtend(textOptions, {\n                            fontFamily: options.fontFamily,\n                            fontSize: options.fontSize,\n                            fontStyle: options.fontStyle,\n                            fontWeight: options.fontWeight\n                        });\n                        this._font();\n                        this.drawingElement.options.set(\"font\", textOptions.font);\n                        sizeChanged = true;\n                    }\n\n                    if (options.text) {\n                        this.content(options.text);\n                        sizeChanged = true;\n                    }\n\n                    if (!this._updateSize(options) && sizeChanged) {\n                        this._initSize();\n                    }\n                }\n            }\n        });\n\n        deepExtend(TextBlock.fn, AutoSizeableMixin);\n\n        var Rectangle = VisualBase.extend({\n            init: function(options) {\n                VisualBase.fn.init.call(this, options);\n                this._initPath();\n                this._setPosition();\n            },\n\n            _setPosition: function() {\n                var options = this.options;\n                var x = options.x;\n                var y = options.y;\n                if (defined(x) || defined(y)) {\n                    this.position(x || 0, y || 0);\n                }\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    VisualBase.fn.redraw.call(this, options);\n                    if (this._diffNumericOptions(options, [WIDTH, HEIGHT])) {\n                        this._drawPath();\n                    }\n                    if (this._diffNumericOptions(options, [X, Y])) {\n                        this._setPosition();\n                    }\n                }\n            },\n\n            _initPath: function() {\n                var options = this.options;\n                this.drawingElement = new d.Path({\n                    stroke: options.stroke,\n                    closed: true\n                });\n\n                this._fill();\n                this._drawPath();\n            },\n\n            _drawPath: function() {\n                var drawingElement = this.drawingElement;\n                var sizeOptions = sizeOptionsOrDefault(this.options);\n                var width = sizeOptions.width;\n                var height = sizeOptions.height;\n\n                drawingElement.segments.elements([\n                    createSegment(0, 0),\n                    createSegment(width, 0),\n                    createSegment(width, height),\n                    createSegment(0, height)\n                ]);\n            }\n        });\n\n        var MarkerBase = VisualBase.extend({\n            init: function(options) {\n               VisualBase.fn.init.call(this, options);\n               var anchor = this.options.anchor;\n               this.anchor = new g.Point(anchor.x, anchor.y);\n               this.createElement();\n            },\n\n            options: {\n               stroke: {\n                    color: TRANSPARENT,\n                    width: 0\n               },\n               fill: {\n                    color: \"black\"\n               }\n            },\n\n            _transformToPath: function(point, path) {\n                var transform = path.transform();\n                if (point && transform) {\n                    point = point.transformCopy(transform);\n                }\n                return point;\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    if (options.position) {\n                        this.options.position = options.position;\n                    }\n\n                    VisualBase.fn.redraw.call(this, options);\n                }\n            }\n        });\n\n        var CircleMarker = MarkerBase.extend({\n            options: {\n                radius: 4,\n                anchor: {\n                    x: 0,\n                    y: 0\n                }\n            },\n\n            createElement: function() {\n                var options = this.options;\n                this.drawingElement = new d.Circle(new g.Circle(this.anchor, options.radius), {\n                    fill: options.fill,\n                    stroke: options.stroke\n                });\n            },\n\n            positionMarker: function(path) {\n                var options = this.options;\n                var position = options.position;\n                var segments = path.segments;\n                var targetSegment;\n                var point;\n\n                if (position == START) {\n                    targetSegment = segments[0];\n                } else {\n                    targetSegment = segments[segments.length - 1];\n                }\n                if (targetSegment) {\n                    point = this._transformToPath(targetSegment.anchor(), path);\n                    this.drawingElement.transform(g.transform().translate(point.x, point.y));\n                }\n            }\n        });\n\n        var ArrowMarker = MarkerBase.extend({\n            options: {\n                path: \"M 0 0 L 10 5 L 0 10 L 3 5 z\" ,\n                anchor: {\n                    x: 10,\n                    y: 5\n                }\n            },\n\n            createElement: function() {\n                var options = this.options;\n                this.drawingElement = d.Path.parse(options.path, {\n                    fill: options.fill,\n                    stroke: options.stroke\n                });\n            },\n\n            positionMarker: function(path) {\n                var points = this._linePoints(path);\n                var start = points.start;\n                var end = points.end;\n                var transform = g.transform();\n                if (start) {\n                    transform.rotate(lineAngle(start, end), end);\n                }\n\n                if (end) {\n                    var anchor = this.anchor;\n                    var translate = end.clone().translate(-anchor.x, -anchor.y);\n                    transform.translate(translate.x, translate.y);\n                }\n                this.drawingElement.transform(transform);\n            },\n\n            _linePoints: function(path) {\n                var options = this.options;\n                var segments = path.segments;\n                var startPoint, endPoint, targetSegment;\n                if (options.position == START) {\n                    targetSegment = segments[0];\n                    if (targetSegment) {\n                        endPoint = targetSegment.anchor();\n                        startPoint = targetSegment.controlOut();\n                        var nextSegment = segments[1];\n                        if (!startPoint && nextSegment) {\n                            startPoint = nextSegment.anchor();\n                        }\n                    }\n                } else {\n                    targetSegment = segments[segments.length - 1];\n                    if (targetSegment) {\n                        endPoint = targetSegment.anchor();\n                        startPoint = targetSegment.controlIn();\n                        var prevSegment = segments[segments.length - 2];\n                        if (!startPoint && prevSegment) {\n                            startPoint = prevSegment.anchor();\n                        }\n                    }\n                }\n                if (endPoint) {\n                    return {\n                        start: this._transformToPath(startPoint, path),\n                        end: this._transformToPath(endPoint, path)\n                    };\n                }\n            }\n        });\n\n        var MarkerPathMixin = {\n            _getPath: function(position) {\n                var path = this.drawingElement;\n                if (path instanceof d.MultiPath) {\n                    if (position == START) {\n                        path = path.paths[0];\n                    } else {\n                        path = path.paths[path.paths.length - 1];\n                    }\n                }\n                if (path && path.segments.length) {\n                    return path;\n                }\n            },\n\n            _normalizeMarkerOptions: function(options) {\n                var startCap = options.startCap;\n                var endCap = options.endCap;\n\n                if (isString(startCap)) {\n                    options.startCap = {\n                        type: startCap\n                    };\n                }\n\n                if (isString(endCap)) {\n                    options.endCap = {\n                        type: endCap\n                    };\n                }\n            },\n\n            _removeMarker: function(position) {\n                var marker = this._markers[position];\n                if (marker) {\n                    this.drawingContainer().remove(marker.drawingElement);\n                    delete this._markers[position];\n                }\n            },\n\n            _createMarkers: function() {\n                var options = this.options;\n                this._normalizeMarkerOptions(options);\n\n                this._markers = {};\n                this._markers[START] = this._createMarker(options.startCap, START);\n                this._markers[END] = this._createMarker(options.endCap, END);\n            },\n\n            _createMarker: function(options, position) {\n                var type = (options || {}).type;\n                var path = this._getPath(position);\n                var markerType, marker;\n                if (!path) {\n                    this._removeMarker(position);\n                    return;\n                }\n\n                if (type == Markers.filledCircle) {\n                    markerType = CircleMarker;\n                } else if (type == Markers.arrowStart || type == Markers.arrowEnd) {\n                    markerType = ArrowMarker;\n                } else {\n                    this._removeMarker(position);\n                }\n                if (markerType) {\n                    marker = new markerType(deepExtend({}, options, {\n                        position: position\n                    }));\n                    marker.positionMarker(path);\n                    this.drawingContainer().append(marker.drawingElement);\n\n                    return marker;\n                }\n            },\n\n            _positionMarker: function(position) {\n                var marker = this._markers[position];\n\n                if (marker) {\n                    var path = this._getPath(position);\n                    if (path) {\n                        marker.positionMarker(path);\n                    } else {\n                        this._removeMarker(position);\n                    }\n                }\n            },\n\n            _capMap: {\n                start: \"startCap\",\n                end: \"endCap\"\n            },\n\n            _redrawMarker: function(pathChange, position, options) {\n                this._normalizeMarkerOptions(options);\n\n                var pathOptions = this.options;\n                var cap = this._capMap[position];\n                var pathCapType = (pathOptions[cap] || {}).type;\n                var optionsCap = options[cap];\n                var created = false;\n                if (optionsCap) {\n                    pathOptions[cap] = deepExtend({}, pathOptions[cap], optionsCap);\n                    if (optionsCap.type && pathCapType != optionsCap.type) {\n                        this._removeMarker(position);\n                        this._markers[position] = this._createMarker(pathOptions[cap], position);\n                        created = true;\n                    } else if (this._markers[position]) {\n                       this._markers[position].redraw(optionsCap);\n                    }\n                } else if (pathChange && !this._markers[position] && pathOptions[cap]) {\n                    this._markers[position] = this._createMarker(pathOptions[cap], position);\n                    created = true;\n                }\n                return created;\n            },\n\n            _redrawMarkers: function(pathChange, options) {\n                if (!this._redrawMarker(pathChange, START, options) && pathChange) {\n                    this._positionMarker(START);\n                }\n                if (!this._redrawMarker(pathChange, END, options) && pathChange) {\n                    this._positionMarker(END);\n                }\n            }\n        };\n\n        var Path = VisualBase.extend({\n            init: function(options) {\n                VisualBase.fn.init.call(this, options);\n                this.container = new d.Group();\n                this._createElements();\n                this._initSize();\n            },\n\n            options: {\n                autoSize: true\n            },\n\n            drawingContainer: function() {\n                return this.container;\n            },\n\n            data: function(value) {\n                var options = this.options;\n                if (value) {\n                    if (options.data != value) {\n                       options.data = value;\n                       this._setData(value);\n                       this._initSize();\n                       this._redrawMarkers(true, {});\n                    }\n                } else {\n                    return options.data;\n                }\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    VisualBase.fn.redraw.call(this, options);\n\n                    var pathOptions = this.options;\n                    var data = options.data;\n\n                    if (defined(data) && pathOptions.data != data) {\n                        pathOptions.data = data;\n                        this._setData(data);\n                        if (!this._updateSize(options)) {\n                            this._initSize();\n                        }\n                        this._redrawMarkers(true, options);\n                    } else {\n                        this._updateSize(options);\n                        this._redrawMarkers(false, options);\n                    }\n                }\n            },\n\n            _createElements: function() {\n                var options = this.options;\n\n                this.drawingElement = d.Path.parse(options.data || \"\", {\n                    stroke: options.stroke\n                });\n\n                this._fill();\n                this.container.append(this.drawingElement);\n                this._createMarkers();\n            },\n\n            _setData: function(data) {\n                var drawingElement = this.drawingElement;\n                var multipath = d.Path.parse(data || \"\");\n                var paths = multipath.paths.slice(0);\n                multipath.paths.elements([]);\n                drawingElement.paths.elements(paths);\n            }\n        });\n\n        deepExtend(Path.fn, AutoSizeableMixin);\n        deepExtend(Path.fn, MarkerPathMixin);\n\n        var Line = VisualBase.extend({\n            init: function(options) {\n                VisualBase.fn.init.call(this, options);\n                this.container = new d.Group();\n                this._initPath();\n                this._createMarkers();\n            },\n\n            drawingContainer: function() {\n                return this.container;\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    options = options || {};\n                    var from = options.from;\n                    var to = options.to;\n                    if (from) {\n                        this.options.from = from;\n                    }\n\n                    if (to) {\n                        this.options.to = to;\n                    }\n\n                    if (from || to) {\n                        this._drawPath();\n                        this._redrawMarkers(true, options);\n                    } else {\n                        this._redrawMarkers(false, options);\n                    }\n\n                    VisualBase.fn.redraw.call(this, options);\n                }\n            },\n\n            _initPath: function() {\n                var options = this.options;\n                var drawingElement = this.drawingElement = new d.Path({\n                    stroke: options.stroke\n                });\n\n                this._fill();\n                this._drawPath();\n                this.container.append(drawingElement);\n            },\n\n            _drawPath: function() {\n                var options = this.options;\n                var drawingElement = this.drawingElement;\n                var from = options.from || new Point();\n                var to = options.to || new Point();\n\n                drawingElement.segments.elements([\n                    createSegment(from.x, from.y),\n                    createSegment(to.x, to.y)\n                ]);\n            }\n        });\n\n        deepExtend(Line.fn, MarkerPathMixin);\n\n        var Polyline = VisualBase.extend({\n            init: function(options) {\n                VisualBase.fn.init.call(this, options);\n                this.container = new d.Group();\n                this._initPath();\n                this._createMarkers();\n            },\n\n            drawingContainer: function() {\n                return this.container;\n            },\n\n            points: function(points) {\n                var options = this.options;\n                if (points) {\n                    options.points = points;\n                    this._updatePath();\n                } else {\n                    return options.points;\n                }\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    var points = options.points;\n                    VisualBase.fn.redraw.call(this, options);\n\n                    if (points && this._pointsDiffer(points)) {\n                        this.points(points);\n                        this._redrawMarkers(true, options);\n                    } else {\n                        this._redrawMarkers(false, options);\n                    }\n                }\n            },\n\n            _initPath: function() {\n                var options = this.options;\n                this.drawingElement = new d.Path({\n                    stroke: options.stroke\n                });\n\n                this._fill();\n                this.container.append(this.drawingElement);\n\n                if (options.points) {\n                    this._updatePath();\n                }\n            },\n\n            _pointsDiffer: function(points) {\n                var currentPoints = this.options.points;\n                var differ = currentPoints.length !== points.length;\n                if (!differ) {\n                    for (var i = 0; i < points.length; i++) {\n                        if (currentPoints[i].x !== points[i].x || currentPoints[i].y !== points[i].y) {\n                            differ = true;\n                            break;\n                        }\n                    }\n                }\n\n                return differ;\n            },\n\n            _updatePath: function() {\n                var drawingElement = this.drawingElement;\n                var options = this.options;\n                var points = options.points;\n                var segments = [];\n                var point;\n                for (var i = 0; i < points.length; i++) {\n                    point = points[i];\n                    segments.push(createSegment(point.x, point.y));\n                }\n\n                drawingElement.segments.elements(segments);\n            },\n\n            options: {\n                points: []\n            }\n        });\n\n        deepExtend(Polyline.fn, MarkerPathMixin);\n\n        var Image = Element.extend({\n            init: function(options) {\n                Element.fn.init.call(this, options);\n\n                this._initImage();\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    if (options.source) {\n                        this.drawingElement.src(options.source);\n                    }\n\n                    if (this._diffNumericOptions(options, [WIDTH, HEIGHT, X, Y])) {\n                        this.drawingElement.rect(this._rect());\n                    }\n\n                    Element.fn.redraw.call(this, options);\n                }\n            },\n\n            _initImage: function() {\n                var options = this.options;\n                var rect = this._rect();\n\n                this.drawingElement = new d.Image(options.source, rect, {});\n            },\n\n            _rect: function() {\n                var sizeOptions = sizeOptionsOrDefault(this.options);\n                var origin = new g.Point(sizeOptions.x, sizeOptions.y);\n                var size = new g.Size(sizeOptions.width, sizeOptions.height);\n\n                return new g.Rect(origin, size);\n            }\n        });\n\n        var Group = Element.extend({\n            init: function(options) {\n                this.children = [];\n                Element.fn.init.call(this, options);\n                this.drawingElement = new d.Group();\n                this._initSize();\n            },\n\n            options: {\n                autoSize: false\n            },\n\n            append: function(visual) {\n                this.drawingElement.append(visual.drawingContainer());\n                this.children.push(visual);\n                this._childrenChange = true;\n            },\n\n            remove: function(visual) {\n                if (this._remove(visual)) {\n                    this._childrenChange = true;\n                }\n            },\n\n            _remove: function(visual) {\n                var index = inArray(visual, this.children);\n                if (index >= 0) {\n                    this.drawingElement.removeAt(index);\n                    this.children.splice(index, 1);\n                    return true;\n                }\n            },\n\n            clear: function() {\n                this.drawingElement.clear();\n                this.children = [];\n                this._childrenChange = true;\n            },\n\n            toFront: function(visuals) {\n                var visual;\n\n                for (var i = 0; i < visuals.length; i++) {\n                    visual = visuals[i];\n                    if (this._remove(visual)) {\n                        this.append(visual);\n                    }\n                }\n            },\n            //TO DO: add drawing group support for moving and inserting children\n            toBack: function(visuals) {\n                this._reorderChildren(visuals, 0);\n            },\n\n            toIndex: function(visuals, indices) {\n                this._reorderChildren(visuals, indices);\n            },\n\n            _reorderChildren: function(visuals, indices) {\n                var group = this.drawingElement;\n                var drawingChildren = group.children.slice(0);\n                var children = this.children;\n                var fixedPosition = isNumber(indices);\n                var i, index, toIndex, drawingElement, visual;\n\n                for (i = 0; i < visuals.length; i++) {\n                    visual = visuals[i];\n                    drawingElement = visual.drawingContainer();\n\n                    index = inArray(visual, children);\n                    if (index >= 0) {\n                        drawingChildren.splice(index, 1);\n                        children.splice(index, 1);\n\n                        toIndex = fixedPosition ? indices : indices[i];\n\n                        drawingChildren.splice(toIndex, 0, drawingElement);\n                        children.splice(toIndex, 0, visual);\n                    }\n                }\n                group.clear();\n                group.append.apply(group, drawingChildren);\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    if (this._childrenChange) {\n                        this._childrenChange = false;\n                        if (!this._updateSize(options)) {\n                            this._initSize();\n                        }\n                    } else {\n                        this._updateSize(options);\n                    }\n\n                    Element.fn.redraw.call(this, options);\n                }\n            },\n\n            _boundingBox: function() {\n                var children = this.children;\n                var boundingBox;\n                var visual, childBoundingBox;\n                for (var i = 0; i < children.length; i++) {\n                    visual = children[i];\n                    if (visual.visible() && visual._includeInBBox !== false) {\n                        childBoundingBox = visual.drawingContainer().clippedBBox(null);\n                        if (childBoundingBox) {\n                            if (boundingBox) {\n                                boundingBox = g.Rect.union(boundingBox, childBoundingBox);\n                            } else {\n                                boundingBox = childBoundingBox;\n                            }\n                        }\n                    }\n                }\n\n                return boundingBox;\n            }\n        });\n\n        deepExtend(Group.fn, AutoSizeableMixin);\n\n        var Layout = Group.extend({\n            init: function(rect, options) {\n                this.children = [];\n                Element.fn.init.call(this, options);\n                this.drawingElement = new d.Layout(toDrawingRect(rect), options);\n                this._initSize();\n            },\n\n            rect: function(rect) {\n                if (rect) {\n                    this.drawingElement.rect(toDrawingRect(rect));\n                } else {\n                    var drawingRect = this.drawingElement.rect();\n                    if (drawingRect) {\n                        return new Rect(drawingRect.origin.x, drawingRect.origin.y, drawingRect.size.width, drawingRect.size.height);\n                    }\n                }\n            },\n\n            reflow: function() {\n                this.drawingElement.reflow();\n            },\n\n            redraw: function(options) {\n                kendo.deepExtend(this.drawingElement.options, options);\n                Group.fn.redraw.call(this, options);\n            }\n        });\n\n        var Circle = VisualBase.extend({\n            init: function(options) {\n                VisualBase.fn.init.call(this, options);\n                this._initCircle();\n                this._initSize();\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    var circleOptions = this.options;\n\n                    if (options.center) {\n                        deepExtend(circleOptions, {\n                            center: options.center\n                        });\n                        this._center.move(circleOptions.center.x, circleOptions.center.y);\n                    }\n\n                    if (this._diffNumericOptions(options, [\"radius\"])) {\n                        this._circle.setRadius(circleOptions.radius);\n                    }\n\n                    this._updateSize(options);\n\n                    VisualBase.fn.redraw.call(this, options);\n                }\n            },\n\n            _initCircle: function() {\n                var options = this.options;\n                var width = options.width;\n                var height = options.height;\n                var radius = options.radius;\n                if (!defined(radius)) {\n                    if (!defined(width)) {\n                        width = height;\n                    }\n                    if (!defined(height)) {\n                        height = width;\n                    }\n                    options.radius = radius = Math.min(width, height) / 2;\n                }\n\n                var center = options.center || { x: radius, y: radius };\n                this._center = new g.Point(center.x, center.y);\n                this._circle = new g.Circle(this._center, radius);\n                this.drawingElement = new d.Circle(this._circle, {\n                    stroke: options.stroke\n                });\n\n                this._fill();\n            }\n        });\n        deepExtend(Circle.fn, AutoSizeableMixin);\n\n        var Canvas = Class.extend({\n            init: function(element, options) {\n                options = options || {};\n                this.element = element;\n                this.surface = d.Surface.create(element, options);\n                if (kendo.isFunction(this.surface.translate)) {\n                    this.translate = this._translate;\n                }\n\n                this.drawingElement = new d.Group();\n                this._viewBox = new Rect(0, 0, options.width, options.height);\n                this.size(this._viewBox);\n            },\n\n            bounds: function() {\n                var box = this.drawingElement.clippedBBox();\n                return new Rect(0, 0, box.width(), box.height());\n            },\n\n            size: function(size) {\n                var viewBox = this._viewBox;\n                if (defined(size)) {\n                    viewBox.width = size.width;\n                    viewBox.height = size.height;\n                    this.surface.setSize(size);\n                }\n                return {\n                    width: viewBox.width,\n                    height: viewBox.height\n                };\n            },\n\n            _translate: function(x, y) {\n                var viewBox = this._viewBox;\n                if (defined(x) && defined(y)) {\n                    viewBox.x = x;\n                    viewBox.y = y;\n                    this.surface.translate({ x: x, y: y });\n                }\n                return {\n                    x: viewBox.x,\n                    y: viewBox.y\n                };\n            },\n\n            draw: function() {\n                this.surface.draw(this.drawingElement);\n            },\n\n            append: function(visual) {\n                this.drawingElement.append(visual.drawingContainer());\n                return this;\n            },\n\n            remove: function(visual) {\n                this.drawingElement.remove(visual.drawingContainer());\n            },\n\n            insertBefore: function() {\n\n            },\n\n            clear: function() {\n                this.drawingElement.clear();\n            },\n\n            destroy: function(clearHtml) {\n                this.surface.destroy();\n                if (clearHtml) {\n                    $(this.element).remove();\n                }\n            }\n        });\n\n        // Helper functions ===========================================\n\n        function sizeOptionsOrDefault(options) {\n            return {\n                x: options.x || 0,\n                y: options.y || 0,\n                width: options.width || 0,\n                height: options.height || 0\n            };\n        }\n\n        function normalizeDrawingOptions(options) {\n            if (options) {\n                var drawingOptions = options;\n\n                if (isString(drawingOptions)) {\n                    drawingOptions = {\n                        color: drawingOptions\n                    };\n                }\n\n                if (drawingOptions.color) {\n                    drawingOptions.color = getColor(drawingOptions.color);\n                }\n                return drawingOptions;\n            }\n        }\n\n        function getColor(value) {\n            var color;\n            if (value != TRANSPARENT) {\n                color = new d.Color(value).toHex();\n            } else {\n                color = value;\n            }\n            return color;\n        }\n\n        function lineAngle(p1, p2) {\n            var xDiff = p2.x - p1.x;\n            var yDiff = p2.y - p1.y;\n            var angle = d.util.deg(Math.atan2(yDiff, xDiff));\n            return angle;\n        }\n\n        function createSegment(x, y) {\n            return new d.Segment(new g.Point(x, y));\n        }\n\n        function toDrawingRect(rect) {\n            if (rect) {\n                return new g.Rect([rect.x, rect.y], [rect.width, rect.height]);\n            }\n        }\n\n        // Exports ================================================================\n        kendo.deepExtend(diagram, {\n            init: function(element) {\n                kendo.init(element, diagram.ui);\n            },\n            diffNumericOptions: diffNumericOptions,\n            Element: Element,\n            Scale: Scale,\n            Translation: Translation,\n            Rotation: Rotation,\n            Circle: Circle,\n            Group: Group,\n            Rectangle: Rectangle,\n            Canvas: Canvas,\n            Path: Path,\n            Layout: Layout,\n            Line: Line,\n            MarkerBase: MarkerBase,\n            ArrowMarker: ArrowMarker,\n            CircleMarker: CircleMarker,\n            Polyline: Polyline,\n            CompositeTransform: CompositeTransform,\n            TextBlock: TextBlock,\n            Image: Image,\n            VisualBase: VisualBase\n        });\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n            // Imports ================================================================\n            var kendo = window.kendo,\n                dataviz = kendo.dataviz,\n                diagram = dataviz.diagram,\n                Class = kendo.Class,\n                Group = diagram.Group,\n                Rect = diagram.Rect,\n                Rectangle = diagram.Rectangle,\n                Utils = diagram.Utils,\n                isUndefined = Utils.isUndefined,\n                Point = diagram.Point,\n                Circle = diagram.Circle,\n                Ticker = diagram.Ticker,\n                deepExtend = kendo.deepExtend,\n                Movable = kendo.ui.Movable,\n                util = kendo.drawing.util,\n                defined = util.defined,\n                inArray = $.inArray;\n\n            // Constants ==============================================================\n            var Cursors = {\n                    arrow: \"default\",\n                    grip: \"pointer\",\n                    cross: \"pointer\",\n                    add: \"pointer\",\n                    move: \"move\",\n                    select: \"pointer\",\n                    south: \"s-resize\",\n                    east: \"e-resize\",\n                    west: \"w-resize\",\n                    north: \"n-resize\",\n                    rowresize: \"row-resize\",\n                    colresize: \"col-resize\"\n                },\n                HIT_TEST_DISTANCE = 10,\n                AUTO = \"Auto\",\n                TOP = \"Top\",\n                RIGHT = \"Right\",\n                LEFT = \"Left\",\n                BOTTOM = \"Bottom\",\n                DEFAULT_SNAP_SIZE = 10,\n                DEFAULT_SNAP_ANGLE = 10,\n                DRAG_START = \"dragStart\",\n                DRAG = \"drag\",\n                DRAG_END = \"dragEnd\",\n                ITEMROTATE = \"itemRotate\",\n                ITEMBOUNDSCHANGE = \"itemBoundsChange\",\n                MIN_SNAP_SIZE = 5,\n                MIN_SNAP_ANGLE = 5,\n                MOUSE_ENTER = \"mouseEnter\",\n                MOUSE_LEAVE = \"mouseLeave\",\n                ZOOM_START = \"zoomStart\",\n                ZOOM_END = \"zoomEnd\",\n                SCROLL_MIN = -20000,\n                SCROLL_MAX = 20000,\n                FRICTION = 0.90,\n                FRICTION_MOBILE = 0.93,\n                VELOCITY_MULTIPLIER = 5,\n                TRANSPARENT = \"transparent\",\n                PAN = \"pan\",\n                ROTATED = \"rotated\",\n                SOURCE = \"source\",\n                TARGET = \"target\",\n                HANDLE_NAMES = {\n                    \"-1\": SOURCE,\n                    \"1\": TARGET\n                };\n\n            diagram.Cursors = Cursors;\n\n            var PositionAdapter = kendo.Class.extend({\n                init: function(layoutState) {\n                    this.layoutState = layoutState;\n                    this.diagram = layoutState.diagram;\n                },\n                initState: function() {\n                    this.froms = [];\n                    this.tos = [];\n                    this.subjects = [];\n                    function pusher(id, bounds) {\n                        var shape = this.diagram.getShapeById(id);\n                        if (shape) {\n                            this.subjects.push(shape);\n                            this.froms.push(shape.bounds().topLeft());\n                            this.tos.push(bounds.topLeft());\n                        }\n                    }\n\n                    this.layoutState.nodeMap.forEach(pusher, this);\n                },\n                update: function(tick) {\n                    if (this.subjects.length <= 0) {\n                        return;\n                    }\n                    for (var i = 0; i < this.subjects.length; i++) {\n                        //todo: define a Lerp function instead\n                        this.subjects[i].position(\n                            new Point(this.froms[i].x + (this.tos[i].x - this.froms[i].x) * tick, this.froms[i].y + (this.tos[i].y - this.froms[i].y) * tick)\n                        );\n                    }\n                }\n            });\n\n            var LayoutUndoUnit = Class.extend({\n                init: function(initialState, finalState, animate) {\n                    if (isUndefined(animate)) {\n                        this.animate = false;\n                    }\n                    else {\n                        this.animate = animate;\n                    }\n                    this._initialState = initialState;\n                    this._finalState = finalState;\n                    this.title = \"Diagram layout\";\n                },\n                undo: function() {\n                    this.setState(this._initialState);\n                },\n                redo: function() {\n                    this.setState(this._finalState);\n                },\n                setState: function(state) {\n                    var diagram = state.diagram;\n                    if (this.animate) {\n                        state.linkMap.forEach(\n                            function(id, points) {\n                                var conn = diagram.getShapeById(id);\n                                conn.visible(false);\n                                if (conn) {\n                                    conn.points(points);\n                                }\n                            }\n                        );\n                        var ticker = new Ticker();\n                        ticker.addAdapter(new PositionAdapter(state));\n                        ticker.onComplete(function() {\n                            state.linkMap.forEach(\n                                function(id) {\n                                    var conn = diagram.getShapeById(id);\n                                    conn.visible(true);\n                                }\n                            );\n                        });\n                        ticker.play();\n                    }\n                    else {\n                        state.nodeMap.forEach(function(id, bounds) {\n                            var shape = diagram.getShapeById(id);\n                            if (shape) {\n                                shape.position(bounds.topLeft());\n                            }\n                        });\n                        state.linkMap.forEach(\n                            function(id, points) {\n                                var conn = diagram.getShapeById(id);\n                                if (conn) {\n                                    conn.points(points);\n                                }\n                            }\n                        );\n                    }\n                }\n            });\n\n            var CompositeUnit = Class.extend({\n                init: function(unit) {\n                    this.units = [];\n                    this.title = \"Composite unit\";\n                    if (unit !== undefined$1) {\n                        this.units.push(unit);\n                    }\n                },\n                add: function(undoUnit) {\n                    this.units.push(undoUnit);\n                },\n                undo: function() {\n                    for (var i = 0; i < this.units.length; i++) {\n                        this.units[i].undo();\n                    }\n                },\n                redo: function() {\n                    for (var i = 0; i < this.units.length; i++) {\n                        this.units[i].redo();\n                    }\n                }\n            });\n\n            var ConnectionEditUnit = Class.extend({\n                init: function(item, redoSource, redoTarget) {\n                    this.item = item;\n                    this._redoSource = redoSource;\n                    this._redoTarget = redoTarget;\n                    if (defined(redoSource)) {\n                        this._undoSource = item.source();\n                    }\n\n                    if (defined(redoTarget)) {\n                        this._undoTarget = item.target();\n                    }\n                    this.title = \"Connection Editing\";\n                },\n                undo: function() {\n                    if (this._undoSource !== undefined$1) {\n                        this.item._updateConnector(this._undoSource, \"source\");\n                    }\n\n                    if (this._undoTarget !== undefined$1) {\n                        this.item._updateConnector(this._undoTarget, \"target\");\n                    }\n\n                    this.item.updateModel();\n                },\n                redo: function() {\n                    if (this._redoSource !== undefined$1) {\n                        this.item._updateConnector(this._redoSource, \"source\");\n                    }\n\n                    if (this._redoTarget !== undefined$1) {\n                        this.item._updateConnector(this._redoTarget, \"target\");\n                    }\n\n                    this.item.updateModel();\n                }\n            });\n\n            var ConnectionEditUndoUnit = Class.extend({\n                init: function(item, undoSource, undoTarget) {\n                    this.item = item;\n                    this._undoSource = undoSource;\n                    this._undoTarget = undoTarget;\n                    this._redoSource = item.source();\n                    this._redoTarget = item.target();\n                    this.title = \"Connection Editing\";\n                },\n                undo: function() {\n                    this.item._updateConnector(this._undoSource, \"source\");\n                    this.item._updateConnector(this._undoTarget, \"target\");\n                    this.item.updateModel();\n                },\n                redo: function() {\n                    this.item._updateConnector(this._redoSource, \"source\");\n                    this.item._updateConnector(this._redoTarget, \"target\");\n                    this.item.updateModel();\n                }\n            });\n\n            var DeleteConnectionUnit = Class.extend({\n                init: function(connection) {\n                    this.connection = connection;\n                    this.diagram = connection.diagram;\n                    this.targetConnector = connection.targetConnector;\n                    this.title = \"Delete connection\";\n                },\n                undo: function() {\n                    this.diagram._addConnection(this.connection, false);\n                },\n                redo: function() {\n                    this.diagram.remove(this.connection, false);\n                }\n            });\n\n            var DeleteShapeUnit = Class.extend({\n                init: function(shape) {\n                    this.shape = shape;\n                    this.diagram = shape.diagram;\n                    this.title = \"Deletion\";\n                },\n                undo: function() {\n                    this.diagram._addShape(this.shape, false);\n                    this.shape.select(false);\n                },\n                redo: function() {\n                    this.shape.select(false);\n                    this.diagram.remove(this.shape, false);\n                }\n            });\n            /**\n             * Holds the undoredo state when performing a rotation, translation or scaling. The adorner is optional.\n             * @type {*}\n             */\n            var TransformUnit = Class.extend({\n                init: function(shapes, undoStates, adorner) {\n                    this.shapes = shapes;\n                    this.undoStates = undoStates;\n                    this.title = \"Transformation\";\n                    this.redoStates = [];\n                    this.adorner = adorner;\n                    for (var i = 0; i < this.shapes.length; i++) {\n                        var shape = this.shapes[i];\n                        this.redoStates.push(shape.bounds());\n                    }\n                },\n                undo: function() {\n                    for (var i = 0; i < this.shapes.length; i++) {\n                        var shape = this.shapes[i];\n                        shape.bounds(this.undoStates[i]);\n                        if (shape.hasOwnProperty(\"layout\")) {\n                            shape.layout(shape, this.redoStates[i], this.undoStates[i]);\n                        }\n                        shape.updateModel();\n                    }\n                    if (this.adorner) {\n                        this.adorner.refreshBounds();\n                        this.adorner.refresh();\n                    }\n                },\n                redo: function() {\n                    for (var i = 0; i < this.shapes.length; i++) {\n                        var shape = this.shapes[i];\n                        shape.bounds(this.redoStates[i]);\n                        // the 'layout' property, if implemented, lets the shape itself work out what to do with the new bounds\n                        if (shape.hasOwnProperty(\"layout\")) {\n                            shape.layout(shape, this.undoStates[i], this.redoStates[i]);\n                        }\n                        shape.updateModel();\n                    }\n\n                    if (this.adorner) {\n                        this.adorner.refreshBounds();\n                        this.adorner.refresh();\n                    }\n                }\n            });\n\n            var AddConnectionUnit = Class.extend({\n                init: function(connection, diagram) {\n                    this.connection = connection;\n                    this.diagram = diagram;\n                    this.title = \"New connection\";\n                },\n\n                undo: function() {\n                    this.diagram.remove(this.connection, false);\n                },\n\n                redo: function() {\n                    this.diagram._addConnection(this.connection, false);\n                }\n            });\n\n            var AddShapeUnit = Class.extend({\n                init: function(shape, diagram) {\n                    this.shape = shape;\n                    this.diagram = diagram;\n                    this.title = \"New shape\";\n                },\n\n                undo: function() {\n                    this.diagram.deselect();\n                    this.diagram.remove(this.shape, false);\n                },\n\n                redo: function() {\n                    this.diagram._addShape(this.shape, false);\n                }\n            });\n\n            var PanUndoUnit = Class.extend({\n                init: function(initialPosition, finalPosition, diagram) {\n                    this.initial = initialPosition;\n                    this.finalPos = finalPosition;\n                    this.diagram = diagram;\n                    this.title = \"Pan Unit\";\n                },\n                undo: function() {\n                    this.diagram.pan(this.initial);\n                },\n                redo: function() {\n                    this.diagram.pan(this.finalPos);\n                }\n            });\n\n            var RotateUnit = Class.extend({\n                init: function(adorner, shapes, undoRotates) {\n                    this.shapes = shapes;\n                    this.undoRotates = undoRotates;\n                    this.title = \"Rotation\";\n                    this.redoRotates = [];\n                    this.redoAngle = adorner._angle;\n                    this.adorner = adorner;\n                    this.center = adorner._innerBounds.center();\n                    for (var i = 0; i < this.shapes.length; i++) {\n                        var shape = this.shapes[i];\n                        this.redoRotates.push(shape.rotate().angle);\n                    }\n                },\n                undo: function() {\n                    var i, shape;\n                    for (i = 0; i < this.shapes.length; i++) {\n                        shape = this.shapes[i];\n                        shape.rotate(this.undoRotates[i], this.center, false);\n                        if (shape.hasOwnProperty(\"layout\")) {\n                            shape.layout(shape);\n                        }\n                        shape.updateModel();\n                    }\n                    if (this.adorner) {\n                        this.adorner._initialize();\n                        this.adorner.refresh();\n                    }\n                },\n                redo: function() {\n                    var i, shape;\n                    for (i = 0; i < this.shapes.length; i++) {\n                        shape = this.shapes[i];\n                        shape.rotate(this.redoRotates[i], this.center, false);\n                        if (shape.hasOwnProperty(\"layout\")) {\n                            shape.layout(shape);\n                        }\n                        shape.updateModel();\n                    }\n                    if (this.adorner) {\n                        this.adorner._initialize();\n                        this.adorner.refresh();\n                    }\n                }\n            });\n\n            var ToFrontUnit = Class.extend({\n                init: function(diagram, items, initialIndices) {\n                    this.diagram = diagram;\n                    this.indices = initialIndices;\n                    this.items = items;\n                    this.title = \"Rotate Unit\";\n                },\n                undo: function() {\n                    this.diagram._toIndex(this.items, this.indices);\n                },\n                redo: function() {\n                    this.diagram.toFront(this.items, false);\n                }\n            });\n\n            var ToBackUnit = Class.extend({\n                init: function(diagram, items, initialIndices) {\n                    this.diagram = diagram;\n                    this.indices = initialIndices;\n                    this.items = items;\n                    this.title = \"Rotate Unit\";\n                },\n                undo: function() {\n                    this.diagram._toIndex(this.items, this.indices);\n                },\n                redo: function() {\n                    this.diagram.toBack(this.items, false);\n                }\n            });\n\n            /**\n             * Undo-redo service.\n             */\n            var UndoRedoService = kendo.Observable.extend({\n                init: function(options) {\n                    kendo.Observable.fn.init.call(this, options);\n                    this.bind(this.events, options);\n                    this.stack = [];\n                    this.index = 0;\n                    this.capacity = 100;\n                },\n\n                events: [\"undone\", \"redone\"],\n\n                /**\n                 * Starts the collection of units. Add those with\n                 * the addCompositeItem method and call commit. Or cancel to forget about it.\n                 */\n                begin: function() {\n                    this.composite = new CompositeUnit();\n                },\n\n                /**\n                 * Cancels the collection process of unit started with 'begin'.\n                 */\n                cancel: function() {\n                    this.composite = undefined$1;\n                },\n\n                /**\n                 * Commits a batch of units.\n                 */\n                commit: function(execute) {\n                    if (this.composite.units.length > 0) {\n                        this._restart(this.composite, execute);\n                    }\n                    this.composite = undefined$1;\n                },\n\n                /**\n                 * Adds a unit as part of the begin-commit batch.\n                 * @param undoUnit\n                 */\n                addCompositeItem: function(undoUnit) {\n                    if (this.composite) {\n                        this.composite.add(undoUnit);\n                    } else {\n                        this.add(undoUnit);\n                    }\n                },\n\n                /**\n                 * Standard addition of a unit. See also the batch version; begin-addCompositeUnit-commit methods.\n                 * @param undoUnit The unit to be added.\n                 * @param execute If false, the unit will be added but not executed.\n                 */\n                add: function(undoUnit, execute) {\n                    this._restart(undoUnit, execute);\n                },\n\n                /**\n                 * Returns the number of undoable unit in the stack.\n                 * @returns {Number}\n                 */\n\n                pop: function() {\n                    if (this.index > 0) {\n                        this.stack.pop();\n                        this.index--;\n                    }\n                },\n\n                count: function() {\n                    return this.stack.length;\n                },\n\n                /**\n                 * Rollback of the unit on top of the stack.\n                 */\n                undo: function() {\n                    if (this.index > 0) {\n                        this.index--;\n                        this.stack[this.index].undo();\n                        this.trigger(\"undone\");\n                    }\n                },\n\n                /**\n                 * Redo of the last undone action.\n                 */\n                redo: function() {\n                    if (this.stack.length > 0 && this.index < this.stack.length) {\n                        this.stack[this.index].redo();\n                        this.index++;\n                        this.trigger(\"redone\");\n                    }\n                },\n\n                _restart: function(composite, execute) {\n                    // throw away anything beyond this point if this is a new branch\n                    this.stack.splice(this.index, this.stack.length - this.index);\n                    this.stack.push(composite);\n                    if (execute !== false) {\n                        this.redo();\n                    } else {\n                        this.index++;\n                    }\n                    // check the capacity\n                    if (this.stack.length > this.capacity) {\n                        this.stack.splice(0, this.stack.length - this.capacity);\n                        this.index = this.capacity; //points to the end of the stack\n                    }\n                },\n\n                /**\n                 * Clears the stack.\n                 */\n                clear: function() {\n                    this.stack = [];\n                    this.index = 0;\n                }\n            });\n\n    // Tools =========================================\n\n            var EmptyTool = Class.extend({\n                init: function(toolService) {\n                    this.toolService = toolService;\n                },\n                start: function() {\n                },\n                move: function() {\n                },\n                end: function() {\n                },\n                tryActivate: function() {\n                    return false;\n                },\n                getCursor: function() {\n                    return Cursors.arrow;\n                }\n            });\n\n            var ScrollerTool = EmptyTool.extend({\n                init: function(toolService) {\n                    var tool = this;\n                    var friction = kendo.support.mobileOS ? FRICTION_MOBILE : FRICTION;\n                    EmptyTool.fn.init.call(tool, toolService);\n\n                    var diagram = tool.toolService.diagram,\n                        canvas = diagram.canvas;\n\n                    var scroller = diagram.scroller = tool.scroller = $(diagram.scrollable).kendoMobileScroller({\n                        friction: friction,\n                        velocityMultiplier: VELOCITY_MULTIPLIER,\n                        mousewheelScrolling: false,\n                        zoom: false,\n                        scroll: tool._move.bind(tool)\n                    }).data(\"kendoMobileScroller\");\n\n                    if (canvas.translate) {\n                        tool.movableCanvas = new Movable(canvas.element);\n                    }\n\n                    var virtualScroll = function(dimension, min, max) {\n                        dimension.makeVirtual();\n                        dimension.virtualSize(min || SCROLL_MIN, max || SCROLL_MAX);\n                    };\n\n                    virtualScroll(scroller.dimensions.x);\n                    virtualScroll(scroller.dimensions.y);\n                    scroller.disable();\n                },\n\n                tryActivate: function(p, meta) {\n                    var toolService = this.toolService;\n                    var options = toolService.diagram.options.pannable;\n                    var enabled = meta.ctrlKey;\n\n                    if (defined(options.key)) {\n                        if (!options.key || options.key == \"none\") {\n                            enabled = noMeta(meta) && !defined(toolService.hoveredItem);\n                        } else {\n                            enabled = meta[options.key + \"Key\"];\n                        }\n                    }\n\n                    return options !== false && enabled && !defined(toolService.hoveredAdorner) && !defined(toolService._hoveredConnector);\n                },\n\n                start: function() {\n                    this.scroller.enable();\n                },\n                move: function() {\n                },//the tool itself should not handle the scrolling. Let kendo scroller take care of this part. Check _move\n                _move: function(args) {\n                    var tool = this,\n                        diagram = tool.toolService.diagram,\n                        canvas = diagram.canvas,\n                        scrollPos = new Point(args.scrollLeft, args.scrollTop);\n\n                    if (canvas.translate) {\n                        diagram._storePan(scrollPos.times(-1));\n                        tool.movableCanvas.moveTo(scrollPos);\n                        canvas.translate(scrollPos.x, scrollPos.y);\n                    } else {\n                        scrollPos = scrollPos.plus(diagram._pan.times(-1));\n                    }\n\n                    diagram.trigger(PAN, { pan: scrollPos });\n                },\n                end: function() {\n                    this.scroller.disable();\n                },\n                getCursor: function() {\n                    return Cursors.move;\n                }\n            });\n\n            /**\n             * The tool handling the transformations via the adorner.\n             * @type {*}\n             */\n            var PointerTool = Class.extend({\n                init: function(toolService) {\n                    this.toolService = toolService;\n                },\n                tryActivate: function() {\n                    return true; // the pointer tool is last and handles all others requests.\n                },\n                start: function(p, meta) {\n                    var toolService = this.toolService,\n                        diagram = toolService.diagram,\n                        hoveredItem = toolService.hoveredItem;\n\n                    if (hoveredItem) {\n                        toolService.selectSingle(hoveredItem, meta);\n                        if (hoveredItem.adorner) { //connection\n                            this.adorner = hoveredItem.adorner;\n                            this.handle = this.adorner._hitTest(p);\n                        }\n                    }\n\n                    if (!this.handle) {\n                        this.handle = diagram._resizingAdorner._hitTest(p);\n                        if (this.handle) {\n                            this.adorner = diagram._resizingAdorner;\n                        }\n                    }\n\n                    if (this.adorner) {\n                        if (!this.adorner.isDragHandle(this.handle) || !diagram.trigger(DRAG_START, { shapes: this.adorner.shapes, connections: [] })) {\n                            this.adorner.start(p);\n                        } else {\n                            toolService.startPoint = p;\n                            toolService.end(p);\n                        }\n                    }\n                },\n\n                move: function(p) {\n                    if (this.adorner) {\n                        this.adorner.move(this.handle, p);\n                        if (this.adorner.isDragHandle(this.handle)) {\n                            this.toolService.diagram.trigger(DRAG, { shapes: this.adorner.shapes, connections: [] });\n                        }\n                    }\n                },\n\n                end: function() {\n                    var diagram = this.toolService.diagram,\n                        adorner = this.adorner,\n                        unit;\n\n                    if (adorner) {\n                        if (!adorner.isDragHandle(this.handle) || !diagram.trigger(DRAG_END, { shapes: adorner.shapes, connections: [] })) {\n                            unit = adorner.stop();\n                            if (unit) {\n                                diagram.undoRedoService.add(unit, false);\n                            }\n                        } else {\n                            adorner.cancel();\n                        }\n                    }\n\n                    this.adorner = undefined$1;\n                    this.handle = undefined$1;\n                },\n                getCursor: function(p) {\n                    return this.toolService.hoveredItem ? this.toolService.hoveredItem._getCursor(p) : Cursors.arrow;\n                }\n            });\n\n            var SelectionTool = Class.extend({\n                init: function(toolService) {\n                    this.toolService = toolService;\n                },\n                tryActivate: function(p, meta) {\n                    var toolService = this.toolService;\n                    var selectable = toolService.diagram.options.selectable;\n                    var enabled = selectable && selectable.multiple !== false;\n\n                    if (enabled) {\n                        if (selectable.key && selectable.key != \"none\") {\n                            enabled = meta[selectable.key + \"Key\"];\n                        } else {\n                            enabled = noMeta(meta);\n                        }\n                    }\n\n                    return enabled && !defined(toolService.hoveredItem) && !defined(toolService.hoveredAdorner);\n                },\n                start: function(p) {\n                    var diagram = this.toolService.diagram;\n                    diagram.deselect();\n                    diagram.selector.start(p);\n                },\n                move: function(p) {\n                    var diagram = this.toolService.diagram;\n                    diagram.selector.move(p);\n                },\n                end: function(p, meta) {\n                    var diagram = this.toolService.diagram, hoveredItem = this.toolService.hoveredItem;\n                    var rect = diagram.selector.bounds();\n                    if ((!hoveredItem || !hoveredItem.isSelected) && !meta.ctrlKey) {\n                        diagram.deselect();\n                    }\n                    if (!rect.isEmpty()) {\n                        diagram.selectArea(rect);\n                    }\n                    diagram.selector.end();\n                },\n                getCursor: function() {\n                    return Cursors.arrow;\n                }\n            });\n\n            var ConnectionTool = Class.extend({\n                init: function(toolService) {\n                    this.toolService = toolService;\n                    this.type = \"ConnectionTool\";\n                },\n                tryActivate: function() {\n                    return this.toolService._hoveredConnector;\n                },\n                start: function(p, meta) {\n                    var toolService = this.toolService,\n                        diagram = toolService.diagram,\n                        connector = toolService._hoveredConnector,\n                        connection = diagram._createConnection({}, connector._c, p);\n\n                    if (canDrag(connection) && !diagram.trigger(DRAG_START, { shapes: [], connections: [connection], connectionHandle: TARGET }) && diagram._addConnection(connection)) {\n                        toolService._connectionManipulation(connection, connector._c.shape, true);\n                        toolService._removeHover();\n                        toolService.selectSingle(toolService.activeConnection, meta);\n                        if (meta.type == \"touchmove\") {\n                            diagram._cachedTouchTarget = connector.visual;\n                        }\n                    } else {\n                        connection.source(null);\n                        toolService.end(p);\n                    }\n                },\n\n                move: function(p) {\n                    var toolService = this.toolService;\n                    var connection = toolService.activeConnection;\n\n                    connection.target(p);\n                    toolService.diagram.trigger(DRAG, { shapes: [], connections: [connection], connectionHandle: TARGET });\n                    return true;\n                },\n\n                end: function(p) {\n                    var toolService = this.toolService,\n                        d = toolService.diagram,\n                        connection = toolService.activeConnection,\n                        hoveredItem = toolService.hoveredItem,\n                        connector = toolService._hoveredConnector,\n                        target,\n                        cachedTouchTarget = d._cachedTouchTarget;\n\n                    if (!connection) {\n                        return;\n                    }\n\n                    if (connector && connector._c != connection.sourceConnector) {\n                        target = connector._c;\n                    } else if (hoveredItem && hoveredItem instanceof diagram.Shape) {\n                        target = hoveredItem.getConnector(AUTO) || hoveredItem.getConnector(p);\n                    } else {\n                        target = p;\n                    }\n\n                    connection.target(target);\n\n                    if (!d.trigger(DRAG_END, { shapes: [], connections: [connection], connectionHandle: TARGET })) {\n                        connection.updateModel();\n                        d._syncConnectionChanges();\n                    } else {\n                        d.remove(connection, false);\n                        d.undoRedoService.pop();\n                    }\n                    toolService._connectionManipulation();\n\n                    if (cachedTouchTarget) {\n                        d._connectorsAdorner.visual.remove(cachedTouchTarget);\n                        d._cachedTouchTarget = null;\n                    }\n                },\n\n                getCursor: function() {\n                    return Cursors.arrow;\n                }\n            });\n\n            var ConnectionEditTool = Class.extend({\n                init: function(toolService) {\n                    this.toolService = toolService;\n                    this.type = \"ConnectionTool\";\n                },\n\n                tryActivate: function(p, meta) {\n                    var toolService = this.toolService,\n                        diagram = toolService.diagram,\n                        selectable = diagram.options.selectable,\n                        item = toolService.hoveredItem,\n                        isActive = selectable !== false &&\n                                   item && item.path && !(item.isSelected && meta.ctrlKey);\n\n                    if (isActive) {\n                        this._c = item;\n                    }\n\n                    return isActive;\n                },\n\n                start: function(p, meta) {\n                    var toolService = this.toolService;\n                    var connection = this._c;\n\n                    toolService.selectSingle(connection, meta);\n\n                    var adorner = connection.adorner;\n\n                    var handle, name;\n                    if (adorner) {\n                        handle = adorner._hitTest(p);\n                        name = HANDLE_NAMES[handle];\n                    }\n\n                    if (canDrag(connection) && adorner && !toolService.diagram.trigger(DRAG_START, { shapes: [], connections: [connection], connectionHandle: name })) {\n                        this.handle = handle;\n                        this.handleName = name;\n                        adorner.start(p);\n                    } else {\n                        toolService.startPoint = p;\n                        toolService.end(p);\n                    }\n                },\n\n                move: function(p) {\n                    var adorner = this._c.adorner;\n                    if (canDrag(this._c) && adorner) {\n                        adorner.move(this.handle, p);\n                        this.toolService.diagram.trigger(DRAG, { shapes: [], connections: [this._c], connectionHandle: this.handleName });\n\n                        return true;\n                    }\n                },\n\n                end: function(p) {\n                    var connection = this._c;\n                    var adorner = connection.adorner;\n                    var toolService = this.toolService;\n                    var diagram = toolService.diagram;\n\n                    if (adorner) {\n                        if (canDrag(connection)) {\n                            var unit = adorner.stop(p);\n                            if (!diagram.trigger(DRAG_END, { shapes: [], connections: [connection], connectionHandle: this.handleName })) {\n                                diagram.undoRedoService.add(unit, false);\n                                connection.updateModel();\n                                diagram._syncConnectionChanges();\n                            } else {\n                                unit.undo();\n                            }\n                        }\n                    }\n                },\n\n                getCursor: function() {\n                    return Cursors.move;\n                }\n            });\n\n            function testKey(key, str) {\n                return str.charCodeAt(0) == key || str.toUpperCase().charCodeAt(0) == key;\n            }\n\n            /**\n             * The service managing the tools.\n             * @type {*}\n             */\n            var ToolService = Class.extend({\n                init: function(diagram) {\n                    this.diagram = diagram;\n                    this.tools = [\n                        new ScrollerTool(this),\n                        new ConnectionEditTool(this),\n                        new ConnectionTool(this),\n                        new SelectionTool(this),\n                        new PointerTool(this)\n                    ]; // the order matters.\n\n                    this.activeTool = undefined$1;\n                },\n\n                start: function(p, meta) {\n                    meta = deepExtend({}, meta);\n                    if (this.activeTool) {\n                        this.activeTool.end(p, meta);\n                    }\n                    this._updateHoveredItem(p);\n                    this._activateTool(p, meta);\n                    this.activeTool.start(p, meta);\n                    this._updateCursor(p);\n                    this.diagram.focus();\n                    this.diagram.canvas.surface.suspendTracking();\n                    this.startPoint = p;\n                    return true;\n                },\n\n                move: function(p, meta) {\n                    meta = deepExtend({}, meta);\n                    var updateHovered = true;\n                    if (this.activeTool) {\n                        updateHovered = this.activeTool.move(p, meta);\n                    }\n                    if (updateHovered) {\n                        this._updateHoveredItem(p);\n                    }\n                    this._updateCursor(p);\n                    return true;\n                },\n\n                end: function(p, meta) {\n                    meta = deepExtend({}, meta);\n                    if (this.activeTool) {\n                        this.activeTool.end(p, meta);\n                    }\n                    this.diagram.canvas.surface.resumeTracking();\n                    this.activeTool = undefined$1;\n                    this._updateCursor(p);\n                    return true;\n                },\n\n                keyDown: function(key, meta) {\n                    var diagram = this.diagram;\n                    meta = deepExtend({ ctrlKey: false, metaKey: false, altKey: false }, meta);\n                    if ((meta.ctrlKey || meta.metaKey) && !meta.altKey) {// ctrl or option\n                        if (testKey(key, \"a\")) {// A: select all\n                            diagram.selectAll();\n                            diagram._destroyToolBar();\n                            return true;\n                        } else if (testKey(key, \"z\")) {// Z: undo\n                            diagram.undo();\n                            diagram._destroyToolBar();\n                            return true;\n                        } else if (testKey(key, \"y\")) {// y: redo\n                            diagram.redo();\n                            diagram._destroyToolBar();\n                            return true;\n                        } else if (testKey(key, \"c\")) {\n                            diagram.copy();\n                            diagram._destroyToolBar();\n                        } else if (testKey(key, \"x\")) {\n                            diagram.cut();\n                            diagram._destroyToolBar();\n                        } else if (testKey(key, \"v\")) {\n                            diagram.paste();\n                            diagram._destroyToolBar();\n                        } else if (testKey(key, \"l\")) {\n                            diagram.layout();\n                            diagram._destroyToolBar();\n                        } else if (testKey(key, \"d\")) {\n                            diagram._destroyToolBar();\n                            diagram.copy();\n                            diagram.paste();\n                        }\n                    } else if (key === 46 || key === 8) {// del: deletion\n                        var toRemove = this.diagram._triggerRemove(diagram.select());\n                        if (toRemove.length) {\n                            this.diagram.remove(toRemove, true);\n                            this.diagram._syncChanges();\n                            this.diagram._destroyToolBar();\n                        }\n\n                        return true;\n                    } else if (key === 27) {// ESC: stop any action\n                        this._discardNewConnection();\n                        diagram.deselect();\n                        diagram._destroyToolBar();\n                        return true;\n                    }\n\n                },\n                wheel: function(p, meta) {\n                    var diagram = this.diagram,\n                        delta = meta.delta,\n                        z = diagram.zoom(),\n                        options = diagram.options,\n                        zoomRate = options.zoomRate,\n                        zoomOptions = { point: p, meta: meta, zoom: z };\n\n                    if (diagram.trigger(ZOOM_START, zoomOptions)) {\n                        return;\n                    }\n\n                    if (delta < 0) {\n                        z += zoomRate;\n                    } else {\n                        z -= zoomRate;\n                    }\n\n                    z = kendo.dataviz.round(Math.max(options.zoomMin, Math.min(options.zoomMax, z)), 2);\n                    zoomOptions.zoom = z;\n\n                    diagram.zoom(z, zoomOptions);\n                    diagram.trigger(ZOOM_END, zoomOptions);\n\n                    return true;\n                },\n                setTool: function(tool, index) {\n                    tool.toolService = this;\n                    this.tools[index] = tool;\n                },\n\n                selectSingle: function(item, meta) {\n                    var diagram = this.diagram;\n                    var selectable = diagram.options.selectable;\n                    if (selectable && !item.isSelected && item.options.selectable !== false) {\n                        var addToSelection = meta.ctrlKey && selectable.multiple !== false;\n                        diagram.select(item, { addToSelection: addToSelection });\n                    }\n                },\n\n                _discardNewConnection: function() {\n                    if (this.newConnection) {\n                        this.diagram.remove(this.newConnection);\n                        this.newConnection = undefined$1;\n                    }\n                },\n                _activateTool: function(p, meta) {\n                    for (var i = 0; i < this.tools.length; i++) {\n                        var tool = this.tools[i];\n                        if (tool.tryActivate(p, meta)) {\n                            this.activeTool = tool;\n                            break; // activating the first available tool in the loop.\n                        }\n                    }\n                },\n                _updateCursor: function(p) {\n                    var element = this.diagram.element;\n                    var cursor = this.activeTool ? this.activeTool.getCursor(p) : (this.hoveredAdorner ? this.hoveredAdorner._getCursor(p) : (this.hoveredItem ? this.hoveredItem._getCursor(p) : Cursors.arrow));\n\n                    element.css({ cursor: cursor });\n                },\n                _connectionManipulation: function(connection, disabledShape, isNew) {\n                    this.activeConnection = connection;\n                    this.disabledShape = disabledShape;\n                    if (isNew) {\n                        this.newConnection = this.activeConnection;\n                    } else {\n                        this.newConnection = undefined$1;\n                    }\n                },\n                _updateHoveredItem: function(p) {\n                    var hit = this._hitTest(p);\n                    var diagram = this.diagram;\n\n                    if (hit != this.hoveredItem && (!this.disabledShape || hit != this.disabledShape)) {\n                        if (this.hoveredItem) {\n                            diagram.trigger(MOUSE_LEAVE, { item: this.hoveredItem });\n                            this.hoveredItem._hover(false);\n                        }\n\n                        if (hit && hit.options.enable) {\n                            diagram.trigger(MOUSE_ENTER, { item: hit });\n\n                            this.hoveredItem = hit; // Shape, connection or connector\n                            this.hoveredItem._hover(true);\n                        } else {\n                            this.hoveredItem = undefined$1;\n                        }\n                    }\n                },\n                _removeHover: function() {\n                    if (this.hoveredItem) {\n                        this.hoveredItem._hover(false);\n                        this.hoveredItem = undefined$1;\n                    }\n                },\n                _hitTest: function(point) {\n                    var hit, d = this.diagram, item, i;\n\n                    // connectors\n                    if (this._hoveredConnector) {\n                        this._hoveredConnector._hover(false);\n                        this._hoveredConnector = undefined$1;\n                    }\n                    if (d._connectorsAdorner._visible) {\n                        hit = d._connectorsAdorner._hitTest(point);\n                        if (hit) {\n                            return hit;\n                        }\n                    }\n\n                    hit = this.diagram._resizingAdorner._hitTest(point);\n                    if (hit) {\n                        this.hoveredAdorner = d._resizingAdorner;\n                        if (hit.x !== 0 || hit.y !== 0) { // hit testing for resizers or rotator, otherwise if (0,0) than pass through.\n                            return;\n                        }\n                        hit = undefined$1;\n                    } else {\n                        this.hoveredAdorner = undefined$1;\n                    }\n\n                    if (!this.activeTool || this.activeTool.type !== \"ConnectionTool\") {\n                        var selectedConnections = []; // only the connections should have higher presence because the connection edit point is on top of connector.\n                        // TODO: This should be reworked. The connection adorner should be one for all selected connections and should be hit tested prior the connections and shapes itself.\n                        for (i = 0; i < d._selectedItems.length; i++) {\n                            item = d._selectedItems[i];\n                            if (item instanceof diagram.Connection) {\n                                selectedConnections.push(item);\n                            }\n                        }\n                        hit = this._hitTestItems(selectedConnections, point);\n                    }\n\n                    return hit || this._hitTestElements(point);\n                },\n\n                _hitTestElements: function(point) {\n                    var diagram = this.diagram;\n                    var shapeHit = this._hitTestItems(diagram.shapes, point);\n                    var connectionHit = this._hitTestItems(diagram.connections, point);\n                    var hit;\n\n                    if ((!this.activeTool || this.activeTool.type != \"ConnectionTool\") && shapeHit && connectionHit && !hitTestShapeConnectors(shapeHit, point)) {\n                        var mainLayer = diagram.mainLayer;\n                        var shapeIdx = inArray(shapeHit.visual, mainLayer.children);\n                        var connectionIdx = inArray(connectionHit.visual, mainLayer.children);\n                        hit = shapeIdx > connectionIdx ? shapeHit : connectionHit;\n                    }\n                    return hit || shapeHit || connectionHit;\n                },\n\n                _hitTestItems: function(array, point) {\n                    var i, item, hit;\n                    for (i = array.length - 1; i >= 0; i--) {\n                        item = array[i];\n                        hit = item._hitTest(point);\n                        if (hit) {\n                            return hit;\n                        }\n                    }\n                }\n            });\n\n    // Routing =========================================\n\n            /**\n             * Base class for connection routers.\n             */\n            var ConnectionRouterBase = kendo.Class.extend({\n                init: function() {\n                }\n                /*route: function (connection) {\n                 },\n                 hitTest: function (p) {\n\n                 },\n                 getBounds: function () {\n\n                 }*/\n            });\n\n            /**\n             * Base class for polyline and cascading routing.\n             */\n            var LinearConnectionRouter = ConnectionRouterBase.extend({\n                init: function(connection) {\n                    var that = this;\n                    ConnectionRouterBase.fn.init.call(that);\n                    this.connection = connection;\n                },\n                /**\n                 * Hit testing for polyline paths.\n                 */\n                hitTest: function(p) {\n                    var rec = this.getBounds().inflate(HIT_TEST_DISTANCE);\n                    if (!rec.contains(p)) {\n                        return false;\n                    }\n                    return diagram.Geometry.distanceToPolyline(p, this.connection.allPoints()) < HIT_TEST_DISTANCE;\n                },\n\n                /**\n                 * Bounds of a polyline.\n                 * @returns {kendo.dataviz.diagram.Rect}\n                 */\n                getBounds: function() {\n                    var points = this.connection.allPoints(),\n                        s = points[0],\n                        e = points[points.length - 1],\n                        right = Math.max(s.x, e.x),\n                        left = Math.min(s.x, e.x),\n                        top = Math.min(s.y, e.y),\n                        bottom = Math.max(s.y, e.y);\n\n                    for (var i = 1; i < points.length - 1; ++i) {\n                        right = Math.max(right, points[i].x);\n                        left = Math.min(left, points[i].x);\n                        top = Math.min(top, points[i].y);\n                        bottom = Math.max(bottom, points[i].y);\n                    }\n\n                    return new Rect(left, top, right - left, bottom - top);\n                }\n            });\n\n            /**\n             * A simple poly-linear routing which does not alter the intermediate points.\n             * Does hold the underlying hit, bounds....logic.\n             * @type {*|Object|void|extend|Zepto.extend|b.extend}\n             */\n            var PolylineRouter = LinearConnectionRouter.extend({\n                init: function(connection) {\n                    var that = this;\n                    LinearConnectionRouter.fn.init.call(that);\n                    this.connection = connection;\n                },\n                route: function() {\n                    // just keep the points as is\n                }\n            });\n\n            var CascadingRouter = LinearConnectionRouter.extend({\n                SAME_SIDE_DISTANCE_RATIO: 5,\n\n                init: function(connection) {\n                    var that = this;\n                    LinearConnectionRouter.fn.init.call(that);\n                    this.connection = connection;\n                },\n\n                routePoints: function(start, end, sourceConnector, targetConnector) {\n                    var result;\n\n                    if (sourceConnector && targetConnector) {\n                        result = this._connectorPoints(start, end, sourceConnector, targetConnector);\n                    } else {\n                        result = this._floatingPoints(start, end, sourceConnector);\n                    }\n                    return result;\n                },\n\n                route: function() {\n                    var sourceConnector = this.connection._resolvedSourceConnector;\n                    var targetConnector = this.connection._resolvedTargetConnector;\n                    var start = this.connection.sourcePoint();\n                    var end = this.connection.targetPoint();\n                    var points = this.routePoints(start, end, sourceConnector, targetConnector);\n                    this.connection.points(points);\n                },\n\n                _connectorSides: [{\n                    name: \"Top\",\n                    axis: \"y\",\n                    boundsPoint: \"topLeft\",\n                    secondarySign: 1\n                }, {\n                    name: \"Left\",\n                    axis: \"x\",\n                    boundsPoint: \"topLeft\",\n                    secondarySign: 1\n                }, {\n                    name: \"Bottom\",\n                    axis: \"y\",\n                    boundsPoint: \"bottomRight\",\n                    secondarySign: -1\n                }, {\n                    name: \"Right\",\n                    axis: \"x\",\n                    boundsPoint: \"bottomRight\",\n                    secondarySign: -1\n                }],\n\n                _connectorSide: function(connector, targetPoint) {\n                    var position = connector.position();\n                    var shapeBounds = connector.shape.bounds(ROTATED);\n                    var bounds = {\n                        topLeft: shapeBounds.topLeft(),\n                        bottomRight: shapeBounds.bottomRight()\n                    };\n                    var sides = this._connectorSides;\n                    var min = util.MAX_NUM;\n                    var sideDistance;\n                    var minSide;\n                    var axis;\n                    var side;\n                    for (var idx = 0; idx < sides.length; idx++) {\n                        side = sides[idx];\n                        axis = side.axis;\n                        sideDistance = Math.round(Math.abs(position[axis] - bounds[side.boundsPoint][axis]));\n                        if (sideDistance < min) {\n                            min = sideDistance;\n                            minSide = side;\n                        } else if (sideDistance === min &&\n                            (position[axis] - targetPoint[axis]) * side.secondarySign > (position[minSide.axis] - targetPoint[minSide.axis]) * minSide.secondarySign) {\n                            minSide = side;\n                        }\n                    }\n                    return minSide.name;\n                },\n\n                _sameSideDistance: function(connector) {\n                    var bounds = connector.shape.bounds(ROTATED);\n                    return Math.min(bounds.width, bounds.height) / this.SAME_SIDE_DISTANCE_RATIO;\n                },\n\n                _connectorPoints: function(start, end, sourceConnector, targetConnector) {\n                    var sourceConnectorSide = this._connectorSide(sourceConnector, end);\n                    var targetConnectorSide = this._connectorSide(targetConnector, start);\n                    var deltaX = end.x - start.x;\n                    var deltaY = end.y - start.y;\n                    var sameSideDistance = this._sameSideDistance(sourceConnector);\n                    var result = [];\n                    var pointX, pointY;\n\n                    if (sourceConnectorSide === TOP || sourceConnectorSide == BOTTOM) {\n                        if (targetConnectorSide == TOP || targetConnectorSide == BOTTOM) {\n                            if (sourceConnectorSide == targetConnectorSide) {\n                                if (sourceConnectorSide == TOP) {\n                                    pointY = Math.min(start.y, end.y) - sameSideDistance;\n                                } else {\n                                    pointY = Math.max(start.y, end.y) + sameSideDistance;\n                                }\n                                result = [new Point(start.x, pointY), new Point(end.x, pointY)];\n                            } else {\n                                result = [new Point(start.x, start.y + deltaY / 2), new Point(end.x, start.y + deltaY / 2)];\n                            }\n                        } else {\n                            result = [new Point(start.x, end.y)];\n                        }\n                    } else {\n                        if (targetConnectorSide == LEFT || targetConnectorSide == RIGHT) {\n                            if (sourceConnectorSide == targetConnectorSide) {\n                                if (sourceConnectorSide == LEFT) {\n                                    pointX = Math.min(start.x, end.x) - sameSideDistance;\n                                } else {\n                                    pointX = Math.max(start.x, end.x) + sameSideDistance;\n                                }\n                                result = [new Point(pointX, start.y), new Point(pointX, end.y)];\n                            } else {\n                                result = [new Point(start.x + deltaX / 2, start.y), new Point(start.x + deltaX / 2, start.y + deltaY)];\n                            }\n                        } else {\n                            result = [new Point(end.x, start.y)];\n                        }\n                    }\n                    return result;\n                },\n\n                _floatingPoints: function(start, end, sourceConnector) {\n                    var sourceConnectorSide = sourceConnector ? this._connectorSide(sourceConnector, end) : null;\n                    var cascadeStartHorizontal = this._startHorizontal(start, end, sourceConnectorSide);\n                    var points = [start, start, end, end];\n                    var deltaX = end.x - start.x;\n                    var deltaY = end.y - start.y;\n                    var length = points.length;\n                    var shiftX;\n                    var shiftY;\n\n                    // note that this is more generic than needed for only two intermediate points.\n                    for (var idx = 1; idx < length - 1; ++idx) {\n                        if (cascadeStartHorizontal) {\n                            if (idx % 2 !== 0) {\n                                shiftX = deltaX / (length / 2);\n                                shiftY = 0;\n                            }\n                            else {\n                                shiftX = 0;\n                                shiftY = deltaY / ((length - 1) / 2);\n                            }\n                        }\n                        else {\n                            if (idx % 2 !== 0) {\n                                shiftX = 0;\n                                shiftY = deltaY / (length / 2);\n                            }\n                            else {\n                                shiftX = deltaX / ((length - 1) / 2);\n                                shiftY = 0;\n                            }\n                        }\n                        points[idx] = new Point(points[idx - 1].x + shiftX, points[idx - 1].y + shiftY);\n                    }\n                    // need to fix the wrong 1.5 factor of the last intermediate point\n                    idx--;\n                    if ((cascadeStartHorizontal && (idx % 2 !== 0)) || (!cascadeStartHorizontal && (idx % 2 === 0))) {\n                        points[length - 2] = new Point(points[length - 1].x, points[length - 2].y);\n                    } else {\n                        points[length - 2] = new Point(points[length - 2].x, points[length - 1].y);\n                    }\n\n                    return [points[1], points[2]];\n                },\n\n                _startHorizontal: function(start, end, sourceSide) {\n                    var horizontal;\n                    if (sourceSide !== null && (sourceSide === RIGHT || sourceSide === LEFT)) {\n                        horizontal = true;\n                    } else {\n                        horizontal = Math.abs(start.x - end.x) > Math.abs(start.y - end.y);\n                    }\n\n                    return horizontal;\n                }\n            });\n\n    // Adorners =========================================\n\n            var AdornerBase = Class.extend({\n                init: function(diagram, options) {\n                    var that = this;\n                    that.diagram = diagram;\n                    that.options = deepExtend({}, that.options, options);\n                    that.visual = new Group();\n                    that.diagram._adorners.push(that);\n                },\n                refresh: function() {\n\n                }\n            });\n\n            var ConnectionEditAdorner = AdornerBase.extend({\n                init: function(connection, options) {\n                    var that = this, diagram;\n                    that.connection = connection;\n                    diagram = that.connection.diagram;\n                    that._ts = diagram.toolService;\n                    AdornerBase.fn.init.call(that, diagram, options);\n                    var sp = that.connection.sourcePoint();\n                    var tp = that.connection.targetPoint();\n                    that.spVisual = new Circle(deepExtend(that.options.handles, { center: sp }));\n                    that.epVisual = new Circle(deepExtend(that.options.handles, { center: tp }));\n                    that.visual.append(that.spVisual);\n                    that.visual.append(that.epVisual);\n                },\n\n                options: {\n                    handles: {}\n                },\n\n                _getCursor: function() {\n                    return Cursors.move;\n                },\n\n                start: function(p) {\n                    this.handle = this._hitTest(p);\n                    this.startPoint = p;\n                    this._initialSource = this.connection.source();\n                    this._initialTarget = this.connection.target();\n                    switch (this.handle) {\n                        case -1:\n                            if (this.connection.targetConnector) {\n                                this._ts._connectionManipulation(this.connection, this.connection.targetConnector.shape);\n                            }\n                            break;\n                        case 1:\n                            if (this.connection.sourceConnector) {\n                                this._ts._connectionManipulation(this.connection, this.connection.sourceConnector.shape);\n                            }\n                            break;\n                    }\n                },\n\n                move: function(handle, p) {\n                    switch (handle) {\n                        case -1:\n                            this.connection.source(p);\n                            break;\n                        case 1:\n                            this.connection.target(p);\n                            break;\n                        default:\n                            var delta = p.minus(this.startPoint);\n                            this.startPoint = p;\n                            if (!this.connection.sourceConnector) {\n                                this.connection.source(this.connection.sourcePoint().plus(delta));\n                            }\n                            if (!this.connection.targetConnector) {\n                                this.connection.target(this.connection.targetPoint().plus(delta));\n                            }\n                            break;\n                    }\n                    this.refresh();\n                    return true;\n                },\n\n                stop: function(p) {\n                    var ts = this.diagram.toolService, item = ts.hoveredItem, target;\n                    if (ts._hoveredConnector) {\n                        target = ts._hoveredConnector._c;\n                    } else if (item && item instanceof diagram.Shape) {\n                        target = item.getConnector(AUTO) || item.getConnector(p);\n                    } else {\n                        target = p;\n                    }\n\n                    if (this.handle === -1) {\n                        this.connection.source(target);\n                    } else if (this.handle === 1) {\n                        this.connection.target(target);\n                    }\n\n                    this.handle = undefined$1;\n                    this._ts._connectionManipulation();\n                    return new ConnectionEditUndoUnit(this.connection, this._initialSource, this._initialTarget);\n                },\n\n                _hitTest: function(point) {\n                    var sourcePoint = this.connection.sourcePoint();\n                    var targetPoint = this.connection.targetPoint();\n                    var radiusX = this.options.handles.width / 2 + HIT_TEST_DISTANCE;\n                    var radiusY = this.options.handles.height / 2 + HIT_TEST_DISTANCE;\n                    var sourcePointDistance = sourcePoint.distanceTo(point);\n                    var targetPointDistance = targetPoint.distanceTo(point);\n                    var sourceHandle = new Rect(sourcePoint.x, sourcePoint.y).inflate(radiusX, radiusY).contains(point);\n                    var targetHandle = new Rect(targetPoint.x, targetPoint.y).inflate(radiusX, radiusY).contains(point);\n                    var handle = 0;\n\n                    if (sourceHandle && (!targetHandle || sourcePointDistance < targetPointDistance)) {\n                        handle = -1;\n                    } else if (targetHandle && (!sourceHandle || targetPointDistance < sourcePointDistance)) {\n                        handle = 1;\n                    }\n\n                    return handle;\n                },\n\n                refresh: function() {\n                    this.spVisual.redraw({ center: this.diagram.modelToLayer(this.connection.sourcePoint()) });\n                    this.epVisual.redraw({ center: this.diagram.modelToLayer(this.connection.targetPoint()) });\n                }\n            });\n\n            var ConnectorsAdorner = AdornerBase.extend({\n                init: function(diagram, options) {\n                    var that = this;\n                    AdornerBase.fn.init.call(that, diagram, options);\n                    that._refreshHandler = function(e) {\n                        if (e.item == that.shape) {\n                            that.refresh();\n                        }\n                    };\n                },\n\n                show: function(shape) {\n                    var that = this, len, i, ctr;\n                    that._visible = true;\n                    that.shape = shape;\n                    that.diagram.bind(ITEMBOUNDSCHANGE, that._refreshHandler);\n                    len = shape.connectors.length;\n                    that.connectors = [];\n                    that._clearVisual();\n                    for (i = 0; i < len; i++) {\n                        ctr = new ConnectorVisual(shape.connectors[i]);\n                        that.connectors.push(ctr);\n                        that.visual.append(ctr.visual);\n                    }\n                    that.visual.visible(true);\n                    that.refresh();\n                },\n\n                _clearVisual: function() {\n                    var that = this;\n                    if (that.diagram._cachedTouchTarget) {\n                        that._keepCachedTouchTarget();\n                    } else {\n                        that.visual.clear();\n                    }\n                },\n\n                _keepCachedTouchTarget: function() {\n                    var that = this,\n                        visualChildren = that.visual.children;\n                    var childrenCount = visualChildren.length;\n                    var index = inArray(that.diagram._cachedTouchTarget, visualChildren);\n                    for (var i = childrenCount - 1; i >= 0; i--) {\n                        if (i == index) {\n                            continue;\n                        }\n                        that.visual.remove(visualChildren[i]);\n                    }\n                },\n\n                destroy: function() {\n                    var that = this;\n                    that.diagram.unbind(ITEMBOUNDSCHANGE, that._refreshHandler);\n                    that.shape = undefined$1;\n                    that._visible = undefined$1;\n                    that.visual.visible(false);\n                },\n\n                _hitTest: function(p) {\n                    var ctr, i;\n                    for (i = 0; i < this.connectors.length; i++) {\n                        ctr = this.connectors[i];\n                        if (ctr._hitTest(p)) {\n                            ctr._hover(true);\n                            this.diagram.toolService._hoveredConnector = ctr;\n                            break;\n                        }\n                    }\n                },\n\n                refresh: function() {\n                    if (this.shape) {\n                        var bounds = this.shape.bounds();\n                            bounds = this.diagram.modelToLayer(bounds);\n                        this.visual.position(bounds.topLeft());\n                        $.each(this.connectors, function() {\n                            this.refresh();\n                        });\n                    }\n                }\n            });\n\n            function hitToOppositeSide(hit, bounds) {\n                var result;\n\n                if (hit.x == -1 && hit.y == -1) {\n                    result = bounds.bottomRight();\n                } else if (hit.x == 1 && hit.y == 1) {\n                    result = bounds.topLeft();\n                } else if (hit.x == -1 && hit.y == 1) {\n                    result = bounds.topRight();\n                } else if (hit.x == 1 && hit.y == -1) {\n                    result = bounds.bottomLeft();\n                } else if (hit.x === 0 && hit.y == -1) {\n                    result = bounds.bottom();\n                } else if (hit.x === 0 && hit.y == 1) {\n                    result = bounds.top();\n                } else if (hit.x == 1 && hit.y === 0) {\n                    result = bounds.left();\n                } else if (hit.x == -1 && hit.y === 0) {\n                    result = bounds.right();\n                }\n\n                return result;\n            }\n\n            var ResizingAdorner = AdornerBase.extend({\n                init: function(diagram, options) {\n                    var that = this;\n                    AdornerBase.fn.init.call(that, diagram, options);\n                    that._manipulating = false;\n                    that.map = [];\n                    that.shapes = [];\n\n                    that._initSelection();\n                    that._createHandles();\n                    that.redraw();\n                    that.diagram.bind(\"select\", function(e) {\n                        that._initialize(e.selected);\n                    });\n\n                    that._refreshHandler = function() {\n                        if (!that._internalChange) {\n                            that.refreshBounds();\n                            that.refresh();\n                        }\n                    };\n\n                    that._rotatedHandler = function() {\n                        if (that.shapes.length == 1) {\n                            that._angle = that.shapes[0].rotate().angle;\n                        }\n                        that._refreshHandler();\n                    };\n\n                    that.diagram.bind(ITEMBOUNDSCHANGE, that._refreshHandler).bind(ITEMROTATE, that._rotatedHandler);\n                    that.refreshBounds();\n                    that.refresh();\n                },\n\n                options: {\n                    handles: {\n                        fill: {\n                            color: \"#fff\"\n                        },\n                        stroke: {\n                            color: \"#282828\"\n                        },\n                        height: 7,\n                        width: 7,\n                        hover: {\n                            fill: {\n                                color: \"#282828\"\n                            },\n                            stroke: {\n                                color: \"#282828\"\n                            }\n                        }\n                    },\n                    selectable: {\n                        stroke: {\n                            color: \"#778899\",\n                            width: 1,\n                            dashType: \"dash\"\n                        },\n                        fill: {\n                            color: TRANSPARENT\n                        }\n                    },\n                    offset: 10\n                },\n\n                _initSelection: function() {\n                    var that = this;\n                    var diagram = that.diagram;\n                    var selectable = diagram.options.selectable;\n                    var options = deepExtend({}, that.options.selectable, selectable);\n                    that.rect = new Rectangle(options);\n                    that.visual.append(that.rect);\n                },\n\n                _resizable: function() {\n                    return this.options.editable && this.options.editable.resize !== false;\n                },\n\n                _handleOptions: function() {\n                    return (this.options.editable.resize || {}).handles || this.options.handles;\n                },\n\n                _createHandles: function() {\n                    var handles, item, y, x;\n\n                    if (this._resizable()) {\n                        handles = this._handleOptions();\n                        for (x = -1; x <= 1; x++) {\n                            for (y = -1; y <= 1; y++) {\n                                if ((x !== 0) || (y !== 0)) { // (0, 0) element, (-1, -1) top-left, (+1, +1) bottom-right\n                                    item = new Rectangle(handles);\n                                    item.drawingElement._hover = this._hover.bind(this);\n                                    this.map.push({ x: x, y: y, visual: item });\n                                    this.visual.append(item);\n                                }\n                            }\n                        }\n                    }\n                },\n\n                bounds: function(value) {\n                    if (value) {\n                        this._innerBounds = value.clone();\n                        this._bounds = this.diagram.modelToLayer(value).inflate(this.options.offset, this.options.offset);\n                    } else {\n                        return this._bounds;\n                    }\n                },\n\n                _hitTest: function(p) {\n                    var tp = this.diagram.modelToLayer(p),\n                        i, hit, handleBounds, handlesCount = this.map.length, handle;\n\n                    if (this._angle) {\n                        tp = tp.clone().rotate(this._bounds.center(), this._angle);\n                    }\n\n                    if (this._resizable()) {\n                        for (i = 0; i < handlesCount; i++) {\n                            handle = this.map[i];\n                            hit = new Point(handle.x, handle.y);\n                            handleBounds = this._getHandleBounds(hit); //local coordinates\n                            handleBounds.offset(this._bounds.x, this._bounds.y);\n                            if (handleBounds.contains(tp)) {\n                                return hit;\n                            }\n                        }\n                    }\n\n                    if (this._bounds.contains(tp)) {\n                        return new Point(0, 0);\n                    }\n                },\n\n                _getHandleBounds: function(p) {\n                    if (this._resizable()) {\n                        var handles = this._handleOptions(),\n                            w = handles.width,\n                            h = handles.height,\n                            r = new Rect(0, 0, w, h);\n\n                        if (p.x < 0) {\n                            r.x = - w / 2;\n                        } else if (p.x === 0) {\n                            r.x = Math.floor(this._bounds.width / 2) - w / 2;\n                        } else if (p.x > 0) {\n                            r.x = this._bounds.width + 1.0 - w / 2;\n                        } if (p.y < 0) {\n                            r.y = - h / 2;\n                        } else if (p.y === 0) {\n                            r.y = Math.floor(this._bounds.height / 2) - h / 2;\n                        } else if (p.y > 0) {\n                            r.y = this._bounds.height + 1.0 - h / 2;\n                        }\n\n                        return r;\n                    }\n                },\n\n                _getCursor: function(point) {\n                    var hit = this._hitTest(point);\n                    if (hit && (hit.x >= -1) && (hit.x <= 1) && (hit.y >= -1) && (hit.y <= 1) && this._resizable()) {\n                        var angle = this._angle;\n                        if (angle) {\n                            angle = 360 - angle;\n                            hit.rotate(new Point(0, 0), angle);\n                            hit = new Point(Math.round(hit.x), Math.round(hit.y));\n                        }\n\n                        if (hit.x == -1 && hit.y == -1) {\n                            return \"nw-resize\";\n                        }\n                        if (hit.x == 1 && hit.y == 1) {\n                            return \"se-resize\";\n                        }\n                        if (hit.x == -1 && hit.y == 1) {\n                            return \"sw-resize\";\n                        }\n                        if (hit.x == 1 && hit.y == -1) {\n                            return \"ne-resize\";\n                        }\n                        if (hit.x === 0 && hit.y == -1) {\n                            return \"n-resize\";\n                        }\n                        if (hit.x === 0 && hit.y == 1) {\n                            return \"s-resize\";\n                        }\n                        if (hit.x == 1 && hit.y === 0) {\n                            return \"e-resize\";\n                        }\n                        if (hit.x == -1 && hit.y === 0) {\n                            return \"w-resize\";\n                        }\n                    }\n                    return this._manipulating ? Cursors.move : Cursors.select;\n                },\n\n                _initialize: function() {\n                    var that = this, i, item,\n                        items = that.diagram.select();\n\n                    that.shapes = [];\n                    for (i = 0; i < items.length; i++) {\n                        item = items[i];\n                        if (item instanceof diagram.Shape) {\n                            that.shapes.push(item);\n                            item._rotationOffset = new Point();\n                        }\n                    }\n\n                    that._angle = that.shapes.length == 1 ? that.shapes[0].rotate().angle : 0;\n                    that._startAngle = that._angle;\n                    that._rotates();\n                    that._positions();\n                    that.refreshBounds();\n                    that.refresh();\n                    that.redraw();\n                },\n\n                _rotates: function() {\n                    var that = this, i, shape;\n                    that.initialRotates = [];\n                    for (i = 0; i < that.shapes.length; i++) {\n                        shape = that.shapes[i];\n                        that.initialRotates.push(shape.rotate().angle);\n                    }\n                },\n\n                _positions: function() {\n                    var that = this, i, shape;\n                    that.initialStates = [];\n                    for (i = 0; i < that.shapes.length; i++) {\n                        shape = that.shapes[i];\n                        that.initialStates.push(shape.bounds());\n                    }\n                },\n\n                _hover: function(value, element) {\n                    if (this._resizable()) {\n                        var handleOptions = this._handleOptions(),\n                            hover = handleOptions.hover,\n                            stroke = handleOptions.stroke,\n                            fill = handleOptions.fill;\n\n                        if (value && Utils.isDefined(hover.stroke)) {\n                            stroke = deepExtend({}, stroke, hover.stroke);\n                        }\n\n                        if (value && Utils.isDefined(hover.fill)) {\n                            fill = hover.fill;\n                        }\n                        element.stroke(stroke.color, stroke.width, stroke.opacity);\n                        element.fill(fill.color, fill.opacity);\n                    }\n                },\n\n                start: function(p) {\n                    this._sp = p;\n                    this._cp = p;\n                    this._lp = p;\n                    this._manipulating = true;\n                    this._internalChange = true;\n                    this.shapeStates = [];\n                    for (var i = 0; i < this.shapes.length; i++) {\n                        var shape = this.shapes[i];\n                        this.shapeStates.push(shape.bounds());\n                    }\n                },\n\n                redraw: function() {\n                    var i, handle,\n                        visibleHandles = this._resizable();\n\n                    for (i = 0; i < this.map.length; i++) {\n                        handle = this.map[i];\n                        handle.visual.visible(visibleHandles);\n                    }\n                },\n\n                angle: function(value) {\n                    if (defined(value)) {\n                        this._angle = value;\n                    }\n\n                    return this._angle;\n                },\n\n                rotate: function() {\n                    var center = this._innerBounds.center();\n                    var currentAngle = this.angle();\n                    this._internalChange = true;\n                    for (var i = 0; i < this.shapes.length; i++) {\n                        var shape = this.shapes[i];\n                        currentAngle = (currentAngle + this.initialRotates[i] - this._startAngle) % 360;\n                        shape.rotate(currentAngle, center);\n                    }\n                    this.refresh();\n                },\n\n                move: function(handle, p) {\n                    var delta, dragging,\n                        dtl = new Point(),\n                        dbr = new Point(),\n                        bounds, center, shape,\n                        i, angle, newBounds,\n                        changed = 0, staticPoint,\n                        scaleX, scaleY;\n\n                    if (handle.y === -2 && handle.x === -1) {\n                        center = this._innerBounds.center();\n                        this._angle = this._truncateAngle(Utils.findAngle(center, p));\n                        for (i = 0; i < this.shapes.length; i++) {\n                            shape = this.shapes[i];\n                            angle = (this._angle + this.initialRotates[i] - this._startAngle) % 360;\n                            shape.rotate(angle, center);\n                            if (shape.hasOwnProperty(\"layout\")) {\n                                shape.layout(shape);\n                            }\n                            this._rotating = true;\n                        }\n                        this.refresh();\n                    } else {\n                        if (this.shouldSnap()) {\n                            var thr = this._truncateDistance(p.minus(this._lp));\n                            // threshold\n                            if (thr.x === 0 && thr.y === 0) {\n                                this._cp = p;\n                                return;\n                            }\n                            delta = thr;\n                            this._lp = new Point(this._lp.x + thr.x, this._lp.y + thr.y);\n                        } else {\n                            delta = p.minus(this._cp);\n                        }\n\n                        if (this.isDragHandle(handle)) {\n                            dbr = dtl = delta; // dragging\n                            dragging = true;\n                        } else {\n                            if (this._angle) { // adjust the delta so that resizers resize in the correct direction after rotation.\n                                delta.rotate(new Point(0, 0), this._angle);\n                            }\n                            if (handle.x == -1) {\n                                dtl.x = delta.x;\n                            } else if (handle.x == 1) {\n                                dbr.x = delta.x;\n                            }\n                            if (handle.y == -1) {\n                                dtl.y = delta.y;\n                            } else if (handle.y == 1) {\n                                dbr.y = delta.y;\n                            }\n                        }\n\n                        if (!dragging) {\n                            staticPoint = hitToOppositeSide(handle, this._innerBounds);\n                            scaleX = (this._innerBounds.width + delta.x * handle.x) / this._innerBounds.width;\n                            scaleY = (this._innerBounds.height + delta.y * handle.y) / this._innerBounds.height;\n                        }\n\n                        for (i = 0; i < this.shapes.length; i++) {\n                            shape = this.shapes[i];\n                            bounds = shape.bounds();\n                            if (dragging) {\n                                if (!canDrag(shape)) {\n                                    continue;\n                                }\n                                newBounds = this._displaceBounds(bounds, dtl, dbr, dragging);\n                            } else {\n                                newBounds = bounds.clone();\n                                newBounds.scale(scaleX, scaleY, staticPoint, this._innerBounds.center(), shape.rotate().angle);\n                                var newCenter = newBounds.center(); // fixes the new rotation center.\n                                newCenter.rotate(bounds.center(), -this._angle);\n                                newBounds = new Rect(newCenter.x - newBounds.width / 2, newCenter.y - newBounds.height / 2, newBounds.width, newBounds.height);\n                            }\n                            if (newBounds.width >= shape.options.minWidth && newBounds.height >= shape.options.minHeight) { // if we up-size very small shape\n                                var oldBounds = bounds;\n                                shape.bounds(newBounds);\n                                if (shape.hasOwnProperty(\"layout\")) {\n                                    shape.layout(shape, oldBounds, newBounds);\n                                }\n                                if (oldBounds.width !== newBounds.width || oldBounds.height !== newBounds.height) {\n                                    shape.rotate(shape.rotate().angle); // forces the rotation to update it's rotation center\n                                }\n                                changed += 1;\n                            }\n                        }\n\n                        if (changed) {\n                            if (changed == i) {\n                                newBounds = this._displaceBounds(this._innerBounds, dtl, dbr, dragging);\n                                this.bounds(newBounds);\n                            } else {\n                                this.refreshBounds();\n                            }\n                            this.refresh();\n                        }\n\n                        this._positions();\n                    }\n\n                    this._cp = p;\n                },\n\n                isDragHandle: function(handle) {\n                    return handle.x === 0 && handle.y === 0;\n                },\n\n                cancel: function() {\n                    var shapes = this.shapes;\n                    var states = this.shapeStates;\n                    for (var idx = 0; idx < shapes.length; idx++) {\n                        shapes[idx].bounds(states[idx]);\n                    }\n                    this.refreshBounds();\n                    this.refresh();\n                    this._manipulating = undefined$1;\n                    this._internalChange = undefined$1;\n                    this._rotating = undefined$1;\n                },\n\n                _truncatePositionToGuides: function(bounds) {\n                    if (this.diagram.ruler) {\n                        return this.diagram.ruler.truncatePositionToGuides(bounds);\n                    }\n                    return bounds;\n                },\n\n                _truncateSizeToGuides: function(bounds) {\n                    if (this.diagram.ruler) {\n                        return this.diagram.ruler.truncateSizeToGuides(bounds);\n                    }\n                    return bounds;\n                },\n\n                _truncateAngle: function(a) {\n                    var snap = this.snapOptions();\n                    var snapAngle = Math.max(snap.angle || DEFAULT_SNAP_ANGLE, MIN_SNAP_ANGLE);\n                    return snap ? Math.floor((a % 360) / snapAngle) * snapAngle : (a % 360);\n                },\n\n                _truncateDistance: function(d) {\n                    if (d instanceof diagram.Point) {\n                        return new diagram.Point(this._truncateDistance(d.x), this._truncateDistance(d.y));\n                    } else {\n                        var snap = this.snapOptions() || {};\n                        var snapSize = Math.max(snap.size || DEFAULT_SNAP_SIZE, MIN_SNAP_SIZE);\n                        return snap ? Math.floor(d / snapSize) * snapSize : d;\n                    }\n                },\n\n                snapOptions: function() {\n                    var editable = this.diagram.options.editable;\n                    var snap = ((editable || {}).drag || {}).snap || {};\n                    return snap;\n                },\n\n                shouldSnap: function() {\n                    var editable = this.diagram.options.editable;\n                    var drag = (editable || {}).drag;\n                    var snap = (drag || {}).snap;\n                    return editable !== false && drag !== false && snap !== false;\n                },\n\n                _displaceBounds: function(bounds, dtl, dbr, dragging) {\n                    var tl = bounds.topLeft().plus(dtl),\n                        br = bounds.bottomRight().plus(dbr),\n                        newBounds = Rect.fromPoints(tl, br),\n                        newCenter;\n                    if (!dragging) {\n                        newCenter = newBounds.center();\n                        newCenter.rotate(bounds.center(), -this._angle);\n                        newBounds = new Rect(newCenter.x - newBounds.width / 2, newCenter.y - newBounds.height / 2, newBounds.width, newBounds.height);\n                    }\n                    return newBounds;\n                },\n\n                stop: function() {\n                    var unit, i, shape;\n                    if (this._cp != this._sp) {\n                        if (this._rotating) {\n                            unit = new RotateUnit(this, this.shapes, this.initialRotates);\n                            this._rotating = false;\n                        } else if (this._diffStates()) {\n                            if (this.diagram.ruler) {\n                                for (i = 0; i < this.shapes.length; i++) {\n                                    shape = this.shapes[i];\n                                    var bounds = shape.bounds();\n                                    bounds = this._truncateSizeToGuides(this._truncatePositionToGuides(bounds));\n                                    shape.bounds(bounds);\n                                    this.refreshBounds();\n                                    this.refresh();\n                                }\n                            }\n                            for (i = 0; i < this.shapes.length; i++) {\n                                shape = this.shapes[i];\n                                shape.updateModel();\n                            }\n                            unit = new TransformUnit(this.shapes, this.shapeStates, this);\n                            this.diagram._syncShapeChanges();\n                        }\n                    }\n\n                    this._manipulating = undefined$1;\n                    this._internalChange = undefined$1;\n                    this._rotating = undefined$1;\n                    return unit;\n                },\n\n                _diffStates: function() {\n                    var shapes = this.shapes;\n                    var states = this.shapeStates;\n                    for (var idx = 0; idx < shapes.length; idx++) {\n                        if (!shapes[idx].bounds().equals(states[idx])) {\n                            return true;\n                        }\n                    }\n                    return false;\n                },\n\n                refreshBounds: function() {\n                    var bounds = this.shapes.length == 1 ?\n                        this.shapes[0].bounds().clone() :\n                        this.diagram.boundingBox(this.shapes, true);\n\n                    this.bounds(bounds);\n                },\n\n                refresh: function() {\n                    var that = this, b, bounds;\n                    if (this.shapes.length > 0) {\n                        bounds = this.bounds();\n                        this.visual.visible(true);\n                        this.visual.position(bounds.topLeft());\n                        $.each(this.map, function() {\n                            b = that._getHandleBounds(new Point(this.x, this.y));\n                            this.visual.position(b.topLeft());\n                        });\n                        this.visual.position(bounds.topLeft());\n\n                        var center = new Point(bounds.width / 2, bounds.height / 2);\n                        this.visual.rotate(this._angle, center);\n                        this.rect.redraw({ width: bounds.width, height: bounds.height });\n                        if (this.rotationThumb) {\n                            var thumb = this.options.editable.rotate.thumb;\n                            this._rotationThumbBounds = new Rect(bounds.center().x, bounds.y + thumb.y, 0, 0).inflate(thumb.width);\n                            this.rotationThumb.redraw({ x: bounds.width / 2 - thumb.width / 2 });\n                        }\n                    } else {\n                        this.visual.visible(false);\n                    }\n                }\n            });\n\n            var Selector = Class.extend({\n                init: function(diagram) {\n                    var selectable = diagram.options.selectable;\n                    this.options = deepExtend({}, this.options, selectable);\n\n                    this.visual = new Rectangle(this.options);\n                    this.diagram = diagram;\n                },\n                options: {\n                    stroke: {\n                        color: \"#778899\",\n                        width: 1,\n                        dashType: \"dash\"\n                    },\n                    fill: {\n                        color: TRANSPARENT\n                    }\n                },\n                start: function(p) {\n                    this._sp = this._ep = p;\n                    this.refresh();\n                    this.diagram._adorn(this, true);\n                },\n                end: function() {\n                    this._sp = this._ep = undefined$1;\n                    this.diagram._adorn(this, false);\n                },\n                bounds: function(value) {\n                    if (value) {\n                        this._bounds = value;\n                    }\n                    return this._bounds;\n                },\n                move: function(p) {\n                    this._ep = p;\n                    this.refresh();\n                },\n                refresh: function() {\n                    if (this._sp) {\n                        var visualBounds = Rect.fromPoints(this.diagram.modelToLayer(this._sp), this.diagram.modelToLayer(this._ep));\n                        this.bounds(Rect.fromPoints(this._sp, this._ep));\n                        this.visual.position(visualBounds.topLeft());\n                        this.visual.redraw({ height: visualBounds.height + 1, width: visualBounds.width + 1 });\n                    }\n                }\n            });\n\n            var ConnectorVisual = Class.extend({\n                init: function(connector) {\n                    this.options = deepExtend({}, connector.options);\n                    this._c = connector;\n                    this.visual = new Circle(this.options);\n                    this.refresh();\n                },\n                _hover: function(value) {\n                    var options = this.options,\n                        hover = options.hover,\n                        stroke = options.stroke,\n                        fill = options.fill;\n\n                    if (value && Utils.isDefined(hover.stroke)) {\n                        stroke = deepExtend({}, stroke, hover.stroke);\n                    }\n\n                    if (value && Utils.isDefined(hover.fill)) {\n                        fill = hover.fill;\n                    }\n\n                    this.visual.redraw({\n                        stroke: stroke,\n                        fill: fill\n                    });\n                },\n                refresh: function() {\n                    var p = this._c.shape.diagram.modelToView(this._c.position()),\n                        relative = p.minus(this._c.shape.bounds(\"transformed\").topLeft()),\n                        value = new Rect(p.x, p.y, 0, 0);\n                    value.inflate(this.options.width / 2, this.options.height / 2);\n                    this._visualBounds = value;\n                    this.visual.redraw({ center: new Point(relative.x, relative.y) });\n                },\n                _hitTest: function(p) {\n                    var tp = this._c.shape.diagram.modelToView(p);\n                    return this._visualBounds.contains(tp);\n                }\n            });\n\n            function canDrag(element) {\n                var editable = element.options.editable;\n                return editable && editable.drag !== false;\n            }\n\n            function hitTestShapeConnectors(shape, point) {\n                var connector, position, rect;\n                for (var idx = 0; idx < shape.connectors.length; idx++) {\n                    connector = shape.connectors[idx];\n                    position = connector.position();\n                    rect = new Rect(position.x, position.y);\n                    rect.inflate(HIT_TEST_DISTANCE, HIT_TEST_DISTANCE);\n                    if (rect.contains(point)) {\n                        return connector;\n                    }\n                }\n            }\n\n            function noMeta(meta) {\n                return meta.ctrlKey === false && meta.altKey === false && meta.shiftKey === false;\n            }\n\n            deepExtend(diagram, {\n                CompositeUnit: CompositeUnit,\n                TransformUnit: TransformUnit,\n                PanUndoUnit: PanUndoUnit,\n                AddShapeUnit: AddShapeUnit,\n                AddConnectionUnit: AddConnectionUnit,\n                DeleteShapeUnit: DeleteShapeUnit,\n                DeleteConnectionUnit: DeleteConnectionUnit,\n                ConnectionEditAdorner: ConnectionEditAdorner,\n                ConnectionTool: ConnectionTool,\n                ConnectorVisual: ConnectorVisual,\n                UndoRedoService: UndoRedoService,\n                ResizingAdorner: ResizingAdorner,\n                Selector: Selector,\n                ToolService: ToolService,\n                ConnectorsAdorner: ConnectorsAdorner,\n                LayoutUndoUnit: LayoutUndoUnit,\n                ConnectionEditUnit: ConnectionEditUnit,\n                ToFrontUnit: ToFrontUnit,\n                ToBackUnit: ToBackUnit,\n                ConnectionRouterBase: ConnectionRouterBase,\n                PolylineRouter: PolylineRouter,\n                CascadingRouter: CascadingRouter,\n                SelectionTool: SelectionTool,\n                ScrollerTool: ScrollerTool,\n                PointerTool: PointerTool,\n                ConnectionEditTool: ConnectionEditTool,\n                RotateUnit: RotateUnit\n            });\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            diagram = kendo.dataviz.diagram,\n            Graph = diagram.Graph,\n            Node = diagram.Node,\n            Link = diagram.Link,\n            deepExtend = kendo.deepExtend,\n            Size = diagram.Size,\n            Rect = diagram.Rect,\n            Dictionary = diagram.Dictionary,\n            Set = diagram.Set,\n            HyperTree = diagram.Graph,\n            Utils = diagram.Utils,\n            Point = diagram.Point,\n            EPSILON = 1e-06,\n            DEG_TO_RAD = Math.PI / 180,\n            contains = Utils.contains,\n            grep = $.grep;\n\n        /**\n         * Base class for layout algorithms.\n         * @type {*}\n         */\n        var LayoutBase = kendo.Class.extend({\n            defaultOptions: {\n                type: \"Tree\",\n                subtype: \"Down\",\n                roots: null,\n                animate: false,\n                //-------------------------------------------------------------------\n                /**\n                 * Force-directed option: whether the motion of the nodes should be limited by the boundaries of the diagram surface.\n                 */\n                limitToView: false,\n                /**\n                 * Force-directed option: the amount of friction applied to the motion of the nodes.\n                 */\n                friction: 0.9,\n                /**\n                 * Force-directed option: the optimal distance between nodes (minimum energy).\n                 */\n                nodeDistance: 50,\n                /**\n                 * Force-directed option: the number of time things are being calculated.\n                 */\n                iterations: 300,\n                //-------------------------------------------------------------------\n                /**\n                 * Tree option: the separation in one direction (depends on the subtype what direction this is).\n                 */\n                horizontalSeparation: 90,\n                /**\n                 * Tree option: the separation in the complementary direction (depends on the subtype what direction this is).\n                 */\n                verticalSeparation: 50,\n\n                //-------------------------------------------------------------------\n                /**\n                 * Tip-over tree option: children-to-parent vertical distance.\n                 */\n                underneathVerticalTopOffset: 15,\n                /**\n                 * Tip-over tree option: children-to-parent horizontal distance.\n                 */\n                underneathHorizontalOffset: 15,\n                /**\n                 * Tip-over tree option: leaf-to-next-branch vertical distance.\n                 */\n                underneathVerticalSeparation: 15,\n                //-------------------------------------------------------------------\n                /**\n                 * Settings object to organize the different components of the diagram in a grid layout structure\n                 */\n                grid: {\n                    /**\n                     * The width of the grid in which components are arranged. Beyond this width a component will be on the next row.\n                     */\n                    width: 1500,\n                    /**\n                     * The left offset of the grid.\n                     */\n                    offsetX: 50,\n                    /**\n                     * The top offset of the grid.\n                     */\n                    offsetY: 50,\n                    /**\n                     * The horizontal padding within a cell of the grid where a single component resides.\n                     */\n                    componentSpacingX: 20,\n                    /**\n                     * The vertical padding within a cell of the grid where a single component resides.\n                     */\n                    componentSpacingY: 20\n                },\n\n                //-------------------------------------------------------------------\n                /**\n                 * Layered option: the separation height/width between the layers.\n                 */\n                layerSeparation: 50,\n                /**\n                 * Layered option: how many rounds of shifting and fine-tuning.\n                 */\n                layeredIterations: 2,\n                /**\n                 * Tree-radial option: the angle at which the layout starts.\n                 */\n                startRadialAngle: 0,\n                /**\n                 * Tree-radial option: the angle at which the layout starts.\n                 */\n                endRadialAngle: 360,\n                /**\n                 * Tree-radial option: the separation between levels.\n                 */\n                radialSeparation: 150,\n                /**\n                 * Tree-radial option: the separation between the root and the first level.\n                 */\n                radialFirstLevelSeparation: 200,\n                /**\n                 * Tree-radial option: whether a virtual roots bing the components in one radial layout.\n                 */\n                keepComponentsInOneRadialLayout: false,\n                //-------------------------------------------------------------------\n\n                // TODO: ensure to change this to false when containers are around\n                ignoreContainers: true,\n                layoutContainerChildren: false,\n                ignoreInvisible: true,\n                animateTransitions: false\n            },\n            init: function() {\n            },\n\n            /**\n             * Organizes the components in a grid.\n             * Returns the final set of nodes (not the Graph).\n             * @param components\n             */\n            gridLayoutComponents: function(components) {\n                if (!components) {\n                    throw \"No components supplied.\";\n                }\n\n                // calculate and cache the bounds of the components\n                Utils.forEach(components, function(c) {\n                    c.calcBounds();\n                });\n\n                // order by decreasing width\n                components.sort(function(a, b) {\n                    return b.bounds.width - a.bounds.width;\n                });\n\n                var maxWidth = this.options.grid.width,\n                    offsetX = this.options.grid.componentSpacingX,\n                    offsetY = this.options.grid.componentSpacingY,\n                    height = 0,\n                    startX = this.options.grid.offsetX,\n                    startY = this.options.grid.offsetY,\n                    x = startX,\n                    y = startY,\n                    i,\n                    resultLinkSet = [],\n                    resultNodeSet = [];\n\n                while (components.length > 0) {\n                    if (x >= maxWidth) {\n                        // start a new row\n                        x = startX;\n                        y += height + offsetY;\n                        // reset the row height\n                        height = 0;\n                    }\n                    var component = components.pop();\n                    this.moveToOffset(component, new Point(x, y));\n                    for (i = 0; i < component.nodes.length; i++) {\n                        resultNodeSet.push(component.nodes[i]); // to be returned in the end\n                    }\n                    for (i = 0; i < component.links.length; i++) {\n                        resultLinkSet.push(component.links[i]);\n                    }\n                    var boundingRect = component.bounds;\n                    var currentHeight = boundingRect.height;\n                    if (currentHeight <= 0 || isNaN(currentHeight)) {\n                        currentHeight = 0;\n                    }\n                    var currentWidth = boundingRect.width;\n                    if (currentWidth <= 0 || isNaN(currentWidth)) {\n                        currentWidth = 0;\n                    }\n\n                    if (currentHeight >= height) {\n                        height = currentHeight;\n                    }\n                    x += currentWidth + offsetX;\n                }\n\n                return {\n                    nodes: resultNodeSet,\n                    links: resultLinkSet\n                };\n            },\n\n            moveToOffset: function(component, p) {\n                var i, j,\n                    bounds = component.bounds,\n                    deltax = p.x - bounds.x,\n                    deltay = p.y - bounds.y;\n\n                for (i = 0; i < component.nodes.length; i++) {\n                    var node = component.nodes[i];\n                    var nodeBounds = node.bounds();\n                    if (nodeBounds.width === 0 && nodeBounds.height === 0 && nodeBounds.x === 0 && nodeBounds.y === 0) {\n                        nodeBounds = new Rect(0, 0, 0, 0);\n                    }\n                    nodeBounds.x += deltax;\n                    nodeBounds.y += deltay;\n                    node.bounds(nodeBounds);\n                }\n                for (i = 0; i < component.links.length; i++) {\n                    var link = component.links[i];\n                    if (link.points) {\n                        var newpoints = [];\n                        var points = link.points;\n                        for (j = 0; j < points.length; j++) {\n                            var pt = points[j];\n                            pt.x += deltax;\n                            pt.y += deltay;\n                            newpoints.push(pt);\n                        }\n                        link.points = newpoints;\n                    }\n                }\n                this.currentHorizontalOffset += bounds.width + this.options.grid.offsetX;\n                return new Point(deltax, deltay);\n            },\n\n            transferOptions: function(options) {\n\n                // Size options lead to stackoverflow and need special handling\n\n                this.options = kendo.deepExtend({}, this.defaultOptions);\n                if (Utils.isUndefined(options)) {\n                    return;\n                }\n\n                this.options = kendo.deepExtend(this.options, options || {});\n            }\n        });\n\n        /**\n         * The data bucket a hypertree holds in its nodes.     *\n         * @type {*}\n         */\n        /* var ContainerGraph = kendo.Class.extend({\n         init: function (diagram) {\n         this.diagram = diagram;\n         this.graph = new Graph(diagram);\n         this.container = null;\n         this.containerNode = null;\n         }\n\n         });*/\n\n        /**\n         * Adapter between the diagram control and the graph representation. It converts shape and connections to nodes and edges taking into the containers and their collapsef state,\n         * the visibility of items and more. If the layoutContainerChildren is true a hypertree is constructed which holds the hierarchy of containers and many conditions are analyzed\n         * to investigate how the effective graph structure looks like and how the layout has to be performed.\n         * @type {*}\n         */\n        var DiagramToHyperTreeAdapter = kendo.Class.extend({\n            init: function(diagram) {\n\n                /**\n                 * The mapping to/from the original nodes.\n                 * @type {Dictionary}\n                 */\n                this.nodeMap = new Dictionary();\n\n                /**\n                 * Gets the mapping of a shape to a container in case the shape sits in a collapsed container.\n                 * @type {Dictionary}\n                 */\n                this.shapeMap = new Dictionary();\n\n                /**\n                 * The nodes being mapped.\n                 * @type {Dictionary}\n                 */\n                this.nodes = [];\n\n                /**\n                 * The connections being mapped.\n                 * @type {Dictionary}\n                 */\n                this.edges = [];\n\n                // the mapping from an edge to all the connections it represents, this can be both because of multiple connections between\n                // two shapes or because a container holds multiple connections to another shape or container.\n                this.edgeMap = new Dictionary();\n\n                /**\n                 * The resulting set of Nodes when the analysis has finished.\n                 * @type {Array}\n                 */\n                this.finalNodes = [];\n\n                /**\n                 * The resulting set of Links when the analysis has finished.\n                 * @type {Array}\n                 */\n                this.finalLinks = [];\n\n                /**\n                 * The items being omitted because of multigraph edges.\n                 * @type {Array}\n                 */\n                this.ignoredConnections = [];\n\n                /**\n                 * The items being omitted because of containers, visibility and other factors.\n                 * @type {Array}\n                 */\n                this.ignoredShapes = [];\n\n                /**\n                 * The map from a node to the partition/hypernode in which it sits. This hyperMap is null if 'options.layoutContainerChildren' is false.\n                 * @type {Dictionary}\n                 */\n                this.hyperMap = new Dictionary();\n\n                /**\n                 * The hypertree contains the hierarchy defined by the containers.\n                 * It's in essence a Graph of Graphs with a tree structure defined by the hierarchy of containers.\n                 * @type {HyperTree}\n                 */\n                this.hyperTree = new Graph();\n\n                /**\n                 * The resulting graph after conversion. Note that this does not supply the information contained in the\n                 * ignored connection and shape collections.\n                 * @type {null}\n                 */\n                this.finalGraph = null;\n\n                this.diagram = diagram;\n            },\n\n            /**\n             * The hyperTree is used when the 'options.layoutContainerChildren' is true. It contains the hierarchy of containers whereby each node is a ContainerGraph.\n             * This type of node has a Container reference to the container which holds the Graph items. There are three possible situations during the conversion process:\n             *  - Ignore the containers: the container are non-existent and only normal shapes are mapped. If a shape has a connection to a container it will be ignored as well\n             *    since there is no node mapped for the container.\n             *  - Do not ignore the containers and leave the content of the containers untouched: the top-level elements are being mapped and the children within a container are not altered.\n             *  - Do not ignore the containers and organize the content of the containers as well: the hypertree is constructed and there is a partitioning of all nodes and connections into the hypertree.\n             *    The only reason a connection or node is not being mapped might be due to the visibility, which includes the visibility change through a collapsed parent container.\n             * @param options\n             */\n            convert: function(options) {\n\n                if (Utils.isUndefined(this.diagram)) {\n                    throw \"No diagram to convert.\";\n                }\n\n                this.options = kendo.deepExtend({\n                        ignoreInvisible: true,\n                        ignoreContainers: true,\n                        layoutContainerChildren: false\n                    },\n                    options || {}\n                );\n\n                this.clear();\n                // create the nodes which participate effectively in the graph analysis\n                this._renormalizeShapes();\n\n                // recreate the incoming and outgoing collections of each and every node\n                this._renormalizeConnections();\n\n                // export the resulting graph\n                this.finalNodes = new Dictionary(this.nodes);\n                this.finalLinks = new Dictionary(this.edges);\n\n                this.finalGraph = new Graph();\n                this.finalNodes.forEach(function(n) {\n                    this.finalGraph.addNode(n);\n                }, this);\n                this.finalLinks.forEach(function(l) {\n                    this.finalGraph.addExistingLink(l);\n                }, this);\n                return this.finalGraph;\n            },\n\n            /**\n             * Maps the specified connection to an edge of the graph deduced from the given diagram.\n             * @param connection\n             * @returns {*}\n             */\n            mapConnection: function(connection) {\n                return this.edgeMap.get(connection.id);\n            },\n\n            /**\n             * Maps the specified shape to a node of the graph deduced from the given diagram.\n             * @param shape\n             * @returns {*}\n             */\n            mapShape: function(shape) {\n                return this.nodeMap.get(shape.id);\n            },\n\n            /**\n             * Gets the edge, if any, between the given nodes.\n             * @param a\n             * @param b\n             */\n            getEdge: function(a, b) {\n                return Utils.first(a.links, function(link) {\n                    return link.getComplement(a) === b;\n                });\n            },\n\n            /**\n             * Clears all the collections used by the conversion process.\n             */\n            clear: function() {\n                this.finalGraph = null;\n                this.hyperTree = (!this.options.ignoreContainers && this.options.layoutContainerChildren) ? new HyperTree() : null;\n                this.hyperMap = (!this.options.ignoreContainers && this.options.layoutContainerChildren) ? new Dictionary() : null;\n                this.nodeMap = new Dictionary();\n                this.shapeMap = new Dictionary();\n                this.nodes = [];\n                this.edges = [];\n                this.edgeMap = new Dictionary();\n                this.ignoredConnections = [];\n                this.ignoredShapes = [];\n                this.finalNodes = [];\n                this.finalLinks = [];\n            },\n\n            /**\n             * The path from a given ContainerGraph to the root (container).\n             * @param containerGraph\n             * @returns {Array}\n             */\n            listToRoot: function(containerGraph) {\n                var list = [];\n                var s = containerGraph.container;\n                if (!s) {\n                    return list;\n                }\n                list.push(s);\n                while (s.parentContainer) {\n                    s = s.parentContainer;\n                    list.push(s);\n                }\n                list.reverse();\n                return list;\n            },\n\n            firstNonIgnorableContainer: function(shape) {\n\n                if (shape.isContainer && !this._isIgnorableItem(shape)) {\n                    return shape;\n                }\n                return !shape.parentContainer ? null : this.firstNonIgnorableContainer(shape.parentContainer);\n            },\n            isContainerConnection: function(a, b) {\n                if (a.isContainer && this.isDescendantOf(a, b)) {\n                    return true;\n                }\n                return b.isContainer && this.isDescendantOf(b, a);\n            },\n\n            /**\n             * Returns true if the given shape is a direct child or a nested container child of the given container.\n             * If the given container and shape are the same this will return false since a shape cannot be its own child.\n             * @param scope\n             * @param a\n             * @returns {boolean}\n             */\n            isDescendantOf: function(scope, a) {\n                if (!scope.isContainer) {\n                    throw \"Expecting a container.\";\n                }\n                if (scope === a) {\n                    return false;\n                }\n                if (contains(scope.children, a)) {\n                    return true;\n                }\n                var containers = [];\n                for (var i = 0, len = scope.children.length; i < len; i++) {\n                    var c = scope.children[i];\n                    if (c.isContainer && this.isDescendantOf(c, a)) {\n                        containers.push(c);\n                    }\n                }\n\n                return containers.length > 0;\n            },\n            isIgnorableItem: function(shape) {\n                if (this.options.ignoreInvisible) {\n                    if (shape.isCollapsed && this._isVisible(shape)) {\n                        return false;\n                    }\n                    if (!shape.isCollapsed && this._isVisible(shape)) {\n                        return false;\n                    }\n                    return true;\n                }\n                else {\n                    return shape.isCollapsed && !this._isTop(shape);\n                }\n            },\n\n            /**\n             *  Determines whether the shape is or needs to be mapped to another shape. This occurs essentially when the shape sits in\n             * a collapsed container hierarchy and an external connection needs a node endpoint. This node then corresponds to the mapped shape and is\n             * necessarily a container in the parent hierarchy of the shape.\n             * @param shape\n             */\n            isShapeMapped: function(shape) {\n                return shape.isCollapsed && !this._isVisible(shape) && !this._isTop(shape);\n            },\n\n            leastCommonAncestor: function(a, b) {\n                if (!a) {\n                    throw \"Parameter should not be null.\";\n                }\n                if (!b) {\n                    throw \"Parameter should not be null.\";\n                }\n\n                if (!this.hyperTree) {\n                    throw \"No hypertree available.\";\n                }\n                var al = this.listToRoot(a);\n                var bl = this.listToRoot(b);\n                var found = null;\n                if (Utils.isEmpty(al) || Utils.isEmpty(bl)) {\n                    return this.hyperTree.root.data;\n                }\n                var xa = al[0];\n                var xb = bl[0];\n                var i = 0;\n                while (xa === xb) {\n                    found = al[i];\n                    i++;\n                    if (i >= al.length || i >= bl.length) {\n                        break;\n                    }\n                    xa = al[i];\n                    xb = bl[i];\n                }\n                if (!found) {\n                    return this.hyperTree.root.data;\n                }\n                else {\n                    return grep(this.hyperTree.nodes, function(n) {\n                        return n.data.container === found;\n                    });\n                }\n            },\n            /**\n             * Determines whether the specified item is a top-level shape or container.\n             * @param item\n             * @returns {boolean}\n             * @private\n             */\n            _isTop: function(item) {\n                return !item.parentContainer;\n            },\n\n            /**\n             * Determines iteratively (by walking up the container stack) whether the specified shape is visible.\n             * This does NOT tell whether the item is not visible due to an explicit Visibility change or due to a collapse state.\n             * @param shape\n             * @returns {*}\n             * @private\n             */\n            _isVisible: function(shape) {\n\n                if (!shape.visible()) {\n                    return false;\n                }\n                return !shape.parentContainer ? shape.visible() : this._isVisible(shape.parentContainer);\n            },\n\n            _isCollapsed: function(shape) {\n\n                if (shape.isContainer && shape.isCollapsed) {\n                    return true;\n                }\n                return shape.parentContainer && this._isCollapsed(shape.parentContainer);\n            },\n\n            /**\n             * First part of the graph creation; analyzing the shapes and containers and deciding whether they should be mapped to a Node.\n             * @private\n             */\n            _renormalizeShapes: function() {\n                // add the nodes, the adjacency structure will be reconstructed later on\n                if (this.options.ignoreContainers) {\n                    for (var i = 0, len = this.diagram.shapes.length; i < len; i++) {\n                        var shape = this.diagram.shapes[i];\n\n                        // if not visible (and ignoring the invisible ones) or a container we skip\n                        if ((this.options.ignoreInvisible && !this._isVisible(shape)) || shape.isContainer) {\n                            this.ignoredShapes.push(shape);\n                            continue;\n                        }\n                        var node = new Node(shape.id, shape);\n                        node.isVirtual = false;\n\n                        // the mapping will always contain singletons and the hyperTree will be null\n                        this.nodeMap.add(shape.id, node);\n                        this.nodes.push(node);\n                    }\n                }\n                else {\n                    throw \"Containers are not supported yet, but stay tuned.\";\n                }\n            },\n\n            /**\n             * Second part of the graph creation; analyzing the connections and deciding whether they should be mapped to an edge.\n             * @private\n             */\n            _renormalizeConnections: function() {\n                if (this.diagram.connections.length === 0) {\n                    return;\n                }\n                for (var i = 0, len = this.diagram.connections.length; i < len; i++) {\n                    var conn = this.diagram.connections[i];\n\n                    if (this.isIgnorableItem(conn)) {\n                        this.ignoredConnections.push(conn);\n                        continue;\n                    }\n\n                    var source = !conn.sourceConnector ? null : conn.sourceConnector.shape;\n                    var sink = !conn.targetConnector ? null : conn.targetConnector.shape;\n\n                    // no layout for floating connections\n                    if (!source || !sink) {\n                        this.ignoredConnections.push(conn);\n                        continue;\n                    }\n\n                    if (contains(this.ignoredShapes, source) && !this.shapeMap.containsKey(source)) {\n                        this.ignoredConnections.push(conn);\n                        continue;\n                    }\n                    if (contains(this.ignoredShapes, sink) && !this.shapeMap.containsKey(sink)) {\n                        this.ignoredConnections.push(conn);\n                        continue;\n                    }\n\n                    // if the endpoint sits in a collapsed container we need the container rather than the shape itself\n                    if (this.shapeMap.containsKey(source)) {\n                        source = this.shapeMap[source];\n                    }\n                    if (this.shapeMap.containsKey(sink)) {\n                        sink = this.shapeMap[sink];\n                    }\n\n                    var sourceNode = this.mapShape(source);\n                    var sinkNode = this.mapShape(sink);\n                    if ((sourceNode === sinkNode) || this.areConnectedAlready(sourceNode, sinkNode)) {\n                        this.ignoredConnections.push(conn);\n                        continue;\n                    }\n\n                    if (sourceNode === null || sinkNode === null) {\n                        throw \"A shape was not mapped to a node.\";\n                    }\n                    if (this.options.ignoreContainers) {\n                        // much like a floating connection here since at least one end is attached to a container\n                        if (sourceNode.isVirtual || sinkNode.isVirtual) {\n                            this.ignoredConnections.push(conn);\n                            continue;\n                        }\n                        var newEdge = new Link(sourceNode, sinkNode, conn.id, conn);\n\n                        this.edgeMap.add(conn.id, newEdge);\n                        this.edges.push(newEdge);\n                    }\n                    else {\n                        throw \"Containers are not supported yet, but stay tuned.\";\n                    }\n                }\n            },\n\n            areConnectedAlready: function(n, m) {\n                return Utils.any(this.edges, function(l) {\n                    return l.source === n && l.target === m || l.source === m && l.target === n;\n                });\n            }\n\n            /**\n             * Depth-first traversal of the given container.\n             * @param container\n             * @param action\n             * @param includeStart\n             * @private\n             */\n            /* _visitContainer: function (container, action, includeStart) {\n\n             *//*if (container == null) throw new ArgumentNullException(\"container\");\n             if (action == null) throw new ArgumentNullException(\"action\");\n             if (includeStart) action(container);\n             if (container.children.isEmpty()) return;\n             foreach(\n             var item\n             in\n             container.children.OfType < IShape > ()\n             )\n             {\n             var childContainer = item\n             as\n             IContainerShape;\n             if (childContainer != null) this.VisitContainer(childContainer, action);\n             else action(item);\n             }*//*\n             }*/\n\n\n        });\n\n        /**\n         * The classic spring-embedder (aka force-directed, Fruchterman-Rheingold, barycentric) algorithm.\n         * http://en.wikipedia.org/wiki/Force-directed_graph_drawing\n         *  - Chapter 12 of Tamassia et al. \"Handbook of graph drawing and visualization\".\n         *  - Kobourov on preprint arXiv; http://arxiv.org/pdf/1201.3011.pdf\n         *  - Fruchterman and Rheingold in SOFTWARE-PRACTICE AND EXPERIENCE, VOL. 21(1 1), 1129-1164 (NOVEMBER 1991)\n         * @type {*}\n         */\n        var SpringLayout = LayoutBase.extend({\n            init: function(diagram) {\n                var that = this;\n                LayoutBase.fn.init.call(that);\n                if (Utils.isUndefined(diagram)) {\n                    throw \"Diagram is not specified.\";\n                }\n                this.diagram = diagram;\n            },\n\n            layout: function(options) {\n\n                this.transferOptions(options);\n\n                var adapter = new DiagramToHyperTreeAdapter(this.diagram);\n                var graph = adapter.convert(options);\n                if (graph.isEmpty()) {\n                    return;\n                }\n                // split into connected components\n                var components = graph.getConnectedComponents();\n                if (Utils.isEmpty(components)) {\n                    return;\n                }\n                for (var i = 0; i < components.length; i++) {\n                    var component = components[i];\n                    this.layoutGraph(component, options);\n                }\n                var finalNodeSet = this.gridLayoutComponents(components);\n                return new diagram.LayoutState(this.diagram, finalNodeSet);\n            },\n\n            layoutGraph: function(graph, options) {\n\n                if (Utils.isDefined(options)) {\n                    this.transferOptions(options);\n                }\n                this.graph = graph;\n\n                var initialTemperature = this.options.nodeDistance * 9;\n                this.temperature = initialTemperature;\n\n                var guessBounds = this._expectedBounds();\n                this.width = guessBounds.width;\n                this.height = guessBounds.height;\n\n                for (var step = 0; step < this.options.iterations; step++) {\n                    this.refineStage = step >= this.options.iterations * 5 / 6;\n                    this.tick();\n                    // exponential cooldown\n                    this.temperature = this.refineStage ?\n                        initialTemperature / 30 :\n                        initialTemperature * (1 - step / (2 * this.options.iterations ));\n                }\n            },\n\n            /**\n             * Single iteration of the simulation.\n             */\n            tick: function() {\n                var i;\n                // collect the repulsive forces on each node\n                for (i = 0; i < this.graph.nodes.length; i++) {\n                    this._repulsion(this.graph.nodes[i]);\n                }\n\n                // collect the attractive forces on each node\n                for (i = 0; i < this.graph.links.length; i++) {\n                    this._attraction(this.graph.links[i]);\n                }\n                // update the positions\n                for (i = 0; i < this.graph.nodes.length; i++) {\n                    var node = this.graph.nodes[i];\n                    var offset = Math.sqrt(node.dx * node.dx + node.dy * node.dy);\n                    if (offset === 0) {\n                        return;\n                    }\n                    node.x += Math.min(offset, this.temperature) * node.dx / offset;\n                    node.y += Math.min(offset, this.temperature) * node.dy / offset;\n                    if (this.options.limitToView) {\n                        node.x = Math.min(this.width, Math.max(node.width / 2, node.x));\n                        node.y = Math.min(this.height, Math.max(node.height / 2, node.y));\n                    }\n                }\n            },\n\n            /**\n             * Shakes the node away from its current position to escape the deadlock.\n             * @param node A Node.\n             * @private\n             */\n            _shake: function(node) {\n                // just a simple polar neighborhood\n                var rho = Math.random() * this.options.nodeDistance / 4;\n                var alpha = Math.random() * 2 * Math.PI;\n                node.x += rho * Math.cos(alpha);\n                node.y -= rho * Math.sin(alpha);\n            },\n\n            /**\n             * The typical Coulomb-Newton force law F=k/r^2\n             * @remark This only works in dimensions less than three.\n             * @param d\n             * @param n A Node.\n             * @param m Another Node.\n             * @returns {number}\n             * @private\n             */\n            _InverseSquareForce: function(d, n, m) {\n                var force;\n                if (!this.refineStage) {\n                    force = Math.pow(d, 2) / Math.pow(this.options.nodeDistance, 2);\n                }\n                else {\n                    var deltax = n.x - m.x;\n                    var deltay = n.y - m.y;\n\n                    var wn = n.width / 2;\n                    var hn = n.height / 2;\n                    var wm = m.width / 2;\n                    var hm = m.height / 2;\n\n                    force = (Math.pow(deltax, 2) / Math.pow(wn + wm + this.options.nodeDistance, 2)) + (Math.pow(deltay, 2) / Math.pow(hn + hm + this.options.nodeDistance, 2));\n                }\n                return force * 4 / 3;\n            },\n\n            /**\n             * The typical Hooke force law F=kr^2\n             * @param d\n             * @param n\n             * @param m\n             * @returns {number}\n             * @private\n             */\n            _SquareForce: function(d, n, m) {\n                return 1 / this._InverseSquareForce(d, n, m);\n            },\n\n            _repulsion: function(n) {\n                n.dx = 0;\n                n.dy = 0;\n                Utils.forEach(this.graph.nodes, function(m) {\n                    if (m === n) {\n                        return;\n                    }\n                    while (n.x === m.x && n.y === m.y) {\n                        this._shake(m);\n                    }\n                    var vx = n.x - m.x;\n                    var vy = n.y - m.y;\n                    var distance = Math.sqrt(vx * vx + vy * vy);\n                    var r = this._SquareForce(distance, n, m) * 2;\n                    n.dx += (vx / distance) * r;\n                    n.dy += (vy / distance) * r;\n                }, this);\n            },\n            _attraction: function(link) {\n                var t = link.target;\n                var s = link.source;\n                if (s === t) {\n                    // loops induce endless shakes\n                    return;\n                }\n                while (s.x === t.x && s.y === t.y) {\n                    this._shake(t);\n                }\n\n                var vx = s.x - t.x;\n                var vy = s.y - t.y;\n                var distance = Math.sqrt(vx * vx + vy * vy);\n\n                var a = this._InverseSquareForce(distance, s, t) * 5;\n                var dx = (vx / distance) * a;\n                var dy = (vy / distance) * a;\n                t.dx += dx;\n                t.dy += dy;\n                s.dx -= dx;\n                s.dy -= dy;\n            },\n\n            /**\n             * Calculates the expected bounds after layout.\n             * @returns {*}\n             * @private\n             */\n            _expectedBounds: function() {\n\n                var size, N = this.graph.nodes.length, /*golden ration optimal?*/ ratio = 1.5, multiplier = 4;\n                if (N === 0) {\n                    return size;\n                }\n                size = Utils.fold(this.graph.nodes, function(s, node) {\n                    var area = node.width * node.height;\n                    if (area > 0) {\n                        s += Math.sqrt(area);\n                        return s;\n                    }\n                    return 0;\n                }, 0, this);\n                var av = size / N;\n                var squareSize = av * Math.ceil(Math.sqrt(N));\n                var width = squareSize * Math.sqrt(ratio);\n                var height = squareSize / Math.sqrt(ratio);\n                return { width: width * multiplier, height: height * multiplier };\n            }\n\n        });\n\n        var TreeLayoutProcessor = kendo.Class.extend({\n\n            init: function(options) {\n                this.center = null;\n                this.options = options;\n            },\n            layout: function(treeGraph, root) {\n                this.graph = treeGraph;\n                if (!this.graph.nodes || this.graph.nodes.length === 0) {\n                    return;\n                }\n\n                if (!contains(this.graph.nodes, root)) {\n                    throw \"The given root is not in the graph.\";\n                }\n\n                this.center = root;\n                this.graph.cacheRelationships();\n                /* var nonull = this.graph.nodes.where(function (n) {\n                 return n.associatedShape != null;\n                 });*/\n\n                // transfer the rects\n                /*nonull.forEach(function (n) {\n                 n.Location = n.associatedShape.Position;\n                 n.NodeSize = n.associatedShape.ActualBounds.ToSize();\n                 }\n\n                 );*/\n\n                // caching the children\n                /* nonull.forEach(function (n) {\n                 n.children = n.getChildren();\n                 });*/\n\n                this.layoutSwitch();\n\n                // apply the layout to the actual visuals\n                // nonull.ForEach(n => n.associatedShape.Position = n.Location);\n            },\n\n            layoutLeft: function(left) {\n                this.setChildrenDirection(this.center, \"Left\", false);\n                this.setChildrenLayout(this.center, \"Default\", false);\n                var h = 0, w = 0, y, i, node;\n                for (i = 0; i < left.length; i++) {\n                    node = left[i];\n                    node.TreeDirection = \"Left\";\n                    var s = this.measure(node, Size.Empty);\n                    w = Math.max(w, s.Width);\n                    h += s.height + this.options.verticalSeparation;\n                }\n\n                h -= this.options.verticalSeparation;\n                var x = this.center.x - this.options.horizontalSeparation;\n                y = this.center.y + ((this.center.height - h) / 2);\n                for (i = 0; i < left.length; i++) {\n                    node = left[i];\n                    var p = new Point(x - node.Size.width, y);\n\n                    this.arrange(node, p);\n                    y += node.Size.height + this.options.verticalSeparation;\n                }\n            },\n\n            layoutRight: function(right) {\n                this.setChildrenDirection(this.center, \"Right\", false);\n                this.setChildrenLayout(this.center, \"Default\", false);\n                var h = 0, w = 0, y, i, node;\n                for (i = 0; i < right.length; i++) {\n                    node = right[i];\n                    node.TreeDirection = \"Right\";\n                    var s = this.measure(node, Size.Empty);\n                    w = Math.max(w, s.Width);\n                    h += s.height + this.options.verticalSeparation;\n                }\n\n                h -= this.options.verticalSeparation;\n                var x = this.center.x + this.options.horizontalSeparation + this.center.width;\n                y = this.center.y + ((this.center.height - h) / 2);\n                for (i = 0; i < right.length; i++) {\n                    node = right[i];\n                    var p = new Point(x, y);\n                    this.arrange(node, p);\n                    y += node.Size.height + this.options.verticalSeparation;\n                }\n            },\n\n            layoutUp: function(up) {\n                this.setChildrenDirection(this.center, \"Up\", false);\n                this.setChildrenLayout(this.center, \"Default\", false);\n                var w = 0, y, node, i;\n                for (i = 0; i < up.length; i++) {\n                    node = up[i];\n                    node.TreeDirection = \"Up\";\n                    var s = this.measure(node, Size.Empty);\n                    w += s.width + this.options.horizontalSeparation;\n                }\n\n                w -= this.options.horizontalSeparation;\n                var x = this.center.x + (this.center.width / 2) - (w / 2);\n\n                // y = this.center.y -verticalSeparation -this.center.height/2 - h;\n                for (i = 0; i < up.length; i++) {\n                    node = up[i];\n                    y = this.center.y - this.options.verticalSeparation - node.Size.height;\n                    var p = new Point(x, y);\n                    this.arrange(node, p);\n                    x += node.Size.width + this.options.horizontalSeparation;\n                }\n            },\n\n            layoutDown: function(down) {\n                var node, i;\n                this.setChildrenDirection(this.center, \"Down\", false);\n                this.setChildrenLayout(this.center, \"Default\", false);\n                var w = 0, y;\n                for (i = 0; i < down.length; i++) {\n                    node = down[i];\n                    node.treeDirection = \"Down\";\n                    var s = this.measure(node, Size.Empty);\n                    w += s.width + this.options.horizontalSeparation;\n                }\n\n                w -= this.options.horizontalSeparation;\n                var x = this.center.x + (this.center.width / 2) - (w / 2);\n                y = this.center.y + this.options.verticalSeparation + this.center.height;\n                for (i = 0; i < down.length; i++) {\n                    node = down[i];\n                    var p = new Point(x, y);\n                    this.arrange(node, p);\n                    x += node.Size.width + this.options.horizontalSeparation;\n                }\n            },\n\n            layoutRadialTree: function() {\n                // var rmax = children.Aggregate(0D, (current, node) => Math.max(node.SectorAngle, current));\n                this.setChildrenDirection(this.center, \"Radial\", false);\n                this.setChildrenLayout(this.center, \"Default\", false);\n                this.previousRoot = null;\n                var startAngle = this.options.startRadialAngle * DEG_TO_RAD;\n                var endAngle = this.options.endRadialAngle * DEG_TO_RAD;\n                if (endAngle <= startAngle) {\n                    throw \"Final angle should not be less than the start angle.\";\n                }\n\n                this.maxDepth = 0;\n                this.origin = new Point(this.center.x, this.center.y);\n                this.calculateAngularWidth(this.center, 0);\n\n                // perform the layout\n                if (this.maxDepth > 0) {\n                    this.radialLayout(this.center, this.options.radialFirstLevelSeparation, startAngle, endAngle);\n                }\n\n                // update properties of the root node\n                this.center.Angle = endAngle - startAngle;\n            },\n\n            tipOverTree: function(down, startFromLevel) {\n                if (Utils.isUndefined(startFromLevel)) {\n                    startFromLevel = 0;\n                }\n\n                this.setChildrenDirection(this.center, \"Down\", false);\n                this.setChildrenLayout(this.center, \"Default\", false);\n                this.setChildrenLayout(this.center, \"Underneath\", false, startFromLevel);\n                var w = 0, y, node, i;\n                for (i = 0; i < down.length; i++) {\n                    node = down[i];\n\n                    // if (node.IsSpecial) continue;\n                    node.TreeDirection = \"Down\";\n                    var s = this.measure(node, Size.Empty);\n                    w += s.width + this.options.horizontalSeparation;\n                }\n\n                w -= this.options.horizontalSeparation;\n\n                // putting the root in the center with respect to the whole diagram is not a nice result, let's put it with respect to the first level only\n                w -= down[down.length - 1].width;\n                w += down[down.length - 1].associatedShape.bounds().width;\n\n                var x = this.center.x + (this.center.width / 2) - (w / 2);\n                y = this.center.y + this.options.verticalSeparation + this.center.height;\n                for (i = 0; i < down.length; i++) {\n                    node = down[i];\n                    // if (node.IsSpecial) continue;\n                    var p = new Point(x, y);\n                    this.arrange(node, p);\n                    x += node.Size.width + this.options.horizontalSeparation;\n                }\n\n                /*//let's place the special node, assuming there is only one\n                 if (down.Count(n => n.IsSpecial) > 0)\n                 {\n                 var special = (from n in down where n.IsSpecial select n).First();\n                 if (special.Children.Count > 0)\n                 throw new DiagramException(\"The 'special' element should not have children.\");\n                 special.Data.Location = new Point(Center.Data.Location.X + Center.AssociatedShape.BoundingRectangle.Width + this.options.HorizontalSeparation, Center.Data.Location.Y);\n                 }*/\n            },\n            calculateAngularWidth: function(n, d) {\n                if (d > this.maxDepth) {\n                    this.maxDepth = d;\n                }\n\n                var aw = 0, w = 1000, h = 1000, diameter = d === 0 ? 0 : Math.sqrt((w * w) + (h * h)) / d;\n\n                if (n.children.length > 0) {\n                    // eventually with n.IsExpanded\n                    for (var i = 0, len = n.children.length; i < len; i++) {\n                        var child = n.children[i];\n                        aw += this.calculateAngularWidth(child, d + 1);\n                    }\n                    aw = Math.max(diameter, aw);\n                }\n                else {\n                    aw = diameter;\n                }\n\n                n.sectorAngle = aw;\n                return aw;\n            },\n            sortChildren: function(n) {\n                var basevalue = 0, i;\n\n                // update basevalue angle for node ordering\n                if (n.parents.length > 1) {\n                    throw \"Node is not part of a tree.\";\n                }\n                var p = n.parents[0];\n                if (p) {\n                    var pl = new Point(p.x, p.y);\n                    var nl = new Point(n.x, n.y);\n                    basevalue = this.normalizeAngle(Math.atan2(pl.y - nl.y, pl.x - nl.x));\n                }\n\n                var count = n.children.length;\n                if (count === 0) {\n                    return null;\n                }\n\n                var angle = [];\n                var idx = [];\n\n                for (i = 0; i < count; ++i) {\n                    var c = n.children[i];\n                    var l = new Point(c.x, c.y);\n                    idx[i] = i;\n                    angle[i] = this.normalizeAngle(-basevalue + Math.atan2(l.y - l.y, l.x - l.x));\n                }\n\n                Utils.bisort(angle, idx);\n                var col = []; // list of nodes\n                var children = n.children;\n                for (i = 0; i < count; ++i) {\n                    col.push(children[idx[i]]);\n                }\n\n                return col;\n            },\n\n            normalizeAngle: function(angle) {\n                while (angle > Math.PI * 2) {\n                    angle -= 2 * Math.PI;\n                }\n                while (angle < 0) {\n                    angle += Math.PI * 2;\n                }\n                return angle;\n            },\n            radialLayout: function(node, radius, startAngle, endAngle) {\n                var deltaTheta = endAngle - startAngle;\n                var deltaThetaHalf = deltaTheta / 2.0;\n                var parentSector = node.sectorAngle;\n                var fraction = 0;\n                var sorted = this.sortChildren(node);\n                for (var i = 0, len = sorted.length; i < len; i++) {\n                    var childNode = sorted[i];\n                    var cp = childNode;\n                    var childAngleFraction = cp.sectorAngle / parentSector;\n                    if (childNode.children.length > 0) {\n                        this.radialLayout(childNode,\n                            radius + this.options.radialSeparation,\n                            startAngle + (fraction * deltaTheta),\n                            startAngle + ((fraction + childAngleFraction) * deltaTheta));\n                    }\n\n                    this.setPolarLocation(childNode, radius, startAngle + (fraction * deltaTheta) + (childAngleFraction * deltaThetaHalf));\n                    cp.angle = childAngleFraction * deltaTheta;\n                    fraction += childAngleFraction;\n                }\n            },\n            setPolarLocation: function(node, radius, angle) {\n                node.x = this.origin.x + (radius * Math.cos(angle));\n                node.y = this.origin.y + (radius * Math.sin(angle));\n                node.BoundingRectangle = new Rect(node.x, node.y, node.width, node.height);\n            },\n\n            /**\n             * Sets the children direction recursively.\n             * @param node\n             * @param direction\n             * @param includeStart\n             */\n            setChildrenDirection: function(node, direction, includeStart) {\n                var rootDirection = node.treeDirection;\n                this.graph.depthFirstTraversal(node, function(n) {\n                    n.treeDirection = direction;\n                });\n                if (!includeStart) {\n                    node.treeDirection = rootDirection;\n                }\n            },\n\n            /**\n             * Sets the children layout recursively.\n             * @param node\n             * @param layout\n             * @param includeStart\n             * @param startFromLevel\n             */\n            setChildrenLayout: function(node, layout, includeStart, startFromLevel) {\n                if (Utils.isUndefined(startFromLevel)) {\n                    startFromLevel = 0;\n                }\n                var rootLayout = node.childrenLayout;\n                if (startFromLevel > 0) {\n                    // assign levels to the Node.Level property\n                    this.graph.assignLevels(node);\n\n                    // assign the layout on the condition that the level is at least the 'startFromLevel'\n                    this.graph.depthFirstTraversal(\n                        node, function(s) {\n                            if (s.level >= startFromLevel + 1) {\n                                s.childrenLayout = layout;\n                            }\n                        }\n                    );\n                }\n                else {\n                    this.graph.depthFirstTraversal(node, function(s) {\n                        s.childrenLayout = layout;\n                    });\n\n                    // if the start should not be affected we put the state back\n                    if (!includeStart) {\n                        node.childrenLayout = rootLayout;\n                    }\n                }\n            },\n\n            /**\n             * Returns the actual size of the node. The given size is the allowed space wherein the node can lay out itself.\n             * @param node\n             * @param givenSize\n             * @returns {Size}\n             */\n            measure: function(node, givenSize) {\n                var w = 0, h = 0, s;\n                var result = new Size(0, 0);\n                if (!node) {\n                    throw \"\";\n                }\n                var b = node.associatedShape.bounds();\n                var shapeWidth = b.width;\n                var shapeHeight = b.height;\n                if (node.parents.length !== 1) {\n                    throw \"Node not in a spanning tree.\";\n                }\n\n                var parent = node.parents[0];\n                if (node.treeDirection === \"Undefined\") {\n                    node.treeDirection = parent.treeDirection;\n                }\n\n                if (Utils.isEmpty(node.children)) {\n                    result = new Size(\n                        Math.abs(shapeWidth) < EPSILON ? 50 : shapeWidth,\n                        Math.abs(shapeHeight) < EPSILON ? 25 : shapeHeight);\n                }\n                else if (node.children.length === 1) {\n                    switch (node.treeDirection) {\n                        case \"Radial\":\n                            s = this.measure(node.children[0], givenSize); // child size\n                            w = shapeWidth + (this.options.radialSeparation * Math.cos(node.AngleToParent)) + s.width;\n                            h = shapeHeight + Math.abs(this.options.radialSeparation * Math.sin(node.AngleToParent)) + s.height;\n                            break;\n                        case \"Left\":\n                        case \"Right\":\n                            switch (node.childrenLayout) {\n\n                                case \"TopAlignedWithParent\":\n                                    break;\n\n                                case \"BottomAlignedWithParent\":\n                                    break;\n\n                                case \"Underneath\":\n                                    s = this.measure(node.children[0], givenSize);\n                                    w = shapeWidth + s.width + this.options.underneathHorizontalOffset;\n                                    h = shapeHeight + this.options.underneathVerticalTopOffset + s.height;\n                                    break;\n\n                                case \"Default\":\n                                    s = this.measure(node.children[0], givenSize);\n                                    w = shapeWidth + this.options.horizontalSeparation + s.width;\n                                    h = Math.max(shapeHeight, s.height);\n                                    break;\n\n                                default:\n                                    throw \"Unhandled TreeDirection in the Radial layout measuring.\";\n                            }\n                            break;\n                        case \"Up\":\n                        case \"Down\":\n                            switch (node.childrenLayout) {\n\n                                case \"TopAlignedWithParent\":\n                                case \"BottomAlignedWithParent\":\n                                    break;\n\n                                case \"Underneath\":\n                                    s = this.measure(node.children[0], givenSize);\n                                    w = Math.max(shapeWidth, s.width + this.options.underneathHorizontalOffset);\n                                    h = shapeHeight + this.options.underneathVerticalTopOffset + s.height;\n                                    break;\n\n                                case \"Default\":\n                                    s = this.measure(node.children[0], givenSize);\n                                    h = shapeHeight + this.options.verticalSeparation + s.height;\n                                    w = Math.max(shapeWidth, s.width);\n                                    break;\n\n                                default:\n                                    throw \"Unhandled TreeDirection in the Down layout measuring.\";\n                            }\n                            break;\n                        default:\n                            throw \"Unhandled TreeDirection in the layout measuring.\";\n                    }\n\n                    result = new Size(w, h);\n                }\n                else {\n                    var i, childNode;\n                    switch (node.treeDirection) {\n                        case \"Left\":\n                        case \"Right\":\n                            switch (node.childrenLayout) {\n\n                                case \"TopAlignedWithParent\":\n                                case \"BottomAlignedWithParent\":\n                                    break;\n\n                                case \"Underneath\":\n                                    w = shapeWidth;\n                                    h = shapeHeight + this.options.underneathVerticalTopOffset;\n                                    for (i = 0; i < node.children.length; i++) {\n                                        childNode = node.children[i];\n                                        s = this.measure(childNode, givenSize);\n                                        w = Math.max(w, s.width + this.options.underneathHorizontalOffset);\n                                        h += s.height + this.options.underneathVerticalSeparation;\n                                    }\n\n                                    h -= this.options.underneathVerticalSeparation;\n                                    break;\n\n                                case \"Default\":\n                                    w = shapeWidth;\n                                    h = 0;\n                                    for (i = 0; i < node.children.length; i++) {\n                                        childNode = node.children[i];\n                                        s = this.measure(childNode, givenSize);\n                                        w = Math.max(w, shapeWidth + this.options.horizontalSeparation + s.width);\n                                        h += s.height + this.options.verticalSeparation;\n                                    }\n                                    h -= this.options.verticalSeparation;\n                                    break;\n\n                                default:\n                                    throw \"Unhandled TreeDirection in the Right layout measuring.\";\n                            }\n\n                            break;\n                        case \"Up\":\n                        case \"Down\":\n\n                            switch (node.childrenLayout) {\n\n                                case \"TopAlignedWithParent\":\n                                case \"BottomAlignedWithParent\":\n                                    break;\n\n                                case \"Underneath\":\n                                    w = shapeWidth;\n                                    h = shapeHeight + this.options.underneathVerticalTopOffset;\n                                    for (i = 0; i < node.children.length; i++) {\n                                        childNode = node.children[i];\n                                        s = this.measure(childNode, givenSize);\n                                        w = Math.max(w, s.width + this.options.underneathHorizontalOffset);\n                                        h += s.height + this.options.underneathVerticalSeparation;\n                                    }\n\n                                    h -= this.options.underneathVerticalSeparation;\n                                    break;\n\n                                case \"Default\":\n                                    w = 0;\n                                    h = 0;\n                                    for (i = 0; i < node.children.length; i++) {\n                                        childNode = node.children[i];\n                                        s = this.measure(childNode, givenSize);\n                                        w += s.width + this.options.horizontalSeparation;\n                                        h = Math.max(h, s.height + this.options.verticalSeparation + shapeHeight);\n                                    }\n\n                                    w -= this.options.horizontalSeparation;\n                                    break;\n\n                                default:\n                                    throw \"Unhandled TreeDirection in the Down layout measuring.\";\n                            }\n\n                            break;\n                        default:\n                            throw \"Unhandled TreeDirection in the layout measuring.\";\n                    }\n\n                    result = new Size(w, h);\n                }\n\n                node.SectorAngle = Math.sqrt((w * w / 4) + (h * h / 4));\n                node.Size = result;\n                return result;\n            },\n            arrange: function(n, p) {\n                var i, pp, child, node, childrenwidth, b = n.associatedShape.bounds();\n                var shapeWidth = b.width;\n                var shapeHeight = b.height;\n                if (Utils.isEmpty(n.children)) {\n                    n.x = p.x;\n                    n.y = p.y;\n                    n.BoundingRectangle = new Rect(p.x, p.y, shapeWidth, shapeHeight);\n                }\n                else {\n                    var x, y;\n                    var selfLocation;\n                    switch (n.treeDirection) {\n                        case \"Left\":\n                            switch (n.childrenLayout) {\n                                case \"TopAlignedWithParent\":\n                                case \"BottomAlignedWithParent\":\n                                    break;\n\n                                case \"Underneath\":\n                                    selfLocation = p;\n                                    n.x = selfLocation.x;\n                                    n.y = selfLocation.y;\n                                    n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n                                    y = p.y + shapeHeight + this.options.underneathVerticalTopOffset;\n                                    for (i = 0; i < node.children.length; i++) {\n                                        node = node.children[i];\n                                        x = selfLocation.x - node.associatedShape.width - this.options.underneathHorizontalOffset;\n                                        pp = new Point(x, y);\n                                        this.arrange(node, pp);\n                                        y += node.Size.height + this.options.underneathVerticalSeparation;\n                                    }\n                                    break;\n\n                                case \"Default\":\n                                    selfLocation = new Point(p.x + n.Size.width - shapeWidth, p.y + ((n.Size.height - shapeHeight) / 2));\n                                    n.x = selfLocation.x;\n                                    n.y = selfLocation.y;\n                                    n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n                                    x = selfLocation.x - this.options.horizontalSeparation; // alignment of children\n                                    y = p.y;\n                                    for (i = 0; i < n.children.length; i++) {\n                                        node = n.children[i];\n                                        pp = new Point(x - node.Size.width, y);\n                                        this.arrange(node, pp);\n                                        y += node.Size.height + this.options.verticalSeparation;\n                                    }\n                                    break;\n\n                                default:\n                                    throw \"Unsupported TreeDirection\";\n                            }\n\n                            break;\n                        case \"Right\":\n                            switch (n.childrenLayout) {\n                                case \"TopAlignedWithParent\":\n                                case \"BottomAlignedWithParent\":\n                                    break;\n\n                                case \"Underneath\":\n                                    selfLocation = p;\n                                    n.x = selfLocation.x;\n                                    n.y = selfLocation.y;\n                                    n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n                                    x = p.x + shapeWidth + this.options.underneathHorizontalOffset;\n\n                                    // alignment of children left-underneath the parent\n                                    y = p.y + shapeHeight + this.options.underneathVerticalTopOffset;\n                                    for (i = 0; i < n.children.length; i++) {\n                                        node = n.children[i];\n                                        pp = new Point(x, y);\n                                        this.arrange(node, pp);\n                                        y += node.Size.height + this.options.underneathVerticalSeparation;\n                                    }\n\n                                    break;\n\n                                case \"Default\":\n                                    selfLocation = new Point(p.x, p.y + ((n.Size.height - shapeHeight) / 2));\n                                    n.x = selfLocation.x;\n                                    n.y = selfLocation.y;\n                                    n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n                                    x = p.x + shapeWidth + this.options.horizontalSeparation; // alignment of children\n                                    y = p.y;\n                                    for (i = 0; i < n.children.length; i++) {\n                                        node = n.children[i];\n                                        pp = new Point(x, y);\n                                        this.arrange(node, pp);\n                                        y += node.Size.height + this.options.verticalSeparation;\n                                    }\n                                    break;\n\n                                default:\n                                    throw \"Unsupported TreeDirection\";\n                            }\n\n                            break;\n                        case \"Up\":\n                            selfLocation = new Point(p.x + ((n.Size.width - shapeWidth) / 2), p.y + n.Size.height - shapeHeight);\n                            n.x = selfLocation.x;\n                            n.y = selfLocation.y;\n                            n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n                            if (Math.abs(selfLocation.x - p.x) < EPSILON) {\n                                childrenwidth = 0;\n                                // means there is an aberration due to the oversized Element with respect to the children\n                                for (i = 0; i < n.children.length; i++) {\n                                    child = n.children[i];\n                                    childrenwidth += child.Size.width + this.options.horizontalSeparation;\n                                }\n                                childrenwidth -= this.options.horizontalSeparation;\n                                x = p.x + ((shapeWidth - childrenwidth) / 2);\n                            }\n                            else {\n                                x = p.x;\n                            }\n\n                            for (i = 0; i < n.children.length; i++) {\n                                node = n.children[i];\n                                y = selfLocation.y - this.options.verticalSeparation - node.Size.height;\n                                pp = new Point(x, y);\n                                this.arrange(node, pp);\n                                x += node.Size.width + this.options.horizontalSeparation;\n                            }\n                            break;\n\n                        case \"Down\":\n\n                            switch (n.childrenLayout) {\n                                case \"TopAlignedWithParent\":\n                                case \"BottomAlignedWithParent\":\n                                    break;\n                                case \"Underneath\":\n                                    selfLocation = p;\n                                    n.x = selfLocation.x;\n                                    n.y = selfLocation.y;\n                                    n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n                                    x = p.x + this.options.underneathHorizontalOffset; // alignment of children left-underneath the parent\n                                    y = p.y + shapeHeight + this.options.underneathVerticalTopOffset;\n                                    for (i = 0; i < n.children.length; i++) {\n                                        node = n.children[i];\n                                        pp = new Point(x, y);\n                                        this.arrange(node, pp);\n                                        y += node.Size.height + this.options.underneathVerticalSeparation;\n                                    }\n                                    break;\n\n                                case \"Default\":\n                                    selfLocation = new Point(p.x + ((n.Size.width - shapeWidth) / 2), p.y);\n                                    n.x = selfLocation.x;\n                                    n.y = selfLocation.y;\n                                    n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n                                    if (Math.abs(selfLocation.x - p.x) < EPSILON) {\n                                        childrenwidth = 0;\n                                        // means there is an aberration due to the oversized Element with respect to the children\n                                        for (i = 0; i < n.children.length; i++) {\n                                            child = n.children[i];\n                                            childrenwidth += child.Size.width + this.options.horizontalSeparation;\n                                        }\n\n                                        childrenwidth -= this.options.horizontalSeparation;\n                                        x = p.x + ((shapeWidth - childrenwidth) / 2);\n                                    }\n                                    else {\n                                        x = p.x;\n                                    }\n\n                                    for (i = 0; i < n.children.length; i++) {\n                                        node = n.children[i];\n                                        y = selfLocation.y + this.options.verticalSeparation + shapeHeight;\n                                        pp = new Point(x, y);\n                                        this.arrange(node, pp);\n                                        x += node.Size.width + this.options.horizontalSeparation;\n                                    }\n                                    break;\n\n                                default:\n                                    throw \"Unsupported TreeDirection\";\n                            }\n                            break;\n\n                        case \"None\":\n                            break;\n\n                        default:\n                            throw \"Unsupported TreeDirection\";\n                    }\n                }\n            },\n            layoutSwitch: function() {\n                if (!this.center) {\n                    return;\n                }\n\n                if (Utils.isEmpty(this.center.children)) {\n                    return;\n                }\n\n                var type = this.options.subtype;\n                if (Utils.isUndefined(type)) {\n                    type = \"Down\";\n                }\n                var single, male, female, leftcount;\n                var children = this.center.children;\n                switch (type.toLowerCase()) {\n                    case \"radial\":\n                    case \"radialtree\":\n                        this.layoutRadialTree();\n                        break;\n\n                    case \"mindmaphorizontal\":\n                    case \"mindmap\":\n                        single = this.center.children;\n\n                        if (this.center.children.length === 1) {\n                            this.layoutRight(single);\n                        }\n                        else {\n                            // odd number will give one more at the right\n                            leftcount = children.length / 2;\n                            male = grep(this.center.children, function(n) {\n                                return Utils.indexOf(children, n) < leftcount;\n                            });\n                            female = grep(this.center.children, function(n) {\n                                return Utils.indexOf(children, n) >= leftcount;\n                            });\n\n                            this.layoutLeft(male);\n                            this.layoutRight(female);\n                        }\n                        break;\n\n                    case \"mindmapvertical\":\n                        single = this.center.children;\n\n                        if (this.center.children.length === 1) {\n                            this.layoutDown(single);\n                        }\n                        else {\n                            // odd number will give one more at the right\n                            leftcount = children.length / 2;\n                            male = grep(this.center.children, function(n) {\n                                return Utils.indexOf(children, n) < leftcount;\n                            });\n                            female = grep(this.center.children, function(n) {\n                                return Utils.indexOf(children, n) >= leftcount;\n                            });\n                            this.layoutUp(male);\n                            this.layoutDown(female);\n                        }\n                        break;\n\n                    case \"right\":\n                        this.layoutRight(this.center.children);\n                        break;\n\n                    case \"left\":\n                        this.layoutLeft(this.center.children);\n                        break;\n\n                    case \"up\":\n                    case \"bottom\":\n                        this.layoutUp(this.center.children);\n                        break;\n\n                    case \"down\":\n                    case \"top\":\n                        this.layoutDown(this.center.children);\n                        break;\n\n                    case \"tipover\":\n                    case \"tipovertree\":\n                        if (this.options.tipOverTreeStartLevel < 0) {\n                            throw \"The tip-over level should be a positive integer.\";\n                        }\n                        this.tipOverTree(this.center.children, this.options.tipOverTreeStartLevel);\n                        break;\n\n                    case \"undefined\":\n                    case \"none\":\n                        break;\n                }\n            }\n        });\n\n        /**\n         * The various tree layout algorithms.\n         * @type {*}\n         */\n        var TreeLayout = LayoutBase.extend({\n            init: function(diagram) {\n                var that = this;\n                LayoutBase.fn.init.call(that);\n                if (Utils.isUndefined(diagram)) {\n                    throw \"No diagram specified.\";\n                }\n                this.diagram = diagram;\n            },\n\n            /**\n             * Arranges the diagram in a tree-layout with the specified options and tree subtype.\n             */\n            layout: function(options) {\n\n                this.transferOptions(options);\n\n                // transform the diagram into a Graph\n                var adapter = new DiagramToHyperTreeAdapter(this.diagram);\n\n                /**\n                 * The Graph reduction from the given diagram.\n                 * @type {*}\n                 */\n                this.graph = adapter.convert();\n\n                var finalNodeSet = this.layoutComponents();\n\n                // note that the graph contains the original data and\n                // the components are another instance of nodes referring to the same set of shapes\n                return new diagram.LayoutState(this.diagram, finalNodeSet);\n            },\n\n            layoutComponents: function() {\n                if (this.graph.isEmpty()) {\n                    return;\n                }\n\n                // split into connected components\n                var components = this.graph.getConnectedComponents();\n                if (Utils.isEmpty(components)) {\n                    return;\n                }\n\n                var layout = new TreeLayoutProcessor(this.options);\n                var trees = [];\n                // find a spanning tree for each component\n                for (var i = 0; i < components.length; i++) {\n                    var component = components[i];\n\n                    var treeGraph = this.getTree(component);\n                    if (!treeGraph) {\n                        throw \"Failed to find a spanning tree for the component.\";\n                    }\n                    var root = treeGraph.root;\n                    var tree = treeGraph.tree;\n                    layout.layout(tree, root);\n\n                    trees.push(tree);\n                }\n\n                return this.gridLayoutComponents(trees);\n\n            },\n\n            /**\n             * Gets a spanning tree (and root) for the given graph.\n             * Ensure that the given graph is connected!\n             * @param graph\n             * @returns {*} A literal object consisting of the found root and the spanning tree.\n             */\n            getTree: function(graph) {\n                var root = null;\n                if (this.options.roots && this.options.roots.length > 0) {\n                    for (var i = 0, len = graph.nodes.length; i < len; i++) {\n                        var node = graph.nodes[i];\n                        for (var j = 0; j < this.options.roots.length; j++) {\n                            var givenRootShape = this.options.roots[j];\n                            if (givenRootShape === node.associatedShape) {\n                                root = node;\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (!root) {\n                    // finds the most probable root on the basis of the longest path in the component\n                    root = graph.root();\n                    // should not happen really\n                    if (!root) {\n                        throw \"Unable to find a root for the tree.\";\n                    }\n                }\n                return this.getTreeForRoot(graph, root);\n            },\n\n            getTreeForRoot: function(graph, root) {\n\n                var tree = graph.getSpanningTree(root);\n                if (Utils.isUndefined(tree) || tree.isEmpty()) {\n                    return null;\n                }\n                return {\n                    tree: tree,\n                    root: tree.root\n                };\n            }\n\n        });\n\n        /**\n         * The Sugiyama aka layered layout algorithm.\n         * @type {*}\n         */\n        var LayeredLayout = LayoutBase.extend({\n            init: function(diagram) {\n                var that = this;\n                LayoutBase.fn.init.call(that);\n                if (Utils.isUndefined(diagram)) {\n                    throw \"Diagram is not specified.\";\n                }\n                this.diagram = diagram;\n            },\n\n            layout: function(options) {\n\n                this.transferOptions(options);\n\n                var adapter = new DiagramToHyperTreeAdapter(this.diagram);\n                var graph = adapter.convert(options);\n                if (graph.isEmpty()) {\n                    return;\n                }\n                // split into connected components\n                var components = graph.getConnectedComponents();\n                if (Utils.isEmpty(components)) {\n                    return;\n                }\n                for (var i = 0; i < components.length; i++) {\n                    var component = components[i];\n                    this.layoutGraph(component, options);\n                }\n                var finalNodeSet = this.gridLayoutComponents(components);\n                return new diagram.LayoutState(this.diagram, finalNodeSet);\n\n            },\n\n            /**\n             * Initializes the runtime data properties of the layout.\n             * @private\n             */\n            _initRuntimeProperties: function() {\n                for (var k = 0; k < this.graph.nodes.length; k++) {\n                    var node = this.graph.nodes[k];\n                    node.layer = -1;\n                    node.downstreamLinkCount = 0;\n                    node.upstreamLinkCount = 0;\n\n                    node.isVirtual = false;\n\n                    node.uBaryCenter = 0.0;\n                    node.dBaryCenter = 0.0;\n\n                    node.upstreamPriority = 0;\n                    node.downstreamPriority = 0;\n\n                    node.gridPosition = 0;\n                }\n            },\n            _prepare: function(graph) {\n                var current = [], i, l, link;\n\n                // defines a mapping of a node to the layer index\n                var layerMap = new Dictionary();\n                var layerCount = 0;\n                var targetLayer, next, target;\n\n                Utils.forEach(graph.nodes, function(node) {\n                    if (node.incoming.length === 0) {\n                        layerMap.set(node, 0);\n                        current.push(node);\n                    }\n                });\n\n                while (current.length > 0) {\n                    next = current.shift();\n                    for (i = 0; i < next.outgoing.length; i++) {\n                        link = next.outgoing[i];\n                        target = link.target;\n\n                        if (layerMap.containsKey(target)) {\n                            targetLayer = Math.max(layerMap.get(next) + 1, layerMap.get(target));\n                        } else {\n                            targetLayer = layerMap.get(next) + 1;\n                        }\n                        layerMap.set(target, targetLayer);\n                        if (targetLayer > layerCount) {\n                            layerCount = targetLayer;\n                        }\n\n                        if (!contains(current, target)) {\n                            current.push(target);\n                        }\n                    }\n                }\n\n                var sortedNodes = layerMap.keys();\n\n                sortedNodes.sort(function(o1, o2) {\n                    var o1layer = layerMap.get(o1);\n                    var o2layer = layerMap.get(o2);\n                    return Utils.sign(o2layer - o1layer);\n                });\n\n                for (var n = 0; n < sortedNodes.length; ++n) {\n                    var node = sortedNodes[n];\n                    var minLayer = Number.MAX_VALUE;\n\n                    if (node.outgoing.length === 0) {\n                        continue;\n                    }\n\n                    for (l = 0; l < node.outgoing.length; ++l) {\n                        link = node.outgoing[l];\n                        minLayer = Math.min(minLayer, layerMap.get(link.target));\n                    }\n\n                    if (minLayer > 1) {\n                        layerMap.set(node, minLayer - 1);\n                    }\n                }\n\n                this.layers = [];\n                var layer;\n                for (i = 0; i < layerCount + 1; i++) {\n                    layer = [];\n                    layer.linksTo = {};\n                    this.layers.push(layer);\n                }\n\n                layerMap.forEach(function(node, layer) {\n                    node.layer = layer;\n                    this.layers[layer].push(node);\n                }, this);\n\n                // set initial grid positions\n                for (l = 0; l < this.layers.length; l++) {\n                    layer = this.layers[l];\n                    for (i = 0; i < layer.length; i++) {\n                        layer[i].gridPosition = i;\n                    }\n                }\n            },\n            /**\n             * Performs the layout of a single component.\n             */\n            layoutGraph: function(graph, options) {\n                if (Utils.isUndefined(graph)) {\n                    throw \"No graph given or graph analysis of the diagram failed.\";\n                }\n                if (Utils.isDefined(options)) {\n                    this.transferOptions(options);\n                }\n                this.graph = graph;\n\n                // sets unique indices on the nodes\n                graph.setItemIndices();\n\n                // ensures no cycles present for this layout\n                var reversedEdges = graph.makeAcyclic();\n\n                // define the runtime props being used by the layout algorithm\n                this._initRuntimeProperties();\n\n                this._prepare(graph, options);\n\n                this._dummify();\n\n                this._optimizeCrossings();\n\n                this._swapPairs();\n\n                this.arrangeNodes();\n\n                this._moveThingsAround();\n\n                this._dedummify();\n\n                // re-reverse the links which were switched earlier\n                Utils.forEach(reversedEdges, function(e) {\n                    if (e.points) {\n                        e.points.reverse();\n                    }\n                });\n            },\n\n            setMinDist: function(m, n, minDist) {\n                var l = m.layer;\n                var i = m.layerIndex;\n                this.minDistances[l][i] = minDist;\n            },\n\n            getMinDist: function(m, n) {\n                var dist = 0,\n                    i1 = m.layerIndex,\n                    i2 = n.layerIndex,\n                    l = m.layer,\n                    min = Math.min(i1, i2),\n                    max = Math.max(i1, i2);\n                // use Sum()?\n                for (var k = min; k < max; ++k) {\n                    dist += this.minDistances[l][k];\n                }\n                return dist;\n            },\n\n            placeLeftToRight: function(leftClasses) {\n                var leftPos = new Dictionary(), n, node;\n                for (var c = 0; c < this.layers.length; ++c) {\n                    var classNodes = leftClasses[c];\n                    if (!classNodes) {\n                        continue;\n                    }\n\n                    for (n = 0; n < classNodes.length; n++) {\n                        node = classNodes[n];\n                        if (!leftPos.containsKey(node)) {\n                            this.placeLeft(node, leftPos, c);\n                        }\n                    }\n\n                    // adjust class\n                    var d = Number.POSITIVE_INFINITY;\n                    for (n = 0; n < classNodes.length; n++) {\n                        node = classNodes[n];\n                        var rightSibling = this.rightSibling(node);\n                        if (rightSibling && this.nodeLeftClass.get(rightSibling) !== c) {\n                            d = Math.min(d, leftPos.get(rightSibling) - leftPos.get(node) - this.getMinDist(node, rightSibling));\n                        }\n                    }\n                    if (d === Number.POSITIVE_INFINITY) {\n                        var D = [];\n                        for (n = 0; n < classNodes.length; n++) {\n                            node = classNodes[n];\n                            var neighbors = [];\n                            Utils.addRange(neighbors, this.upNodes.get(node));\n                            Utils.addRange(neighbors, this.downNodes.get(node));\n\n                            for (var e = 0; e < neighbors.length; e++) {\n                                var neighbor = neighbors[e];\n                                if (this.nodeLeftClass.get(neighbor) < c) {\n                                    D.push(leftPos.get(neighbor) - leftPos.get(node));\n                                }\n                            }\n                        }\n                        D.sort();\n                        if (D.length === 0) {\n                            d = 0;\n                        }\n                        else if (D.length % 2 === 1) {\n                            d = D[this.intDiv(D.length, 2)];\n                        }\n                        else {\n                            d = (D[this.intDiv(D.length, 2) - 1] + D[this.intDiv(D.length, 2)]) / 2;\n                        }\n                    }\n                    for (n = 0; n < classNodes.length; n++) {\n                        node = classNodes[n];\n                        leftPos.set(node, leftPos.get(node) + d);\n                    }\n                }\n                return leftPos;\n            },\n\n            placeRightToLeft: function(rightClasses) {\n                var rightPos = new Dictionary(), n, node;\n                for (var c = 0; c < this.layers.length; ++c) {\n                    var classNodes = rightClasses[c];\n                    if (!classNodes) {\n                        continue;\n                    }\n\n                    for (n = 0; n < classNodes.length; n++) {\n                        node = classNodes[n];\n                        if (!rightPos.containsKey(node)) {\n                            this.placeRight(node, rightPos, c);\n                        }\n                    }\n\n                    // adjust class\n                    var d = Number.NEGATIVE_INFINITY;\n                    for (n = 0; n < classNodes.length; n++) {\n                        node = classNodes[n];\n                        var leftSibling = this.leftSibling(node);\n                        if (leftSibling && this.nodeRightClass.get(leftSibling) !== c) {\n                            d = Math.max(d, rightPos.get(leftSibling) - rightPos.get(node) + this.getMinDist(leftSibling, node));\n                        }\n                    }\n                    if (d === Number.NEGATIVE_INFINITY) {\n                        var D = [];\n                        for (n = 0; n < classNodes.length; n++) {\n                            node = classNodes[n];\n                            var neighbors = [];\n                            Utils.addRange(neighbors, this.upNodes.get(node));\n                            Utils.addRange(neighbors, this.downNodes.get(node));\n\n                            for (var e = 0; e < neighbors.length; e++) {\n                                var neighbor = neighbors[e];\n                                if (this.nodeRightClass.get(neighbor) < c) {\n                                    D.push(rightPos.get(node) - rightPos.get(neighbor));\n                                }\n                            }\n                        }\n                        D.sort();\n                        if (D.length === 0) {\n                            d = 0;\n                        }\n                        else if (D.length % 2 === 1) {\n                            d = D[this.intDiv(D.length, 2)];\n                        }\n                        else {\n                            d = (D[this.intDiv(D.length, 2) - 1] + D[this.intDiv(D.length, 2)]) / 2;\n                        }\n                    }\n                    for (n = 0; n < classNodes.length; n++) {\n                        node = classNodes[n];\n                        rightPos.set(node, rightPos.get(node) + d);\n                    }\n                }\n                return rightPos;\n            },\n\n            _getLeftWing: function() {\n                var leftWing = { value: null };\n                var result = this.computeClasses(leftWing, 1);\n                this.nodeLeftClass = leftWing.value;\n                return result;\n            },\n\n            _getRightWing: function() {\n                var rightWing = { value: null };\n                var result = this.computeClasses(rightWing, -1);\n                this.nodeRightClass = rightWing.value;\n                return result;\n            },\n\n            computeClasses: function(wingPair, d) {\n                var currentWing = 0,\n                    wing = wingPair.value = new Dictionary();\n\n                for (var l = 0; l < this.layers.length; ++l) {\n                    currentWing = l;\n\n                    var layer = this.layers[l];\n                    for (var n = d === 1 ? 0 : layer.length - 1; n >= 0 && n < layer.length; n += d) {\n                        var node = layer[n];\n                        if (!wing.containsKey(node)) {\n                            wing.set(node, currentWing);\n                            if (node.isVirtual) {\n                                var ndsinl = this._nodesInLink(node);\n                                for (var kk = 0; kk < ndsinl.length; kk++) {\n                                    var vnode = ndsinl[kk];\n                                    wing.set(vnode, currentWing);\n                                }\n                            }\n                        }\n                        else {\n                            currentWing = wing.get(node);\n                        }\n                    }\n                }\n\n                var wings = [];\n                for (var i = 0; i < this.layers.length; i++) {\n                    wings.push(null);\n                }\n                wing.forEach(function(node, classIndex) {\n                    if (wings[classIndex] === null) {\n                        wings[classIndex] = [];\n                    }\n                    wings[classIndex].push(node);\n                });\n\n                return wings;\n            },\n            _isVerticalLayout: function() {\n                return this.options.subtype.toLowerCase() === \"up\" || this.options.subtype.toLowerCase() === \"down\" || this.options.subtype.toLowerCase() === \"vertical\";\n            },\n\n            _isHorizontalLayout: function() {\n                return this.options.subtype.toLowerCase() === \"right\" || this.options.subtype.toLowerCase() === \"left\" || this.options.subtype.toLowerCase() === \"horizontal\";\n            },\n            _isIncreasingLayout: function() {\n                // meaning that the visiting of the layers goes in the natural order of increasing layer index\n                return this.options.subtype.toLowerCase() === \"right\" || this.options.subtype.toLowerCase() === \"down\";\n            },\n            _moveThingsAround: function() {\n                var i, l, node, layer, n, w;\n                // sort the layers by their grid position\n                for (l = 0; l < this.layers.length; ++l) {\n                    layer = this.layers[l];\n                    layer.sort(this._gridPositionComparer);\n                }\n\n                this.minDistances = [];\n                for (l = 0; l < this.layers.length; ++l) {\n                    layer = this.layers[l];\n                    this.minDistances[l] = [];\n                    for (n = 0; n < layer.length; ++n) {\n                        node = layer[n];\n                        node.layerIndex = n;\n                        this.minDistances[l][n] = this.options.nodeDistance;\n                        if (n < layer.length - 1) {\n                            if (this._isVerticalLayout()) {\n                                this.minDistances[l][n] += (node.width + layer[n + 1].width) / 2;\n                            }\n                            else {\n                                this.minDistances[l][n] += (node.height + layer[n + 1].height) / 2;\n                            }\n                        }\n                    }\n                }\n\n                this.downNodes = new Dictionary();\n                this.upNodes = new Dictionary();\n                Utils.forEach(this.graph.nodes, function(node) {\n                    this.downNodes.set(node, []);\n                    this.upNodes.set(node, []);\n                }, this);\n                Utils.forEach(this.graph.links, function(link) {\n                    var origin = link.source;\n                    var dest = link.target;\n                    var down = null, up = null;\n                    if (origin.layer > dest.layer) {\n                        down = link.source;\n                        up = link.target;\n                    }\n                    else {\n                        up = link.source;\n                        down = link.target;\n                    }\n                    this.downNodes.get(up).push(down);\n                    this.upNodes.get(down).push(up);\n                }, this);\n                this.downNodes.forEachValue(function(list) {\n                    list.sort(this._gridPositionComparer);\n                }, this);\n                this.upNodes.forEachValue(function(list) {\n                    list.sort(this._gridPositionComparer);\n                }, this);\n\n                for (l = 0; l < this.layers.length - 1; ++l) {\n                    layer = this.layers[l];\n                    for (w = 0; w < layer.length - 1; w++) {\n                        var currentNode = layer[w];\n                        if (!currentNode.isVirtual) {\n                            continue;\n                        }\n\n                        var currDown = this.downNodes.get(currentNode)[0];\n                        if (!currDown.isVirtual) {\n                            continue;\n                        }\n\n                        for (n = w + 1; n < layer.length; ++n) {\n                            node = layer[n];\n                            if (!node.isVirtual) {\n                                continue;\n                            }\n\n                            var downNode = this.downNodes.get(node)[0];\n                            if (!downNode.isVirtual) {\n                                continue;\n                            }\n\n                            if (currDown.gridPosition > downNode.gridPosition) {\n                                var pos = currDown.gridPosition;\n                                currDown.gridPosition = downNode.gridPosition;\n                                downNode.gridPosition = pos;\n                                var i1 = currDown.layerIndex;\n                                var i2 = downNode.layerIndex;\n                                this.layers[l + 1][i1] = downNode;\n                                this.layers[l + 1][i2] = currDown;\n                                currDown.layerIndex = i2;\n                                downNode.layerIndex = i1;\n                            }\n                        }\n                    }\n                }\n\n\n                var leftClasses = this._getLeftWing();\n                var rightClasses = this._getRightWing();\n\n\n                var leftPos = this.placeLeftToRight(leftClasses);\n                var rightPos = this.placeRightToLeft(rightClasses);\n                var x = new Dictionary();\n                Utils.forEach(this.graph.nodes, function(node) {\n                    x.set(node, (leftPos.get(node) + rightPos.get(node)) / 2);\n                });\n\n\n                var order = new Dictionary();\n                var placed = new Dictionary();\n                for (l = 0; l < this.layers.length; ++l) {\n                    layer = this.layers[l];\n                    var sequenceStart = -1, sequenceEnd = -1;\n                    for (n = 0; n < layer.length; ++n) {\n                        node = layer[n];\n                        order.set(node, 0);\n                        placed.set(node, false);\n                        if (node.isVirtual) {\n                            if (sequenceStart === -1) {\n                                sequenceStart = n;\n                            }\n                            else if (sequenceStart === n - 1) {\n                                sequenceStart = n;\n                            }\n                            else {\n                                sequenceEnd = n;\n                                order.set(layer[sequenceStart], 0);\n                                if (x.get(node) - x.get(layer[sequenceStart]) === this.getMinDist(layer[sequenceStart], node)) {\n                                    placed.set(layer[sequenceStart], true);\n                                }\n                                else {\n                                    placed.set(layer[sequenceStart], false);\n                                }\n                                sequenceStart = n;\n                            }\n                        }\n                    }\n                }\n                var directions = [1, -1];\n                Utils.forEach(directions, function(d) {\n                    var start = d === 1 ? 0 : this.layers.length - 1;\n                    for (var l = start; l >= 0 && l < this.layers.length; l += d) {\n                        var layer = this.layers[l];\n                        var virtualStartIndex = this._firstVirtualNode(layer);\n                        var virtualStart = null;\n                        var sequence = null;\n                        if (virtualStartIndex !== -1) {\n                            virtualStart = layer[virtualStartIndex];\n                            sequence = [];\n                            for (i = 0; i < virtualStartIndex; i++) {\n                                sequence.push(layer[i]);\n                            }\n                        }\n                        else {\n                            virtualStart = null;\n                            sequence = layer;\n                        }\n                        if (sequence.length > 0) {\n                            this._sequencer(x, null, virtualStart, d, sequence);\n                            for (i = 0; i < sequence.length - 1; ++i) {\n                                this.setMinDist(sequence[i], sequence[i + 1], x.get(sequence[i + 1]) - x.get(sequence[i]));\n                            }\n                            if (virtualStart) {\n                                this.setMinDist(sequence[sequence.length - 1], virtualStart, x.get(virtualStart) - x.get(sequence[sequence.length - 1]));\n                            }\n                        }\n\n                        while (virtualStart) {\n                            var virtualEnd = this.nextVirtualNode(layer, virtualStart);\n                            if (!virtualEnd) {\n                                virtualStartIndex = virtualStart.layerIndex;\n                                sequence = [];\n                                for (i = virtualStartIndex + 1; i < layer.length; i++) {\n                                    sequence.push(layer[i]);\n                                }\n                                if (sequence.length > 0) {\n                                    this._sequencer(x, virtualStart, null, d, sequence);\n                                    for (i = 0; i < sequence.length - 1; ++i) {\n                                        this.setMinDist(sequence[i], sequence[i + 1], x.get(sequence[i + 1]) - x.get(sequence[i]));\n                                    }\n                                    this.setMinDist(virtualStart, sequence[0], x.get(sequence[0]) - x.get(virtualStart));\n                                }\n                            }\n                            else if (order.get(virtualStart) === d) {\n                                virtualStartIndex = virtualStart.layerIndex;\n                                var virtualEndIndex = virtualEnd.layerIndex;\n                                sequence = [];\n                                for (i = virtualStartIndex + 1; i < virtualEndIndex; i++) {\n                                    sequence.push(layer[i]);\n                                }\n                                if (sequence.length > 0) {\n                                    this._sequencer(x, virtualStart, virtualEnd, d, sequence);\n                                }\n                                placed.set(virtualStart, true);\n                            }\n                            virtualStart = virtualEnd;\n                        }\n                        this.adjustDirections(l, d, order, placed);\n                    }\n                }, this);\n\n\n                var fromLayerIndex = this._isIncreasingLayout() ? 0 : this.layers.length - 1;\n                var reachedFinalLayerIndex = function(k, ctx) {\n                    if (ctx._isIncreasingLayout()) {\n                        return k < ctx.layers.length;\n                    }\n                    else {\n                        return k >= 0;\n                    }\n                };\n                var layerIncrement = this._isIncreasingLayout() ? +1 : -1, offset = 0;\n\n                /**\n                 * Calcs the max height of the given layer.\n                 */\n                function maximumHeight(layer, ctx) {\n                    var height = Number.MIN_VALUE;\n                    for (var n = 0; n < layer.length; ++n) {\n                        var node = layer[n];\n                        if (ctx._isVerticalLayout()) {\n                            height = Math.max(height, node.height);\n                        }\n                        else {\n                            height = Math.max(height, node.width);\n                        }\n                    }\n                    return height;\n                }\n\n                for (i = fromLayerIndex; reachedFinalLayerIndex(i, this); i += layerIncrement) {\n                    layer = this.layers[i];\n                    var height = maximumHeight(layer, this);\n\n                    for (n = 0; n < layer.length; ++n) {\n                        node = layer[n];\n                        if (this._isVerticalLayout()) {\n                            node.x = x.get(node);\n                            node.y = offset + height / 2;\n                        }\n                        else {\n                            node.x = offset + height / 2;\n                            node.y = x.get(node);\n                        }\n                    }\n\n                    offset += this.options.layerSeparation + height;\n                }\n            },\n\n            adjustDirections: function(l, d, order, placed) {\n                if (l + d < 0 || l + d >= this.layers.length) {\n                    return;\n                }\n\n                var prevBridge = null, prevBridgeTarget = null;\n                var layer = this.layers[l + d];\n                for (var n = 0; n < layer.length; ++n) {\n                    var nextBridge = layer[n];\n                    if (nextBridge.isVirtual) {\n                        var nextBridgeTarget = this.getNeighborOnLayer(nextBridge, l);\n                        if (nextBridgeTarget.isVirtual) {\n                            if (prevBridge) {\n                                var p = placed.get(prevBridgeTarget);\n                                var clayer = this.layers[l];\n                                var i1 = prevBridgeTarget.layerIndex;\n                                var i2 = nextBridgeTarget.layerIndex;\n                                for (var i = i1 + 1; i < i2; ++i) {\n                                    if (clayer[i].isVirtual) {\n                                        p = p && placed.get(clayer[i]);\n                                    }\n                                }\n                                if (p) {\n                                    order.set(prevBridge, d);\n                                    var j1 = prevBridge.layerIndex;\n                                    var j2 = nextBridge.layerIndex;\n                                    for (var j = j1 + 1; j < j2; ++j) {\n                                        if (layer[j].isVirtual) {\n                                            order.set(layer[j], d);\n                                        }\n                                    }\n                                }\n                            }\n                            prevBridge = nextBridge;\n                            prevBridgeTarget = nextBridgeTarget;\n                        }\n                    }\n                }\n            },\n\n            getNeighborOnLayer: function(node, l) {\n                var neighbor = this.upNodes.get(node)[0];\n                if (neighbor.layer === l) {\n                    return neighbor;\n                }\n                neighbor = this.downNodes.get(node)[0];\n                if (neighbor.layer === l) {\n                    return neighbor;\n                }\n                return null;\n            },\n\n            _sequencer: function(x, virtualStart, virtualEnd, dir, sequence) {\n                if (sequence.length === 1) {\n                    this._sequenceSingle(x, virtualStart, virtualEnd, dir, sequence[0]);\n                }\n\n                if (sequence.length > 1) {\n                    var r = sequence.length, t = this.intDiv(r, 2);\n                    this._sequencer(x, virtualStart, virtualEnd, dir, sequence.slice(0, t));\n                    this._sequencer(x, virtualStart, virtualEnd, dir, sequence.slice(t));\n                    this.combineSequences(x, virtualStart, virtualEnd, dir, sequence);\n                }\n            },\n\n            _sequenceSingle: function(x, virtualStart, virtualEnd, dir, node) {\n                var neighbors = dir === -1 ? this.downNodes.get(node) : this.upNodes.get(node);\n\n                var n = neighbors.length;\n                if (n !== 0) {\n                    if (n % 2 === 1) {\n                        x.set(node, x.get(neighbors[this.intDiv(n, 2)]));\n                    }\n                    else {\n                        x.set(node, (x.get(neighbors[this.intDiv(n, 2) - 1]) + x.get(neighbors[this.intDiv(n, 2)])) / 2);\n                    }\n\n                    if (virtualStart) {\n                        x.set(node, Math.max(x.get(node), x.get(virtualStart) + this.getMinDist(virtualStart, node)));\n                    }\n                    if (virtualEnd) {\n                        x.set(node, Math.min(x.get(node), x.get(virtualEnd) - this.getMinDist(node, virtualEnd)));\n                    }\n                }\n            },\n\n            combineSequences: function(x, virtualStart, virtualEnd, dir, sequence) {\n                var r = sequence.length, t = this.intDiv(r, 2);\n\n                // collect left changes\n                var leftHeap = [], i, c, n, neighbors, neighbor, pair;\n                for (i = 0; i < t; ++i) {\n                    c = 0;\n                    neighbors = dir === -1 ? this.downNodes.get(sequence[i]) : this.upNodes.get(sequence[i]);\n                    for (n = 0; n < neighbors.length; ++n) {\n                        neighbor = neighbors[n];\n                        if (x.get(neighbor) >= x.get(sequence[i])) {\n                            c++;\n                        }\n                        else {\n                            c--;\n                            leftHeap.push({ k: x.get(neighbor) + this.getMinDist(sequence[i], sequence[t - 1]), v: 2 });\n                        }\n                    }\n                    leftHeap.push({ k: x.get(sequence[i]) + this.getMinDist(sequence[i], sequence[t - 1]), v: c });\n                }\n                if (virtualStart) {\n                    leftHeap.push({ k: x.get(virtualStart) + this.getMinDist(virtualStart, sequence[t - 1]), v: Number.MAX_VALUE });\n                }\n                leftHeap.sort(this._positionDescendingComparer);\n\n                // collect right changes\n                var rightHeap = [];\n                for (i = t; i < r; ++i) {\n                    c = 0;\n                    neighbors = dir === -1 ? this.downNodes.get(sequence[i]) : this.upNodes.get(sequence[i]);\n                    for (n = 0; n < neighbors.length; ++n) {\n                        neighbor = neighbors[n];\n                        if (x.get(neighbor) <= x.get(sequence[i])) {\n                            c++;\n                        }\n                        else {\n                            c--;\n                            rightHeap.push({ k: x.get(neighbor) - this.getMinDist(sequence[i], sequence[t]), v: 2 });\n                        }\n                    }\n                    rightHeap.push({ k: x.get(sequence[i]) - this.getMinDist(sequence[i], sequence[t]), v: c });\n                }\n                if (virtualEnd) {\n                    rightHeap.push({ k: x.get(virtualEnd) - this.getMinDist(virtualEnd, sequence[t]), v: Number.MAX_VALUE });\n                }\n                rightHeap.sort(this._positionAscendingComparer);\n\n                var leftRes = 0, rightRes = 0;\n                var m = this.getMinDist(sequence[t - 1], sequence[t]);\n                while (x.get(sequence[t]) - x.get(sequence[t - 1]) < m) {\n                    if (leftRes < rightRes) {\n                        if (leftHeap.length === 0) {\n                            x.set(sequence[t - 1], x.get(sequence[t]) - m);\n                            break;\n                        }\n                        else {\n                            pair = leftHeap.shift();\n                            leftRes = leftRes + pair.v;\n                            x.set(sequence[t - 1], pair.k);\n                            x.set(sequence[t - 1], Math.max(x.get(sequence[t - 1]), x.get(sequence[t]) - m));\n                        }\n                    }\n                    else {\n                        if (rightHeap.length === 0) {\n                            x.set(sequence[t], x.get(sequence[t - 1]) + m);\n                            break;\n                        }\n                        else {\n                            pair = rightHeap.shift();\n                            rightRes = rightRes + pair.v;\n                            x.set(sequence[t], pair.k);\n                            x.set(sequence[t], Math.min(x.get(sequence[t]), x.get(sequence[t - 1]) + m));\n                        }\n                    }\n                }\n                for (i = t - 2; i >= 0; i--) {\n                    x.set(sequence[i], Math.min(x.get(sequence[i]), x.get(sequence[t - 1]) - this.getMinDist(sequence[i], sequence[t - 1])));\n                }\n                for (i = t + 1; i < r; i++) {\n                    x.set(sequence[i], Math.max(x.get(sequence[i]), x.get(sequence[t]) + this.getMinDist(sequence[i], sequence[t])));\n                }\n            },\n\n            placeLeft: function(node, leftPos, leftClass) {\n                var pos = Number.NEGATIVE_INFINITY;\n                Utils.forEach(this._getComposite(node), function(v) {\n                    var leftSibling = this.leftSibling(v);\n                    if (leftSibling && this.nodeLeftClass.get(leftSibling) === this.nodeLeftClass.get(v)) {\n                        if (!leftPos.containsKey(leftSibling)) {\n                            this.placeLeft(leftSibling, leftPos, leftClass);\n                        }\n                        pos = Math.max(pos, leftPos.get(leftSibling) + this.getMinDist(leftSibling, v));\n                    }\n                }, this);\n                if (pos === Number.NEGATIVE_INFINITY) {\n                    pos = 0;\n                }\n                Utils.forEach(this._getComposite(node), function(v) {\n                    leftPos.set(v, pos);\n                });\n            },\n\n            placeRight: function(node, rightPos, rightClass) {\n                var pos = Number.POSITIVE_INFINITY;\n                Utils.forEach(this._getComposite(node), function(v) {\n                    var rightSibling = this.rightSibling(v);\n                    if (rightSibling && this.nodeRightClass.get(rightSibling) === this.nodeRightClass.get(v)) {\n                        if (!rightPos.containsKey(rightSibling)) {\n                            this.placeRight(rightSibling, rightPos, rightClass);\n                        }\n                        pos = Math.min(pos, rightPos.get(rightSibling) - this.getMinDist(v, rightSibling));\n                    }\n                }, this);\n                if (pos === Number.POSITIVE_INFINITY) {\n                    pos = 0;\n                }\n                Utils.forEach(this._getComposite(node), function(v) {\n                    rightPos.set(v, pos);\n                });\n            },\n\n            leftSibling: function(node) {\n                var layer = this.layers[node.layer],\n                    layerIndex = node.layerIndex;\n                return layerIndex === 0 ? null : layer[layerIndex - 1];\n            },\n\n            rightSibling: function(node) {\n                var layer = this.layers[node.layer];\n                var layerIndex = node.layerIndex;\n                return layerIndex === layer.length - 1 ? null : layer[layerIndex + 1];\n\n            },\n\n            _getComposite: function(node) {\n                return node.isVirtual ? this._nodesInLink(node) : [node];\n            },\n\n            arrangeNodes: function() {\n                var i, l, ni, layer, node;\n                // Initialize node's base priority\n                for (l = 0; l < this.layers.length; l++) {\n                    layer = this.layers[l];\n\n                    for (ni = 0; ni < layer.length; ni++) {\n                        node = layer[ni];\n                        node.upstreamPriority = node.upstreamLinkCount;\n                        node.downstreamPriority = node.downstreamLinkCount;\n                    }\n                }\n\n                // Layout is invoked after MinimizeCrossings\n                // so we may assume node's barycenters are initially correct\n\n                var maxLayoutIterations = 2;\n                for (var it = 0; it < maxLayoutIterations; it++) {\n                    for (i = this.layers.length - 1; i >= 1; i--) {\n                        this.layoutLayer(false, i);\n                    }\n\n                    for (i = 0; i < this.layers.length - 1; i++) {\n                        this.layoutLayer(true, i);\n                    }\n                }\n\n                // Offset the whole structure so that there are no gridPositions < 0\n                var gridPos = Number.MAX_VALUE;\n                for (l = 0; l < this.layers.length; l++) {\n                    layer = this.layers[l];\n\n                    for (ni = 0; ni < layer.length; ni++) {\n                        node = layer[ni];\n                        gridPos = Math.min(gridPos, node.gridPosition);\n                    }\n                }\n\n                if (gridPos < 0) {\n                    for (l = 0; l < this.layers.length; l++) {\n                        layer = this.layers[l];\n\n                        for (ni = 0; ni < layer.length; ni++) {\n                            node = layer[ni];\n                            node.gridPosition = node.gridPosition - gridPos;\n                        }\n                    }\n                }\n            },\n\n            /// <summary>\n            /// Layout of a single layer.\n            /// </summary>\n            /// <param name=\"layerIndex\">The layer to organize.</param>\n            /// <param name=\"movingDownwards\">If set to <c>true</c> we move down in the layer stack.</param>\n            /// <seealso cref=\"OptimizeCrossings()\"/>\n            layoutLayer: function(down, layer) {\n                var iconsidered;\n                var considered;\n\n                if (down) {\n                    considered = this.layers[iconsidered = layer + 1];\n                }\n                else {\n                    considered = this.layers[iconsidered = layer - 1];\n                }\n\n                // list containing the nodes in the considered layer sorted by priority\n                var sorted = [];\n                for (var n = 0; n < considered.length; n++) {\n                    sorted.push(considered[n]);\n                }\n                sorted.sort(function(n1, n2) {\n                    var n1Priority = (n1.upstreamPriority + n1.downstreamPriority) / 2;\n                    var n2Priority = (n2.upstreamPriority + n2.downstreamPriority) / 2;\n\n                    if (Math.abs(n1Priority - n2Priority) < 0.0001) {\n                        return 0;\n                    }\n                    if (n1Priority < n2Priority) {\n                        return 1;\n                    }\n                    return -1;\n                });\n\n                // each node strives for its barycenter; high priority nodes start first\n                Utils.forEach(sorted, function(node) {\n                    var nodeGridPos = node.gridPosition;\n                    var nodeBaryCenter = this.calcBaryCenter(node);\n                    var nodePriority = (node.upstreamPriority + node.downstreamPriority) / 2;\n\n                    if (Math.abs(nodeGridPos - nodeBaryCenter) < 0.0001) {\n                        // This node is exactly at its barycenter -> perfect\n                        return;\n                    }\n\n                    if (Math.abs(nodeGridPos - nodeBaryCenter) < 0.25 + 0.0001) {\n                        // This node is close enough to the barycenter -> should work\n                        return;\n                    }\n\n                    if (nodeGridPos < nodeBaryCenter) {\n                        // Try to move the node to the right in an\n                        // attempt to reach its barycenter\n                        while (nodeGridPos < nodeBaryCenter) {\n                            if (!this.moveRight(node, considered, nodePriority)) {\n                                break;\n                            }\n\n                            nodeGridPos = node.gridPosition;\n                        }\n                    }\n                    else {\n                        // Try to move the node to the left in an\n                        // attempt to reach its barycenter\n                        while (nodeGridPos > nodeBaryCenter) {\n                            if (!this.moveLeft(node, considered, nodePriority)) {\n                                break;\n                            }\n\n                            nodeGridPos = node.gridPosition;\n                        }\n                    }\n                }, this);\n\n                // after the layer has been rearranged we need to recalculate the barycenters\n                // of the nodes in the surrounding layers\n                if (iconsidered > 0) {\n                    this.calcDownData(iconsidered - 1);\n                }\n                if (iconsidered < this.layers.length - 1) {\n                    this.calcUpData(iconsidered + 1);\n                }\n            },\n\n            /// <summary>\n            /// Moves the node to the right and returns <c>true</c> if this was possible.\n            /// </summary>\n            /// <param name=\"node\">The node.</param>\n            /// <param name=\"layer\">The layer.</param>\n            /// <returns>Returns <c>true</c> if the shift was possible, otherwise <c>false</c>.</returns>\n            moveRight: function(node, layer, priority) {\n                var index = Utils.indexOf(layer, node);\n                if (index === layer.length - 1) {\n                    // this is the last node in the layer, so we can move to the right without troubles\n                    node.gridPosition = node.gridPosition + 0.5;\n                    return true;\n                }\n\n                var rightNode = layer[index + 1];\n                var rightNodePriority = (rightNode.upstreamPriority + rightNode.downstreamPriority) / 2;\n\n                // check if there is space between the right and the current node\n                if (rightNode.gridPosition > node.gridPosition + 1) {\n                    node.gridPosition = node.gridPosition + 0.5;\n                    return true;\n                }\n\n                // we have reached a node with higher priority; no movement is allowed\n                if (rightNodePriority > priority ||\n                    Math.abs(rightNodePriority - priority) < 0.0001) {\n                    return false;\n                }\n\n                // the right node has lower priority - try to move it\n                if (this.moveRight(rightNode, layer, priority)) {\n                    node.gridPosition = node.gridPosition + 0.5;\n                    return true;\n                }\n\n                return false;\n            },\n\n            /// <summary>\n            /// Moves the node to the left and returns <c>true</c> if this was possible.\n            /// </summary>\n            /// <param name=\"node\">The node.</param>\n            /// <param name=\"layer\">The layer.</param>\n            /// <returns>Returns <c>true</c> if the shift was possible, otherwise <c>false</c>.</returns>\n            moveLeft: function(node, layer, priority) {\n                var index = Utils.indexOf(layer, node);\n                if (index === 0) {\n                    // this is the last node in the layer, so we can move to the left without troubles\n                    node.gridPosition = node.gridPosition - 0.5;\n                    return true;\n                }\n\n                var leftNode = layer[index - 1];\n                var leftNodePriority = (leftNode.upstreamPriority + leftNode.downstreamPriority) / 2;\n\n                // check if there is space between the left and the current node\n                if (leftNode.gridPosition < node.gridPosition - 1) {\n                    node.gridPosition = node.gridPosition - 0.5;\n                    return true;\n                }\n\n                // we have reached a node with higher priority; no movement is allowed\n                if (leftNodePriority > priority ||\n                    Math.abs(leftNodePriority - priority) < 0.0001) {\n                    return false;\n                }\n\n                // The left node has lower priority - try to move it\n                if (this.moveLeft(leftNode, layer, priority)) {\n                    node.gridPosition = node.gridPosition - 0.5;\n                    return true;\n                }\n\n                return false;\n            },\n\n            mapVirtualNode: function(node, link) {\n                this.nodeToLinkMap.set(node, link);\n                if (!this.linkToNodeMap.containsKey(link)) {\n                    this.linkToNodeMap.set(link, []);\n                }\n                this.linkToNodeMap.get(link).push(node);\n            },\n\n            _nodesInLink: function(node) {\n                return this.linkToNodeMap.get(this.nodeToLinkMap.get(node));\n            },\n\n            /// <summary>\n            /// Inserts dummy nodes to break long links.\n            /// </summary>\n            _dummify: function() {\n                this.linkToNodeMap = new Dictionary();\n                this.nodeToLinkMap = new Dictionary();\n\n                var layer, pos, newNode, node, r, newLink, i, l, links = this.graph.links.slice(0);\n                var layers = this.layers;\n\n                var addLinkBetweenLayers = function(upLayer, downLayer, link) {\n                    layers[upLayer].linksTo[downLayer] = layers[upLayer].linksTo[downLayer] || [];\n                    layers[upLayer].linksTo[downLayer].push(link);\n                };\n\n                for (l = 0; l < links.length; l++) {\n                    var link = links[l];\n                    var o = link.source;\n                    var d = link.target;\n\n                    var oLayer = o.layer;\n                    var dLayer = d.layer;\n                    var oPos = o.gridPosition;\n                    var dPos = d.gridPosition;\n\n                    var step = (dPos - oPos) / Math.abs(dLayer - oLayer);\n\n                    var p = o;\n                    if (oLayer - dLayer > 1) {\n                        for (i = oLayer - 1; i > dLayer; i--) {\n                            newNode = new Node();\n                            newNode.x = o.x;\n                            newNode.y = o.y;\n                            newNode.width = o.width / 100;\n                            newNode.height = o.height / 100;\n\n                            layer = layers[i];\n                            pos = (i - dLayer) * step + oPos;\n                            if (pos > layer.length) {\n                                pos = layer.length;\n                            }\n\n                            // check if origin and dest are both last\n                            if (oPos >= layers[oLayer].length - 1 &&\n                                dPos >= layers[dLayer].length - 1) {\n                                pos = layer.length;\n                            }\n\n                            // check if origin and destination are both first\n                            else if (oPos === 0 && dPos === 0) {\n                                pos = 0;\n                            }\n\n                            newNode.layer = i;\n                            newNode.uBaryCenter = 0.0;\n                            newNode.dBaryCenter = 0.0;\n                            newNode.upstreamLinkCount = 0;\n                            newNode.downstreamLinkCount = 0;\n                            newNode.gridPosition = pos;\n                            newNode.isVirtual = true;\n\n                            Utils.insert(layer, newNode, pos);\n\n                            // translate rightwards nodes' positions\n                            for (r = pos + 1; r < layer.length; r++) {\n                                node = layer[r];\n                                node.gridPosition = node.gridPosition + 1;\n                            }\n\n                            newLink = new Link(p, newNode);\n                            newLink.depthOfDumminess = 0;\n\n                            addLinkBetweenLayers(i - 1, i, newLink);\n\n                            p = newNode;\n\n                            // add the new node and the new link to the graph\n                            this.graph._addNode(newNode);\n                            this.graph.addLink(newLink);\n\n                            newNode.index = this.graph.nodes.length - 1;\n                            this.mapVirtualNode(newNode, link);\n                        }\n\n                        // set the origin of the real arrow to the last dummy\n                        addLinkBetweenLayers(dLayer - 1, dLayer, newLink);\n                        link.changeSource(p);\n                        link.depthOfDumminess = oLayer - dLayer - 1;\n                    } else if (oLayer - dLayer < -1) {\n                        for (i = oLayer + 1; i < dLayer; i++) {\n                            newNode = new Node();\n                            newNode.x = o.x;\n                            newNode.y = o.y;\n                            newNode.width = o.width / 100;\n                            newNode.height = o.height / 100;\n\n                            layer = layers[i];\n                            pos = (i - oLayer) * step + oPos;\n                            if (pos > layer.length) {\n                                pos = layer.length;\n                            }\n\n                            // check if origin and dest are both last\n                            if (oPos >= layers[oLayer].length - 1 &&\n                                dPos >= layers[dLayer].length - 1) {\n                                pos = layer.length;\n                            }\n\n                            // check if origin and destination are both first\n                            else if (oPos === 0 && dPos === 0) {\n                                pos = 0;\n                            }\n\n                            newNode.layer = i;\n                            newNode.uBaryCenter = 0.0;\n                            newNode.dBaryCenter = 0.0;\n                            newNode.upstreamLinkCount = 0;\n                            newNode.downstreamLinkCount = 0;\n                            newNode.gridPosition = pos;\n                            newNode.isVirtual = true;\n\n                            pos &= pos; // truncates to int\n                            Utils.insert(layer, newNode, pos);\n\n                            // translate rightwards nodes' positions\n                            for (r = pos + 1; r < layer.length; r++) {\n                                node = layer[r];\n                                node.gridPosition = node.gridPosition + 1;\n                            }\n\n                            newLink = new Link(p, newNode);\n                            newLink.depthOfDumminess = 0;\n                            addLinkBetweenLayers(i - 1, i, newLink);\n\n                            p = newNode;\n\n                            // add the new node and the new link to the graph\n                            this.graph._addNode(newNode);\n                            this.graph.addLink(newLink);\n\n                            newNode.index = this.graph.nodes.length - 1;\n                            this.mapVirtualNode(newNode, link);\n                        }\n                        addLinkBetweenLayers(dLayer - 1, dLayer, link);\n\n                        // Set the origin of the real arrow to the last dummy\n                        link.changeSource(p);\n                        link.depthOfDumminess = dLayer - oLayer - 1;\n                    } else {\n                        addLinkBetweenLayers(oLayer, dLayer, link);\n                    }\n                }\n            },\n\n            /// <summary>\n            /// Removes the dummy nodes inserted earlier to break long links.\n            /// </summary>\n            /// <remarks>The virtual nodes are effectively turned into intermediate connection points.</remarks>\n            _dedummify: function() {\n                var dedum = true;\n                while (dedum) {\n                    dedum = false;\n\n                    for (var l = 0; l < this.graph.links.length; l++) {\n                        var link = this.graph.links[l];\n                        if (!link.depthOfDumminess) {\n                            continue;\n                        }\n\n                        var points = [];\n\n                        // add points in reverse order\n                        points.unshift({ x: link.target.x, y: link.target.y });\n                        points.unshift({ x: link.source.x, y: link.source.y });\n\n                        // _dedummify the link\n                        var temp = link;\n                        var depthOfDumminess = link.depthOfDumminess;\n                        for (var d = 0; d < depthOfDumminess; d++) {\n                            var node = temp.source;\n                            var prevLink = node.incoming[0];\n\n                            points.unshift({ x: prevLink.source.x, y: prevLink.source.y });\n\n                            temp = prevLink;\n                        }\n\n                        // restore the original link origin\n                        link.changeSource(temp.source);\n\n                        // reset dummification flag\n                        link.depthOfDumminess = 0;\n\n                        // note that we only need the intermediate points, floating links have been dropped in the analysis\n                        if (points.length > 2) {\n                            // first and last are the endpoints\n                            points.splice(0, 1);\n                            points.splice(points.length - 1);\n                            link.points = points;\n                        }\n                        else {\n                            link.points = [];\n                        }\n\n                        // we are not going to delete the dummy elements;\n                        // they won't be needed anymore anyway.\n\n                        dedum = true;\n                        break;\n                    }\n                }\n            },\n\n            /// <summary>\n            /// Optimizes/reduces the crossings between the layers by turning the crossing problem into a (combinatorial) number ordering problem.\n            /// </summary>\n            _optimizeCrossings: function() {\n                var moves = -1, i;\n                var maxIterations = 3;\n                var iter = 0;\n\n                while (moves !== 0) {\n                    if (iter++ > maxIterations) {\n                        break;\n                    }\n\n                    moves = 0;\n\n                    for (i = this.layers.length - 1; i >= 1; i--) {\n                        moves += this.optimizeLayerCrossings(false, i);\n                    }\n\n                    for (i = 0; i < this.layers.length - 1; i++) {\n                        moves += this.optimizeLayerCrossings(true, i);\n                    }\n                }\n            },\n\n            calcUpData: function(layer) {\n                if (layer === 0) {\n                    return;\n                }\n\n                var considered = this.layers[layer], i, l, link;\n                var upLayer = new Set();\n                var temp = this.layers[layer - 1];\n                for (i = 0; i < temp.length; i++) {\n                    upLayer.add(temp[i]);\n                }\n\n                for (i = 0; i < considered.length; i++) {\n                    var node = considered[i];\n\n                    // calculate barycenter\n                    var sum = 0;\n                    var total = 0;\n\n                    for (l = 0; l < node.incoming.length; l++) {\n                        link = node.incoming[l];\n                        if (upLayer.contains(link.source)) {\n                            total++;\n                            sum += link.source.gridPosition;\n                        }\n                    }\n\n                    for (l = 0; l < node.outgoing.length; l++) {\n                        link = node.outgoing[l];\n                        if (upLayer.contains(link.target)) {\n                            total++;\n                            sum += link.target.gridPosition;\n                        }\n                    }\n\n                    if (total > 0) {\n                        node.uBaryCenter = sum / total;\n                        node.upstreamLinkCount = total;\n                    }\n                    else {\n                        node.uBaryCenter = i;\n                        node.upstreamLinkCount = 0;\n                    }\n                }\n            },\n\n            calcDownData: function(layer) {\n                if (layer === this.layers.length - 1) {\n                    return;\n                }\n\n                var considered = this.layers[layer], i , l, link;\n                var downLayer = new Set();\n                var temp = this.layers[layer + 1];\n                for (i = 0; i < temp.length; i++) {\n                    downLayer.add(temp[i]);\n                }\n\n                for (i = 0; i < considered.length; i++) {\n                    var node = considered[i];\n\n                    // calculate barycenter\n                    var sum = 0;\n                    var total = 0;\n\n                    for (l = 0; l < node.incoming.length; l++) {\n                        link = node.incoming[l];\n                        if (downLayer.contains(link.source)) {\n                            total++;\n                            sum += link.source.gridPosition;\n                        }\n                    }\n\n                    for (l = 0; l < node.outgoing.length; l++) {\n                        link = node.outgoing[l];\n                        if (downLayer.contains(link.target)) {\n                            total++;\n                            sum += link.target.gridPosition;\n                        }\n                    }\n\n                    if (total > 0) {\n                        node.dBaryCenter = sum / total;\n                        node.downstreamLinkCount = total;\n                    }\n                    else {\n                        node.dBaryCenter = i;\n                        node.downstreamLinkCount = 0;\n                    }\n                }\n            },\n\n            /// <summary>\n            /// Optimizes the crossings.\n            /// </summary>\n            /// <remarks>The big trick here is the usage of weights or values attached to connected nodes which turn a problem of crossing links\n            /// to an a problem of ordering numbers.</remarks>\n            /// <param name=\"layerIndex\">The layer index.</param>\n            /// <param name=\"movingDownwards\">If set to <c>true</c> we move down in the layer stack.</param>\n            /// <returns>The number of nodes having moved, i.e. the number of crossings reduced.</returns>\n            optimizeLayerCrossings: function(down, layer) {\n                var iconsidered;\n                var considered;\n\n                if (down) {\n                    considered = this.layers[iconsidered = layer + 1];\n                }\n                else {\n                    considered = this.layers[iconsidered = layer - 1];\n                }\n\n                // remember what it was\n                var presorted = considered.slice(0);\n\n                // calculate barycenters for all nodes in the considered layer\n                if (down) {\n                    this.calcUpData(iconsidered);\n                }\n                else {\n                    this.calcDownData(iconsidered);\n                }\n\n                var that = this;\n                // sort nodes within this layer according to the barycenters\n                considered.sort(function(n1, n2) {\n                    var n1BaryCenter = that.calcBaryCenter(n1),\n                        n2BaryCenter = that.calcBaryCenter(n2);\n                    if (Math.abs(n1BaryCenter - n2BaryCenter) < 0.0001) {\n                        // in case of coinciding barycenters compare by the count of in/out links\n                        if (n1.degree() === n2.degree()) {\n                            return that.compareByIndex(n1, n2);\n                        }\n                        else if (n1.degree() < n2.degree()) {\n                            return 1;\n                        }\n                        return -1;\n                    }\n                    var compareValue = (n2BaryCenter - n1BaryCenter) * 1000;\n                    if (compareValue > 0) {\n                        return -1;\n                    }\n                    else if (compareValue < 0) {\n                        return 1;\n                    }\n                    return that.compareByIndex(n1, n2);\n                });\n\n                // count relocations\n                var i, moves = 0;\n                for (i = 0; i < considered.length; i++) {\n                    if (considered[i] !== presorted[i]) {\n                        moves++;\n                    }\n                }\n\n                if (moves > 0) {\n                    // now that the boxes have been arranged, update their grid positions\n                    var inode = 0;\n                    for (i = 0; i < considered.length; i++) {\n                        var node = considered[i];\n                        node.gridPosition = inode++;\n                    }\n                }\n\n                return moves;\n            },\n\n            /// <summary>\n            /// Swaps a pair of nodes in a layer.\n            /// </summary>\n            /// <param name=\"layerIndex\">Index of the layer.</param>\n            /// <param name=\"n\">The Nth node in the layer.</param>\n            _swapPairs: function() {\n                var maxIterations = this.options.layeredIterations;\n                var iter = 0;\n\n                while (true) {\n                    if (iter++ > maxIterations) {\n                        break;\n                    }\n\n                    var downwards = (iter % 4 <= 1);\n                    var secondPass = (iter % 4 === 1);\n\n                    for (var l = (downwards ? 0 : this.layers.length - 1);\n                         downwards ? l <= this.layers.length - 1 : l >= 0; l += (downwards ? 1 : -1)) {\n                        var layer = this.layers[l];\n                        var hasSwapped = false;\n\n                        // there is no need to recalculate crossings if they were calculated\n                        // on the previous step and nothing has changed\n                        var calcCrossings = true;\n                        var memCrossings = 0;\n\n                        for (var n = 0; n < layer.length - 1; n++) {\n                            // count crossings\n                            var up = 0;\n                            var down = 0;\n                            var crossBefore = 0;\n\n                            if (calcCrossings) {\n                                if (l !== 0) {\n                                    up = this.countLinksCrossingBetweenTwoLayers(l - 1, l);\n                                }\n                                if (l !== this.layers.length - 1) {\n                                    down = this.countLinksCrossingBetweenTwoLayers(l, l + 1);\n                                }\n                                if (downwards) {\n                                    up *= 2;\n                                }\n                                else {\n                                    down *= 2;\n                                }\n\n                                crossBefore = up + down;\n                            }\n                            else {\n                                crossBefore = memCrossings;\n                            }\n\n                            if (crossBefore === 0) {\n                                continue;\n                            }\n\n                            // Swap nodes\n                            var node1 = layer[n];\n                            var node2 = layer[n + 1];\n\n                            var node1GridPos = node1.gridPosition;\n                            var node2GridPos = node2.gridPosition;\n                            layer[n] = node2;\n                            layer[n + 1] = node1;\n                            node1.gridPosition = node2GridPos;\n                            node2.gridPosition = node1GridPos;\n\n                            // count crossings again and if worse than before, restore swapping\n                            up = 0;\n                            if (l !== 0) {\n                                up = this.countLinksCrossingBetweenTwoLayers(l - 1, l);\n                            }\n                            down = 0;\n                            if (l !== this.layers.length - 1) {\n                                down = this.countLinksCrossingBetweenTwoLayers(l, l + 1);\n                            }\n                            if (downwards) {\n                                up *= 2;\n                            }\n                            else {\n                                down *= 2;\n                            }\n                            var crossAfter = up + down;\n\n                            var revert = false;\n                            if (secondPass) {\n                                revert = crossAfter >= crossBefore;\n                            }\n                            else {\n                                revert = crossAfter > crossBefore;\n                            }\n\n                            if (revert) {\n                                node1 = layer[n];\n                                node2 = layer[n + 1];\n\n                                node1GridPos = node1.gridPosition;\n                                node2GridPos = node2.gridPosition;\n                                layer[n] = node2;\n                                layer[n + 1] = node1;\n                                node1.gridPosition = node2GridPos;\n                                node2.gridPosition = node1GridPos;\n\n                                // nothing has changed, remember the crossings so that\n                                // they are not calculated again on the next step\n                                memCrossings = crossBefore;\n                                calcCrossings = false;\n                            }\n                            else {\n                                hasSwapped = true;\n                                calcCrossings = true;\n                            }\n                        }\n\n                        if (hasSwapped) {\n                            if (l !== this.layers.length - 1) {\n                                this.calcUpData(l + 1);\n                            }\n                            if (l !== 0) {\n                                this.calcDownData(l - 1);\n                            }\n                        }\n                    }\n                }\n            },\n\n            /// <summary>\n            /// Counts the number of links crossing between two layers.\n            /// </summary>\n            /// <param name=\"layerIndex1\">The layer index.</param>\n            /// <param name=\"layerIndex2\">Another layer index.</param>\n            /// <returns></returns>\n            countLinksCrossingBetweenTwoLayers: function(ulayer, dlayer) {\n                var links = this.layers[ulayer].linksTo[dlayer];\n                var link1, link2, n11, n12, n21, n22, l1, l2;\n                var crossings = 0;\n                var length = links.length;\n\n                for (l1 = 0; l1 < length; l1++) {\n                    link1 = links[l1];\n                    for (l2 = l1 + 1; l2 < length; l2++) {\n\n                        link2 = links[l2];\n\n                        if (link1.target.layer === dlayer) {\n                            n11 = link1.source;\n                            n12 = link1.target;\n                        }\n                        else {\n                            n11 = link1.target;\n                            n12 = link1.source;\n                        }\n\n                        if (link2.target.layer === dlayer) {\n                            n21 = link2.source;\n                            n22 = link2.target;\n                        }\n                        else {\n                            n21 = link2.target;\n                            n22 = link2.source;\n                        }\n\n                        var n11gp = n11.gridPosition;\n                        var n12gp = n12.gridPosition;\n                        var n21gp = n21.gridPosition;\n                        var n22gp = n22.gridPosition;\n\n                        if ((n11gp - n21gp) * (n12gp - n22gp) < 0) {\n                            crossings++;\n                        }\n                    }\n                }\n\n                return crossings;\n            },\n\n            calcBaryCenter: function(node) {\n                var upstreamLinkCount = node.upstreamLinkCount;\n                var downstreamLinkCount = node.downstreamLinkCount;\n                var uBaryCenter = node.uBaryCenter;\n                var dBaryCenter = node.dBaryCenter;\n\n                if (upstreamLinkCount > 0 && downstreamLinkCount > 0) {\n                    return (uBaryCenter + dBaryCenter) / 2;\n                }\n                if (upstreamLinkCount > 0) {\n                    return uBaryCenter;\n                }\n                if (downstreamLinkCount > 0) {\n                    return dBaryCenter;\n                }\n\n                return 0;\n            },\n\n            _gridPositionComparer: function(x, y) {\n                if (x.gridPosition < y.gridPosition) {\n                    return -1;\n                }\n                if (x.gridPosition > y.gridPosition) {\n                    return 1;\n                }\n                return 0;\n            },\n\n            _positionAscendingComparer: function(x, y) {\n                return x.k < y.k ? -1 : x.k > y.k ? 1 : 0;\n            },\n\n            _positionDescendingComparer: function(x, y) {\n                return x.k < y.k ? 1 : x.k > y.k ? -1 : 0;\n            },\n\n            _firstVirtualNode: function(layer) {\n                for (var c = 0; c < layer.length; c++) {\n                    if (layer[c].isVirtual) {\n                        return c;\n                    }\n                }\n                return -1;\n            },\n\n            compareByIndex: function(o1, o2) {\n                var i1 = o1.index;\n                var i2 = o2.index;\n\n                if (i1 < i2) {\n                    return 1;\n                }\n\n                if (i1 > i2) {\n                    return -1;\n                }\n\n                return 0;\n            },\n\n            intDiv: function(numerator, denominator) {\n                return (numerator - numerator % denominator) / denominator;\n            },\n\n            nextVirtualNode: function(layer, node) {\n                var nodeIndex = node.layerIndex;\n                for (var i = nodeIndex + 1; i < layer.length; ++i) {\n                    if (layer[i].isVirtual) {\n                        return layer[i];\n                    }\n                }\n                return null;\n            }\n\n        });\n\n        /**\n         * Captures the state of a diagram; node positions, link points and so on.\n         * @type {*}\n         */\n        var LayoutState = kendo.Class.extend({\n            init: function(diagram, graphOrNodes) {\n                if (Utils.isUndefined(diagram)) {\n                    throw \"No diagram given\";\n                }\n                this.diagram = diagram;\n                this.nodeMap = new Dictionary();\n                this.linkMap = new Dictionary();\n                this.capture(graphOrNodes ? graphOrNodes : diagram);\n            },\n\n            /**\n             * Will capture either\n             * - the state of the shapes and the intermediate points of the connections in the diagram\n             * - the bounds of the nodes contained in the Graph together with the intermediate points of the links in the Graph\n             * - the bounds of the nodes in the Array<Node>\n             * - the links points and node bounds in the literal object\n             * @param diagramOrGraphOrNodes\n             */\n            capture: function(diagramOrGraphOrNodes) {\n                var node,\n                    nodes,\n                    shape,\n                    i,\n                    conn,\n                    link,\n                    links;\n\n                if (diagramOrGraphOrNodes instanceof diagram.Graph) {\n\n                    for (i = 0; i < diagramOrGraphOrNodes.nodes.length; i++) {\n                        node = diagramOrGraphOrNodes.nodes[i];\n                        shape = node.associatedShape;\n                        //shape.bounds(new Rect(node.x, node.y, node.width, node.height));\n                        this.nodeMap.set(shape.visual.id, new Rect(node.x, node.y, node.width, node.height));\n                    }\n                    for (i = 0; i < diagramOrGraphOrNodes.links.length; i++) {\n                        link = diagramOrGraphOrNodes.links[i];\n                        conn = link.associatedConnection;\n                        this.linkMap.set(conn.visual.id, link.points());\n                    }\n                }\n                else if (diagramOrGraphOrNodes instanceof Array) {\n                    nodes = diagramOrGraphOrNodes;\n                    for (i = 0; i < nodes.length; i++) {\n                        node = nodes[i];\n                        shape = node.associatedShape;\n                        if (shape) {\n                            this.nodeMap.set(shape.visual.id, new Rect(node.x, node.y, node.width, node.height));\n                        }\n                    }\n                }\n                else if (diagramOrGraphOrNodes.hasOwnProperty(\"links\") && diagramOrGraphOrNodes.hasOwnProperty(\"nodes\")) {\n                    nodes = diagramOrGraphOrNodes.nodes;\n                    links = diagramOrGraphOrNodes.links;\n                    for (i = 0; i < nodes.length; i++) {\n                        node = nodes[i];\n                        shape = node.associatedShape;\n                        if (shape) {\n                            this.nodeMap.set(shape.visual.id, new Rect(node.x, node.y, node.width, node.height));\n                        }\n                    }\n                    for (i = 0; i < links.length; i++) {\n                        link = links[i];\n                        conn = link.associatedConnection;\n                        if (conn) {\n                            this.linkMap.set(conn.visual.id, link.points);\n                        }\n                    }\n                }\n                else { // capture the diagram\n                    var shapes = this.diagram.shapes;\n                    var connections = this.diagram.connections;\n                    for (i = 0; i < shapes.length; i++) {\n                        shape = shapes[i];\n                        this.nodeMap.set(shape.visual.id, shape.bounds());\n                    }\n                    for (i = 0; i < connections.length; i++) {\n                        conn = connections[i];\n                        this.linkMap.set(conn.visual.id, conn.points());\n                    }\n                }\n            }\n        });\n\n        deepExtend(diagram, {\n            init: function(element) {\n                kendo.init(element, diagram.ui);\n            },\n            SpringLayout: SpringLayout,\n            TreeLayout: TreeLayout,\n            GraphAdapter: DiagramToHyperTreeAdapter,\n            LayeredLayout: LayeredLayout,\n            LayoutBase: LayoutBase,\n            LayoutState: LayoutState\n        });\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n            // Imports ================================================================\n            var dataviz = kendo.dataviz,\n                draw = kendo.drawing,\n                geom = kendo.geometry,\n                diagram = dataviz.diagram,\n                Widget = kendo.ui.Widget,\n                Class = kendo.Class,\n                deepExtend = kendo.deepExtend,\n                outerWidth = kendo._outerWidth,\n                outerHeight = kendo._outerHeight,\n                extend = $.extend,\n                HierarchicalDataSource = kendo.data.HierarchicalDataSource,\n                Canvas = diagram.Canvas,\n                Group = diagram.Group,\n                Rectangle = diagram.Rectangle,\n                Circle = diagram.Circle,\n                CompositeTransform = diagram.CompositeTransform,\n                Rect = diagram.Rect,\n                Path = diagram.Path,\n                DeleteShapeUnit = diagram.DeleteShapeUnit,\n                DeleteConnectionUnit = diagram.DeleteConnectionUnit,\n                TextBlock = diagram.TextBlock,\n                Image = diagram.Image,\n                Point = diagram.Point,\n                Intersect = diagram.Intersect,\n                ConnectionEditAdorner = diagram.ConnectionEditAdorner,\n                UndoRedoService = diagram.UndoRedoService,\n                ToolService = diagram.ToolService,\n                Selector = diagram.Selector,\n                ResizingAdorner = diagram.ResizingAdorner,\n                ConnectorsAdorner = diagram.ConnectorsAdorner,\n                Cursors = diagram.Cursors,\n                Utils = diagram.Utils,\n                Observable = kendo.Observable,\n                ToBackUnit = diagram.ToBackUnit,\n                ToFrontUnit = diagram.ToFrontUnit,\n                PolylineRouter = diagram.PolylineRouter,\n                CascadingRouter = diagram.CascadingRouter,\n                isUndefined = Utils.isUndefined,\n                isDefined = Utils.isDefined,\n                defined = draw.util.defined,\n                isArray = Array.isArray,\n                isFunction = kendo.isFunction,\n                isString = Utils.isString,\n                isPlainObject = $.isPlainObject,\n\n                math = Math;\n\n            // Constants ==============================================================\n            var NS = \".kendoDiagram\",\n                CASCADING = \"cascading\",\n                ITEMBOUNDSCHANGE = \"itemBoundsChange\",\n                CHANGE = \"change\",\n                CLICK = \"click\",\n                DRAG = \"drag\",\n                DRAG_END = \"dragEnd\",\n                DRAG_START = \"dragStart\",\n                MOUSE_ENTER = \"mouseEnter\",\n                MOUSE_LEAVE = \"mouseLeave\",\n                ERROR = \"error\",\n                AUTO = \"Auto\",\n                TOP = \"Top\",\n                RIGHT = \"Right\",\n                LEFT = \"Left\",\n                BOTTOM = \"Bottom\",\n                MAXINT = 9007199254740992,\n                SELECT = \"select\",\n                ITEMROTATE = \"itemRotate\",\n                PAN = \"pan\",\n                ZOOM_START = \"zoomStart\",\n                ZOOM_END = \"zoomEnd\",\n                NONE = \"none\",\n                DEFAULT_CANVAS_WIDTH = 600,\n                DEFAULT_CANVAS_HEIGHT = 600,\n                DEFAULT_SHAPE_TYPE = \"rectangle\",\n                DEFAULT_SHAPE_WIDTH = 100,\n                DEFAULT_SHAPE_HEIGHT = 100,\n                DEFAULT_SHAPE_MINWIDTH = 20,\n                DEFAULT_SHAPE_MINHEIGHT = 20,\n                DEFAULT_SHAPE_POSITION = 0,\n                DEFAULT_CONNECTION_BACKGROUND = \"Yellow\",\n                MAX_VALUE = Number.MAX_VALUE,\n                MIN_VALUE = -Number.MAX_VALUE,\n                ABSOLUTE = \"absolute\",\n                TRANSFORMED = \"transformed\",\n                ROTATED = \"rotated\",\n                TRANSPARENT = \"transparent\",\n                WIDTH = \"width\",\n                HEIGHT = \"height\",\n                X = \"x\",\n                Y = \"y\",\n                MOUSEWHEEL_NS = \"DOMMouseScroll\" + NS + \" mousewheel\" + NS,\n                MOBILE_ZOOM_RATE = 0.05,\n                MOBILE_PAN_DISTANCE = 5,\n                BUTTON_TEMPLATE = ({ className, icon, themeColor, text }) =>\n                    kendo.html.renderButton(`<button class=\"${className}\" href=\"#\">${text}</button>`, {\n                        icon: icon,\n                        themeColor\n                    }),\n                CONNECTION_CONTENT_OFFSET = 5;\n\n            diagram.DefaultConnectors = [{\n                name: TOP\n            }, {\n                name: BOTTOM\n            }, {\n                name: LEFT\n            }, {\n                name: RIGHT\n            }, {\n                name: AUTO,\n                position: function(shape) {\n                    return shape.getPosition(\"center\");\n                }\n            }];\n\n            var defaultButtons = {\n                cancel: {\n                    text: \"Cancel\",\n                    icon: \"cancel-outline\",\n                    className: \"k-diagram-cancel\",\n                },\n                update: {\n                    text: \"Save\",\n                    imageClass: \"save\",\n                    className: \"k-diagram-update\",\n                    icon: \"save\",\n                    themeColor: \"primary\"\n                }\n            };\n\n            diagram.shapeDefaults = function(extra) {\n                var defaults = {\n                    type: DEFAULT_SHAPE_TYPE,\n                    path: \"\",\n                    autoSize: true,\n                    visual: null,\n                    x: DEFAULT_SHAPE_POSITION,\n                    y: DEFAULT_SHAPE_POSITION,\n                    minWidth: DEFAULT_SHAPE_MINWIDTH,\n                    minHeight: DEFAULT_SHAPE_MINHEIGHT,\n                    width: DEFAULT_SHAPE_WIDTH,\n                    height: DEFAULT_SHAPE_HEIGHT,\n                    hover: {},\n                    editable: {\n                        connect: true,\n                        tools: []\n                    },\n                    connectors: diagram.DefaultConnectors,\n                    rotation: {\n                        angle: 0\n                    }\n                };\n\n                Utils.simpleExtend(defaults, extra);\n\n                return defaults;\n            };\n\n            function mwDelta(e) {\n                var origEvent = e.originalEvent,\n                    delta = 0;\n\n                if (origEvent.wheelDelta) {\n                    delta = -origEvent.wheelDelta / 40;\n                    delta = delta > 0 ? math.ceil(delta) : math.floor(delta);\n                } else if (origEvent.detail) {\n                    delta = origEvent.detail;\n                }\n\n                return delta;\n            }\n\n            function isAutoConnector(connector) {\n                return connector.options.name.toLowerCase() === AUTO.toLowerCase();\n            }\n\n            function closestConnector(point, connectors) {\n                var minimumDistance = MAXINT, resCtr, connector;\n                for (var i = 0; i < connectors.length; i++) {\n                    connector = connectors[i];\n                    if (!isAutoConnector(connector)) {\n                        var dist = point.distanceTo(connector.position());\n                        if (dist < minimumDistance) {\n                            minimumDistance = dist;\n                            resCtr = connector;\n                        }\n                    }\n                }\n                return resCtr;\n            }\n\n            function indicesOfItems(group, visuals) {\n                var i, indices = [], visual;\n                var children = group.drawingContainer().children;\n                var length = children.length;\n                for (i = 0; i < visuals.length; i++) {\n                    visual = visuals[i];\n                    for (var j = 0; j < length; j++) {\n                        if (children[j] == visual.drawingContainer()) {\n                            indices.push(j);\n                            break;\n                        }\n                    }\n                }\n                return indices;\n            }\n\n            var DiagramElement = Observable.extend({\n                init: function(options) {\n                    var that = this;\n                    that.dataItem = (options || {}).dataItem;\n                    Observable.fn.init.call(that);\n                    that.options = deepExtend({ id: diagram.randomId() }, that.options, options);\n                    that.isSelected = false;\n                    that.visual = new Group({\n                        id: that.options.id,\n                        autoSize: that.options.autoSize\n                    });\n                    that.id = that.options.id;\n                    that._template();\n                },\n\n                options: {\n                    hover: {},\n                    cursor: Cursors.grip,\n                    content: {\n                        align: \"center middle\"\n                    },\n                    selectable: true,\n                    serializable: true,\n                    enable: true\n                },\n\n                _getCursor: function(point) {\n                    if (this.adorner) {\n                        return this.adorner._getCursor(point);\n                    }\n                    return this.options.cursor;\n                },\n\n                visible: function(value) {\n                    if (isUndefined(value)) {\n                        return this.visual.visible();\n                    } else {\n                        this.visual.visible(value);\n                    }\n                },\n\n                bounds: function() {\n                },\n\n                refresh: function() {\n                    this.visual.redraw();\n                },\n\n                position: function(point) {\n                    this.options.x = point.x;\n                    this.options.y = point.y;\n                    this.visual.position(point);\n                },\n\n                toString: function() {\n                    return this.options.id;\n                },\n\n                serialize: function() {\n                    // the options json object describes the shape perfectly. So this object can serve as shape serialization.\n                    var json = deepExtend({}, { options: this.options });\n                    if (this.dataItem) {\n                        json.dataItem = this.dataItem.toString();\n                    }\n                    return json;\n                },\n\n                _content: function(content) {\n                    if (content !== undefined$1) {\n                        var options = this.options;\n\n                        if (diagram.Utils.isString(content)) {\n                            options.content.text = content;\n                        } else {\n                            deepExtend(options.content, content);\n                        }\n\n                        var contentOptions = options.content;\n                        var contentVisual = this._contentVisual;\n\n                        if (!contentVisual) {\n                            this._createContentVisual(contentOptions);\n                        } else {\n                            this._updateContentVisual(contentOptions);\n                        }\n                    }\n\n                    return this.options.content.text;\n                },\n\n                _createContentVisual: function(options) {\n                    if (options.text) {\n                        this._contentVisual = new TextBlock(options);\n                        this._contentVisual._includeInBBox = false;\n                        this.visual.append(this._contentVisual);\n                    }\n                },\n\n                _updateContentVisual: function(options) {\n                    this._contentVisual.redraw(options);\n                },\n\n                _hitTest: function(point) {\n                    var bounds = this.bounds();\n                    return this.visible() && bounds.contains(point) && this.options.enable;\n                },\n\n                _template: function() {\n                    var that = this;\n                    if (that.options.content.template) {\n                        var data = that.dataItem || {},\n                            elementTemplate = kendo.template(that.options.content.template, {\n                                paramName: \"dataItem\"\n                            });\n\n                        that.options.content.text = elementTemplate(data);\n                    }\n                },\n\n                _canSelect: function() {\n                    return this.options.selectable !== false;\n                },\n\n                toJSON: function() {\n                    return {\n                        id: this.options.id\n                    };\n                }\n            });\n\n            var Connector = Class.extend({\n                init: function(shape, options) {\n                    this.options = deepExtend({}, this.options, options);\n                    this.connections = [];\n                    this.shape = shape;\n                },\n                options: {\n                    width: 7,\n                    height: 7,\n                    fill: {\n                        color: DEFAULT_CONNECTION_BACKGROUND\n                    },\n                    hover: {}\n                },\n                position: function() {\n                    if (this.options.position) {\n                        return this.options.position(this.shape);\n                    } else {\n                        return this.shape.getPosition(this.options.name);\n                    }\n                },\n                toJSON: function() {\n                    return {\n                        shapeId: this.shape.toString(),\n                        connector: this.options.name\n                    };\n                }\n            });\n\n            Connector.parse = function(diagram, str) {\n                var tempStr = str.split(\":\"),\n                    id = tempStr[0],\n                    name = tempStr[1] || AUTO;\n\n                for (var i = 0; i < diagram.shapes.length; i++) {\n                    var shape = diagram.shapes[i];\n                    if (shape.options.id == id) {\n                        return shape.getConnector(name.trim());\n                    }\n                }\n            };\n\n            var Shape = DiagramElement.extend({\n                init: function(options, diagram) {\n                    var that = this;\n                    DiagramElement.fn.init.call(that, options);\n                    this.diagram = diagram;\n                    this.updateOptionsFromModel();\n                    options = that.options;\n                    that.connectors = [];\n                    that.type = options.type;\n                    that.createShapeVisual();\n                    that.updateBounds();\n                    that.content(that.content());\n\n                    that._createConnectors();\n                },\n\n                options: diagram.shapeDefaults(),\n\n                _setOptionsFromModel: function(model) {\n                    var modelOptions = filterShapeDataItem(model || this.dataItem);\n                    this.options = deepExtend({}, this.options, modelOptions);\n\n                    this.redrawVisual();\n                },\n\n                updateOptionsFromModel: function(model, field) {\n                    if (this.diagram && this.diagram._isEditable) {\n                        var modelOptions = filterShapeDataItem(model || this.dataItem);\n\n                        if (model && field) {\n                            if (!dataviz.inArray(field, [\"x\", \"y\", \"width\", \"height\"])) {\n                                if (this.options.visual) {\n                                    this._redrawVisual();\n                                } else if (modelOptions.type) {\n                                    this.options = deepExtend({}, this.options, modelOptions);\n                                    this._redrawVisual();\n                                }\n\n                                if (this.options.content) {\n                                    this._template();\n                                    this.content(this.options.content);\n                                }\n                            } else {\n                                var bounds = this.bounds();\n                                bounds[field] = model[field];\n                                this.bounds(bounds);\n                            }\n                        } else {\n                            this.options = deepExtend({}, this.options, modelOptions);\n                        }\n                    }\n                },\n\n                _redrawVisual: function() {\n                    this.visual.clear();\n                    this._contentVisual = null;\n                    this.options.dataItem = this.dataItem;\n                    this.createShapeVisual();\n                    this.updateBounds();\n                },\n\n                redrawVisual: function() {\n                    this._redrawVisual();\n                    if (this.options.content) {\n                        this._template();\n                        this.content(this.options.content);\n                    }\n                },\n\n                updateModel: function(syncChanges) {\n                    var diagram = this.diagram;\n                    if (diagram && diagram._isEditable) {\n                        var bounds = this._bounds;\n                        var model = this.dataItem;\n\n                        if (model) {\n                            diagram._suspendModelRefresh();\n                            if (defined(model.x) && bounds.x !== model.x) {\n                                model.set(\"x\", bounds.x);\n                            }\n\n                            if (defined(model.y) && bounds.y !== model.y) {\n                                model.set(\"y\", bounds.y);\n                            }\n\n                            if (defined(model.width) && bounds.width !== model.width) {\n                                model.set(\"width\", bounds.width);\n                            }\n\n                            if (defined(model.height) && bounds.height !== model.height) {\n                                model.set(\"height\", bounds.height);\n                            }\n\n                            this.dataItem = model;\n                            diagram._resumeModelRefresh();\n\n                            if (syncChanges) {\n                                diagram._syncShapeChanges();\n                            }\n                        }\n                    }\n                },\n\n                updateBounds: function() {\n                    var bounds = this.visual._measure(true);\n                    var options = this.options;\n                    this.bounds(new Rect(options.x, options.y, bounds.width, bounds.height));\n                    this._rotate();\n                    this._alignContent();\n                },\n\n                content: function(content) {\n                    var result = this._content(content);\n\n                    this._alignContent();\n\n                    return result;\n                },\n\n                _alignContent: function() {\n                    var contentOptions = this.options.content || {};\n                    var contentVisual = this._contentVisual;\n                    if (contentVisual && contentOptions.align) {\n                        var containerRect = this.visual._measure();\n                        var aligner = new diagram.RectAlign(containerRect);\n                        var contentBounds = contentVisual.drawingElement.bbox(null);\n\n                        var contentRect = new Rect(0, 0, contentBounds.width(), contentBounds.height());\n                        var alignedBounds = aligner.align(contentRect, contentOptions.align);\n\n                        contentVisual.position(alignedBounds.topLeft());\n                    }\n                },\n\n                _createConnectors: function() {\n                    var options = this.options,\n                        length = options.connectors.length,\n                        connectorDefaults = options.connectorDefaults,\n                        connector, i;\n\n                    for (i = 0; i < length; i++) {\n                        connector = new Connector(\n                            this, deepExtend({},\n                                connectorDefaults,\n                                options.connectors[i]\n                            )\n                        );\n                        this.connectors.push(connector);\n                    }\n                },\n\n                bounds: function(value) {\n                    var bounds;\n\n                    if (value) {\n                        if (isString(value)) {\n                            switch (value) {\n                                case TRANSFORMED :\n                                    bounds = this._transformedBounds();\n                                    break;\n                                case ABSOLUTE :\n                                    bounds = this._transformedBounds();\n                                    var pan = this.diagram._pan;\n                                    bounds.x += pan.x;\n                                    bounds.y += pan.y;\n                                    break;\n                                case ROTATED :\n                                    bounds = this._rotatedBounds();\n                                    break;\n                                default:\n                                    bounds = this._bounds;\n                            }\n                        } else {\n                            this._setBounds(value);\n                            this._triggerBoundsChange();\n                            if (!(this.diagram && this.diagram._layouting)) {\n                                this.refreshConnections();\n                            }\n                        }\n                    } else {\n                        bounds = this._bounds;\n                    }\n\n                    return bounds;\n                },\n\n                _setBounds: function(rect) {\n                    var options = this.options;\n                    var topLeft = rect.topLeft();\n                    var x = options.x = topLeft.x;\n                    var y = options.y = topLeft.y;\n                    var width = options.width = math.max(rect.width, options.minWidth);\n                    var height = options.height = math.max(rect.height, options.minHeight);\n\n                    this._bounds = new Rect(x, y, width, height);\n\n                    this.visual.redraw({\n                        x: x,\n                        y: y,\n                        width: width,\n                        height: height\n                    });\n                },\n\n                position: function(point) {\n                    if (point) {\n                        this.bounds(new Rect(point.x, point.y, this._bounds.width, this._bounds.height));\n                    } else {\n                        return this._bounds.topLeft();\n                    }\n                },\n                /**\n                 * Returns a clone of this shape.\n                 * @returns {Shape}\n                 */\n                clone: function() {\n                    var json = this.serialize();\n\n                    json.options.id = diagram.randomId();\n\n                    if (this.diagram && this.diagram._isEditable && defined(this.dataItem)) {\n                        json.options.dataItem = cloneDataItem(this.dataItem);\n                    }\n\n                    return new Shape(json.options);\n                },\n\n                select: function(value) {\n                    var diagram = this.diagram, selected, deselected;\n                    if (isUndefined(value)) {\n                        value = true;\n                    }\n\n                    if (this._canSelect()) {\n                        if (this.isSelected != value) {\n                            selected = [];\n                            deselected = [];\n                            this.isSelected = value;\n                            if (this.isSelected) {\n                                diagram._selectedItems.push(this);\n                                selected.push(this);\n                            } else {\n                                Utils.remove(diagram._selectedItems, this);\n                                deselected.push(this);\n                            }\n\n                            if (!diagram._internalSelection) {\n                                diagram._selectionChanged(selected, deselected);\n                            }\n\n                            return true;\n                        }\n                    }\n                },\n\n                rotate: function(angle, center, undoable) { // we assume the center is always the center of the shape.\n                    var rotate = this.visual.rotate();\n                    if (angle !== undefined$1) {\n                        if (undoable !== false && this.diagram && this.diagram.undoRedoService && angle !== rotate.angle) {\n                            this.diagram.undoRedoService.add(\n                                new diagram.RotateUnit(this.diagram._resizingAdorner, [this], [rotate.angle]), false);\n                        }\n\n                        var b = this.bounds(),\n                            sc = new Point(b.width / 2, b.height / 2),\n                            deltaAngle,\n                            newPosition;\n\n                        if (center) {\n                            deltaAngle = angle - rotate.angle;\n                            newPosition = b.center().rotate(center, 360 - deltaAngle).minus(sc);\n                            this._rotationOffset = this._rotationOffset.plus(newPosition.minus(b.topLeft()));\n                            this.position(newPosition);\n                        }\n\n                        this.visual.rotate(angle, sc);\n                        this.options.rotation.angle = angle;\n\n                        if (this.diagram && this.diagram._connectorsAdorner) {\n                            this.diagram._connectorsAdorner.refresh();\n                        }\n\n                        this.refreshConnections();\n\n                        if (this.diagram) {\n                            this.diagram.trigger(ITEMROTATE, { item: this });\n                        }\n                    }\n\n                    return rotate;\n                },\n\n                connections: function(type) { // in, out, undefined = both\n                    var result = [], i, j, con, cons, ctr;\n\n                    for (i = 0; i < this.connectors.length; i++) {\n                        ctr = this.connectors[i];\n                        cons = ctr.connections;\n                        for (j = 0, cons; j < cons.length; j++) {\n                            con = cons[j];\n                            if (type == \"out\") {\n                                var source = con.source();\n                                if (source.shape && source.shape == this) {\n                                    result.push(con);\n                                }\n                            } else if (type == \"in\") {\n                                var target = con.target();\n                                if (target.shape && target.shape == this) {\n                                    result.push(con);\n                                }\n                            } else {\n                                result.push(con);\n                            }\n                        }\n                    }\n\n                    return result;\n                },\n\n                refreshConnections: function() {\n                    $.each(this.connections(), function() {\n                        this.refresh();\n                    });\n                },\n                /**\n                 * Gets a connector of this shape either by the connector's supposed name or\n                 * via a Point in which case the closest connector will be returned.\n                 * @param nameOrPoint The name of a Connector or a Point.\n                 * @returns {Connector}\n                 */\n                getConnector: function(nameOrPoint) {\n                    var i, ctr;\n                    if (isString(nameOrPoint)) {\n                        nameOrPoint = nameOrPoint.toLocaleLowerCase();\n                        for (i = 0; i < this.connectors.length; i++) {\n                            ctr = this.connectors[i];\n                            if (ctr.options.name.toLocaleLowerCase() == nameOrPoint) {\n                                return ctr;\n                            }\n                        }\n                    } else if (nameOrPoint instanceof Point) {\n                        return closestConnector(nameOrPoint, this.connectors);\n                    } else {\n                        return this.connectors.length ? this.connectors[0] : null;\n                    }\n                },\n\n                getPosition: function(side) {\n                    var b = this.bounds(),\n                        fnName = side.charAt(0).toLowerCase() + side.slice(1);\n\n                    if (isFunction(b[fnName])) {\n                        return this._transformPoint(b[fnName]());\n                    }\n\n                    return b.center();\n                },\n\n                redraw: function(options) {\n                    if (options) {\n                        var shapeOptions = this.options;\n                        var boundsChange;\n\n                        this.shapeVisual.redraw(this._visualOptions(options));\n\n                        if (this._diffNumericOptions(options, [WIDTH, HEIGHT, X, Y])) {\n                            this.bounds(new Rect(shapeOptions.x, shapeOptions.y, shapeOptions.width, shapeOptions.height));\n                            boundsChange = true;\n                        }\n\n                        if (options.connectors) {\n                            shapeOptions.connectors = options.connectors;\n                            this._updateConnectors();\n                        }\n\n                        shapeOptions = deepExtend(shapeOptions, options);\n\n                        if (options.rotation || boundsChange) {\n                            this._rotate();\n                        }\n\n                        if (shapeOptions.content) {\n                            this.content(shapeOptions.content);\n                        }\n                    }\n                },\n\n                _updateConnectors: function() {\n                    var connections = this.connections();\n                    this.connectors = [];\n                    this._createConnectors();\n                    var connection;\n                    var source;\n                    var target;\n\n                    for (var idx = 0; idx < connections.length; idx++) {\n                        connection = connections[idx];\n                        source = connection.source();\n                        target = connection.target();\n                        if (source.shape && source.shape === this) {\n                            connection.source(this.getConnector(source.options.name) || null);\n                        } else if (target.shape && target.shape === this) {\n                            connection.target(this.getConnector(target.options.name) || null);\n                        }\n                        connection.updateModel();\n                    }\n                },\n\n                _diffNumericOptions: diagram.diffNumericOptions,\n\n                _visualOptions: function(options) {\n                    return {\n                        data: options.path,\n                        source: options.source,\n                        hover: options.hover,\n                        fill: options.fill,\n                        stroke: options.stroke\n                    };\n                },\n\n                _triggerBoundsChange: function() {\n                    if (this.diagram) {\n                        this.diagram.trigger(ITEMBOUNDSCHANGE, { item: this, bounds: this._bounds.clone() }); // the trigger modifies the arguments internally.\n                    }\n                },\n\n                _transformPoint: function(point) {\n                    var rotate = this.rotate(),\n                        bounds = this.bounds(),\n                        tl = bounds.topLeft();\n\n                    if (rotate.angle) {\n                        point.rotate(rotate.center().plus(tl), 360 - rotate.angle);\n                    }\n\n                    return point;\n                },\n\n                _transformedBounds: function() {\n                    var bounds = this.bounds(),\n                        tl = bounds.topLeft(),\n                        br = bounds.bottomRight();\n\n                    return Rect.fromPoints(this.diagram.modelToView(tl), this.diagram.modelToView(br));\n                },\n\n                _rotatedBounds: function() {\n                    var bounds = this.bounds().rotatedBounds(this.rotate().angle),\n                        tl = bounds.topLeft(),\n                        br = bounds.bottomRight();\n\n                    return Rect.fromPoints(tl, br);\n                },\n\n                _rotate: function() {\n                    var rotation = this.options.rotation;\n\n                    if (rotation && rotation.angle) {\n                        this.rotate(rotation.angle);\n                    }\n\n                    this._rotationOffset = new Point();\n                },\n\n                _hover: function(value) {\n                    var options = this.options,\n                        hover = options.hover,\n                        stroke = options.stroke,\n                        fill = options.fill;\n\n                    if (value && isDefined(hover.stroke)) {\n                        stroke = deepExtend({}, stroke, hover.stroke);\n                    }\n\n                    if (value && isDefined(hover.fill)) {\n                        fill = hover.fill;\n                    }\n\n                    this.shapeVisual.redraw({\n                        stroke: stroke,\n                        fill: fill\n                    });\n\n                    if (options.editable && options.editable.connect) {\n                        this.diagram._showConnectors(this, value);\n                    }\n                },\n\n                _hitTest: function(value) {\n                    if (this.visible()) {\n                        var bounds = this.bounds(), rotatedPoint,\n                            angle = this.rotate().angle;\n\n                        if (value.isEmpty && !value.isEmpty()) { // rect selection\n                            return Intersect.rects(value, bounds, angle ? angle : 0);\n                        } else { // point\n                            rotatedPoint = value.clone().rotate(bounds.center(), angle); // cloning is important because rotate modifies the point inline.\n                            if (bounds.contains(rotatedPoint)) {\n                                return this;\n                            }\n                        }\n                    }\n                },\n\n                toJSON: function() {\n                    return {\n                        shapeId: this.options.id\n                    };\n                },\n\n                createShapeVisual: function() {\n                    var options = this.options;\n                    var visualOptions = this._visualOptions(options);\n                    var visualTemplate = options.visual;\n                    var type = (options.type + \"\").toLocaleLowerCase();\n                    var shapeVisual;\n\n                    visualOptions.width = options.width;\n                    visualOptions.height = options.height;\n\n                    if (isFunction(visualTemplate)) { // custom template\n                        shapeVisual = visualTemplate.call(this, options);\n                    } else if (visualOptions.data) {\n                        shapeVisual = new Path(visualOptions);\n                        translateToOrigin(shapeVisual);\n                    } else if (type == \"rectangle\") {\n                        shapeVisual = new Rectangle(visualOptions);\n                    } else if (type == \"circle\") {\n                        shapeVisual = new Circle(visualOptions);\n                    } else if (type == \"text\") {\n                        shapeVisual = new TextBlock(visualOptions);\n                    } else if (type == \"image\") {\n                        shapeVisual = new Image(visualOptions);\n                    } else {\n                        shapeVisual = new Path(visualOptions);\n                    }\n\n                    this.shapeVisual = shapeVisual;\n                    this.visual.append(this.shapeVisual);\n                }\n            });\n\n            /**\n             * The visual link between two Shapes through the intermediate of Connectors.\n             */\n            var Connection = DiagramElement.extend({\n                init: function(from, to, options) {\n                    var that = this;\n                    DiagramElement.fn.init.call(that, options);\n                    this.updateOptionsFromModel();\n                    this._initRouter();\n                    that.path = new diagram.Polyline(that.options);\n                    that.path.fill(TRANSPARENT);\n                    that.visual.append(that.path);\n                    that._sourcePoint = that._targetPoint = new Point();\n                    that._setSource(from);\n                    that._setTarget(to);\n                    that.content(that.options.content);\n                    that.definers = [];\n                    if (defined(options) && options.points) {\n                        that.points(options.points);\n                    }\n                },\n\n                options: {\n                    hover: {\n                        stroke: {}\n                    },\n                    startCap: NONE,\n                    endCap: NONE,\n                    points: [],\n                    selectable: true,\n                    fromConnector: AUTO,\n                    toConnector: AUTO\n                },\n\n                _setOptionsFromModel: function(model) {\n                    this.updateOptionsFromModel(model || this.dataItem);\n                },\n\n                updateOptionsFromModel: function(model) {\n                    if (this.diagram && this.diagram._isEditable) {\n                        var dataMap = this.diagram._dataMap;\n                        var options = filterConnectionDataItem(model || this.dataItem);\n\n                        if (model) {\n                            if (defined(options.from)) {\n                                var from = dataMap[options.from];\n                                if (from && defined(options.fromConnector)) {\n                                   from = from.getConnector(options.fromConnector);\n                                }\n                                this.source(from);\n                            } else if (defined(options.fromX) && defined(options.fromY)) {\n                                this.source(new Point(options.fromX, options.fromY));\n                            }\n\n                            if (defined(options.to)) {\n                                var to = dataMap[options.to];\n                                if (to && defined(options.toConnector)) {\n                                    to = to.getConnector(options.toConnector);\n                                }\n                                this.target(to);\n                            } else if (defined(options.toX) && defined(options.toY)) {\n                                this.target(new Point(options.toX, options.toY));\n                            }\n\n                            if (defined(options.type) && this.type() !== options.type) {\n                                this.points([]);\n                                this.type(options.type);\n                            }\n\n                            this.dataItem = model;\n\n                            this._template();\n                            this.redraw(this.options);\n                        } else {\n                            this.options = deepExtend({}, options, this.options);\n                        }\n                    }\n                },\n\n                updateModel: function(syncChanges) {\n                    if (this.diagram && this.diagram._isEditable) {\n                        if (this.diagram.connectionsDataSource) {\n                            var model = this.diagram.connectionsDataSource.getByUid(this.dataItem.uid);\n\n                            if (model) {\n                                this.diagram._suspendModelRefresh();\n                                if (defined(this.options.fromX) && this.options.fromX !== null) {\n                                    clearField(\"from\", model);\n                                    clearField(\"fromConnector\", model);\n                                    model.set(\"fromX\", this.options.fromX);\n                                    model.set(\"fromY\", this.options.fromY);\n                                } else {\n                                    model.set(\"from\", this.options.from);\n                                    if (defined(model.fromConnector)) {\n                                        model.set(\"fromConnector\", this.sourceConnector ? this.sourceConnector.options.name : null);\n                                    }\n                                    clearField(\"fromX\", model);\n                                    clearField(\"fromY\", model);\n                                }\n\n                                if (defined(this.options.toX) && this.options.toX !== null) {\n                                    clearField(\"to\", model);\n                                    clearField(\"toConnector\", model);\n                                    model.set(\"toX\", this.options.toX);\n                                    model.set(\"toY\", this.options.toY);\n                                } else {\n                                    model.set(\"to\", this.options.to);\n                                    if (defined(model.toConnector)) {\n                                        model.set(\"toConnector\", this.targetConnector ? this.targetConnector.options.name : null);\n                                    }\n                                    clearField(\"toX\", model);\n                                    clearField(\"toY\", model);\n                                }\n\n                                if (defined(this.options.type) && defined(model.type)) {\n                                    model.set(\"type\", this.options.type);\n                                }\n\n                                this.dataItem = model;\n                                this.diagram._resumeModelRefresh();\n\n                                if (syncChanges) {\n                                    this.diagram._syncConnectionChanges();\n                                }\n                            }\n                        }\n                    }\n                },\n\n                /**\n                 * Gets the Point where the source of the connection resides.\n                 * If the endpoint in Auto-connector the location of the resolved connector will be returned.\n                 * If the endpoint is floating the location of the endpoint is returned.\n                 */\n                sourcePoint: function() {\n                    return this._resolvedSourceConnector ? this._resolvedSourceConnector.position() : this._sourcePoint;\n                },\n\n                _setSource: function(source) {\n                    var shapeSource = source instanceof Shape;\n                    var defaultConnector = this.options.fromConnector || AUTO;\n                    var dataItem;\n                    if (shapeSource && !source.getConnector(defaultConnector)) {\n                        return;\n                    }\n\n                    if (source !== undefined$1) {\n                        this.from = source;\n                    }\n\n                    this._removeFromSourceConnector();\n\n                    if (source === null) { // detach\n                        if (this.sourceConnector) {\n                            this._sourcePoint = (this._resolvedSourceConnector || this.sourceConnector).position();\n                            this._clearSourceConnector();\n                            this._setFromOptions(null, this._sourcePoint);\n                        }\n                    } else if (source instanceof Connector) {\n                        dataItem = source.shape.dataItem;\n                        if (dataItem) {\n                            this._setFromOptions(dataItem.id);\n                        }\n                        this.sourceConnector = source;\n                        this.sourceConnector.connections.push(this);\n                    } else if (source instanceof Point) {\n                        this._setFromOptions(null, source);\n                        this._sourcePoint = source;\n                        if (this.sourceConnector) {\n                            this._clearSourceConnector();\n                        }\n\n                    } else if (shapeSource) {\n                        dataItem = source.dataItem;\n                        if (dataItem) {\n                            this._setFromOptions(dataItem.id);\n                        }\n\n                        this.sourceConnector = source.getConnector(defaultConnector);\n                        this.sourceConnector.connections.push(this);\n                    }\n                },\n\n                source: function(source, undoable) {\n                    if (isDefined(source)) {\n                        if (undoable && this.diagram) {\n                            this.diagram.undoRedoService.addCompositeItem(new diagram.ConnectionEditUnit(this, source));\n                        }\n                        this._setSource(source);\n                        this.refresh();\n                    }\n                    return this.sourceConnector ? this.sourceConnector : this._sourcePoint;\n                },\n\n                _setFromOptions: function(from, fromPoint) {\n                    this.options.from = from;\n                    if (fromPoint) {\n                        this.options.fromX = fromPoint.x;\n                        this.options.fromY = fromPoint.y;\n                    } else {\n                        this.options.fromX = null;\n                        this.options.fromY = null;\n                    }\n                },\n\n                /**\n                 * Gets or sets the PathDefiner of the sourcePoint.\n                 * The left part of this definer is always null since it defines the source tangent.\n                 * @param value\n                 * @returns {*}\n                 */\n                sourceDefiner: function(value) {\n                    if (value) {\n                        if (value instanceof diagram.PathDefiner) {\n                            value.left = null;\n                            this._sourceDefiner = value;\n                            this.source(value.point); // refresh implicit here\n                        } else {\n                            throw \"The sourceDefiner needs to be a PathDefiner.\";\n                        }\n                    } else {\n                        if (!this._sourceDefiner) {\n                            this._sourceDefiner = new diagram.PathDefiner(this.sourcePoint(), null, null);\n                        }\n                        return this._sourceDefiner;\n                    }\n                },\n\n                /**\n                 * Gets  the Point where the target of the connection resides.\n                 */\n                targetPoint: function() {\n                    return this._resolvedTargetConnector ? this._resolvedTargetConnector.position() : this._targetPoint;\n                },\n\n                _setTarget: function(target) {\n                    var shapeTarget = target instanceof Shape;\n                    var defaultConnector = this.options.toConnector || AUTO;\n                    var dataItem;\n\n                    if (shapeTarget && !target.getConnector(defaultConnector)) {\n                        return;\n                    }\n\n                    if (target !== undefined$1) {\n                        this.to = target;\n                    }\n\n                    this._removeFromTargetConnector();\n\n                    if (target === null) { // detach\n                        if (this.targetConnector) {\n                            this._targetPoint = (this._resolvedTargetConnector || this.targetConnector).position();\n                            this._clearTargetConnector();\n                            this._setToOptions(null, this._targetPoint);\n                        }\n                    } else if (target instanceof Connector) {\n                        dataItem = target.shape.dataItem;\n                        if (dataItem) {\n                            this._setToOptions(dataItem.id);\n                        }\n                        this.targetConnector = target;\n                        this.targetConnector.connections.push(this);\n                    } else if (target instanceof Point) {\n                        this._setToOptions(null, target);\n                        this._targetPoint = target;\n                        if (this.targetConnector) {\n                            this._clearTargetConnector();\n                        }\n                    } else if (shapeTarget) {\n                        dataItem = target.dataItem;\n                        if (dataItem) {\n                            this._setToOptions(dataItem.id);\n                        }\n                        this.targetConnector = target.getConnector(defaultConnector);\n                        this.targetConnector.connections.push(this);\n                    }\n                },\n\n                target: function(target, undoable) {\n                    if (isDefined(target)) {\n                        if (undoable && this.diagram) {\n                            this.diagram.undoRedoService.addCompositeItem(new diagram.ConnectionEditUnit(this, undefined$1, target));\n                        }\n                        this._setTarget(target);\n\n                        this.refresh();\n                    }\n                    return this.targetConnector ? this.targetConnector : this._targetPoint;\n                },\n\n                _setToOptions: function(to, toPoint) {\n                    this.options.to = to;\n                    if (toPoint) {\n                        this.options.toX = toPoint.x;\n                        this.options.toY = toPoint.y;\n                    } else {\n                        this.options.toX = null;\n                        this.options.toY = null;\n                    }\n                },\n\n                /**\n                 * Gets or sets the PathDefiner of the targetPoint.\n                 * The right part of this definer is always null since it defines the target tangent.\n                 * @param value\n                 * @returns {*}\n                 */\n                targetDefiner: function(value) {\n                    if (value) {\n                        if (value instanceof diagram.PathDefiner) {\n                            value.right = null;\n                            this._targetDefiner = value;\n                            this.target(value.point); // refresh implicit here\n                        } else {\n                            throw \"The sourceDefiner needs to be a PathDefiner.\";\n                        }\n                    } else {\n                        if (!this._targetDefiner) {\n                            this._targetDefiner = new diagram.PathDefiner(this.targetPoint(), null, null);\n                        }\n                        return this._targetDefiner;\n                    }\n                },\n\n                _updateConnectors: function() {\n                    this._updateConnector(this.source(), \"source\");\n                    this._updateConnector(this.target(), \"target\");\n                },\n\n                _updateConnector: function(instance, name) {\n                    var that = this;\n                    var diagram = that.diagram;\n                    if (instance instanceof Connector && !diagram.getShapeById(instance.shape.id)) {\n                        var dataItem = instance.shape.dataItem;\n                        var connectorName = instance.options.name;\n                        var setNewTarget = function() {\n                            var shape = diagram._dataMap[dataItem.id];\n                            instance = shape.getConnector(connectorName);\n                            that[name](instance, false);\n                            that.updateModel();\n                        };\n                        if (diagram._dataMap[dataItem.id]) {\n                           setNewTarget();\n                        } else {\n                            var inactiveItem = diagram._inactiveShapeItems.getByUid(dataItem.uid);\n                            if (inactiveItem) {\n                                diagram._deferredConnectionUpdates.push(inactiveItem.onActivate(setNewTarget));\n                            }\n                        }\n                    } else {\n                        that[name](instance, false);\n                    }\n                },\n\n                content: function(content) {\n                    var result = this._content(content);\n                    if (defined(content)) {\n                        this._alignContent();\n                    }\n                    return result;\n                },\n\n                _createContentVisual: function(options) {\n                    var visual;\n                    if (isFunction(options.visual)) {\n                        visual = options.visual.call(this, options);\n                    } else if (options.text) {\n                        visual = new TextBlock(options);\n                    }\n\n                    if (visual) {\n                        this._contentVisual = visual;\n                        visual._includeInBBox = false;\n                        this.visual.append(visual);\n                    }\n\n                    return visual;\n                },\n\n                _updateContentVisual: function(options) {\n                    if (isFunction(options.visual)) {\n                        this.visual.remove(this._contentVisual);\n                        this._createContentVisual(options);\n                    } else {\n                        this._contentVisual.redraw(options);\n                    }\n                },\n\n                _alignContent: function() {\n                    if (this._contentVisual) {\n                        var offset = CONNECTION_CONTENT_OFFSET;\n                        var points = this.allPoints();\n                        var endIdx = math.floor(points.length / 2);\n                        var startIdx = endIdx - 1;\n\n                        while (startIdx > 0 && points[startIdx].equals(points[endIdx])) {\n                            startIdx--;\n                            endIdx++;\n                        }\n\n                        var endPoint = points[endIdx];\n                        var startPoint = points[startIdx];\n\n                        var boundingBox = this._contentVisual._measure();\n                        var width = boundingBox.width;\n                        var height = boundingBox.height;\n                        var alignToPath = points.length % 2 === 0;\n                        var distance = startPoint.distanceTo(endPoint);\n\n                        if (alignToPath && points.length > 2 && distance > 0 &&\n                            ((startPoint.y === endPoint.y && distance < width) || (startPoint.x === endPoint.x && distance < height))) {\n                            alignToPath = false;\n                            offset = 0;\n                        }\n\n                        var point;\n\n                        if (alignToPath) {\n                            var angle = draw.util.deg(math.atan2(endPoint.y - startPoint.y, endPoint.x - startPoint.x));\n                            point = new Point((endPoint.x - startPoint.x) / 2 + startPoint.x, (endPoint.y - startPoint.y) / 2 + startPoint.y);\n\n                            if (math.abs(angle) === 90) {\n                                point.x += offset;\n                                point.y -= height / 2;\n                            } else if (angle % 180 === 0) {\n                                point.x -= width / 2;\n                                point.y -= height + offset;\n                            } else if (angle < -90 || (0 < angle && angle < 90)) {\n                                point.y -= height;\n                            } else if (angle < 0 || angle > 90) {\n                                point.x -= width;\n                                point.y -= height;\n                            }\n                        } else {\n                            var midIdx = math.floor(points.length / 2);\n                            point = points[midIdx].clone();\n                            startPoint = points[midIdx - 1];\n                            endPoint = points[midIdx + 1];\n\n                            var offsetX = startPoint.x <= point.x && endPoint.x <= point.x ? offset : -boundingBox.width - offset;\n                            var offsetY = startPoint.y <= point.y && endPoint.y <= point.y ? offset : -boundingBox.height - offset;\n\n                            point.x += offsetX;\n                            point.y += offsetY;\n                        }\n\n                        this._contentVisual.position(point);\n                    }\n                },\n\n                /**\n                 * Selects or unselects this connections.\n                 * @param value True to select, false to unselect.\n                 */\n                select: function(value) {\n                    var diagram = this.diagram, selected, deselected;\n                    if (this._canSelect()) {\n                        if (this.isSelected !== value) {\n                            this.isSelected = value;\n                            selected = [];\n                            deselected = [];\n                            if (this.isSelected) {\n                                this.adorner = new ConnectionEditAdorner(this, this.options.selection);\n                                diagram._adorn(this.adorner, true);\n                                diagram._selectedItems.push(this);\n                                selected.push(this);\n                            } else {\n                                if (this.adorner) {\n                                    diagram._adorn(this.adorner, false);\n                                    Utils.remove(diagram._selectedItems, this);\n                                    this.adorner = undefined$1;\n                                    deselected.push(this);\n                                }\n                            }\n\n                            if (this.adorner) {\n                                this.adorner.refresh();\n                            }\n\n                            if (!diagram._internalSelection) {\n                                diagram._selectionChanged(selected, deselected);\n                            }\n                            return true;\n                        }\n                    }\n                },\n                /**\n                 * Gets or sets the bounds of this connection.\n                 * @param value A Rect object.\n                 * @remark This is automatically set in the refresh().\n                 * @returns {Rect}\n                 */\n                bounds: function(value) {\n                    if (value && !isString(value)) {\n                        this._bounds = value;\n                    } else {\n                        return this._bounds;\n                    }\n                },\n                /**\n                 * Gets or sets the connection type (see ConnectionType enumeration).\n                 * @param value A ConnectionType value.\n                 * @returns {ConnectionType}\n                 */\n                type: function(value) {\n                    var options = this.options;\n                    if (value) {\n                        if (value !== options.type) {\n                            options.type = value;\n                            this._initRouter();\n                            this.refresh();\n                        }\n                    } else {\n                        return options.type;\n                    }\n                },\n\n                _initRouter: function() {\n                    var type = (this.options.type || \"\").toLowerCase();\n                    if (type == CASCADING) {\n                        this._router = new CascadingRouter(this);\n                    } else {\n                        this._router = new PolylineRouter(this);\n                    }\n                },\n                /**\n                 * Gets or sets the collection of *intermediate* points.\n                 * The 'allPoints()' property will return all the points.\n                 * The 'definers' property returns the definers of the intermediate points.\n                 * The 'sourceDefiner' and 'targetDefiner' return the definers of the endpoints.\n                 * @param value\n                 */\n                points: function(value) {\n                    if (value) {\n                        this.definers = [];\n                        for (var i = 0; i < value.length; i++) {\n                            var definition = value[i];\n                            if (definition instanceof diagram.Point) {\n                                this.definers.push(new diagram.PathDefiner(definition));\n                            } else if (definition.hasOwnProperty(\"x\") && definition.hasOwnProperty(\"y\")) { // e.g. Clipboard does not preserve the Point definition and tunred into an Object\n                                this.definers.push(new diagram.PathDefiner(new Point(definition.x, definition.y)));\n                            } else {\n                                throw \"A Connection point needs to be a Point or an object with x and y properties.\";\n                            }\n                        }\n\n                    } else {\n                        var pts = [];\n                        if (isDefined(this.definers)) {\n                            for (var k = 0; k < this.definers.length; k++) {\n                                pts.push(this.definers[k].point);\n                            }\n                        }\n                        return pts;\n                    }\n                },\n                /**\n                 * Gets all the points of this connection. This is the combination of the sourcePoint, the points and the targetPoint.\n                 * @returns {Array}\n                 */\n                allPoints: function() {\n                    var pts = [this.sourcePoint()];\n                    if (this.definers) {\n                        for (var k = 0; k < this.definers.length; k++) {\n                            pts.push(this.definers[k].point);\n                        }\n                    }\n                    pts.push(this.targetPoint());\n                    return pts;\n                },\n\n                refresh: function() {\n                    this._resolveConnectors();\n                    this._refreshPath();\n                    this._alignContent();\n\n                    if (this.adorner) {\n                        this.adorner.refresh();\n                    }\n                },\n\n                _resolveConnectors: function() {\n                    var connection = this,\n                        sourcePoint, targetPoint,\n                        sourceConnectors, targetConnectors,\n                        source = connection.source(),\n                        target = connection.target();\n\n                    if (source instanceof Point) {\n                        sourcePoint = source;\n                    } else if (source instanceof Connector) {\n                        if (isAutoConnector(source)) {\n                            sourceConnectors = source.shape.connectors;\n                        } else {\n                            sourceConnectors = [source];\n                        }\n                    }\n\n                    if (target instanceof Point) {\n                        targetPoint = target;\n                    } else if (target instanceof Connector) {\n                        if (isAutoConnector(target)) {\n                            targetConnectors = target.shape.connectors;\n                        } else {\n                            targetConnectors = [target];\n                        }\n                    }\n\n                    if (sourcePoint) {\n                        if (targetConnectors) {\n                            connection._resolvedTargetConnector = closestConnector(sourcePoint, targetConnectors);\n                        }\n                    } else if (sourceConnectors) {\n                        if (targetPoint) {\n                            connection._resolvedSourceConnector = closestConnector(targetPoint, sourceConnectors);\n                        } else if (targetConnectors) {\n                            this._resolveAutoConnectors(sourceConnectors, targetConnectors);\n                        }\n                    }\n                },\n\n                _resolveAutoConnectors: function(sourceConnectors, targetConnectors) {\n                    var minNonConflict = MAXINT;\n                    var minDist = MAXINT;\n                    var minNonConflictSource, minNonConflictTarget;\n                    var sourcePoint, targetPoint;\n                    var minSource, minTarget;\n                    var sourceConnector, targetConnector;\n                    var sourceIdx, targetIdx;\n                    var dist;\n\n                    for (sourceIdx = 0; sourceIdx < sourceConnectors.length; sourceIdx++) {\n                        sourceConnector = sourceConnectors[sourceIdx];\n                        if (!isAutoConnector(sourceConnector)) {\n                            sourcePoint = sourceConnector.position();\n\n                            for (targetIdx = 0; targetIdx < targetConnectors.length; targetIdx++) {\n                                targetConnector = targetConnectors[targetIdx];\n                                if (!isAutoConnector(targetConnector)) {\n                                    targetPoint = targetConnector.position();\n                                    dist = math.round(sourcePoint.distanceTo(targetPoint));\n\n                                    if (dist < minNonConflict && this.diagram && this._testRoutePoints(sourcePoint, targetPoint, sourceConnector, targetConnector)) {\n                                        minNonConflict = dist;\n                                        minNonConflictSource = sourceConnector;\n                                        minNonConflictTarget = targetConnector;\n                                    }\n\n                                    if (dist < minDist) {\n                                        minSource = sourceConnector;\n                                        minTarget = targetConnector;\n                                        minDist = dist;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    if (minNonConflictSource) {\n                        minSource = minNonConflictSource;\n                        minTarget = minNonConflictTarget;\n                    }\n\n                    this._resolvedSourceConnector = minSource;\n                    this._resolvedTargetConnector = minTarget;\n                },\n\n                _testRoutePoints: function(sourcePoint, targetPoint, sourceConnector, targetConnector) {\n                    var router = this._router;\n                    var passRoute = true;\n                    if (router instanceof CascadingRouter) {\n                        var points = router.routePoints(sourcePoint, targetPoint, sourceConnector, targetConnector),\n                            start, end,\n                             rect, exclude;\n\n                        exclude = this._getRouteExclude(sourcePoint, targetPoint, sourceConnector.shape, targetConnector.shape);\n                        points.unshift(sourcePoint);\n                        points.push(targetPoint);\n\n\n                        for (var idx = 1; idx < points.length; idx++) {\n                            start = points[idx - 1];\n                            end = points[idx];\n                            rect = new Rect(math.min(start.x, end.x), math.min(start.y, end.y),\n                                            math.abs(start.x - end.x), math.abs(start.y - end.y));\n                            if (rect.width > 0) {\n                                rect.x++;\n                                rect.width -= 2;\n                            }\n                            if (rect.height > 0) {\n                                rect.y++;\n                                rect.height -= 2;\n                            }\n\n                            if (!rect.isEmpty() && this.diagram._shapesQuadTree.hitTestRect(rect, exclude)) {\n                                passRoute = false;\n                                break;\n                            }\n                        }\n                    }\n                    return passRoute;\n                },\n\n                _getRouteExclude: function(sourcePoint, targetPoint, sourceShape, targetShape) {\n                    var exclude = [];\n                    if (this._isPointInsideShape(sourcePoint, sourceShape)) {\n                        exclude.push(sourceShape);\n                    }\n                    if (this._isPointInsideShape(targetPoint, targetShape)) {\n                        exclude.push(targetShape);\n                    }\n                    return exclude;\n                },\n\n                _isPointInsideShape: function(point, shape) {\n                    var bounds = shape.bounds(), rotatedPoint,\n                        angle = shape.rotate().angle,\n                        pointX, pointY,\n                        boundsX = bounds.x,\n                        boundsY = bounds.y;\n\n                    rotatedPoint = point.clone().rotate(bounds.center(), angle);\n                    pointX = rotatedPoint.x;\n                    pointY = rotatedPoint.y;\n                    return pointX > boundsX && pointX < (boundsX + bounds.width) && pointY > boundsY && pointY < (boundsY + bounds.height);\n                },\n\n                redraw: function(options) {\n                    if (options) {\n                        this.options = deepExtend({}, this.options, options);\n\n                        var points = this.options.points;\n\n                        if (defined(points) && points.length > 0) {\n                            this.points(points);\n                            this._refreshPath();\n                        }\n\n                        if ((options && options.content) || options.text) {\n                            this.content(options.content);\n                        }\n\n                        this.path.redraw({\n                            fill: options.fill,\n                            stroke: options.stroke,\n                            startCap: options.startCap,\n                            endCap: options.endCap\n                        });\n                    }\n                },\n                /**\n                 * Returns a clone of this connection.\n                 * @returns {Connection}\n                 */\n                clone: function() {\n                    var json = this.serialize();\n\n                    if (this.diagram && this.diagram._isEditable && defined(this.dataItem)) {\n                        json.options.dataItem = cloneDataItem(this.dataItem);\n                    }\n\n                    return new Connection(this.from, this.to, json.options);\n                },\n                /**\n                 * Returns a serialized connection in json format. Consist of the options and the dataItem.\n                 * @returns {Connection}\n                 */\n                serialize: function() {\n                    var from = this.from.toJSON ? this.from.toJSON : this.from.toString(),\n                        to = this.to.toJSON ? this.to.toJSON : this.to.toString();\n\n                    var json = deepExtend({}, {\n                        options: this.options,\n                        from: from,\n                        to: to\n                    });\n\n                    if (defined(this.dataItem)) {\n                        json.dataItem = this.dataItem.toString();\n                    }\n\n                    json.options.points = this.points();\n                    return json;\n                },\n\n                /**\n                 * Returns whether the given Point or Rect hits this connection.\n                 * @param value\n                 * @returns {Connection}\n                 * @private\n                 */\n                _hitTest: function(value) {\n                    if (this.visible()) {\n                        var p = new Point(value.x, value.y), from = this.sourcePoint(), to = this.targetPoint();\n                        if (value.isEmpty && !value.isEmpty() && value.contains(from) && value.contains(to)) {\n                            return this;\n                        }\n                        if (this._router.hitTest(p)) {\n                            return this;\n                        }\n                    }\n                },\n\n                _hover: function(value) {\n                    var color = (this.options.stroke || {}).color;\n\n                    if (value && isDefined(this.options.hover.stroke.color)) {\n                        color = this.options.hover.stroke.color;\n                    }\n\n                    this.path.redraw({\n                        stroke: {\n                            color: color\n                        }\n                    });\n                },\n\n                _refreshPath: function() {\n                    if (!defined(this.path)) {\n                        return;\n                    }\n                    this._drawPath();\n                    this.bounds(this._router.getBounds());\n                },\n\n                _drawPath: function() {\n                    if (this._router) {\n                        this._router.route(); // sets the intermediate points\n                    }\n                    var source = this.sourcePoint();\n                    var target = this.targetPoint();\n                    var points = this.points();\n\n                    this.path.redraw({\n                        points: [source].concat(points, [target])\n                    });\n                },\n\n                _clearSourceConnector: function() {\n                    this.sourceConnector = undefined$1;\n                    this._resolvedSourceConnector = undefined$1;\n                },\n\n                _clearTargetConnector: function() {\n                    this.targetConnector = undefined$1;\n                    this._resolvedTargetConnector = undefined$1;\n                },\n\n                _removeFromSourceConnector: function() {\n                    if (this.sourceConnector) {\n                        Utils.remove(this.sourceConnector.connections, this);\n                    }\n                },\n\n                _removeFromTargetConnector: function() {\n                    if (this.targetConnector) {\n                        Utils.remove(this.targetConnector.connections, this);\n                    }\n                },\n\n                toJSON: function() {\n                    var connection = this;\n                    var from, to, point;\n                    if (connection.from && connection.from.toJSON) {\n                        from = connection.from.toJSON();\n                    } else {\n                        point = connection._sourcePoint;\n                        from = {\n                            x: point.x,\n                            y: point.y\n                        };\n                    }\n\n                    if (connection.to && connection.to.toJSON) {\n                        to = connection.to.toJSON();\n                    } else {\n                        point = connection._targetPoint;\n                        to = {\n                            x: point.x,\n                            y: point.y\n                        };\n                    }\n\n                    return {\n                        from: from,\n                        to: to\n                    };\n                }\n            });\n\n            var Diagram = Widget.extend({\n                init: function(element, userOptions) {\n                    var that = this;\n\n                    kendo.destroy(element);\n                    Widget.fn.init.call(that, element, userOptions);\n\n                    that._initTheme();\n\n                    that._initElements();\n                    that._extendLayoutOptions(that.options);\n                    that._initDefaults(userOptions);\n                    that._interactionDefaults();\n\n                    that._initCanvas();\n\n                    that.mainLayer = new Group({\n                        id: \"main-layer\"\n                    });\n                    that.canvas.append(that.mainLayer);\n\n                    that._shapesQuadTree = new ShapesQuadTree(that);\n\n                    that._pan = new Point();\n                    that._adorners = [];\n                    that.adornerLayer = new Group({\n                        id: \"adorner-layer\"\n                    });\n                    that.canvas.append(that.adornerLayer);\n\n                    that._createHandlers();\n\n                    that._initialize();\n\n                    that._resizingAdorner = new ResizingAdorner(that, { editable: that.options.editable });\n                    that._connectorsAdorner = new ConnectorsAdorner(that);\n\n                    that._adorn(that._resizingAdorner, true);\n                    that._adorn(that._connectorsAdorner, true);\n\n                    that.selector = new Selector(that);\n                    // TODO: We may consider using real Clipboard API once is supported by the standard.\n                    that._clipboard = [];\n\n                    that.pauseMouseHandlers = false;\n\n                    that._fetchFreshData();\n\n                    that._createGlobalToolBar();\n\n                    that._createOptionElements();\n\n                    that.zoom(that.options.zoom);\n\n                    that.canvas.draw();\n                },\n\n                options: {\n                    name: \"Diagram\",\n                    theme: \"sass\",\n                    layout: \"\",\n                    zoomRate: 0.1,\n                    zoom: 1,\n                    zoomMin: 0,\n                    zoomMax: 2,\n                    dataSource: {},\n                    draggable: true,\n                    template: \"\",\n                    autoBind: true,\n                    editable: {\n                        rotate: {},\n                        resize: {},\n                        text: true,\n                        tools: [],\n                        drag: {\n                            snap: {\n                                size: 10,\n                                angle: 10\n                            }\n                        },\n                        remove: true\n                    },\n                    pannable: {},\n                    selectable: {\n                        key: \"none\"\n                    },\n                    tooltip: { enabled: true, format: \"{0}\" },\n                    copy: {\n                        enabled: true,\n                        offsetX: 20,\n                        offsetY: 20\n                    },\n                    shapeDefaults: diagram.shapeDefaults({ undoable: true }),\n                    connectionDefaults: {\n                        editable: {\n                            tools: []\n                        },\n                        type: CASCADING\n                    },\n                    shapes: [],\n                    connections: []\n                },\n\n                events: [\n                    ZOOM_END,\n                    ZOOM_START,\n                    PAN, SELECT,\n                    ITEMROTATE,\n                    ITEMBOUNDSCHANGE,\n                    CHANGE,\n                    CLICK,\n                    MOUSE_ENTER,\n                    MOUSE_LEAVE,\n                    \"toolBarClick\",\n                    \"save\",\n                    \"cancel\",\n                    \"edit\",\n                    \"remove\",\n                    \"add\",\n                    \"dataBound\",\n                    DRAG_START,\n                    DRAG,\n                    DRAG_END\n                ],\n\n                items: function() {\n                    return $();\n                },\n\n                _createGlobalToolBar: function() {\n                    var editable = this.options.editable;\n                    if (editable) {\n                        var tools = editable.tools;\n                        if (this._isEditable && tools !== false && (!tools || tools.length === 0)) {\n                            tools = [\"createShape\", \"undo\", \"redo\", \"rotateClockwise\", \"rotateAnticlockwise\"];\n                        }\n\n                        if (tools && tools.length) {\n                            this.toolBar = new DiagramToolBar(this, {\n                                tools: tools || {},\n                                click: this._toolBarClick.bind(this),\n                                modal: false\n                            });\n\n                            this.toolBar.element.css({\n                                textAlign: \"left\"\n                            });\n\n                            this.element.prepend(this.toolBar.element);\n                            this._resize();\n                        }\n                    }\n                },\n\n                createShape: function() {\n                    if ((this.editor && this.editor.end()) || !this.editor) {\n                        var dataSource = this.dataSource;\n                        var view = dataSource.view() || [];\n                        var index = view.length;\n                        var model = createModel(dataSource, {});\n                        var shape = this._createShape(model, {});\n\n                        if (!this.trigger(\"add\", { shape: shape })) {\n                            dataSource.insert(index, model);\n                            var inactiveItem = this._inactiveShapeItems.getByUid(model.uid);\n                            inactiveItem.element = shape;\n                            this.edit(shape);\n                        }\n                    }\n                },\n\n                _createShape: function(dataItem, options) {\n                    options = deepExtend({}, this.options.shapeDefaults, options);\n                    options.dataItem = dataItem;\n                    var shape = new Shape(options, this);\n                    return shape;\n                },\n\n                createConnection: function() {\n                    if (((this.editor && this.editor.end()) || !this.editor)) {\n                        var connectionsDataSource = this.connectionsDataSource;\n                        var view = connectionsDataSource.view() || [];\n                        var index = view.length;\n                        var model = createModel(connectionsDataSource, {});\n                        var connection = this._createConnection(model);\n                        if (!this.trigger(\"add\", { connection: connection })) {\n                            this._connectionsDataMap[model.uid] = connection;\n                            connectionsDataSource.insert(index, model);\n                            this.addConnection(connection, false);\n                            this.edit(connection);\n                        }\n                    }\n                },\n\n                _createConnection: function(dataItem, source, target) {\n                    var options = deepExtend({}, this.options.connectionDefaults);\n                    options.dataItem = dataItem;\n\n                    var connection = new Connection(source || new Point(), target || new Point(), options);\n\n                    return connection;\n                },\n\n                editModel: function(dataItem, editorType) {\n                    this.cancelEdit();\n                    var editors, template;\n                    var editable = this.options.editable;\n\n                    if (editorType == \"shape\") {\n                        editors = editable.shapeEditors;\n                        template = editable.shapeTemplate;\n                    } else if (editorType == \"connection\") {\n                        var connectionSelectorHandler = connectionSelector.bind(this);\n                        editors = deepExtend({}, { from: connectionSelectorHandler, to: connectionSelectorHandler }, editable.connectionEditors);\n                        template = editable.connectionTemplate;\n                    } else {\n                        return;\n                    }\n\n                    this.editor = new PopupEditor(this.element, {\n                        update: this._update.bind(this),\n                        cancel: this._cancel.bind(this),\n                        model: dataItem,\n                        type: editorType,\n                        target: this,\n                        editors: editors,\n                        template: template\n                    });\n\n                    this.trigger(\"edit\", this._editArgs());\n                },\n\n                edit: function(item) {\n                    if (item.dataItem) {\n                        var editorType = item instanceof Shape ? \"shape\" : \"connection\";\n                        this.editModel(item.dataItem, editorType);\n                    }\n                },\n\n                cancelEdit: function() {\n                    if (this.editor) {\n                        this._getEditDataSource().cancelChanges(this.editor.model);\n\n                        this._destroyEditor();\n                    }\n                },\n\n                saveEdit: function() {\n                    if (this.editor && this.editor.end() &&\n                        !this.trigger(\"save\", this._editArgs())) {\n                        this._getEditDataSource().sync();\n                    }\n                },\n\n                _update: function() {\n                    if (this.editor && this.editor.end() &&\n                        !this.trigger(\"save\", this._editArgs())) {\n                        this._getEditDataSource().sync();\n                        this._destroyEditor();\n                    }\n                },\n\n                _cancel: function() {\n                    if (this.editor && !this.trigger(\"cancel\", this._editArgs())) {\n                        var model = this.editor.model;\n                        this._getEditDataSource().cancelChanges(model);\n                        var element = this._connectionsDataMap[model.uid] || this._dataMap[model.id];\n                        if (element) {\n                            element._setOptionsFromModel(model);\n                        }\n                        this._destroyEditor();\n                    }\n                },\n\n                _getEditDataSource: function() {\n                    return this.editor.options.type === \"shape\" ? this.dataSource : this.connectionsDataSource;\n                },\n\n                _editArgs: function() {\n                    var result = { container: this.editor.wrapper };\n                    result[this.editor.options.type] = this.editor.model;\n                    return result;\n                },\n\n                _destroyEditor: function() {\n                    if (this.editor) {\n                        this.editor.close();\n                        this.editor = null;\n                    }\n                },\n\n                _initElements: function() {\n                    this.wrapper = this.element.empty()\n                        .css(\"position\", \"relative\")\n                        .attr(\"tabindex\", 0)\n                        .addClass(\"k-widget k-diagram\");\n\n                    this.scrollable = $(\"<div />\").appendTo(this.element);\n                },\n\n                _initDefaults: function(userOptions) {\n                    var options = this.options;\n                    var editable = options.editable;\n                    var shapeDefaults = options.shapeDefaults;\n                    var connectionDefaults = options.connectionDefaults;\n                    var userShapeDefaults = (userOptions || {}).shapeDefaults;\n                    if (editable === false) {\n                        shapeDefaults.editable = false;\n                        connectionDefaults.editable = false;\n                    } else {\n                        copyDefaultOptions(editable, shapeDefaults.editable, [\"drag\", \"remove\", \"connect\"]);\n                        copyDefaultOptions(editable, connectionDefaults.editable, [\"drag\", \"remove\"]);\n                    }\n\n                    if (userShapeDefaults && userShapeDefaults.connectors) {\n                        options.shapeDefaults.connectors = userShapeDefaults.connectors;\n                    }\n                },\n\n                _interactionDefaults: function() {\n                    var options = this.options;\n                    var selectable = options.selectable;\n                    var pannable = options.pannable;\n                    var mobile = kendo.support.mobileOS;\n\n                    if (selectable && !defined(selectable.multiple)) {\n                        options.selectable = deepExtend({\n                            multiple: mobile ? false : true\n                        }, options.selectable);\n                    }\n\n                    if (pannable && !defined(pannable.key)) {\n                        options.pannable = deepExtend({\n                            key: mobile ? \"none\" : \"ctrl\"\n                        }, options.pannable);\n                    }\n                },\n\n                _initCanvas: function() {\n                    var canvasContainer = $(\"<div class='k-layer'></div>\").appendTo(this.scrollable)[0];\n                    var viewPort = this.viewport();\n                    this.canvas = new Canvas(canvasContainer, {\n                        width: viewPort.width || DEFAULT_CANVAS_WIDTH,\n                        height: viewPort.height || DEFAULT_CANVAS_HEIGHT\n                    });\n                },\n\n                _createHandlers: function() {\n                    var that = this;\n                    var element = that.element;\n\n                    element.on(MOUSEWHEEL_NS, that._wheel.bind(that))\n                    .on(\"keydown\" + NS, that._keydown.bind(that));\n\n                    that._userEvents = new kendo.UserEvents(this.scrollable, {\n                        multiTouch: true,\n                        fastTap: true,\n                        tap: that._tap.bind(that),\n                        start: that._dragStart.bind(that),\n                        move: that._drag.bind(that),\n                        end: that._dragEnd.bind(that),\n                        gesturestart: that._gestureStart.bind(that),\n                        gesturechange: that._gestureChange.bind(that),\n                        gestureend: that._gestureEnd.bind(that),\n                        doubleTap: that._doubleTap.bind(that),\n                        supportDoubleTap: true\n                    });\n\n                    that.toolService = new ToolService(that);\n\n                    this.scrollable\n                        .on(\"mouseover\" + NS, that._mouseover.bind(that))\n                        .on(\"mouseout\" + NS, that._mouseout.bind(that))\n                        .on(\"mousemove\" + NS, that._mouseMove.bind(that))\n                        .on(\"mousedown\" + NS, that._mouseDown.bind(that))\n                        .on(\"mouseup\" + NS, that._mouseUp.bind(that));\n\n                    this._syncHandler = that._syncChanges.bind(that);\n\n                    that._resizeHandler = that.resize.bind(that, false);\n                    kendo.onResize(that._resizeHandler);\n\n                    this.bind(ZOOM_START, that._destroyToolBar.bind(that));\n                    this.bind(PAN, that._destroyToolBar.bind(that));\n                },\n\n                _dragStart: function(e) {\n                    this._pauseMouseHandlers = true;\n                    var point = this._eventPositions(e, true);\n\n                    var event = e.event;\n                    if (this.toolService.start(point, this._meta(event))) {\n                        this._destroyToolBar();\n                        event.preventDefault();\n                    }\n                },\n\n                _drag: function(e) {\n                    var p = this._eventPositions(e);\n                    var event = e.event;\n                    if (this.toolService.move(p, this._meta(event))) {\n                        event.preventDefault();\n                    }\n                },\n\n                _dragEnd: function(e) {\n                    this._pauseMouseHandlers = false;\n                    var p = this._eventPositions(e);\n                    var event = e.event;\n                    if (this.toolService.end(p, this._meta(event))) {\n                        this._createToolBar();\n                        event.preventDefault();\n                    }\n                },\n\n                _mouseMove: function(e) {\n                    if (!this._pauseMouseHandlers) {\n                        var p = this._eventPositions(e);\n                        this.toolService._updateHoveredItem(p);\n                        this.toolService._updateCursor(p);\n                    }\n                },\n\n                _mouseDown: function() {\n                    this._pauseMouseHandlers = true;\n                },\n\n                _mouseUp: function() {\n                    this._pauseMouseHandlers = false;\n                },\n\n                _tap: function(e) {\n                    var toolService = this.toolService;\n                    var selectable = this.options.selectable;\n                    var point = this._eventPositions(e);\n                    var focused = this.focus();\n\n                    toolService._updateHoveredItem(point);\n\n                    if (toolService.hoveredItem) {\n                        var item = toolService.hoveredItem;\n\n                        this.trigger(\"click\", {\n                            item: item,\n                            point: point,\n                            meta: this._meta(e.event)\n                        });\n\n                        if (selectable && item.options.selectable !== false) {\n                            var multiple = selectable.multiple !== false;\n                            var ctrlPressed = kendo.support.mobileOS || this._meta(e.event).ctrlKey;\n\n                            if (item.isSelected) {\n                                if (ctrlPressed) {\n                                    this._destroyToolBar();\n                                    item.select(false);\n                                } else {\n                                    this._createToolBar(focused);\n                                }\n                            } else {\n                                this._destroyToolBar();\n                                this.select(item, {\n                                    addToSelection: multiple && ctrlPressed\n                                });\n                                this._createToolBar(focused);\n                            }\n                        }\n                    } else if (selectable) {\n                        this._destroyToolBar();\n                        this.deselect();\n                    }\n                },\n\n                _keydown: function(e) {\n                    if (this.toolService.keyDown(e.keyCode, this._meta(e))) {\n                        e.preventDefault();\n                    }\n                },\n\n                _wheel: function(e) {\n                    var delta = mwDelta(e),\n                        p = this._eventPositions(e),\n                        meta = deepExtend(this._meta(e), { delta: delta });\n\n                    if (this.toolService.wheel(p, meta)) {\n                        e.preventDefault();\n                    }\n                },\n\n                _meta: function(e) {\n                    return { ctrlKey: e.ctrlKey, metaKey: e.metaKey, altKey: e.altKey, shiftKey: e.shiftKey, type: e.type };\n                },\n\n                _eventPositions: function(e, start) {\n                    var point;\n                    if (e.touch) {\n                        var field = start ? \"startLocation\" : \"location\";\n                        point = new Point(e.x[field], e.y[field]);\n                    } else {\n                        var event = e.originalEvent;\n                        point = new Point(event.pageX, event.pageY);\n                    }\n\n                    return this.documentToModel(point);\n                },\n\n                _gestureStart: function(e) {\n                    this._destroyToolBar();\n                    this.scroller.disable();\n                    var initialCenter = this.documentToModel(new Point(e.center.x, e.center.y));\n                    var eventArgs = {\n                        point: initialCenter,\n                        zoom: this.zoom()\n                    };\n\n                    if (this.trigger(ZOOM_START, eventArgs)) {\n                        return;\n                    }\n\n                    this._gesture = e;\n                    this._initialCenter = initialCenter;\n                },\n\n                _gestureChange: function(e) {\n                    var previousGesture = this._gesture;\n                    var initialCenter = this._initialCenter;\n                    var center = this.documentToView(new Point(e.center.x, e.center.y));\n                    var scaleDelta = e.distance / previousGesture.distance;\n                    var zoom = this._zoom;\n                    var updateZoom = false;\n\n                    if (math.abs(scaleDelta - 1) >= MOBILE_ZOOM_RATE) {\n                        this._zoom = zoom = this._getValidZoom(zoom * scaleDelta);\n                        this.options.zoom = zoom;\n                        this._gesture = e;\n                        updateZoom = true;\n                    }\n\n                    var zoomedPoint = initialCenter.times(zoom);\n                    var pan = center.minus(zoomedPoint);\n                    if (updateZoom || this._pan.distanceTo(pan) >= MOBILE_PAN_DISTANCE) {\n                        this._panTransform(pan);\n                        this._updateAdorners();\n                    }\n\n                    e.preventDefault();\n                },\n\n                _doubleTap: function(e) {\n                    var diagram = this;\n                    var pointPosition = this._eventPositions(e);\n                    var options = diagram.options;\n                    var zoomRate = options.zoomRate;\n                    var zoom = diagram.zoom() + zoomRate;\n                    var meta = this._meta(e);\n                    var zoomOptions = { point: pointPosition, meta: meta, zoom: zoom };\n\n\n                    if (diagram.trigger(ZOOM_START, zoomOptions)) {\n                        return;\n                    }\n\n                    zoom = kendo.dataviz.round(Math.max(options.zoomMin, Math.min(options.zoomMax, zoom)), 2);\n                    zoomOptions.zoom = zoom;\n\n                    diagram.zoom(zoom, zoomOptions);\n                    diagram.trigger(ZOOM_END, zoomOptions);\n                },\n\n                _gestureEnd: function() {\n                    if (this.options.pannable !== false) {\n                        this.scroller.enable();\n                    }\n                    this.trigger(ZOOM_END, {\n                        point: this._initialCenter,\n                        zoom: this.zoom()\n                    });\n                },\n\n                _resize: function() {\n                    var viewport = this.viewport();\n                    if (this.canvas) {\n                        this.canvas.size(viewport);\n                    }\n\n                    if (this.scrollable && this.toolBar) {\n                        this.scrollable.height(viewport.height);\n                    }\n                },\n\n                _mouseover: function(e) {\n                    var node = e.target._kendoNode;\n                    if (node && node.srcElement._hover) {\n                        node.srcElement._hover(true, node.srcElement);\n                    }\n                },\n\n                _mouseout: function(e) {\n                    var node = e.target._kendoNode;\n                    if (node && node.srcElement._hover) {\n                        node.srcElement._hover(false, node.srcElement);\n                    }\n                },\n\n                _initTheme: function() {\n                    var that = this;\n                    var themeName = ((that.options || {}).theme || \"\").toLowerCase();\n                    var themes = dataviz.ui.themes || {};\n                    var themeOptions;\n\n                    if (dataviz.SASS_THEMES.indexOf(themeName) != -1) {\n                        themeOptions = dataviz.autoTheme().diagram;\n                    }\n                    else {\n                        themeOptions = (themes[themeName] || {}).diagram;\n                    }\n\n                    that.options = deepExtend({}, themeOptions, that.options);\n                    if (that.options.editable === true) {\n                        deepExtend(that.options, {\n                            editable: (themeOptions || {}).editable\n                        });\n                    }\n                },\n\n                _createOptionElements: function() {\n                    var options = this.options;\n                    var shapesLength = options.shapes.length;\n\n                    if (shapesLength) {\n                        this._createShapes();\n                    }\n\n                    if (options.connections.length) {\n                        this._createConnections();\n                    }\n\n                    if (shapesLength && options.layout) {\n                        this.layout(options.layout);\n                    }\n                },\n\n                _createShapes: function() {\n                    var that = this,\n                        options = that.options,\n                        shapes = options.shapes,\n                        shape, i;\n\n                    for (i = 0; i < shapes.length; i++) {\n                        shape = shapes[i];\n                        that.addShape(shape);\n                    }\n                },\n\n                _createConnections: function() {\n                    var diagram = this,\n                        options = diagram.options,\n                        defaults = options.connectionDefaults,\n                        connections = options.connections,\n                        conn, source, target, i;\n\n                    for (i = 0; i < connections.length; i++) {\n                        conn = connections[i];\n                        source = diagram._findConnectionTarget(conn.from);\n                        target = diagram._findConnectionTarget(conn.to);\n\n                        diagram.connect(source, target, deepExtend({}, defaults, conn));\n                    }\n                },\n\n                _findConnectionTarget: function(options) {\n                    options = options || {};\n                    var diagram = this;\n                    var shapeId = isString(options) ? options : options.shapeId || options.id;\n                    var target;\n                    if (shapeId) {\n                        target = diagram.getShapeById(shapeId);\n                        if (options.connector) {\n                            target = target.getConnector(options.connector);\n                        }\n                    } else {\n                        target = new Point(options.x || 0, options.y || 0);\n                    }\n\n                    return target;\n                },\n\n                destroy: function() {\n                    var that = this;\n                    Widget.fn.destroy.call(that);\n\n                    if (this._userEvents) {\n                        this._userEvents.destroy();\n                    }\n\n                    kendo.unbindResize(that._resizeHandler);\n\n                    that.clear();\n                    that.element.off(NS);\n                    that.scroller.wrapper.off(NS);\n                    that.canvas.destroy(true);\n                    that.canvas = undefined$1;\n\n                    that._destroyEditor();\n                    that.destroyScroller();\n                    that._destroyGlobalToolBar();\n                    that._destroyToolBar();\n                },\n\n                destroyScroller: function() {\n                    var scroller = this.scroller;\n\n                    if (!scroller) {\n                        return;\n                    }\n\n                    scroller.destroy();\n                    scroller.element.remove();\n                    this.scroller = null;\n                },\n\n                save: function() {\n                    var json = {\n                        shapes: [],\n                        connections: []\n                    };\n                    var i, connection, shape;\n\n                    for (i = 0; i < this.shapes.length; i++) {\n                        shape = this.shapes[i];\n                        if (shape.options.serializable) {\n                            json.shapes.push(shape.options);\n                        }\n                    }\n\n                    for (i = 0; i < this.connections.length; i++) {\n                        connection = this.connections[i];\n\n                        json.connections.push(deepExtend({}, connection.options, connection.toJSON()));\n                    }\n\n                    return json;\n                },\n\n                focus: function() {\n                    if (!this.element.is(kendo._activeElement())) {\n                        var element = this.element,\n                            scrollContainer = element[0],\n                            containers = [],\n                            offsets = [],\n                            documentElement = document.documentElement,\n                            i;\n\n                        do {\n                            scrollContainer = scrollContainer.parentNode;\n\n                            if (scrollContainer.scrollHeight > scrollContainer.clientHeight) {\n                                containers.push(scrollContainer);\n                                offsets.push(scrollContainer.scrollTop);\n                            }\n                        } while (scrollContainer != documentElement);\n\n                        element.trigger(\"focus\");\n\n                        for (i = 0; i < containers.length; i++) {\n                            containers[i].scrollTop = offsets[i];\n                        }\n                        return true;\n                    }\n                },\n\n                load: function(options) {\n                    this.clear();\n\n                    this.setOptions(options);\n                    this._createShapes();\n                    this._createConnections();\n                },\n\n                setOptions: function(options) {\n                    deepExtend(this.options, options);\n                },\n\n                clear: function() {\n                    var that = this;\n\n                    that.select(false);\n                    that.mainLayer.clear();\n                    that._shapesQuadTree.clear();\n                    that._initialize();\n                },\n                /**\n                 * Connects two items.\n                 * @param source Shape, Connector, Point.\n                 * @param target Shape, Connector, Point.\n                 * @param options Connection options that will be passed to the newly created connection.\n                 * @returns The newly created connection.\n                 */\n                connect: function(source, target, options) {\n                    var connection;\n                    if (this.connectionsDataSource && this._isEditable) {\n                        var dataItem = this.connectionsDataSource.add({});\n                        connection = this._connectionsDataMap[dataItem.uid];\n                        connection.source(source);\n                        connection.target(target);\n                        connection.redraw(options);\n                        connection.updateModel();\n                    } else {\n                        connection = new Connection(source, target,\n                            deepExtend({ }, this.options.connectionDefaults, options));\n\n                        this.addConnection(connection);\n                    }\n\n                    return connection;\n                },\n                /**\n                 * Determines whether the the two items are connected.\n                 * @param source Shape, Connector, Point.\n                 * @param target Shape, Connector, Point.\n                 * @returns true if the two items are connected.\n                 */\n                connected: function(source, target) {\n                    for (var i = 0; i < this.connections.length; i++) {\n                        var c = this.connections[i];\n                        if (c.from == source && c.to == target) {\n                            return true;\n                        }\n                    }\n\n                    return false;\n                },\n                /**\n                 * Adds connection to the diagram.\n                 * @param connection Connection.\n                 * @param undoable Boolean.\n                 * @returns The newly created connection.\n                 */\n                addConnection: function(connection, undoable) {\n                    if (undoable !== false) {\n                        this.undoRedoService.add(\n                            new diagram.AddConnectionUnit(connection, this), false);\n                    }\n\n                    connection.diagram = this;\n                    connection._setOptionsFromModel();\n                    connection.refresh();\n                    this.mainLayer.append(connection.visual);\n                    this.connections.push(connection);\n\n                    this.trigger(CHANGE, {\n                        added: [connection],\n                        removed: []\n                    });\n\n                    return connection;\n                },\n\n                _addConnection: function(connection, undoable) {\n                    var connectionsDataSource = this.connectionsDataSource;\n                    var dataItem;\n                    if (connectionsDataSource && this._isEditable) {\n                        dataItem = createModel(connectionsDataSource, cloneDataItem(connection.dataItem));\n                        connection.dataItem = dataItem;\n                        connection.updateModel();\n\n                        if (!this.trigger(\"add\", { connection: connection })) {\n                            this._connectionsDataMap[dataItem.uid] = connection;\n\n                            connectionsDataSource.add(dataItem);\n                            this.addConnection(connection, undoable);\n                            connection._updateConnectors();\n\n                            return connection;\n                        }\n                    } else if (!this.trigger(\"add\", { connection: connection })) {\n                        this.addConnection(connection, undoable);\n                        connection._updateConnectors();\n                        return connection;\n                    }\n                },\n\n                /**\n                 * Adds shape to the diagram.\n                 * @param item Shape, Point. If point is passed it will be created new Shape and positioned at that point.\n                 * @param options. The options to be passed to the newly created Shape.\n                 * @returns The newly created shape.\n                 */\n                addShape: function(item, undoable) {\n                    var shape,\n                        shapeDefaults = this.options.shapeDefaults;\n\n                    if (item instanceof Shape) {\n                        shape = item;\n                        this._parseBounds(shape.bounds());\n                    } else if (!(item instanceof kendo.Class)) {\n                        shapeDefaults = deepExtend({}, shapeDefaults, item || {});\n                        shape = new Shape(shapeDefaults, this);\n                        this._parseBounds(shape.bounds());\n                    } else {\n                        return;\n                    }\n\n                    if (undoable !== false) {\n                        this.undoRedoService.add(new diagram.AddShapeUnit(shape, this), false);\n                    }\n\n                    this.shapes.push(shape);\n                    if (shape.diagram !== this) {\n                        this._shapesQuadTree.insert(shape);\n                        shape.diagram = this;\n                    }\n                    this.mainLayer.append(shape.visual);\n\n                    this.trigger(CHANGE, {\n                        added: [shape],\n                        removed: []\n                    });\n\n                    return shape;\n                },\n\n                _addShape: function(shape, undoable) {\n                    var that = this;\n                    var dataSource = that.dataSource;\n                    var dataItem;\n                    if (dataSource && this._isEditable) {\n                        dataItem = createModel(dataSource, cloneDataItem(shape.dataItem));\n                        shape.dataItem = dataItem;\n                        shape.updateModel();\n\n                        if (!this.trigger(\"add\", { shape: shape })) {\n                            this.dataSource.add(dataItem);\n                            var inactiveItem = this._inactiveShapeItems.getByUid(dataItem.uid);\n                            inactiveItem.element = shape;\n                            inactiveItem.undoable = undoable;\n                            return shape;\n                        }\n                    } else if (!this.trigger(\"add\", { shape: shape })) {\n                        return this.addShape(shape, undoable);\n                    }\n                },\n\n                _parseBounds: function(bounds) {\n                    bounds.x = typeof(bounds.x) == \"string\" ? parseFloat(bounds.x) : bounds.x;\n                    bounds.y = typeof(bounds.y) == \"string\" ? parseFloat(bounds.y) : bounds.y;\n                },\n                /**\n                 * Removes items (or single item) from the diagram.\n                 * @param items DiagramElement, Array of Items.\n                 * @param undoable.\n                 */\n\n               remove: function(items, undoable) {\n                    items = isArray(items) ? items.slice(0) : [items];\n                    var elements = splitDiagramElements(items);\n                    var shapes = elements.shapes;\n                    var connections = elements.connections;\n                    var i;\n\n                    if (!defined(undoable)) {\n                        undoable = true;\n                    }\n\n                    if (undoable) {\n                        this.undoRedoService.begin();\n                    }\n\n                    this._suspendModelRefresh();\n                    for (i = shapes.length - 1; i >= 0; i--) {\n                       this._removeItem(shapes[i], undoable, connections);\n                    }\n\n                    for (i = connections.length - 1; i >= 0; i--) {\n                        this._removeItem(connections[i], undoable);\n                    }\n\n                    this._resumeModelRefresh();\n\n                    if (undoable) {\n                        this.undoRedoService.commit(false);\n                    }\n\n                    this.trigger(CHANGE, {\n                        added: [],\n                        removed: items\n                    });\n                },\n\n                _removeShapeDataItem: function(item) {\n                    if (this._isEditable) {\n                        this.dataSource.remove(item.dataItem);\n                        delete this._dataMap[item.dataItem.id];\n                    }\n                },\n\n                _removeConnectionDataItem: function(item) {\n                    if (this._isEditable) {\n                        this.connectionsDataSource.remove(item.dataItem);\n                        delete this._connectionsDataMap[item.dataItem.uid];\n                    }\n                },\n\n                _triggerRemove: function(items) {\n                    var toRemove = [];\n                    var item, args, editable;\n\n                    for (var idx = 0; idx < items.length; idx++) {\n                        item = items[idx];\n                        editable = item.options.editable;\n                        if (item instanceof Shape) {\n                            args = { shape: item };\n                        } else {\n                            args = { connection: item };\n                        }\n                        if (editable && editable.remove !== false && !this.trigger(\"remove\", args)) {\n                            toRemove.push(item);\n                        }\n                    }\n                    return toRemove;\n                },\n\n                /**\n                 * Executes the next undoable action on top of the undo stack if any.\n                 */\n                undo: function() {\n                    this.undoRedoService.undo();\n                },\n                /**\n                 * Executes the previous undoable action on top of the redo stack if any.\n                 */\n                redo: function() {\n                    this.undoRedoService.redo();\n                },\n                /**\n                 * Selects items on the basis of the given input or returns the current selection if none.\n                 * @param itemsOrRect DiagramElement, Array of elements, \"All\", false or Rect. A value 'false' will deselect everything.\n                 * @param options\n                 * @returns {Array}\n                 */\n                select: function(item, options) {\n                    if (isDefined(item)) {\n                        options = deepExtend({ addToSelection: false }, options);\n\n                        var addToSelection = options.addToSelection,\n                            items = [],\n                            selected = [],\n                            i, element;\n\n                        if (!addToSelection) {\n                            this.deselect();\n                        }\n\n                        this._internalSelection = true;\n\n                        if (item instanceof Array) {\n                            items = item;\n                        } else if (item instanceof DiagramElement) {\n                            items = [ item ];\n                        }\n\n                        for (i = 0; i < items.length; i++) {\n                            element = items[i];\n                            if (element.select(true)) {\n                                selected.push(element);\n                            }\n                        }\n\n                        this._selectionChanged(selected, []);\n\n                        this._internalSelection = false;\n                    } else {\n                        return this._selectedItems;\n                    }\n                },\n\n                selectAll: function() {\n                    this.select(this.shapes.concat(this.connections));\n                },\n\n                selectArea: function(rect) {\n                    var i, items, item;\n                    this._internalSelection = true;\n                    var selected = [];\n                    if (rect instanceof Rect) {\n                        items = this.shapes.concat(this.connections);\n                        for (i = 0; i < items.length; i++) {\n                            item = items[i];\n                            if ((!rect || item._hitTest(rect)) && item.options.enable) {\n                                if (item.select(true)) {\n                                    selected.push(item);\n                                }\n                            }\n                        }\n                    }\n\n                    this._selectionChanged(selected, []);\n                    this._internalSelection = false;\n                },\n\n                deselect: function(item) {\n                    this._internalSelection = true;\n                    var deselected = [],\n                        items = [],\n                        element, i;\n\n                    if (item instanceof Array) {\n                        items = item;\n                    } else if (item instanceof DiagramElement) {\n                        items.push(item);\n                    } else if (!isDefined(item)) {\n                        items = this._selectedItems.slice(0);\n                    }\n\n                    for (i = 0; i < items.length; i++) {\n                        element = items[i];\n                        if (element.select(false)) {\n                            deselected.push(element);\n                        }\n                    }\n\n                    this._selectionChanged([], deselected);\n                    this._internalSelection = false;\n                },\n                /**\n                 * Brings to front the passed items.\n                 * @param items DiagramElement, Array of Items.\n                 * @param undoable. By default the action is undoable.\n                 */\n                toFront: function(items, undoable) {\n                    if (!items) {\n                        items = this._selectedItems.slice();\n                    }\n\n                    var result = this._getDiagramItems(items), indices;\n                    if (!defined(undoable) || undoable) {\n                        indices = indicesOfItems(this.mainLayer, result.visuals);\n                        var unit = new ToFrontUnit(this, items, indices);\n                        this.undoRedoService.add(unit);\n                    } else {\n                        this.mainLayer.toFront(result.visuals);\n                        this._fixOrdering(result, true);\n                    }\n                },\n                /**\n                 * Sends to back the passed items.\n                 * @param items DiagramElement, Array of Items.\n                 * @param undoable. By default the action is undoable.\n                 */\n                toBack: function(items, undoable) {\n                    if (!items) {\n                        items = this._selectedItems.slice();\n                    }\n\n                    var result = this._getDiagramItems(items), indices;\n                    if (!defined(undoable) || undoable) {\n                        indices = indicesOfItems(this.mainLayer, result.visuals);\n                        var unit = new ToBackUnit(this, items, indices);\n                        this.undoRedoService.add(unit);\n                    } else {\n                        this.mainLayer.toBack(result.visuals);\n                        this._fixOrdering(result, false);\n                    }\n                },\n                /**\n                 * Bring into view the passed item(s) or rectangle.\n                 * @param items DiagramElement, Array of Items, Rect.\n                 * @param options. align - controls the position of the calculated rectangle relative to the viewport.\n                 * \"Center middle\" will position the items in the center. animate - controls if the pan should be animated.\n                 */\n                bringIntoView: function(item, options) { // jQuery|Item|Array|Rect\n                    var viewport = this.viewport();\n                    var aligner = new diagram.RectAlign(viewport);\n                    var current, rect, original, newPan;\n\n                    if (viewport.width === 0 || viewport.height === 0) {\n                        return;\n                    }\n\n                    options = deepExtend({ animate: false, align: \"center middle\" }, options);\n                    if (options.align == \"none\") {\n                        options.align = \"center middle\";\n                    }\n\n                    if (item instanceof DiagramElement) {\n                        rect = item.bounds(TRANSFORMED);\n                    } else if (isArray(item)) {\n                        rect = this.boundingBox(item);\n                    } else if (item instanceof Rect) {\n                        rect = item.clone();\n                    }\n\n                    original = rect.clone();\n\n                    rect.zoom(this._zoom);\n\n                    if (rect.width > viewport.width || rect.height > viewport.height) {\n                        this._zoom = this._getValidZoom(math.min(viewport.width / original.width, viewport.height / original.height));\n                        rect = original.clone().zoom(this._zoom);\n                    }\n\n                    this._zoomMainLayer();\n\n                    current = rect.clone();\n                    aligner.align(rect, options.align);\n\n                    newPan = rect.topLeft().minus(current.topLeft());\n                    this.pan(newPan.times(-1), options.animate);\n                },\n\n                alignShapes: function(direction) {\n                    if (isUndefined(direction)) {\n                        direction = \"Left\";\n                    }\n                    var items = this.select(),\n                        val,\n                        item,\n                        i;\n\n                    if (items.length === 0) {\n                        return;\n                    }\n\n                    switch (direction.toLowerCase()) {\n                        case \"left\":\n                        case \"top\":\n                            val = MAX_VALUE;\n                            break;\n                        case \"right\":\n                        case \"bottom\":\n                            val = MIN_VALUE;\n                            break;\n                    }\n\n                    for (i = 0; i < items.length; i++) {\n                        item = items[i];\n                        if (item instanceof Shape) {\n                            switch (direction.toLowerCase()) {\n                                case \"left\":\n                                    val = math.min(val, item.options.x);\n                                    break;\n                                case \"top\":\n                                    val = math.min(val, item.options.y);\n                                    break;\n                                case \"right\":\n                                    val = math.max(val, item.options.x);\n                                    break;\n                                case \"bottom\":\n                                    val = math.max(val, item.options.y);\n                                    break;\n                            }\n                        }\n                    }\n                    var undoStates = [];\n                    var shapes = [];\n                    for (i = 0; i < items.length; i++) {\n                        item = items[i];\n                        if (item instanceof Shape) {\n                            shapes.push(item);\n                            undoStates.push(item.bounds());\n                            switch (direction.toLowerCase()) {\n                                case \"left\":\n                                case \"right\":\n                                    item.position(new Point(val, item.options.y));\n                                    break;\n                                case \"top\":\n                                case \"bottom\":\n                                    item.position(new Point(item.options.x, val));\n                                    break;\n                            }\n                        }\n                    }\n                    var unit = new diagram.TransformUnit(shapes, undoStates);\n                    this.undoRedoService.add(unit, false);\n                },\n\n                zoom: function(zoom, options) {\n                    if (zoom) {\n                        var staticPoint = options ? options.point : new diagram.Point(0, 0);\n                        // var meta = options ? options.meta : 0;\n                        zoom = this._zoom = this._getValidZoom(zoom);\n\n                        if (!isUndefined(staticPoint)) {//Viewpoint vector is constant\n                            staticPoint = new diagram.Point(math.round(staticPoint.x), math.round(staticPoint.y));\n                            var zoomedPoint = staticPoint.times(zoom);\n                            var viewportVector = this.modelToView(staticPoint);\n                            var raw = viewportVector.minus(zoomedPoint);//pan + zoomed point = viewpoint vector\n                            this._storePan(new diagram.Point(math.round(raw.x), math.round(raw.y)));\n                        }\n\n                        if (options) {\n                            options.zoom = zoom;\n                        }\n\n                        this._panTransform();\n\n                        this.canvas.surface.hideTooltip();\n\n                        this._updateAdorners();\n                    }\n\n                    return this._zoom;\n                },\n\n                _getPan: function(pan) {\n                    var canvas = this.canvas;\n                    if (!canvas.translate) {\n                        pan = pan.plus(this._pan);\n                    }\n                    return pan;\n                },\n\n                pan: function(pan, animate) {\n                    if (pan instanceof Point) {\n                        var that = this;\n                        var scroller = that.scroller;\n                        pan = that._getPan(pan);\n                        pan = pan.times(-1);\n\n                        if (animate) {\n                            scroller.animatedScrollTo(pan.x, pan.y, function() {\n                                that._updateAdorners();\n                            });\n                        } else {\n                            scroller.scrollTo(pan.x, pan.y);\n                            that._updateAdorners();\n                        }\n                    } else {\n                        return this._pan.times(-1);\n                    }\n                },\n\n                viewport: function() {\n                    var element = this.element;\n                    var width = element.width();\n                    var height = element.height();\n\n                    if (this.toolBar) {\n                        height -= outerHeight(this.toolBar.element);\n                    }\n\n                    return new Rect(0, 0, width, height);\n                },\n                copy: function() {\n                    if (this.options.copy.enabled) {\n                        this._clipboard = [];\n                        this._copyOffset = 1;\n                        for (var i = 0; i < this._selectedItems.length; i++) {\n                            var item = this._selectedItems[i];\n                            this._clipboard.push(item);\n                        }\n                    }\n                },\n                cut: function() {\n                    if (this.options.copy.enabled) {\n                        this._clipboard = [];\n                        this._copyOffset = 0;\n                        for (var i = 0; i < this._selectedItems.length; i++) {\n                            var item = this._selectedItems[i];\n                            this._clipboard.push(item);\n                        }\n                        this.remove(this._clipboard, true);\n                    }\n                },\n\n                paste: function() {\n                    if (this._clipboard.length > 0) {\n                        var item, copied, i;\n                        var mapping = {};\n                        var elements = splitDiagramElements(this._clipboard);\n                        var connections = elements.connections;\n                        var shapes = elements.shapes;\n                        var offset = {\n                            x: this._copyOffset * this.options.copy.offsetX,\n                            y: this._copyOffset * this.options.copy.offsetY\n                        };\n                        this.deselect();\n                        // first the shapes\n                        for (i = 0; i < shapes.length; i++) {\n                            item = shapes[i];\n                            copied = item.clone();\n                            mapping[item.id] = copied;\n                            copied.position(new Point(item.options.x + offset.x, item.options.y + offset.y));\n                            copied.diagram = this;\n                            copied = this._addShape(copied);\n                            if (copied) {\n                                copied.select();\n                            }\n                        }\n                        // then the connections\n                        for (i = 0; i < connections.length; i++) {\n                            item = connections[i];\n                            copied = this._addConnection(item.clone());\n                            if (copied) {\n                                this._updateCopiedConnection(copied, item, \"source\", mapping, offset);\n                                this._updateCopiedConnection(copied, item, \"target\", mapping, offset);\n\n                                copied.select(true);\n                                copied.updateModel();\n                            }\n                        }\n\n                        this._syncChanges();\n\n                        this._copyOffset += 1;\n                    }\n                },\n\n                _updateCopiedConnection: function(connection, sourceConnection, connectorName, mapping, offset) {\n                    var onActivate, inactiveItem, targetShape;\n                    var target = sourceConnection[connectorName]();\n                    var diagram = this;\n                    if (target instanceof Connector && mapping[target.shape.id]) {\n                        targetShape = mapping[target.shape.id];\n                        if (diagram.getShapeById(targetShape.id)) {\n                            connection[connectorName](targetShape.getConnector(target.options.name));\n                        } else {\n                            inactiveItem = diagram._inactiveShapeItems.getByUid(targetShape.dataItem.uid);\n                            if (inactiveItem) {\n                                onActivate = function(item) {\n                                    targetShape = diagram._dataMap[item.id];\n                                    connection[connectorName](targetShape.getConnector(target.options.name));\n                                    connection.updateModel();\n                                };\n                                diagram._deferredConnectionUpdates.push(inactiveItem.onActivate(onActivate));\n                            }\n                        }\n                    } else {\n                        connection[connectorName](new Point(sourceConnection[connectorName + \"Point\"]().x + offset.x, sourceConnection[connectorName + \"Point\"]().y + offset.y));\n                    }\n                },\n                /**\n                 * Gets the bounding rectangle of the given items.\n                 * @param items DiagramElement, Array of elements.\n                 * @param origin Boolean. Pass 'true' if you need to get the bounding box of the shapes without their rotation offset.\n                 * @returns {Rect}\n                 */\n                boundingBox: function(items, origin) {\n                    var rect = Rect.empty(), temp,\n                        di = isDefined(items) ? this._getDiagramItems(items) : { shapes: this.shapes };\n                    if (di.shapes.length > 0) {\n                        var item = di.shapes[0];\n                        rect = item.bounds(ROTATED);\n                        for (var i = 1; i < di.shapes.length; i++) {\n                            item = di.shapes[i];\n                            temp = item.bounds(ROTATED);\n                            if (origin === true) {\n                                temp.x -= item._rotationOffset.x;\n                                temp.y -= item._rotationOffset.y;\n                            }\n                            rect = rect.union(temp);\n                        }\n                    }\n                    return rect;\n                },\n\n                _containerOffset: function() {\n                    var containerOffset = this.element.offset();\n                    if (this.toolBar) {\n                        containerOffset.top += outerHeight(this.toolBar.element);\n                    }\n                    return containerOffset;\n                },\n\n                documentToView: function(point) {\n                    var containerOffset = this._containerOffset();\n\n                    return new Point(point.x - containerOffset.left, point.y - containerOffset.top);\n                },\n                viewToDocument: function(point) {\n                    var containerOffset = this._containerOffset();\n\n                    return new Point(point.x + containerOffset.left, point.y + containerOffset.top);\n                },\n                viewToModel: function(point) {\n                    return this._transformWithMatrix(point, this._matrixInvert);\n                },\n                modelToView: function(point) {\n                    return this._transformWithMatrix(point, this._matrix);\n                },\n                modelToLayer: function(point) {\n                    return this._transformWithMatrix(point, this._layerMatrix);\n                },\n                layerToModel: function(point) {\n                    return this._transformWithMatrix(point, this._layerMatrixInvert);\n                },\n                documentToModel: function(point) {\n                    var viewPoint = this.documentToView(point);\n                    if (!this.canvas.translate) {\n                        viewPoint.x = viewPoint.x + this.scroller.scrollLeft;\n                        viewPoint.y = viewPoint.y + this.scroller.scrollTop;\n                    }\n                    return this.viewToModel(viewPoint);\n                },\n                modelToDocument: function(point) {\n                    return this.viewToDocument(this.modelToView(point));\n                },\n                _transformWithMatrix: function(point, matrix) {\n                    var result = point;\n                    if (point instanceof Point) {\n                        if (matrix) {\n                            result = matrix.apply(point);\n                        }\n                    }\n                    else {\n                        var tl = this._transformWithMatrix(point.topLeft(), matrix),\n                            br = this._transformWithMatrix(point.bottomRight(), matrix);\n                        result = Rect.fromPoints(tl, br);\n                    }\n                    return result;\n                },\n\n                setDataSource: function(dataSource) {\n                    this.options.dataSource = dataSource;\n                    this._dataSource();\n                    if (this.options.autoBind) {\n                        this.dataSource.fetch();\n                    }\n                },\n\n                setConnectionsDataSource: function(dataSource) {\n                    this.options.connectionsDataSource = dataSource;\n                    this._connectionDataSource();\n                    if (this.options.autoBind) {\n                        this.connectionsDataSource.fetch();\n                    }\n                },\n\n                /**\n                 * Performs a diagram layout of the given type.\n                 * @param layoutType The layout algorithm to be applied (TreeLayout, LayeredLayout, SpringLayout).\n                 * @param options Layout-specific options.\n                 */\n                layout: function(options) {\n                    this._layouting = true;\n                    // TODO: raise layout event?\n                    var type;\n                    if (isUndefined(options)) {\n                        options = this.options.layout;\n                    }\n                    if (isUndefined(options) || isUndefined(options.type)) {\n                        type = \"Tree\";\n                    }\n                    else {\n                        type = options.type;\n                    }\n                    var l;\n                    switch (type.toLowerCase()) {\n                        case \"tree\":\n                            l = new diagram.TreeLayout(this);\n                            break;\n\n                        case \"layered\":\n                            l = new diagram.LayeredLayout(this);\n                            break;\n\n                        case \"forcedirected\":\n                        case \"force\":\n                        case \"spring\":\n                        case \"springembedder\":\n                            l = new diagram.SpringLayout(this);\n                            break;\n                        default:\n                            throw \"Layout algorithm '\" + type + \"' is not supported.\";\n                    }\n                    var initialState = new diagram.LayoutState(this);\n                    var finalState = l.layout(options);\n                    if (finalState) {\n                        var unit = new diagram.LayoutUndoUnit(initialState, finalState, options ? options.animate : null);\n                        this.undoRedoService.add(unit);\n                    }\n                    this._layouting = false;\n                    this._redrawConnections();\n                },\n                /**\n                 * Gets a shape on the basis of its identifier.\n                 * @param id (string) the identifier of a shape.\n                 * @returns {Shape}\n                 */\n                getShapeById: function(id) {\n                    var found;\n                    found = Utils.first(this.shapes, function(s) {\n                        return s.visual.id === id;\n                    });\n                    if (found) {\n                        return found;\n                    }\n                    found = Utils.first(this.connections, function(c) {\n                        return c.visual.id === id;\n                    });\n                    return found;\n                },\n\n                getShapeByModelId: function(id) {\n                    var shape;\n                    if (this._isEditable) {\n                        shape = this._dataMap[id];\n                    } else {\n                        shape = Utils.first(this.shapes, function(shape) {\n                            return (shape.dataItem || {}).id === id;\n                        });\n                    }\n                    return shape;\n                },\n\n                getShapeByModelUid: function(uid) {\n                    var shape;\n                    if (this._isEditable) {\n                        shape = Utils.first(this.shapes, function(shape) {\n                            return (shape.dataItem || {}).uid === uid;\n                        });\n                    } else {\n                        shape = this._dataMap[uid];\n                    }\n                    return shape;\n                },\n\n                getConnectionByModelId: function(id) {\n                    var connection;\n                    if (this.connectionsDataSource) {\n                        connection = Utils.first(this.connections, function(connection) {\n                            return (connection.dataItem || {}).id === id;\n                        });\n                    }\n                    return connection;\n                },\n\n                getConnectionByModelUid: function(uid) {\n                    var connection;\n                    if (this.connectionsDataSource) {\n                        connection = this._connectionsDataMap[uid];\n                    }\n                    return connection;\n                },\n\n                _extendLayoutOptions: function(options) {\n                    if (options.layout) {\n                        options.layout = deepExtend({}, diagram.LayoutBase.fn.defaultOptions || {}, options.layout);\n                    }\n                },\n\n                _selectionChanged: function(selected, deselected) {\n                    if (selected.length || deselected.length) {\n                        this.trigger(SELECT, { selected: selected, deselected: deselected });\n                    }\n                },\n                _getValidZoom: function(zoom) {\n                    return math.min(math.max(zoom, this.options.zoomMin), this.options.zoomMax);\n                },\n                _panTransform: function(pos) {\n                    var diagram = this,\n                        pan = pos || diagram._pan;\n\n                    if (diagram.canvas.translate) {\n                        diagram.scroller.scrollTo(pan.x, pan.y);\n                        diagram._zoomMainLayer();\n                    } else {\n                        diagram._storePan(pan);\n                        diagram._transformMainLayer();\n                    }\n                },\n\n                _finishPan: function() {\n                    this.trigger(PAN, { total: this._pan, delta: Number.NaN });\n                },\n                _storePan: function(pan) {\n                    this._pan = pan;\n                    this._storeViewMatrix();\n                },\n                _zoomMainLayer: function() {\n                    var zoom = this._zoom;\n\n                    var transform = new CompositeTransform(0, 0, zoom, zoom);\n                    transform.render(this.mainLayer);\n                    this._storeLayerMatrix(transform);\n                    this._storeViewMatrix();\n                },\n                _transformMainLayer: function() {\n                    var pan = this._pan,\n                        zoom = this._zoom;\n\n                    var transform = new CompositeTransform(pan.x, pan.y, zoom, zoom);\n                    transform.render(this.mainLayer);\n                    this._storeLayerMatrix(transform);\n                    this._storeViewMatrix();\n                },\n                _storeLayerMatrix: function(canvasTransform) {\n                    this._layerMatrix = canvasTransform.toMatrix();\n                    this._layerMatrixInvert = canvasTransform.invert().toMatrix();\n                },\n                _storeViewMatrix: function() {\n                    var pan = this._pan,\n                        zoom = this._zoom;\n\n                    var transform = new CompositeTransform(pan.x, pan.y, zoom, zoom);\n                    this._matrix = transform.toMatrix();\n                    this._matrixInvert = transform.invert().toMatrix();\n                },\n                _toIndex: function(items, indices) {\n                    var result = this._getDiagramItems(items);\n                    this.mainLayer.toIndex(result.visuals, indices);\n                    this._fixOrdering(result, false);\n                },\n                _fixOrdering: function(result, toFront) {\n                    var shapePos = toFront ? this.shapes.length - 1 : 0,\n                        conPos = toFront ? this.connections.length - 1 : 0,\n                        i, item;\n                    for (i = 0; i < result.shapes.length; i++) {\n                        item = result.shapes[i];\n                        Utils.remove(this.shapes, item);\n                        Utils.insert(this.shapes, item, shapePos);\n                    }\n                    for (i = 0; i < result.cons.length; i++) {\n                        item = result.cons[i];\n                        Utils.remove(this.connections, item);\n                        Utils.insert(this.connections, item, conPos);\n                    }\n                },\n                _getDiagramItems: function(items) {\n                    var i, result = {}, args = items;\n                    result.visuals = [];\n                    result.shapes = [];\n                    result.cons = [];\n\n                    if (!items) {\n                        args = this._selectedItems.slice();\n                    } else if (!isArray(items)) {\n                        args = [items];\n                    }\n\n                    for (i = 0; i < args.length; i++) {\n                        var item = args[i];\n                        if (item instanceof Shape) {\n                            result.shapes.push(item);\n                            result.visuals.push(item.visual);\n                        } else if (item instanceof Connection) {\n                            result.cons.push(item);\n                            result.visuals.push(item.visual);\n                        }\n                    }\n\n                    return result;\n                },\n\n                _removeItem: function(item, undoable, removedConnections) {\n                    item.select(false);\n                    if (item instanceof Shape) {\n                        this._removeShapeDataItem(item);\n                        this._removeShape(item, undoable, removedConnections);\n                    } else if (item instanceof Connection) {\n                        this._removeConnectionDataItem(item);\n                        this._removeConnection(item, undoable);\n                    }\n\n                    this.mainLayer.remove(item.visual);\n                },\n\n                _removeShape: function(shape, undoable, removedConnections) {\n                    var i, connection, connector,\n                        sources = [], targets = [];\n                    this.toolService._removeHover();\n\n                    if (undoable) {\n                        this.undoRedoService.addCompositeItem(new DeleteShapeUnit(shape));\n                    }\n                    Utils.remove(this.shapes, shape);\n                    this._shapesQuadTree.remove(shape);\n\n                    for (i = 0; i < shape.connectors.length; i++) {\n                        connector = shape.connectors[i];\n                        for (var j = 0; j < connector.connections.length; j++) {\n                            connection = connector.connections[j];\n                            if (!removedConnections || !dataviz.inArray(connection, removedConnections)) {\n                                if (connection.sourceConnector == connector) {\n                                    sources.push(connection);\n                                } else if (connection.targetConnector == connector) {\n                                    targets.push(connection);\n                                }\n                            }\n                        }\n                    }\n\n                    for (i = 0; i < sources.length; i++) {\n                        sources[i].source(null, undoable);\n                        sources[i].updateModel();\n                    }\n                    for (i = 0; i < targets.length; i++) {\n                        targets[i].target(null, undoable);\n                        targets[i].updateModel();\n                    }\n                },\n\n                _removeConnection: function(connection, undoable) {\n                    if (connection.sourceConnector) {\n                        Utils.remove(connection.sourceConnector.connections, connection);\n                    }\n                    if (connection.targetConnector) {\n                        Utils.remove(connection.targetConnector.connections, connection);\n                    }\n                    if (undoable) {\n                        this.undoRedoService.addCompositeItem(new DeleteConnectionUnit(connection));\n                    }\n\n                    Utils.remove(this.connections, connection);\n                },\n\n                _removeDataItems: function(items, recursive) {\n                    var item, children, shape, idx;\n                    items = isArray(items) ? items : [items];\n\n                    while (items.length) {\n                        item = items.shift();\n                        shape = this._dataMap[item.uid];\n                        if (shape) {\n                            this._removeShapeConnections(shape);\n                            this._removeItem(shape, false);\n                            delete this._dataMap[item.uid];\n                            if (recursive && item.hasChildren && item.loaded()) {\n                                children = item.children.data();\n                                for (idx = 0; idx < children.length; idx++) {\n                                    items.push(children[idx]);\n                                }\n                            }\n                        }\n                    }\n                },\n\n                _removeShapeConnections: function(shape) {\n                    var connections = shape.connections();\n                    var idx;\n\n                    if (connections) {\n                        for (idx = 0; idx < connections.length; idx++) {\n                            this._removeItem(connections[idx], false);\n                        }\n                    }\n                },\n\n                _addDataItem: function(dataItem, undoable) {\n                    if (!defined(dataItem)) {\n                        return;\n                    }\n\n                    var shape = this._dataMap[dataItem.id];\n                    if (shape) {\n                        return shape;\n                    }\n\n                    var options = deepExtend({}, this.options.shapeDefaults);\n                    options.dataItem = dataItem;\n                    shape = new Shape(options, this);\n                    this.addShape(shape, undoable !== false);\n                    this._dataMap[dataItem.id] = shape;\n                    return shape;\n                },\n\n                _addDataItemByUid: function(dataItem) {\n                    if (!defined(dataItem)) {\n                        return;\n                    }\n\n                    var shape = this._dataMap[dataItem.uid];\n                    if (shape) {\n                        return shape;\n                    }\n\n                    var options = deepExtend({}, this.options.shapeDefaults);\n                    options.dataItem = dataItem;\n                    shape = new Shape(options, this);\n                    this.addShape(shape);\n                    this._dataMap[dataItem.uid] = shape;\n                    return shape;\n                },\n\n                _addDataItems: function(items, parent) {\n                    var item, idx, shape, parentShape, connection;\n                    for (idx = 0; idx < items.length; idx++) {\n                        item = items[idx];\n                        shape = this._addDataItemByUid(item);\n                        parentShape = this._addDataItemByUid(parent);\n                        if (parentShape && !this.connected(parentShape, shape)) { // check if connected to not duplicate connections.\n                            connection = this.connect(parentShape, shape);\n                        }\n                    }\n                },\n\n                _refreshSource: function(e) {\n                    var that = this,\n                        node = e.node,\n                        action = e.action,\n                        items = e.items,\n                        options = that.options,\n                        idx,\n                        dataBound;\n\n                    if (e.field) {\n                        for (idx = 0; idx < items.length; idx++) {\n                            if (this._dataMap[items[idx].uid]) {\n                                this._dataMap[items[idx].uid].redrawVisual();\n                            }\n                        }\n                        return;\n                    }\n\n                    if (action == \"remove\") {\n                        this._removeDataItems(e.items, true);\n                    } else {\n\n                        if ((!action || action === \"itemloaded\") && !this._bindingRoots) {\n                            this._bindingRoots = true;\n                            dataBound = true;\n                        }\n\n                        if (!action && !node) {\n                            that.clear();\n                        }\n\n                        this._addDataItems(items, node);\n\n                        for (idx = 0; idx < items.length; idx++) {\n                            items[idx].load();\n                        }\n                    }\n\n                    if (options.layout && (dataBound || action == \"remove\" || action == \"add\")) {\n                        that.layout(options.layout);\n                    }\n\n                    if (dataBound) {\n                        this.trigger(\"dataBound\");\n                        this._bindingRoots = false;\n                    }\n                },\n\n                _addItem: function(item) {\n                    if (item instanceof Shape) {\n                        this.addShape(item);\n                    } else if (item instanceof Connection) {\n                        this.addConnection(item);\n                    }\n                },\n\n                _createToolBar: function(preventClosing) {\n                    var diagram = this.toolService.diagram;\n\n                    if (!this.singleToolBar && diagram.select().length === 1) {\n                        var element = diagram.select()[0];\n                        if (element && element.options.editable !== false) {\n                            var editable = element.options.editable;\n                            var tools = editable.tools;\n                            if (this._isEditable && tools.length === 0) {\n                                if (element instanceof Shape) {\n                                    tools = [\"edit\", \"rotateClockwise\", \"rotateAnticlockwise\"];\n                                } else if (element instanceof Connection) {\n                                    tools = [\"edit\"];\n                                }\n\n                                if (editable && editable.remove !== false) {\n                                    tools.push(\"delete\");\n                                }\n                            }\n\n                            if (tools && tools.length) {\n                                var padding = 20;\n                                var point;\n                                this.singleToolBar = new DiagramToolBar(diagram, {\n                                    tools: tools,\n                                    click: this._toolBarClick.bind(this),\n                                    modal: true,\n                                    popupZIndex: parseInt(diagram.element.closest(\".k-window\").css(\"zIndex\"), 10) + 10\n                                });\n                                var popupWidth = outerWidth(this.singleToolBar._popup.element);\n                                var popupHeight = outerHeight(this.singleToolBar._popup.element);\n                                if (element instanceof Shape) {\n                                    var shapeBounds = this.modelToView(element.bounds(ROTATED));\n                                    point = new Point(shapeBounds.x, shapeBounds.y).minus(new Point(\n                                        (popupWidth - shapeBounds.width) / 2,\n                                        popupHeight + padding));\n                                } else if (element instanceof Connection) {\n                                    var connectionBounds = this.modelToView(element.bounds());\n\n                                    point = new Point(connectionBounds.x, connectionBounds.y)\n                                        .minus(new Point(\n                                            (popupWidth - connectionBounds.width - 20) / 2,\n                                            popupHeight + padding\n                                        ));\n                                }\n\n                                if (point) {\n                                    if (!this.canvas.translate) {\n                                        point = point.minus(new Point(this.scroller.scrollLeft, this.scroller.scrollTop));\n                                    }\n                                    point = this.viewToDocument(point);\n                                    point = new Point(math.max(point.x, 0), math.max(point.y, 0));\n                                    this.singleToolBar.showAt(point);\n                                    if (preventClosing) {\n                                        this.singleToolBar._popup.one(\"close\", preventDefault);\n                                    }\n                                } else {\n                                    this._destroyToolBar();\n                                }\n                            }\n                        }\n                    }\n                },\n\n                _toolBarClick: function(e) {\n                    this.trigger(\"toolBarClick\", e);\n                    this._destroyToolBar();\n                },\n\n                _normalizePointZoom: function(point) {\n                    return point.times(1 / this.zoom());\n                },\n\n                _initialize: function() {\n                    this.shapes = [];\n                    this._selectedItems = [];\n                    this.connections = [];\n                    this._dataMap = {};\n                    this._connectionsDataMap = {};\n                    this._inactiveShapeItems = new InactiveItemsCollection();\n                    this._deferredConnectionUpdates = [];\n                    this.undoRedoService = new UndoRedoService({\n                        undone: this._syncHandler,\n                        redone: this._syncHandler\n                    });\n                    this.id = diagram.randomId();\n                },\n\n                _fetchFreshData: function() {\n                    var that = this;\n                    that._dataSource();\n\n                    if (that._isEditable) {\n                        that._connectionDataSource();\n                    }\n\n                    if (that.options.autoBind) {\n                        if (that._isEditable) {\n                            this._loadingShapes = true;\n                            this._loadingConnections = true;\n                            that.dataSource.fetch();\n                            that.connectionsDataSource.fetch();\n                        } else {\n                            that.dataSource.fetch();\n                        }\n                    }\n                },\n\n                _dataSource: function() {\n                    if (defined(this.options.connectionsDataSource)) {\n                        this._isEditable = true;\n                        var dsOptions = this.options.dataSource || {};\n                        var ds = isArray(dsOptions) ? { data: dsOptions } : dsOptions;\n\n                        if (this.dataSource && this._shapesRefreshHandler) {\n                            this.dataSource\n                                .unbind(\"change\", this._shapesRefreshHandler)\n                                .unbind(\"requestStart\", this._shapesRequestStartHandler)\n                                .unbind(\"error\", this._shapesErrorHandler);\n                        } else {\n                            this._shapesRefreshHandler = this._refreshShapes.bind(this);\n                            this._shapesRequestStartHandler = this._shapesRequestStart.bind(this);\n                            this._shapesErrorHandler = this._error.bind(this);\n                        }\n\n                        this.dataSource = kendo.data.DataSource.create(ds)\n                            .bind(\"change\", this._shapesRefreshHandler)\n                            .bind(\"requestStart\", this._shapesRequestStartHandler)\n                            .bind(\"error\", this._shapesErrorHandler);\n                    } else {\n                        this._treeDataSource();\n                        this._isEditable = false;\n                    }\n                },\n\n                _connectionDataSource: function() {\n                    var dsOptions = this.options.connectionsDataSource;\n                    if (dsOptions) {\n                        var ds = isArray(dsOptions) ? { data: dsOptions } : dsOptions;\n\n                        if (this.connectionsDataSource && this._connectionsRefreshHandler) {\n                            this.connectionsDataSource\n                                .unbind(\"change\", this._connectionsRefreshHandler)\n                                .unbind(\"requestStart\", this._connectionsRequestStartHandler)\n                                .unbind(\"error\", this._connectionsErrorHandler);\n                        } else {\n                            this._connectionsRefreshHandler = this._refreshConnections.bind(this);\n                            this._connectionsRequestStartHandler = this._connectionsRequestStart.bind(this);\n                            this._connectionsErrorHandler = this._connectionsError.bind(this);\n                        }\n\n                        this.connectionsDataSource = kendo.data.DataSource.create(ds)\n                            .bind(\"change\", this._connectionsRefreshHandler)\n                            .bind(\"requestStart\", this._connectionsRequestStartHandler)\n                            .bind(\"error\", this._connectionsErrorHandler);\n                    }\n                },\n\n                _shapesRequestStart: function(e) {\n                    if (e.type == \"read\") {\n                        this._loadingShapes = true;\n                    }\n                },\n\n                _connectionsRequestStart: function(e) {\n                    if (e.type == \"read\") {\n                        this._loadingConnections = true;\n                    }\n                },\n\n                _error: function() {\n                    this._loadingShapes = false;\n                },\n\n                _connectionsError: function() {\n                    this._loadingConnections = false;\n                },\n\n                _refreshShapes: function(e) {\n                    if (e.action === \"remove\") {\n                        if (this._shouldRefresh()) {\n                            this._removeShapes(e.items);\n                        }\n                    } else if (e.action === \"itemchange\") {\n                        if (this._shouldRefresh()) {\n                            this._updateShapes(e.items, e.field);\n                        }\n                    } else if (e.action === \"add\") {\n                        this._inactiveShapeItems.add(e.items);\n                    } else if (e.action === \"sync\") {\n                        this._syncShapes(e.items);\n                    } else {\n                        this.refresh();\n                    }\n                },\n\n                _shouldRefresh: function() {\n                    return !this._suspended;\n                },\n\n                _suspendModelRefresh: function() {\n                    this._suspended = (this._suspended || 0) + 1;\n                },\n\n                _resumeModelRefresh: function() {\n                    this._suspended = math.max((this._suspended || 0) - 1, 0);\n                },\n\n                refresh: function() {\n                    this._loadingShapes = false;\n                    if (!this._loadingConnections) {\n                        this._rebindShapesAndConnections();\n                    }\n                },\n\n                _rebindShapesAndConnections: function() {\n                    this.clear();\n                    this._addShapes(this.dataSource.view());\n                    if (this.connectionsDataSource) {\n                        this._addConnections(this.connectionsDataSource.view(), false);\n                    }\n\n                    if (this.options.layout) {\n                        this.layout(this.options.layout);\n                    } else {\n                        this._redrawConnections();\n                    }\n                    this.trigger(\"dataBound\");\n                },\n\n                refreshConnections: function() {\n                    this._loadingConnections = false;\n                    if (!this._loadingShapes) {\n                        this._rebindShapesAndConnections();\n                    }\n                },\n\n                _redrawConnections: function() {\n                    var connections = this.connections;\n                    for (var idx = 0; idx < connections.length; idx++) {\n                        connections[idx].refresh();\n                    }\n                },\n\n                _removeShapes: function(items) {\n                    var dataMap = this._dataMap;\n                    var item, i;\n                    for (i = 0; i < items.length; i++) {\n                        item = items[i];\n                        if (dataMap[item.id]) {\n                            this.remove(dataMap[item.id], false);\n                            dataMap[item.id] = null;\n                        }\n                    }\n                },\n\n                _syncShapes: function() {\n                    var diagram = this;\n                    var inactiveItems = diagram._inactiveShapeItems;\n                    inactiveItems.forEach(function(inactiveItem) {\n                        var dataItem = inactiveItem.dataItem;\n                        var shape = inactiveItem.element;\n                        if (!dataItem.isNew()) {\n                            if (shape) {\n                                shape._setOptionsFromModel();\n                                diagram.addShape(shape, inactiveItem.undoable);\n                                diagram._dataMap[dataItem.id] = shape;\n                            } else {\n                                diagram._addDataItem(dataItem);\n                            }\n                            inactiveItem.activate();\n                            inactiveItems.remove(dataItem);\n                        }\n                    });\n                },\n\n                _updateShapes: function(items, field) {\n                    for (var i = 0; i < items.length; i++) {\n                        var dataItem = items[i];\n\n                        var shape = this._dataMap[dataItem.id];\n                        if (shape) {\n                            shape.updateOptionsFromModel(dataItem, field);\n                        }\n                    }\n                },\n\n                _addShapes: function(dataItems) {\n                    for (var i = 0; i < dataItems.length; i++) {\n                        this._addDataItem(dataItems[i], false);\n                    }\n                },\n\n                _refreshConnections: function(e) {\n                    if (e.action === \"remove\") {\n                        if (this._shouldRefresh()) {\n                            this._removeConnections(e.items);\n                        }\n                    } else if (e.action === \"add\") {\n                        this._addConnections(e.items);\n                    } else if (e.action === \"sync\") {\n                        //TO DO: include logic to update the connections with different values returned from the server.\n                    } else if (e.action === \"itemchange\") {\n                        if (this._shouldRefresh()) {\n                            this._updateConnections(e.items);\n                        }\n                    } else {\n                        this.refreshConnections();\n                    }\n                },\n\n                _removeConnections: function(items) {\n                    for (var i = 0; i < items.length; i++) {\n                        this.remove(this._connectionsDataMap[items[i].uid], false);\n                        this._connectionsDataMap[items[i].uid] = null;\n                    }\n                },\n\n                _updateConnections: function(items) {\n                    for (var i = 0; i < items.length; i++) {\n                        var dataItem = items[i];\n\n                        var connection = this._connectionsDataMap[dataItem.uid];\n                        connection.updateOptionsFromModel(dataItem);\n                    }\n                },\n\n                _addConnections: function(connections, undoable) {\n                    var length = connections.length;\n\n                    for (var i = 0; i < length; i++) {\n                        var dataItem = connections[i];\n                        this._addConnectionDataItem(dataItem, undoable);\n                    }\n                },\n\n                _addConnectionDataItem: function(dataItem, undoable) {\n                    if (!this._connectionsDataMap[dataItem.uid]) {\n                        var from = this._validateConnector(dataItem.from);\n                        if (!defined(from) || from === null) {\n                            from = new Point(dataItem.fromX, dataItem.fromY);\n                        }\n\n                        var to = this._validateConnector(dataItem.to);\n                        if (!defined(to) || to === null) {\n                            to = new Point(dataItem.toX, dataItem.toY);\n                        }\n\n                        if (defined(from) && defined(to)) {\n                            var options = deepExtend({}, this.options.connectionDefaults);\n                            options.dataItem = dataItem;\n                            var connection = new Connection(from, to, options);\n\n                            this._connectionsDataMap[dataItem.uid] = connection;\n                            this.addConnection(connection, undoable);\n                        }\n                    }\n                },\n\n                _validateConnector: function(value) {\n                    var connector;\n\n                    if (defined(value) && value !== null) {\n                        connector = this._dataMap[value];\n                    }\n\n                    return connector;\n                },\n\n                _treeDataSource: function() {\n                    var that = this,\n                        options = that.options,\n                        dataSource = options.dataSource;\n\n                    dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;\n\n                    if (dataSource instanceof kendo.data.DataSource && !(dataSource instanceof kendo.data.HierarchicalDataSource)) {\n                        throw new Error(\"Incorrect DataSource type. If a single dataSource instance is set to the diagram then it should be a HierarchicalDataSource. You should set only the options instead of an instance or a HierarchicalDataSource instance or supply connectionsDataSource as well.\");\n                    }\n\n                    if (!dataSource.fields) {\n                        dataSource.fields = [\n                            { field: \"text\" },\n                            { field: \"url\" },\n                            { field: \"spriteCssClass\" },\n                            { field: \"imageUrl\" }\n                        ];\n                    }\n                    if (that.dataSource && that._refreshHandler) {\n                        that._unbindDataSource();\n                    }\n\n                    that._refreshHandler = that._refreshSource.bind(that);\n                    that._errorHandler = that._error.bind(that);\n\n                    that.dataSource = HierarchicalDataSource.create(dataSource)\n                        .bind(CHANGE, that._refreshHandler)\n                        .bind(ERROR, that._errorHandler);\n                },\n\n                _unbindDataSource: function() {\n                    var that = this;\n\n                    that.dataSource.unbind(CHANGE, that._refreshHandler).unbind(ERROR, that._errorHandler);\n                },\n\n                _adorn: function(adorner, isActive) {\n                    if (isActive !== undefined$1 && adorner) {\n                        if (isActive) {\n                            this._adorners.push(adorner);\n                            this.adornerLayer.append(adorner.visual);\n                        }\n                        else {\n                            Utils.remove(this._adorners, adorner);\n                            this.adornerLayer.remove(adorner.visual);\n                        }\n                    }\n                },\n\n                _showConnectors: function(shape, value) {\n                    if (value) {\n                        this._connectorsAdorner.show(shape);\n                    } else {\n                        this._connectorsAdorner.destroy();\n                    }\n                },\n\n                _updateAdorners: function() {\n                    var adorners = this._adorners;\n\n                    for (var i = 0; i < adorners.length; i++) {\n                        var adorner = adorners[i];\n\n                        if (adorner.refreshBounds) {\n                            adorner.refreshBounds();\n                        }\n                        adorner.refresh();\n                    }\n                },\n\n                _refresh: function() {\n                    for (var i = 0; i < this.connections.length; i++) {\n                        this.connections[i].refresh();\n                    }\n                },\n\n                _destroyToolBar: function() {\n                    if (this.singleToolBar) {\n                        this.singleToolBar.hide();\n                        this.singleToolBar.destroy();\n                        this.singleToolBar = null;\n                    }\n                },\n\n                _destroyGlobalToolBar: function() {\n                    if (this.toolBar) {\n                        this.toolBar.hide();\n                        this.toolBar.destroy();\n                        this.toolBar = null;\n                    }\n                },\n\n                exportDOMVisual: function() {\n                    var viewBox = this.canvas._viewBox;\n                    var scrollOffset = geom.transform()\n                                           .translate(-viewBox.x, -viewBox.y);\n\n                    var viewRect = new geom.Rect([0, 0], [viewBox.width, viewBox.height]);\n                    var clipPath = draw.Path.fromRect(viewRect);\n                    var wrap = new draw.Group({ transform: scrollOffset });\n                    var clipWrap = new draw.Group({ clip: clipPath });\n                    var root = this.canvas.drawingElement.children[0];\n\n                    clipWrap.append(wrap);\n\n                    // Don't reparent the root\n                    wrap.children.push(root);\n\n                    return clipWrap;\n                },\n\n                exportVisual: function() {\n                    var scale = geom.transform().scale(1 / this._zoom);\n                    var wrap = new draw.Group({\n                        transform: scale\n                    });\n\n                    var root = this.mainLayer.drawingElement;\n                    wrap.children.push(root);\n\n                    return wrap;\n                },\n\n                _syncChanges: function() {\n                    this._syncShapeChanges();\n                    this._syncConnectionChanges();\n                },\n\n                _syncShapeChanges: function() {\n                    if (this.dataSource && this._isEditable) {\n                        this.dataSource.sync();\n                    }\n                },\n\n                _syncConnectionChanges: function() {\n                    var that = this;\n                    if (that.connectionsDataSource && that._isEditable) {\n                        $.when.apply($, that._deferredConnectionUpdates).then(function() {\n                            that.connectionsDataSource.sync();\n                        });\n                        that.deferredConnectionUpdates = [];\n                    }\n                }\n            });\n\n            dataviz.ExportMixin.extend(Diagram.fn, true);\n\n            if (kendo.PDFMixin) {\n                kendo.PDFMixin.extend(Diagram.fn);\n            }\n\n            function filterShapeDataItem(dataItem) {\n                var result = {};\n\n                dataItem = dataItem || {};\n\n                if (defined(dataItem.text) && dataItem.text !== null) {\n                    result.text = dataItem.text;\n                }\n\n                if (defined(dataItem.x) && dataItem.x !== null) {\n                    result.x = dataItem.x;\n                }\n\n                if (defined(dataItem.y) && dataItem.y !== null) {\n                    result.y = dataItem.y;\n                }\n\n                if (defined(dataItem.width) && dataItem.width !== null) {\n                    result.width = dataItem.width;\n                }\n\n                if (defined(dataItem.height) && dataItem.height !== null) {\n                    result.height = dataItem.height;\n                }\n\n                if (defined(dataItem.type) && dataItem.type !== null) {\n                    result.type = dataItem.type;\n                }\n\n                return result;\n            }\n\n            function filterConnectionDataItem(dataItem) {\n                var result = {};\n\n                dataItem = dataItem || {};\n\n                if (defined(dataItem.text) && dataItem.text !== null) {\n                    result.content = dataItem.text;\n                }\n\n                if (defined(dataItem.type) && dataItem.type !== null) {\n                    result.type = dataItem.type;\n                }\n\n                if (defined(dataItem.from) && dataItem.from !== null) {\n                    result.from = dataItem.from;\n                }\n\n                if (defined(dataItem.fromConnector) && dataItem.fromConnector !== null) {\n                    result.fromConnector = dataItem.fromConnector;\n                }\n\n                if (defined(dataItem.fromX) && dataItem.fromX !== null) {\n                    result.fromX = dataItem.fromX;\n                }\n\n                if (defined(dataItem.fromY) && dataItem.fromY !== null) {\n                    result.fromY = dataItem.fromY;\n                }\n\n                if (defined(dataItem.to) && dataItem.to !== null) {\n                    result.to = dataItem.to;\n                }\n\n                if (defined(dataItem.toConnector) && dataItem.toConnector !== null) {\n                    result.toConnector = dataItem.toConnector;\n                }\n\n                if (defined(dataItem.toX) && dataItem.toX !== null) {\n                    result.toX = dataItem.toX;\n                }\n\n                if (defined(dataItem.toY) && dataItem.toY !== null) {\n                    result.toY = dataItem.toY;\n                }\n\n                return result;\n            }\n\n\n            var DiagramToolBar = kendo.Observable.extend({\n                init: function(diagram, options) {\n                    kendo.Observable.fn.init.call(this);\n                    this.diagram = diagram;\n                    this.options = deepExtend({}, this.options, options);\n                    this._tools = [];\n                    this.createToolBar();\n                    this.createTools();\n                    this.appendTools();\n\n                    if (this.options.modal) {\n                        this.createPopup();\n                    }\n\n                    this.bind(this.events, options);\n                },\n\n                events: [\"click\"],\n\n                createPopup: function() {\n                    this.container = $(\"<div/>\").append(this.element);\n                    this._popup = this.container.kendoPopup({}).getKendoPopup();\n                },\n\n                appendTools: function() {\n                    for (var i = 0; i < this._tools.length; i++) {\n                        var tool = this._tools[i];\n                        if (tool.buttons && tool.buttons.length || !defined(tool.buttons)) {\n                            this._toolBar.add(tool);\n                        }\n                    }\n                },\n\n                createToolBar: function() {\n                    this.element = $(\"<div/>\");\n                    this._toolBar = this.element\n                        .kendoToolBar({\n                            click: this.click.bind(this),\n                            resizable: false\n                        }).getKendoToolBar();\n\n                    this.element.css(\"border\", \"none\");\n                },\n\n                createTools: function() {\n                    for (var i = 0; i < this.options.tools.length; i++) {\n                        this.createTool(this.options.tools[i]);\n                    }\n                },\n\n                createTool: function(tool) {\n                    if (!isPlainObject(tool)) {\n                        tool = {\n                            name: tool\n                        };\n                    }\n                    var toolName = tool.name + \"Tool\";\n                    if (this[toolName]) {\n                        this[toolName](tool);\n                    } else {\n                        this._tools.push(deepExtend({}, tool, {\n                            attributes: this._setAttributes({ action: tool.name })\n                        }));\n                    }\n                },\n\n                showAt: function(point) {\n                    var popupZIndex = parseInt(this.options.popupZIndex, 10);\n\n                    if (this._popup) {\n                        this._popup.open(point.x, point.y);\n\n                        if (popupZIndex) {\n                            this._popup.wrapper.css(\"zIndex\", popupZIndex);\n                        }\n                    }\n                },\n\n                hide: function() {\n                    if (this._popup) {\n                        this._popup.close();\n                    }\n                },\n\n                newGroup: function() {\n                    return {\n                        type: \"buttonGroup\",\n                        buttons: []\n                    };\n                },\n\n                editTool: function() {\n                    this._tools.push({\n                        icon: \"pencil\",\n                        showText: \"overflow\",\n                        type: \"button\",\n                        text: \"Edit\",\n                        attributes: this._setAttributes({ action: \"edit\" })\n                    });\n                },\n\n                deleteTool: function() {\n                    this._tools.push({\n                        icon: \"x\",\n                        showText: \"overflow\",\n                        type: \"button\",\n                        text: \"Delete\",\n                        attributes: this._setAttributes({ action: \"delete\" })\n                    });\n                },\n\n                rotateAnticlockwiseTool: function(options) {\n                    this._appendGroup(\"rotate\");\n                    this._rotateGroup.buttons.push({\n                        icon: \"rotate-left\",\n                        showText: \"overflow\",\n                        text: \"RotateAnticlockwise\",\n                        group: \"rotate\",\n                        attributes: this._setAttributes({ action: \"rotateAnticlockwise\", step: options.step })\n                    });\n                },\n\n                rotateClockwiseTool: function(options) {\n                    this._appendGroup(\"rotate\");\n                    this._rotateGroup.buttons.push({\n                        icon: \"rotate-right\",\n                        attributes: this._setAttributes({ action: \"rotateClockwise\", step: options.step }),\n                        showText: \"overflow\",\n                        text: \"RotateClockwise\",\n                        group: \"rotate\"\n                    });\n                },\n\n                createShapeTool: function() {\n                    this._appendGroup(\"create\");\n                    this._createGroup.buttons.push({\n                        icon: \"shapes\",\n                        showText: \"overflow\",\n                        text: \"CreateShape\",\n                        group: \"create\",\n                        attributes: this._setAttributes({ action: \"createShape\" })\n                    });\n                },\n\n                createConnectionTool: function() {\n                    this._appendGroup(\"create\");\n                    this._createGroup.buttons.push({\n                        icon: \"connector\",\n                        showText: \"overflow\",\n                        text: \"CreateConnection\",\n                        group: \"create\",\n                        attributes: this._setAttributes({ action: \"createConnection\" })\n                    });\n                },\n\n                undoTool: function() {\n                    this._appendGroup(\"history\");\n                    this._historyGroup.buttons.push({\n                        icon: \"undo\",\n                        showText: \"overflow\",\n                        text: \"Undo\",\n                        group: \"history\",\n                        attributes: this._setAttributes({ action: \"undo\" })\n                    });\n                },\n\n                redoTool: function() {\n                    this._appendGroup(\"history\");\n                    this._historyGroup.buttons.push({\n                        icon: \"redo\",\n                        showText: \"overflow\",\n                        text: \"Redo\",\n                        group: \"history\",\n                        attributes: this._setAttributes({ action: \"redo\" })\n                    });\n                },\n\n                _appendGroup: function(name) {\n                    var prop = \"_\" + name + \"Group\";\n                    if (!this[prop]) {\n                        this[prop] = this.newGroup();\n                        this._tools.push(this[prop]);\n                    }\n                },\n\n                _setAttributes: function(attributes) {\n                    var attr = {};\n\n                    if (attributes.action) {\n                        attr[kendo.attr(\"action\")] = attributes.action;\n                    }\n\n                    if (attributes.step) {\n                        attr[kendo.attr(\"step\")] = attributes.step;\n                    }\n\n                    return attr;\n                },\n\n                _getAttributes: function(element) {\n                    var attr = {};\n\n                    var action = element.attr(kendo.attr(\"action\"));\n                    if (action) {\n                        attr.action = action;\n                    }\n\n                    var step = element.attr(kendo.attr(\"step\"));\n                    if (step) {\n                        attr.step = step;\n                    }\n\n                    return attr;\n                },\n\n                click: function(e) {\n                    var attributes = this._getAttributes($(e.target));\n                    var action = attributes.action;\n\n                    if (action && this[action]) {\n                        this[action](attributes);\n                    }\n\n                    this.trigger(\"click\", this.eventData(action, e.target));\n                },\n\n                eventData: function(action, target) {\n                    var elements = this.selectedElements(),\n                        length = elements.length,\n                        shapes = [], connections = [], element;\n\n                    for (var idx = 0; idx < length; idx++) {\n                        element = elements[idx];\n                        if (element instanceof Shape) {\n                            shapes.push(element);\n                        } else {\n                            connections.push(element);\n                        }\n                    }\n\n                    return {\n                        shapes: shapes,\n                        connections: connections,\n                        action: action,\n                        target: target\n                    };\n                },\n\n                \"delete\": function() {\n                    var diagram = this.diagram;\n                    var toRemove = diagram._triggerRemove(this.selectedElements());\n                    if (toRemove.length) {\n                        this.diagram.remove(toRemove, true);\n                        this.diagram._syncChanges();\n                    }\n                },\n\n                edit: function() {\n                    var selectedElemens = this.selectedElements();\n                    if (selectedElemens.length === 1) {\n                        this.diagram.edit(selectedElemens[0]);\n                    }\n                },\n\n                rotateClockwise: function(options) {\n                    var angle = parseFloat(options.step || 90);\n                    this._rotate(angle);\n                },\n\n                rotateAnticlockwise: function(options) {\n                    var angle = parseFloat(options.step || 90);\n                    this._rotate(-angle);\n                },\n\n                _rotate: function(angle) {\n                    var adorner = this.diagram._resizingAdorner;\n                    adorner.angle(adorner.angle() + angle);\n                    adorner.rotate();\n                },\n\n                selectedElements: function() {\n                    return this.diagram.select();\n                },\n\n                createShape: function() {\n                    this.diagram.createShape();\n                },\n\n                createConnection: function() {\n                    this.diagram.createConnection();\n                },\n\n                undo: function() {\n                    this.diagram.undo();\n                },\n\n                redo: function() {\n                    this.diagram.redo();\n                },\n\n                destroy: function() {\n                    this.diagram = null;\n                    this.element = null;\n                    this.options = null;\n\n                    if (this._toolBar) {\n                        this._toolBar.destroy();\n                    }\n\n                    if (this._popup) {\n                        this._popup.destroy();\n                    }\n                }\n            });\n\n            var Editor = kendo.Observable.extend({\n                init: function(element, options) {\n                    kendo.Observable.fn.init.call(this);\n\n                    this.options = extend(true, {}, this.options, options);\n                    this.element = element;\n                    this.model = this.options.model;\n                    this.fields = this._getFields();\n                    this._initContainer();\n                    this.createEditable();\n                },\n\n                options: {\n                    editors: {}\n                },\n\n                _initContainer: function() {\n                    this.wrapper = this.element;\n                },\n\n                createEditable: function() {\n                    var options = this.options;\n\n                    this.editable = new kendo.ui.Editable(this.wrapper, {\n                        fields: this.fields,\n                        target: options.target,\n                        clearContainer: false,\n                        model: this.model\n                    });\n                },\n\n                _isEditable: function(field) {\n                    return this.model.editable && this.model.editable(field);\n                },\n\n                _getFields: function() {\n                    var fields = [];\n                    var modelFields = this.model.fields;\n\n                    for (var field in modelFields) {\n                        var result = {};\n                        if (this._isEditable(field)) {\n                            var editor = this.options.editors[field];\n                            if (editor) {\n                                result.editor = editor;\n                            }\n                            result.field = field;\n                            fields.push(result);\n                        }\n                    }\n\n                    return fields;\n                },\n\n                end: function() {\n                    return this.editable.end();\n                },\n\n                destroy: function() {\n                    this.editable.destroy();\n                    this.editable.element.find(\"[\" + kendo.attr(\"container-for\") + \"]\").empty();\n                    this.model = this.wrapper = this.element = this.columns = this.editable = null;\n                }\n            });\n\n            var PopupEditor = Editor.extend({\n                init: function(element, options) {\n                    Editor.fn.init.call(this, element, options);\n                    this.bind(this.events, this.options);\n\n                    this.open();\n                },\n\n                events: [ \"update\", \"cancel\" ],\n\n                options: {\n                    window: {\n                        modal: true,\n                        resizable: false,\n                        draggable: true,\n                        title: \"Edit\",\n                        visible: false\n                    }\n                },\n\n                _initContainer: function() {\n                    var that = this;\n                    this.wrapper = $('<div class=\"k-popup-edit-form\"/>')\n                        .attr(kendo.attr(\"uid\"), this.model.uid);\n\n                    var formContent = \"\";\n\n                    if (this.options.template) {\n                        formContent += this._renderTemplate();\n                        this.fields = [];\n                    } else {\n                        formContent += this._renderFields();\n                    }\n\n                    formContent += this._renderButtons();\n\n                    this.wrapper.append(\n                        $('<div class=\"k-edit-form-container\"/>').append(formContent));\n\n                    this.window = new kendo.ui.Window(this.wrapper.appendTo(this.element), this.options.window);\n                    this.window.bind(\"close\", function(e) {\n                        //The bellow line is required due to: draggable window in IE, change event will be triggered while the window is closing\n                        if (e.userTriggered) {\n                            e.sender.element.trigger(\"focus\");\n                            that._cancelClick(e);\n                        }\n                    });\n\n                    this._attachButtonEvents();\n                },\n\n                _renderTemplate: function() {\n                    var template = this.options.template;\n\n                    if (typeof template === \"string\") {\n                        template = kendo.unescape(template);\n                    }\n\n                    template = kendo.template(template)(this.model);\n\n                    return template;\n                },\n\n                _renderFields: function() {\n                    var form = \"\";\n                    for (var i = 0; i < this.fields.length; i++) {\n                        var field = this.fields[i];\n\n                        form += '<div class=\"k-edit-label\"><label for=\"' + field.field + '\">' + (field.field || \"\") + '</label></div>';\n\n                        if (this._isEditable(field.field)) {\n                            form += '<div ' + kendo.attr(\"container-for\") + '=\"' + field.field +\n                            '\" class=\"k-edit-field\"></div>';\n                        }\n                    }\n\n                    return form;\n                },\n\n                _renderButtons: function() {\n                    var form = '<div class=\"k-edit-buttons\">';\n                    form += this._createButton(\"update\");\n                    form += this._createButton(\"cancel\");\n                    form += '</div>';\n                    return form;\n                },\n\n                _createButton: function(name) {\n                    return kendo.template(BUTTON_TEMPLATE)(defaultButtons[name]);\n                },\n\n                _attachButtonEvents: function() {\n                    this._cancelClickHandler = this._cancelClick.bind(this);\n                    this.window.element.on(CLICK + NS, \"button.k-diagram-cancel\", this._cancelClickHandler);\n\n                    this._updateClickHandler = this._updateClick.bind(this);\n                    this.window.element.on(CLICK + NS, \"button.k-diagram-update\", this._updateClickHandler);\n                },\n\n                _updateClick: function(e) {\n                    e.preventDefault();\n                    this.trigger(\"update\");\n                },\n\n                _cancelClick: function(e) {\n                    e.preventDefault();\n                    this.trigger(\"cancel\");\n                },\n\n                open: function() {\n                    this.window.center().open();\n                },\n\n                close: function() {\n                    this.window.bind(\"deactivate\", this.destroy.bind(this)).close();\n                },\n\n                destroy: function() {\n                    this.window.close().destroy();\n                    this.window.element.off(CLICK + NS, \"a.k-diagram-cancel\", this._cancelClickHandler);\n                    this.window.element.off(CLICK + NS, \"a.k-diagram-update\", this._updateClickHandler);\n                    this._cancelClickHandler = null;\n                    this._editUpdateClickHandler = null;\n                    this.window = null;\n                    Editor.fn.destroy.call(this);\n                }\n            });\n\n            function connectionSelector(container, options) {\n                var model = this.dataSource.reader.model;\n                if (model) {\n                    var textField = model.fn.fields.text ? \"text\" : model.idField;\n                    $(\"<input name='\" + options.field + \"' />\")\n                        .appendTo(container).kendoDropDownList({\n                            dataValueField: model.idField,\n                            dataTextField: textField,\n                            dataSource: this.dataSource.data().toJSON(),\n                            optionLabel: \" \",\n                            valuePrimitive: true\n                        });\n                }\n            }\n\n            function InactiveItem(dataItem) {\n                this.dataItem = dataItem;\n                this.callbacks = [];\n            }\n\n            InactiveItem.fn = InactiveItem.prototype = {\n                onActivate: function(callback) {\n                    var deffered = $.Deferred();\n                    this.callbacks.push({\n                        callback: callback,\n                        deferred: deffered\n                    });\n                    return deffered;\n                },\n\n                activate: function() {\n                    var callbacks = this.callbacks;\n                    var item;\n                    for (var idx = 0; idx < callbacks.length; idx++) {\n                        item = this.callbacks[idx];\n                        item.callback(this.dataItem);\n                        item.deferred.resolve();\n                    }\n                    this.callbacks = [];\n                }\n            };\n\n            function InactiveItemsCollection() {\n                this.items = {};\n            }\n\n            InactiveItemsCollection.fn = InactiveItemsCollection.prototype = {\n                add: function(items) {\n                    for (var idx = 0; idx < items.length; idx++) {\n                        this.items[items[idx].uid] = new InactiveItem(items[idx]);\n                    }\n                },\n\n                forEach: function(callback) {\n                    for (var uid in this.items) {\n                        callback(this.items[uid]);\n                    }\n                },\n\n                getByUid: function(uid) {\n                    return this.items[uid];\n                },\n\n                remove: function(item) {\n                    delete this.items[item.uid];\n                }\n            };\n\n            var QuadRoot = Class.extend({\n                init: function() {\n                    this.shapes = [];\n                },\n\n                _add: function(shape, bounds) {\n                    this.shapes.push({\n                        bounds: bounds,\n                        shape: shape\n                    });\n                    shape._quadNode = this;\n                },\n\n                insert: function(shape, bounds) {\n                    this._add(shape, bounds);\n                },\n\n                remove: function(shape) {\n                    var shapes = this.shapes;\n                    var length = shapes.length;\n\n                    for (var idx = 0; idx < length; idx++) {\n                        if (shapes[idx].shape === shape) {\n                            shapes.splice(idx, 1);\n                            break;\n                        }\n                    }\n                },\n\n                hitTestRect: function(rect, exclude) {\n                    var shapes = this.shapes;\n                    var length = shapes.length;\n\n                    for (var i = 0; i < length; i++) {\n                        if (this._testRect(shapes[i].shape, rect) && !dataviz.inArray(shapes[i].shape, exclude)) {\n                            return true;\n                        }\n                    }\n                },\n\n                _testRect: function(shape, rect) {\n                    var angle = shape.rotate().angle;\n                    var bounds = shape.bounds();\n                    var hit;\n                    if (!angle) {\n                        hit = bounds.overlaps(rect);\n                    } else {\n                        hit = Intersect.rects(rect, bounds, -angle);\n                    }\n                    return hit;\n                }\n            });\n\n            var QuadNode = QuadRoot.extend({\n                init: function(rect) {\n                    QuadRoot.fn.init.call(this);\n                    this.children = [];\n                    this.rect = rect;\n                },\n\n                inBounds: function(rect) {\n                    var nodeRect = this.rect;\n                    var nodeBottomRight = nodeRect.bottomRight();\n                    var bottomRight = rect.bottomRight();\n                    var inBounds = nodeRect.x <= rect.x && nodeRect.y <= rect.y && bottomRight.x <= nodeBottomRight.x &&\n                        bottomRight.y <= nodeBottomRight.y;\n                    return inBounds;\n                },\n\n                overlapsBounds: function(rect) {\n                    return this.rect.overlaps(rect);\n                },\n\n                insert: function(shape, bounds) {\n                    var inserted = false;\n                    var children = this.children;\n                    var length = children.length;\n                    if (this.inBounds(bounds)) {\n                        if (!length && this.shapes.length < 4) {\n                            this._add(shape, bounds);\n                        } else {\n                            if (!length) {\n                                this._initChildren();\n                            }\n\n                            for (var idx = 0; idx < children.length; idx++) {\n                                if (children[idx].insert(shape, bounds)) {\n                                    inserted = true;\n                                    break;\n                                }\n                            }\n\n                            if (!inserted) {\n                                this._add(shape, bounds);\n                            }\n                        }\n                        inserted = true;\n                    }\n\n                    return inserted;\n                },\n\n                _initChildren: function() {\n                    var rect = this.rect,\n                        children = this.children,\n                        shapes = this.shapes,\n                        center = rect.center(),\n                        halfWidth = rect.width / 2,\n                        halfHeight = rect.height / 2,\n                        childIdx, shapeIdx;\n\n                    children.push(\n                        new QuadNode(new Rect(rect.x, rect.y, halfWidth, halfHeight)),\n                        new QuadNode(new Rect(center.x, rect.y, halfWidth, halfHeight)),\n                        new QuadNode(new Rect(rect.x, center.y, halfWidth, halfHeight)),\n                        new QuadNode(new Rect(center.x, center.y, halfWidth, halfHeight))\n                    );\n                    for (shapeIdx = shapes.length - 1; shapeIdx >= 0; shapeIdx--) {\n                        for (childIdx = 0; childIdx < children.length; childIdx++) {\n                            if (children[childIdx].insert(shapes[shapeIdx].shape, shapes[shapeIdx].bounds)) {\n                                shapes.splice(shapeIdx, 1);\n                                break;\n                            }\n                        }\n                    }\n                },\n\n                hitTestRect: function(rect, exclude) {\n                    var idx;\n                    var children = this.children;\n                    var length = children.length;\n                    var hit = false;\n\n                    if (this.overlapsBounds(rect)) {\n                        if (QuadRoot.fn.hitTestRect.call(this, rect, exclude)) {\n                            hit = true;\n                        } else {\n                             for (idx = 0; idx < length; idx++) {\n                                if (children[idx].hitTestRect(rect, exclude)) {\n                                   hit = true;\n                                   break;\n                                }\n                            }\n                        }\n                    }\n\n                    return hit;\n                }\n            });\n\n            var ShapesQuadTree = Class.extend({\n                ROOT_SIZE: 1000,\n\n                init: function(diagram) {\n                    var boundsChangeHandler = this._boundsChange.bind(this);\n                    diagram.bind(ITEMBOUNDSCHANGE, boundsChangeHandler);\n                    diagram.bind(ITEMROTATE, boundsChangeHandler);\n                    this.initRoots();\n                },\n\n                initRoots: function() {\n                    this.rootMap = {};\n                    this.root = new QuadRoot();\n                },\n\n                clear: function() {\n                    this.initRoots();\n                },\n\n                _boundsChange: function(e) {\n                    if (e.item._quadNode) {\n                        e.item._quadNode.remove(e.item);\n                    }\n                    this.insert(e.item);\n                },\n\n                insert: function(shape) {\n                    var bounds = shape.bounds(ROTATED);\n                    var rootSize = this.ROOT_SIZE;\n                    var sectors = this.getSectors(bounds);\n                    var x = sectors[0][0];\n                    var y = sectors[1][0];\n\n                    if (this.inRoot(sectors)) {\n                        this.root.insert(shape, bounds);\n                    } else {\n                        if (!this.rootMap[x]) {\n                            this.rootMap[x] = {};\n                        }\n\n                        if (!this.rootMap[x][y]) {\n                            this.rootMap[x][y] = new QuadNode(\n                                new Rect(x * rootSize, y * rootSize, rootSize, rootSize)\n                            );\n                        }\n\n                        this.rootMap[x][y].insert(shape, bounds);\n                    }\n                },\n\n                remove: function(shape) {\n                    if (shape._quadNode) {\n                        shape._quadNode.remove(shape);\n                    }\n                },\n\n                inRoot: function(sectors) {\n                    return sectors[0].length > 1 || sectors[1].length > 1;\n                },\n\n                getSectors: function(rect) {\n                    var rootSize = this.ROOT_SIZE;\n                    var bottomRight = rect.bottomRight();\n                    var bottomX = math.floor(bottomRight.x / rootSize);\n                    var bottomY = math.floor(bottomRight.y / rootSize);\n                    var sectors = [[],[]];\n                    for (var x = math.floor(rect.x / rootSize); x <= bottomX; x++) {\n                        sectors[0].push(x);\n                    }\n                    for (var y = math.floor(rect.y / rootSize); y <= bottomY; y++) {\n                        sectors[1].push(y);\n                    }\n                    return sectors;\n                },\n\n                hitTestRect: function(rect, exclude) {\n                    var sectors = this.getSectors(rect);\n                    var xIdx, yIdx, x, y;\n                    var root;\n\n                    if (this.root.hitTestRect(rect, exclude)) {\n                        return true;\n                    }\n\n                    for (xIdx = 0; xIdx < sectors[0].length; xIdx++) {\n                        x = sectors[0][xIdx];\n                        for (yIdx = 0; yIdx < sectors[1].length; yIdx++) {\n                            y = sectors[1][yIdx];\n                            root = (this.rootMap[x] || {})[y];\n                            if (root && root.hitTestRect(rect, exclude)) {\n                                return true;\n                            }\n                        }\n                    }\n\n                    return false;\n                }\n            });\n\n            function cloneDataItem(dataItem) {\n                var result = dataItem;\n                if (dataItem instanceof kendo.data.Model) {\n                    result = dataItem.toJSON();\n                    result[dataItem.idField] = dataItem._defaultId;\n                }\n                return result;\n            }\n\n            function splitDiagramElements(elements) {\n                var connections = [];\n                var shapes = [];\n                var element, idx;\n                for (idx = 0; idx < elements.length; idx++) {\n                    element = elements[idx];\n                    if (element instanceof Shape) {\n                        shapes.push(element);\n                    } else {\n                        connections.push(element);\n                    }\n                }\n                return {\n                    shapes: shapes,\n                    connections: connections\n                };\n            }\n\n            function createModel(dataSource, model) {\n                if (dataSource.reader.model) {\n                    return new dataSource.reader.model(model);\n                }\n\n                return new kendo.data.ObservableObject(model);\n            }\n\n            function clearField(field, model) {\n                if (defined(model[field])) {\n                    model.set(field, null);\n                }\n            }\n\n            function copyDefaultOptions(mainOptions, elementOptions, fields) {\n                var field;\n                for (var idx = 0; idx < fields.length; idx++) {\n                    field = fields[idx];\n                    if (elementOptions && !defined(elementOptions[field])) {\n                        elementOptions[field] = mainOptions[field];\n                    }\n                }\n            }\n\n            function translateToOrigin(visual) {\n                var bbox = visual.drawingContainer().clippedBBox(null);\n                if (bbox.origin.x !== 0 || bbox.origin.y !== 0) {\n                    visual.position(-bbox.origin.x, -bbox.origin.y);\n                }\n            }\n\n            function preventDefault(e) {\n                e.preventDefault();\n            }\n\n            dataviz.ui.plugin(Diagram);\n\n            deepExtend(diagram, {\n                Shape: Shape,\n                Connection: Connection,\n                Connector: Connector,\n                DiagramToolBar: DiagramToolBar,\n                QuadNode: QuadNode,\n                QuadRoot: QuadRoot,\n                ShapesQuadTree: ShapesQuadTree,\n                PopupEditor: PopupEditor\n            });\n    })(window.kendo.jQuery);\n\n    var __meta__ = {\n            id: \"dataviz.diagram\",\n            name: \"Diagram\",\n            category: \"dataviz\",\n            description: \"The Kendo DataViz Diagram \",\n            depends: [ \"data\", \"userevents\", \"mobile.scroller\", \"draganddrop\", \"drawing\", \"dataviz.core\", \"dataviz.themes\", \"toolbar\" ],\n            features: [{\n                id: \"dataviz.diagram-pdf-export\",\n                name: \"PDF export\",\n                description: \"Export Diagram as PDF\",\n                depends: [ \"pdf\" ]\n            },{\n                id: \"dataviz.diagram-editing\",\n                name: \"Editing\",\n                description: \"Support for model editing\",\n                depends: [ \"editable\", \"window\", \"dropdownlist\" ]\n            }]\n        };\n        var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}