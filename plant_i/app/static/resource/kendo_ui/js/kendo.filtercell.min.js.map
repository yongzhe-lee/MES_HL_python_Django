{"version":3,"sources":["raw-js/kendo.filtercell.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendofiltercell","js","this","$","undefined$1","kendo","window","ui","DataSource","data","Widget","CHANGE","BOOL","ENUM","STRING","EQ","NEQ","nonValueOperators","isNonValueFilter","filter","operator","inArray","findFilterForField","field","filters","isPlainObject","hasOwnProperty","Array","isArray","i","length","result","removeFiltersForField","expression","grep","FilterCell","extend","init","element","options","addClass","dataSource","viewModel","first","type","wrapper","appendTo","that","passedOptions","operators","input","attr","suggestDataSource","fn","call","model","reader","target","getter","values","_parse","value","fields","parse","bind","defaultOperator","observable","operatorVisible","val","get","_clearInProgress","_prevOperator","updateDsFilter","initSuggestDataSource","inputWidth","width","_getColumnTitle","size","_setInputType","showOperators","_createOperatorDropDown","css","text","_createClearIcon","template","setAutoCompleteSource","setComboBoxSource","_refreshUI","_refreshHandler","dataTextField","suggestionOperator","delay","minLength","guid","remove","radioInput","inputName","labelTrue","htmlEncode","messages","isTrue","append","labelFalse","clone","isFalse","column","title","iconEl","items","prop","push","dropdown","operatorDropDown","kendoDropDownList","dataValueField","open","popup","valuePrimitive","ariaLabel","find","icon","dataSelector","customDataSource","group","create","_pageSize","e","index","seen","item","autoComplete","setDataSource","comboBox","manuallyUpdatingVM","set","isEmptyObject","trigger","_applyFilter","logic","currentFilter","toJSON","prevented","mergeResult","_merge","idx","sizeClass","getValidCssClass","clear","html","iconClass","on","clearFilter","destroy","filterModel","unbind","events","name","string","eq","neq","startswith","contains","doesnotcontain","endswith","isnull","isnotnull","isempty","isnotempty","isnullorempty","isnotnullorempty","number","gte","gt","lte","lt","date","enums","plugin","jQuery"],"mappings":"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","file":"kendo.filtercell.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.autocomplete.js'), require('kendo.datepicker.js'), require('kendo.numerictextbox.js'), require('kendo.combobox.js'), require('kendo.dropdownlist.js'), require('kendo.icons.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.autocomplete', 'kendo.datepicker', 'kendo.numerictextbox', 'kendo.combobox', 'kendo.dropdownlist', 'kendo.icons'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendofiltercell = global.kendofiltercell || {}, global.kendofiltercell.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n        id: \"filtercell\",\n        name: \"Row filter\",\n        category: \"framework\",\n        depends: [ \"autocomplete\", \"icons\" ],\n        advanced: true\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            DataSource = kendo.data.DataSource,\n            Widget = ui.Widget,\n            CHANGE = \"change\",\n            BOOL = \"boolean\",\n            ENUM = \"enums\",\n            STRING = \"string\",\n            EQ = \"Is equal to\",\n            NEQ = \"Is not equal to\",\n            nonValueOperators = [\"isnull\", \"isnotnull\", \"isempty\", \"isnotempty\", \"isnullorempty\", \"isnotnullorempty\"];\n\n        function isNonValueFilter(filter) {\n            var operator = typeof filter === \"string\" ? filter : filter.operator;\n            return $.inArray(operator, nonValueOperators) > -1;\n        }\n\n        function findFilterForField(filter, field) {\n            var filters = [];\n            if ($.isPlainObject(filter)) {\n                if (filter.hasOwnProperty(\"filters\")) {\n                    filters = filter.filters;\n                } else if (filter.field == field) {\n                    return filter;\n                }\n            }\n            if ((Array.isArray(filter))) {\n               filters = filter;\n            }\n\n            for (var i = 0; i < filters.length; i++) {\n              var result = findFilterForField(filters[i], field);\n              if (result) {\n                 return result;\n              }\n            }\n        }\n\n        function removeFiltersForField(expression, field) {\n            if (expression.filters) {\n                expression.filters = $.grep(expression.filters, function(filter) {\n                    removeFiltersForField(filter, field);\n                    if (filter.filters) {\n                        return filter.filters.length;\n                    } else {\n                        return filter.field != field;\n                    }\n                });\n            }\n        }\n\n        function removeDuplicates(dataSelector, dataTextField) {\n            var getter = kendo.getter(dataTextField, true);\n\n            return function(e) {\n                var items = dataSelector(e),\n                    result = [],\n                    index = 0,\n                    seen = {};\n\n                while (index < items.length) {\n                    var item = items[index++],\n                        text = getter(item);\n\n                    if (!seen.hasOwnProperty(text)) {\n                        result.push(item);\n                        seen[text] = true;\n                    }\n                }\n\n                return result;\n            };\n        }\n\n        var FilterCell = Widget.extend({\n            init: function(element, options) {\n                element = $(element).addClass(\"k-filtercell\");\n                var wrapper = this.wrapper = $(\"<div />\").addClass(\"k-filtercell-wrapper\").appendTo(element);\n                var that = this,\n                    dataSource,\n                    viewModel,\n                    passedOptions = options,\n                    first,\n                    type,\n                    operators = that.operators = options.operators || {},\n                    input = that.input = $(\"<input/>\")\n                        .attr(kendo.attr(\"bind\"), \"value: value\")\n                        .appendTo(wrapper);\n\n                var suggestDataSource = options ? options.suggestDataSource : null;\n\n                if (suggestDataSource) {\n                    // avoid deep cloning the suggest data source\n                    options = $.extend({}, options, { suggestDataSource: {} });\n                }\n\n                Widget.fn.init.call(that, element[0], options);\n\n                if (suggestDataSource) {\n                    that.options.suggestDataSource = suggestDataSource;\n                }\n\n                options = that.options;\n\n                dataSource = that.dataSource = options.dataSource;\n\n                //gets the type from the dataSource or sets default to string\n                that.model = dataSource.reader.model;\n                type = options.type = STRING;\n                var fields = kendo.getter(\"reader.model.fields\", true)(dataSource) || {};\n                var target = fields[options.field];\n                if (target && target.type) {\n                    type = options.type = target.type;\n                }\n                if (options.values) {\n                    options.type = type = ENUM;\n                }\n\n                operators = operators[type] || options.operators[type];\n\n                if (!passedOptions.operator) {\n                    for (first in operators) { // get the first operator\n                        options.operator = first;\n                        break;\n                    }\n                }\n\n                that._parse = function(value) {\n\n                    return value != null ? (value + \"\") : value;\n                };\n\n                if (that.model && that.model.fields) {\n                    var field = that.model.fields[options.field];\n\n                    if (field) {\n                        if (field.parse) {\n                            that._parse = field.parse.bind(field);\n                        }\n                    }\n                }\n\n                that.defaultOperator = options.operator;\n\n                that.viewModel = viewModel = kendo.observable({\n                    operator: options.operator,\n                    value: null,\n                    operatorVisible: function() {\n                        var val = this.get(\"value\");\n                        return (val !== null && val !== undefined$1 && val != \"undefined\") || (isNonValueFilter(this.get(\"operator\")) && that.dataSource.filter() && !that._clearInProgress);\n                    }\n                });\n                that._prevOperator = options.operator;\n                viewModel.bind(CHANGE, that.updateDsFilter.bind(that));\n\n                if (type == STRING) {\n                    that.initSuggestDataSource(options);\n                }\n\n                if (options.inputWidth !== null) {\n                    input.addClass('k-sized-input');\n                    input.width(options.inputWidth);\n                }\n\n                input.attr(\"aria-label\", that._getColumnTitle());\n                input.attr(\"title\", that._getColumnTitle());\n                input.attr(kendo.attr(\"size\"), that.options.size || \"medium\");\n\n                that._setInputType(options, type);\n\n                if (type != BOOL && options.showOperators !== false) {\n                    that._createOperatorDropDown(operators);\n                } else {\n                    $('<div unselectable=\"on\" />')\n                        .css(\"display\", \"none\")\n                        .text(\"eq\")\n                        .appendTo(wrapper);\n\n                    wrapper.addClass(\"k-operator-hidden\");\n                }\n\n                that._createClearIcon();\n\n                kendo.bind(this.wrapper, viewModel);\n\n                if (type == STRING) {\n                    if (!options.template) {\n                        that.setAutoCompleteSource();\n                    }\n                }\n\n                if (type == ENUM) {\n                    that.setComboBoxSource(that.options.values);\n                }\n\n                that._refreshUI();\n\n                that._refreshHandler = that._refreshUI.bind(that);\n\n                that.dataSource.bind(CHANGE, that._refreshHandler);\n\n            },\n\n            _setInputType: function(options, type) {\n                var that = this,\n                    input = that.input;\n\n                if (typeof (options.template) == \"function\") {\n                    options.template.call(that.viewModel, {\n                        element: that.input,\n                        dataSource: that.suggestDataSource\n                    });\n\n                } else if (type == STRING) {\n                    input.attr(kendo.attr(\"role\"), \"autocomplete\")\n                        .attr(kendo.attr(\"text-field\"), options.dataTextField || options.field)\n                        .attr(kendo.attr(\"filter\"), options.suggestionOperator)\n                        .attr(kendo.attr(\"delay\"), options.delay)\n                        .attr(kendo.attr(\"min-length\"), options.minLength)\n                        .attr(kendo.attr(\"value-primitive\"), true);\n                } else if (type == \"date\") {\n                    input.attr(kendo.attr(\"role\"), \"datepicker\")\n                        .attr(\"id\", kendo.guid());\n                } else if (type == BOOL) {\n                    input.remove();\n                    var radioInput = $(\"<input type='radio'/>\");\n                    var wrapper = that.wrapper;\n                    var inputName = kendo.guid();\n\n                    var labelTrue = $(\"<label/>\").text(kendo.htmlEncode(options.messages.isTrue)).append(radioInput);\n                    radioInput.attr(kendo.attr(\"bind\"), \"checked:value\")\n                        .attr(\"name\", inputName)\n                        .val(\"true\");\n\n                    var labelFalse = labelTrue.clone().text(kendo.htmlEncode(options.messages.isFalse));\n                    radioInput.clone().val(\"false\").appendTo(labelFalse);\n                    wrapper.append([labelTrue, labelFalse]);\n\n                } else if (type == \"number\") {\n                    input.attr(kendo.attr(\"role\"), \"numerictextbox\")\n                            .attr(\"title\", that._getColumnTitle());\n                } else if (type == ENUM) {\n                    input.attr(kendo.attr(\"role\"), \"combobox\")\n                            .attr(kendo.attr(\"text-field\"), \"text\")\n                            .attr(kendo.attr(\"suggest\"), true)\n                            .attr(kendo.attr(\"filter\"), \"contains\")\n                            .attr(kendo.attr(\"value-field\"), \"value\")\n                            .attr(kendo.attr(\"value-primitive\"), true);\n                }\n            },\n\n            _getColumnTitle: function() {\n                var column = this.options.column;\n                return column ? column.title || column.field : \"\";\n            },\n\n            _createOperatorDropDown: function(operators) {\n                var items = [],\n                    viewModel = this.viewModel,\n                    iconEl;\n\n                for (var prop in operators) {\n                    items.push({\n                        text: operators[prop],\n                        value: prop\n                    });\n                }\n                var dropdown = $('<input class=\"k-dropdown-operator\" ' + kendo.attr(\"bind\") + '=\"value: operator\"/>').appendTo(this.wrapper);\n                dropdown.attr(\"aria-label\", this._getColumnTitle());\n\n                this.operatorDropDown = dropdown.kendoDropDownList({\n                    dataSource: items,\n                    size: this.options.size || \"medium\",\n                    dataTextField: \"text\",\n                    dataValueField: \"value\",\n                    open: function() {\n                        //TODO calc this\n                        this.popup.element.width(150);\n                    },\n                    valuePrimitive: true\n                }).data(\"kendoDropDownList\");\n\n                viewModel.bind(\"change\", function() {\n                    var ariaLabel = operators[viewModel.operator];\n                    dropdown.attr(\"aria-label\", ariaLabel);\n                });\n\n                iconEl = this.operatorDropDown.wrapper\n                    .attr(\"aria-label\", this._getColumnTitle())\n                    .find('span[class*=\"i-caret-alt-down\"]');\n\n                kendo.ui.icon(iconEl, { icon: \"filter\" });\n            },\n\n            initSuggestDataSource: function(options) {\n                var suggestDataSource = options.suggestDataSource;\n\n                if (!(suggestDataSource instanceof DataSource)) {\n                    if (!options.customDataSource && suggestDataSource) {\n                        suggestDataSource.group = undefined$1;\n                        suggestDataSource.filter = undefined$1;\n                    }\n                    suggestDataSource =\n                        this.suggestDataSource =\n                            DataSource.create(suggestDataSource);\n\n\n                }\n\n                if (!options.customDataSource) {\n                    suggestDataSource._pageSize = undefined$1;\n                    suggestDataSource.reader.data = removeDuplicates(suggestDataSource.reader.data, this.options.field);\n                }\n\n                this.suggestDataSource = suggestDataSource;\n            },\n\n            setAutoCompleteSource: function() {\n                var autoComplete = this.input.data(\"kendoAutoComplete\");\n                if (autoComplete) {\n                    autoComplete.setDataSource(this.suggestDataSource);\n                }\n            },\n\n            setComboBoxSource: function(values) {\n                var dataSource = DataSource.create({\n                    data: values\n                });\n                var comboBox = this.input.data(\"kendoComboBox\");\n                if (comboBox && !this.options.template) {\n                    comboBox.setDataSource(dataSource);\n                }\n            },\n\n            _refreshUI: function() {\n                var that = this,\n                    filter = findFilterForField(that.dataSource.filter(), this.options.field) || {},\n                    viewModel = that.viewModel;\n\n                that.manuallyUpdatingVM = true;\n                filter = $.extend(true, {}, filter);\n                //MVVM check binding does not update the UI when changing the value to null/undefined\n                if (that.options.type == BOOL) {\n                    if (viewModel.value !== filter.value) {\n                        that.wrapper.find(\":radio\").prop(\"checked\", false);\n                    }\n                }\n\n                if (filter.operator) {\n                    viewModel.set(\"operator\", filter.operator);\n                }\n                viewModel.set(\"value\", filter.value);\n                if ($.isEmptyObject(filter)) {\n                    viewModel.trigger(CHANGE, { field: \"operatorVisible\" });\n                }\n                that.manuallyUpdatingVM = false;\n            },\n\n            _applyFilter: function(filter) {\n                if (filter.filters.length) {\n                    this.dataSource.filter(filter);\n                } else {\n                    this.dataSource.filter({});\n                }\n            },\n\n            updateDsFilter: function(e) {\n                var that = this,\n                    model = that.viewModel,\n                    filter;\n\n                if (e.field == \"operator\" && model.value === undefined$1 && !isNonValueFilter(model) && isNonValueFilter(that._prevOperator)) {\n                    filter = that.dataSource.filter() || { filters: [], logic: \"and\" };\n                    removeFiltersForField(filter, that.options.field);\n                    that._prevOperator = model.operator;\n                    that._applyFilter(filter);\n                    return;\n                }\n\n                if (that.manuallyUpdatingVM || (e.field == \"operator\" && model.value === undefined$1 && !isNonValueFilter(model)) ||\n                    (e.field == \"operator\" && that._clearInProgress && model.value !== null)) {\n                    return;\n                }\n\n                var currentFilter = $.extend({}, that.viewModel.toJSON(), { field: that.options.field });\n                that._prevOperator = currentFilter.operator;\n\n                var expression = {\n                    logic: \"and\",\n                    filters: []\n                };\n\n                var prevented = false;\n\n                if ((currentFilter.value !== undefined$1 && currentFilter.value !== null) || (isNonValueFilter(currentFilter) && !this._clearInProgress)) {\n                    expression.filters.push(currentFilter);\n\n                    prevented = that.trigger(CHANGE, { filter: expression, field: that.options.field });\n                }\n\n                if (that._clearInProgress || currentFilter.value === null) {\n                    prevented = that.trigger(CHANGE, { filter: null, field: that.options.field });\n                }\n\n                if (prevented) {\n                    return;\n                }\n\n                var mergeResult = that._merge(expression);\n                that._applyFilter(mergeResult);\n            },\n\n            _merge: function(expression) {\n                var that = this,\n                    logic = expression.logic || \"and\",\n                    filters = expression.filters,\n                    filter,\n                    result = that.dataSource.filter() || { filters: [], logic: \"and\" },\n                    idx,\n                    length;\n\n                removeFiltersForField(result, that.options.field);\n\n                for (idx = 0, length = filters.length; idx < length; idx++) {\n                    filter = filters[idx];\n                    filter.value = that._parse(filter.value);\n                }\n\n                filters = $.grep(filters, function(filter) {\n                    return (filter.value !== \"\" && filter.value !== null) || isNonValueFilter(filter);\n                });\n\n                if (filters.length) {\n                    if (result.filters.length) {\n                        expression.filters = filters;\n\n                        if (result.logic !== \"and\") {\n                            result.filters = [{ logic: result.logic, filters: result.filters }];\n                            result.logic = \"and\";\n                        }\n\n                        if (filters.length > 1) {\n                            result.filters.push(expression);\n                        } else {\n                            result.filters.push(filters[0]);\n                        }\n                    } else {\n                        result.filters = filters;\n                        result.logic = logic;\n                    }\n                }\n\n                return result;\n            },\n\n            _createClearIcon: function() {\n                var that = this;\n                var sizeClass = kendo.getValidCssClass(\"k-button-\", \"size\", this.options.size || \"medium\");\n                var clear = kendo.htmlEncode(that.options.messages.clear);\n\n                $(`<button type='button' class='k-button ${sizeClass} k-rounded-md k-button-solid k-button-solid-base k-icon-button' title = '` + clear + \"'/>\")\n                    .attr(\"aria-label\", clear)\n                    .attr(kendo.attr(\"bind\"), \"visible:operatorVisible\")\n                    .html(kendo.ui.icon({ icon: \"filter-clear\", iconClass: \"k-button-icon\" }))\n                    .on(\"click\", that.clearFilter.bind(that))\n                    .appendTo(that.wrapper);\n            },\n\n            clearFilter: function() {\n                this._clearInProgress = true;\n\n                if (isNonValueFilter(this.viewModel.operator)) {\n                    this.viewModel.set(\"operator\", this.defaultOperator);\n                }\n\n                this.viewModel.set(\"value\", null);\n                this._clearInProgress = false;\n            },\n\n            destroy: function() {\n                var that = this;\n\n                that.filterModel = null;\n                that.operatorDropDown = null;\n\n                if (that._refreshHandler) {\n                    that.dataSource.bind(CHANGE, that._refreshHandler);\n                    that._refreshHandler = null;\n                }\n\n                kendo.unbind(that.element);\n\n                Widget.fn.destroy.call(that);\n\n                kendo.destroy(that.element);\n            },\n\n            events: [\n                CHANGE\n            ],\n\n            options: {\n                name: \"FilterCell\",\n                delay: 200,\n                minLength: 1,\n                inputWidth: null,\n                values: undefined$1,\n                customDataSource: false,\n                field: \"\",\n                dataTextField: \"\",\n                type: \"string\",\n                suggestDataSource: null,\n                suggestionOperator: \"startswith\",\n                operator: \"eq\",\n                showOperators: true,\n                template: null,\n                messages: {\n                    isTrue: \"is true\",\n                    isFalse: \"is false\",\n                    filter: \"Filter\",\n                    clear: \"Clear\",\n                    operator: \"Operator\"\n                },\n                operators: {\n                    string: {\n                        eq: EQ,\n                        neq: NEQ,\n                        startswith: \"Starts with\",\n                        contains: \"Contains\",\n                        doesnotcontain: \"Does not contain\",\n                        endswith: \"Ends with\",\n                        isnull: \"Is null\",\n                        isnotnull: \"Is not null\",\n                        isempty: \"Is empty\",\n                        isnotempty: \"Is not empty\",\n                        isnullorempty: \"Has no value\",\n                        isnotnullorempty: \"Has value\"\n                    },\n                    number: {\n                        eq: EQ,\n                        neq: NEQ,\n                        gte: \"Is greater than or equal to\",\n                        gt: \"Is greater than\",\n                        lte: \"Is less than or equal to\",\n                        lt: \"Is less than\",\n                        isnull: \"Is null\",\n                        isnotnull: \"Is not null\"\n                    },\n                    date: {\n                        eq: EQ,\n                        neq: NEQ,\n                        gte: \"Is after or equal to\",\n                        gt: \"Is after\",\n                        lte: \"Is before or equal to\",\n                        lt: \"Is before\",\n                        isnull: \"Is null\",\n                        isnotnull: \"Is not null\"\n                    },\n                    enums: {\n                        eq: EQ,\n                        neq: NEQ,\n                        isnull: \"Is null\",\n                        isnotnull: \"Is not null\"\n                    }\n                }\n            }\n        });\n\n        ui.plugin(FilterCell);\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}