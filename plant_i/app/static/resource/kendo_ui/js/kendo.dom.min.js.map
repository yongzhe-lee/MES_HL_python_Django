{"version":3,"sources":["raw-js/kendo.dom.js"],"names":["factory","define","amd","kendo","Node","this","node","NullNode","prototype","remove","parentNode","removeChild","attr","text","nodeName","style","children","NULL_NODE","Element","TextNode","nodeValue","force","String","HtmlNode","html","replace","appendTo","parent","document","createElement","index","length","render","appendChild","cached","cachedChildren","cachedLength","Math","abs","replaceChild","syncAttributes","removeAttributes","cachedAttr","name","value","cachedValue","setStyle","setAttribute","key","removeStyle","cachedStyle","undefined","removeAttribute","cssText","className","str","i","createTextNode","nodes","el","lastChild","replacedNode","outerHTML","firstChild","HTML_CONTAINER","innerHTML","replaceNode","insertHtml","push","child","nextSibling","slice","element","attrs","Tree","root","dom","window"],"mappings":"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","file":"kendo.dom.min.js","sourcesContent":["(function (factory) {\n    typeof define === 'function' && define.amd ? define(['kendo.core'], factory) :\n    factory();\n})((function () {\n    var __meta__ = {\n        id: \"dom\",\n        name: \"Virtual DOM\",\n        category: \"framework\",\n        depends: [ \"core\" ],\n        advanced: true\n    };\n\n    (function(kendo) {\n        function Node() {\n            this.node = null;\n        }\n\n        Node.prototype = {\n            remove: function() {\n                if (this.node.parentNode) {\n                    this.node.parentNode.removeChild(this.node);\n                }\n                this.attr = {};\n            },\n            attr: {},\n            text: function() {\n                return \"\";\n            }\n        };\n\n        function NullNode() {\n        }\n\n        NullNode.prototype = {\n            nodeName: \"#null\",\n            attr: { style: {} },\n            children: [],\n            remove: function() {\n            }\n        };\n\n        var NULL_NODE = new NullNode();\n\n        function Element(nodeName, attr, children) {\n            this.nodeName = nodeName;\n\n            this.attr = attr || {};\n\n            this.children = children || [];\n        }\n\n        Element.prototype = new Node();\n\n        Element.prototype.appendTo = function(parent) {\n            var node = typeof(this.nodeName) === \"string\" ? document.createElement(this.nodeName) : this.nodeName;\n\n            var children = this.children;\n\n            for (var index = 0; index < children.length; index++) {\n                children[index].render(node, NULL_NODE);\n            }\n\n            parent.appendChild(node);\n\n            return node;\n        };\n\n        Element.prototype.render = function(parent, cached) {\n            var node;\n\n            if (cached.nodeName !== this.nodeName) {\n                cached.remove();\n\n                node = this.appendTo(parent);\n            } else {\n                node = cached.node;\n\n                var index;\n\n                var children = this.children;\n\n                var length = children.length;\n\n                var cachedChildren = cached.children;\n\n                var cachedLength = cachedChildren.length;\n\n                if (Math.abs(cachedLength - length) > 2) {\n                    this.render({\n                        appendChild: function(node) {\n                            parent.replaceChild(node, cached.node);\n                        }\n                    }, NULL_NODE);\n\n                    return;\n                }\n\n                for (index = 0; index < length; index++) {\n                    children[index].render(node, cachedChildren[index] || NULL_NODE);\n                }\n\n                for (index = length; index < cachedLength; index++) {\n                    cachedChildren[index].remove();\n                }\n            }\n\n            this.node = node;\n\n            this.syncAttributes(cached.attr);\n\n            this.removeAttributes(cached.attr);\n        };\n\n        Element.prototype.syncAttributes = function(cachedAttr) {\n            var attr = this.attr;\n\n            for (var name in attr) {\n                var value = attr[name];\n\n                var cachedValue = cachedAttr[name];\n\n                if (name === \"style\") {\n                    this.setStyle(value, cachedValue);\n                } else if (value !== cachedValue) {\n                    this.setAttribute(name, value, cachedValue);\n                }\n            }\n        };\n\n        Element.prototype.setStyle = function(style, cachedValue) {\n            var node = this.node;\n            var key;\n\n            if (cachedValue) {\n                for (key in style) {\n                    if (style[key] !== cachedValue[key]) {\n                        node.style[key] = style[key];\n                    }\n                }\n            } else {\n                for (key in style) {\n                    node.style[key] = style[key];\n                }\n            }\n        };\n\n        Element.prototype.removeStyle = function(cachedStyle) {\n            var style = this.attr.style || {};\n            var node = this.node;\n\n            for (var key in cachedStyle) {\n                if (style[key] === undefined) {\n                    node.style[key] = \"\";\n                }\n            }\n        };\n\n        Element.prototype.removeAttributes = function(cachedAttr) {\n            var attr = this.attr;\n\n            for (var name in cachedAttr) {\n                if (name === \"style\") {\n                    this.removeStyle(cachedAttr.style);\n                } else if (attr[name] === undefined) {\n                    this.removeAttribute(name);\n                }\n            }\n        };\n\n        Element.prototype.removeAttribute = function(name) {\n            var node = this.node;\n\n            if (name === \"style\") {\n                node.style.cssText = \"\";\n            } else if (name === \"className\") {\n                node.className = \"\";\n            } else {\n                node.removeAttribute(name);\n            }\n        };\n\n        Element.prototype.setAttribute = function(name, value) {\n            var node = this.node;\n\n            if (node[name] !== undefined) {\n                node[name] = value;\n            } else {\n                node.setAttribute(name, value);\n            }\n        };\n\n        Element.prototype.text = function() {\n            var str = \"\";\n            for (var i = 0; i < this.children.length; ++i) {\n                str += this.children[i].text();\n            }\n            return str;\n        };\n\n        function TextNode(nodeValue, force) {\n            this.nodeValue = String(nodeValue);\n            this.force = force;\n        }\n\n        TextNode.prototype = new Node();\n\n        TextNode.prototype.nodeName = \"#text\";\n\n        TextNode.prototype.render = function(parent, cached) {\n            var node;\n\n            if (cached.nodeName !== this.nodeName || this.force) {\n                cached.remove();\n\n                node = document.createTextNode(this.nodeValue);\n\n                parent.appendChild(node);\n            } else {\n                node = cached.node;\n\n                if (this.nodeValue !== cached.nodeValue) {\n                    if (node.parentNode) {\n                        // sometimes in IE parentNode is null (reason unknown),\n                        // and IE throws an error when you try to set a\n                        // parentless' nodeValue, because why not.\n                        node.nodeValue = this.nodeValue;\n                    }\n                }\n            }\n\n            this.node = node;\n        };\n\n        TextNode.prototype.text = function() {\n            return this.nodeValue;\n        };\n\n        function HtmlNode(html, replace) {\n            this.html = html;\n            this.replace = replace;\n        }\n\n        HtmlNode.prototype = {\n           nodeName: \"#html\",\n           attr: {},\n           remove: function() {\n               for (var index = 0; index < this.nodes.length; index++) {\n                   var el = this.nodes[index];\n                   if (el.parentNode) {\n                       el.parentNode.removeChild(el);\n                   }\n               }\n           },\n           render: function(parent, cached) {\n            var lastChild, replacedNode;\n               if (cached.nodeName !== this.nodeName || cached.html !== this.html || this.replace) {\n                   if (this.replace && cached.replace && cached.nodes && cached.nodes.length && cached.nodes[0].outerHTML) {\n                    // This could be changed to a for loop that replaces several nodes instead of the first one. Presently, there is no use-case scenario for that.\n                    replacedNode = replaceNode(parent, cached.nodes[0], this.html);\n                    lastChild = parent.lastChild;\n                   } else {\n                    cached.remove();\n                    lastChild = parent.lastChild;\n                    insertHtml(parent, this.html);\n                   }\n                   this.nodes = [];\n\n                   if (replacedNode) {\n                    this.nodes.push(replacedNode);\n                   }\n\n                   for (var child = lastChild ? lastChild.nextSibling : parent.firstChild; child; child = child.nextSibling) {\n                       this.nodes.push(child);\n                   }\n               } else {\n                   this.nodes = cached.nodes.slice(0);\n               }\n           }\n        };\n\n        var HTML_CONTAINER = document.createElement(\"div\");\n\n        function insertHtml(node, html) {\n            HTML_CONTAINER.innerHTML = html;\n\n            while (HTML_CONTAINER.firstChild) {\n                node.appendChild(HTML_CONTAINER.firstChild);\n            }\n        }\n\n        function replaceNode(parent, node, html) {\n            var firstChild;\n\n            HTML_CONTAINER.innerHTML = html;\n            firstChild = HTML_CONTAINER.firstChild;\n\n            parent.replaceChild(firstChild, node);\n\n            return firstChild;\n        }\n\n        function html(value, force) {\n            return new HtmlNode(value, force);\n        }\n\n        function element(nodeName, attrs, children) {\n            return new Element(nodeName, attrs, children);\n        }\n\n        function text(value, force) {\n            return new TextNode(value, force);\n        }\n\n        function Tree(root) {\n           this.root = root;\n           this.children = [];\n        }\n\n        Tree.prototype = {\n            html: html,\n            element: element,\n            text: text,\n            render: function(children) {\n                var cachedChildren = this.children;\n\n                var index;\n\n                var length;\n\n                for (index = 0, length = children.length; index < length; index++) {\n                    var cached = cachedChildren[index];\n                    if (!cached) {\n                        cached = NULL_NODE;\n                    } else if (!cached.node || !cached.node.parentNode) {\n                        cached.remove();\n                        cached = NULL_NODE;\n                    }\n                    children[index].render(this.root, cached);\n                }\n\n                for (index = length; index < cachedChildren.length; index++) {\n                    cachedChildren[index].remove();\n                }\n\n                this.children = children;\n            }\n        };\n\n        kendo.dom = {\n            html: html,\n            text: text,\n            element: element,\n            Tree: Tree,\n            Node: Node\n        };\n    })(window.kendo);\n\n}));\n"]}