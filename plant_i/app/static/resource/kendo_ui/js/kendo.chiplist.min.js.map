{"version":3,"sources":["raw-js/kendo.chiplist.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendochiplist","js","this","$","undefined$1","kendo","window","ui","Widget","keys","isPlainObject","isEmptyObject","NS","DOT","SELECT","REMOVE","html","chipListStyles","widget","item","selected","disabled","enabledItemSelector","ChipList","extend","init","element","options","that","fn","call","renderChipList","_selectable","selectable","_bindEvents","_items","name","items","fillMode","rounded","size","itemSize","events","destroy","_keydownProxy","unbind","_selectProxy","_removeProxy","off","find","each","_getChipFromElement","_updateCssClasses","styles","removeClass","index","className","indexOf","addClass","getValidCssClass","_getInitializeChipOptions","itemOptions","attributes","tabindex","role","removable","remove","select","getKendoChip","chipOptions","selectedItems","chipEl","firstNavigatableItem","i","length","append","_createChip","_getFirstNavigatableItem","_applyTabIndex","filter","ind","ch","chip","_isItem","is","itemElement","el","attr","kendoChip","_keydown","bind","_select","_remove","on","ev","sender","_triggerSelect","preventDefault","trigger","originalEvent","selectedChipElement","_removeItem","wrapper","_focusNavigatableItem","target","closest","key","keyCode","LEFT","RIGHT","nextCandidate","_getNavigatableItem","focus","first","_getLastNavigatableItem","last","current","prevAll","nextAll","children","state","enable","isNaN","eq","itemById","id","add","before","method","targetElement","setOptions","empty","plugin","jQuery"],"mappings":"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","file":"kendo.chiplist.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.core.js'), require('kendo.chip.js'), require('kendo.html.chiplist.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.core', 'kendo.chip', 'kendo.html.chiplist'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendochiplist = global.kendochiplist || {}, global.kendochiplist.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n        id: \"chiplist\",\n        name: \"ChipList\",\n        category: \"web\",\n        docsCategory: \"navigation\",\n        description: \"The ChipList component.\",\n        depends: [\"core\", \"chip\", \"html.chiplist\"]\n    };\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            Widget = ui.Widget,\n            keys = kendo.keys,\n            isPlainObject = $.isPlainObject,\n            isEmptyObject = $.isEmptyObject,\n\n            NS = \".kendoChipList\",\n            PREFIX = \"k-chip-list-\",\n            DOT = \".\",\n\n            SELECT = \"select\",\n            REMOVE = \"remove\";\n        var html = kendo.html;\n\n        var chipListStyles = {\n            widget: \"k-chip-list\",\n            item: \"k-chip\",\n            selected: \"k-selected\",\n            disabled: \"k-disabled\",\n            enabledItemSelector: \"k-chip:not(.k-disabled)\"\n        };\n\n        var ChipList = Widget.extend({\n            init: function(element, options) {\n                var that = this;\n                options = options || {};\n                Widget.fn.init.call(that, element, options);\n\n                html.renderChipList(element, $.extend({}, options));\n\n                that._selectable = that.options.selectable;\n                that._bindEvents();\n                that._items();\n            },\n\n            options: {\n                name: \"ChipList\",\n                selectable: \"none\",\n                items: [],\n                fillMode: \"solid\",\n                rounded: \"medium\",\n                size: \"medium\",\n                itemSize: \"medium\"\n            },\n\n            events: [\n                SELECT,\n                REMOVE\n            ],\n\n            destroy: function() {\n                var that = this;\n\n                if (that._keydownProxy) {\n                    that.unbind(that._keydownProxy);\n                    that._keydownProxy = null;\n                }\n\n                if (that._selectProxy) {\n                    that.unbind(that._selectProxy);\n                    that._selectProxy = null;\n                }\n\n                if (that._removeProxy) {\n                    that.unbind(that._removeProxy);\n                    that._removeProxy = null;\n                }\n\n                that.element.off(NS);\n                that.element.find(\"[data-role='chip']\").each(function() {\n                    that._getChipFromElement(this).destroy();\n                });\n\n                Widget.fn.destroy.call(this);\n            },\n\n            _updateCssClasses: function() {\n                var that = this,\n                    options = that.options,\n                    styles = chipListStyles;\n\n                // Remove all class names\n                that.element.removeClass(function(index, className) {\n                    if (className.indexOf('k-') === 0) {\n                        that.element.removeClass(className);\n                    }\n                });\n\n                that.element.addClass(styles.widget);\n                that.element.addClass(kendo.getValidCssClass(PREFIX, \"size\", options.size));\n            },\n\n            _getInitializeChipOptions: function(itemOptions) {\n                var that = this,\n                    options = that.options;\n\n                var attributes = $.extend(itemOptions.attributes || {}, {\n                    tabindex: \"-1\"\n                });\n\n                if (options.selectable !== \"none\") {\n                    attributes.role = \"option\";\n                    attributes[\"aria-selected\"] = itemOptions.selected;\n                }\n\n                if (options.removable || itemOptions.removable) {\n                    attributes[\"aria-keyshortcuts\"] = \"Enter Delete\";\n                }\n\n                return $.extend({\n                    fillMode: options.fillMode,\n                    size: options.itemSize,\n                    rounded: options.rounded,\n                    selectable: options.selectable !== \"none\",\n                    removable: options.removable,\n                    remove: that._removeProxy,\n                    select: that._selectProxy,\n                }, itemOptions, { attributes: attributes });\n            },\n\n            _getChipFromElement: function(element) {\n                return $(element).getKendoChip() || $(element).find(\"[data-role='chip']\").getKendoChip();\n            },\n\n            _items: function() {\n                var that = this,\n                    options = that.options,\n                    items = options.items,\n                    chipOptions,\n                    selectedItems,\n                    chipEl,\n                    firstNavigatableItem,\n                    item;\n\n                for (var i = 0; i < items.length; i++) {\n                    chipOptions = that._getInitializeChipOptions(items[i]);\n                    chipEl = $(\"<span></span>\");\n                    that.element.append(chipEl);\n                    item = that._createChip(chipEl, chipOptions);\n                }\n\n                firstNavigatableItem = that._getFirstNavigatableItem();\n                if (firstNavigatableItem) {\n                    that._applyTabIndex(that.items().index(firstNavigatableItem));\n                }\n\n                if (that._selectable === \"single\") {\n                    selectedItems = that.items().filter(DOT + chipListStyles.selected);\n                    selectedItems.each(function(ind, ch) {\n                        if (ind !== selectedItems.length - 1) {\n                            var chip = that._getChipFromElement(ch);\n                            if (chip) {\n                                chip.select(false);\n                            }\n                        }\n                    });\n                }\n            },\n\n            _isItem: function(item) {\n                var that = this;\n\n                item = $(item);\n\n                return item.is(DOT + chipListStyles.item) && !!that.element.find(item).length;\n            },\n\n            _applyTabIndex: function(index) {\n                var that = this;\n                var itemElement = that.item(+index ? +index : 0);\n\n                that.items().each(function(ind, el) {\n                    $(el).attr(\"tabindex\", \"-1\");\n                });\n\n                itemElement.attr(\"tabindex\", \"0\");\n            },\n\n            _createChip: function(element, chipOptions) {\n                return element.kendoChip(chipOptions);\n            },\n\n            _bindEvents: function() {\n                var that = this;\n                that._keydownProxy = that._keydown.bind(that);\n                that._selectProxy = that._select.bind(that);\n                that._removeProxy = that._remove.bind(that);\n\n                that.element.on(\"keydown\" + NS, DOT + chipListStyles.item, that._keydownProxy);\n            },\n\n            _select: function(ev) {\n                var that = this,\n                    chip = ev.sender;\n\n                if (that._selectable == \"none\") {\n                    ev.preventDefault();\n                    return;\n                }\n\n                that._triggerSelect(chip, ev);\n            },\n\n            _triggerSelect: function(item, ev) {\n                var that = this,\n                    selectedItems;\n\n                if (that.element.is(DOT + chipListStyles.disabled)) {\n                    return;\n                }\n\n                if (that.trigger(SELECT, { originalEvent: ev, item: item })) {\n                    return;\n                }\n\n                if (that._selectable === \"single\") {\n                    selectedItems = that.select();\n                    if (selectedItems.length > 0) {\n                        selectedItems.each(function(ind, selectedChipElement) {\n                            var chip = that._getChipFromElement(selectedChipElement);\n                            if (chip && chip !== item) {\n                                chip.select(false);\n                            }\n                        });\n                    }\n                }\n            },\n\n            _remove: function(ev) {\n                var that = this,\n                    chip = ev.sender;\n\n                if (that.trigger(REMOVE, { originalEvent: ev, item: ev.sender })) {\n                    return;\n                }\n\n                that._removeItem(chip);\n            },\n\n            _removeItem: function(chip) {\n                var that = this;\n                if (chip) {\n                    var el = chip.wrapper;\n                    chip.destroy();\n                    el.remove();\n                    that._focusNavigatableItem();\n                }\n            },\n\n            _keydown: function(ev) {\n                // change the tabindex to the next/prev chip\n                // and remove it from the others\n                var that = this,\n                    target = $(ev.target).closest(DOT + chipListStyles.item),\n                    key = ev.keyCode;\n\n                if (key === keys.LEFT || key === keys.RIGHT) {\n                    that._focusNavigatableItem(key, target);\n                }\n                // add support for Home and End keys?\n            },\n\n            _focusNavigatableItem: function(key, target) {\n                var that = this;\n                var nextCandidate = that._getNavigatableItem(key, target);\n                if (nextCandidate) {\n                    that._applyTabIndex(that.items().index(nextCandidate));\n                    nextCandidate.focus();\n                }\n            },\n\n            _getFirstNavigatableItem: function() {\n                var that = this;\n                return that.items().filter(DOT + chipListStyles.enabledItemSelector).first();\n            },\n\n            _getLastNavigatableItem: function() {\n                var that = this;\n                return that.items().filter(DOT + chipListStyles.enabledItemSelector).last();\n            },\n\n            _getNavigatableItem: function(key, target) {\n                var that = this;\n                var current;\n\n                if (target) {\n                    current = target;\n                } else {\n                    current = that._getFirstNavigatableItem();\n                }\n\n                if (key === keys.LEFT && target) {\n                    current = target.prevAll(DOT + chipListStyles.enabledItemSelector).first();\n                }\n\n                if (key === keys.RIGHT && target) {\n                    current = target.nextAll(DOT + chipListStyles.enabledItemSelector).first();\n                }\n\n                return current.length ? current : null;\n            },\n\n            items: function() {\n                var that = this;\n                return that.element.children();\n            },\n\n            select: function(item, state) {\n                var that = this,\n                    chip,\n                    selectedItems = that.items().filter(DOT + chipListStyles.selected);\n\n                if (!item) {\n                    return selectedItems;\n                }\n\n                state = state !== false;\n\n                chip = that._getChipFromElement(item);\n                if (chip) {\n                    if (that._selectable === \"single\") {\n                        selectedItems = that.select();\n                        if (selectedItems.length > 0) {\n                            selectedItems.each(function(ind, selectedChipElement) {\n                                var chip = that._getChipFromElement(selectedChipElement);\n                                if (chip && chip !== item) {\n                                    chip.select(false);\n                                }\n                            });\n                        }\n                    }\n\n                    chip.select(state);\n                }\n            },\n\n            enable: function(item, state) {\n                var chip = this._getChipFromElement(item);\n                state = state !== false;\n\n                if (chip) {\n                    chip.enable(state);\n                }\n            },\n\n            item: function(index) {\n                var that = this;\n\n                if (isNaN(index)) {\n                    return null;\n                }\n\n                return that.items().eq(index);\n            },\n\n            itemById: function(id) {\n                var that = this;\n\n                return that.element.find(\"#\" + id);\n            },\n\n            add: function(item, before) {\n                // add validation to get element, options object and a Chip widget\n                var that = this,\n                    method = \"append\",\n                    chip,\n                    chipEl,\n                    targetElement = that.element;\n\n                if (before && that._isItem(before)) {\n                    method = \"before\";\n                    targetElement = $(before);\n                }\n\n                chip = that._getChipFromElement(item);\n                if (chip) {\n                    if (that._selectable !== \"none\") {\n                        chip.wrapper.attr(\"role\", \"option\");\n                    }\n\n                    targetElement[method](chip.wrapper);\n                } else if (item && isPlainObject(item) && !isEmptyObject(item)) {\n                    chipEl = $(\"<span></span>\");\n                    targetElement[method](chipEl);\n                    that._createChip(chipEl, that._getInitializeChipOptions(item));\n                }\n            },\n\n            remove: function(item) {\n                var that = this;\n\n                if (item && that._isItem(item)) {\n                    kendo.destroy(item);\n                    item.remove();\n                    that._focusNavigatableItem();\n                }\n            },\n\n            setOptions: function(options) {\n                var that = this;\n\n                Widget.fn.setOptions.call(this, options);\n                that._updateCssClasses();\n\n                if (options.items) {\n                    that.element.empty();\n                    that._items();\n                }\n            }\n        });\n\n        ui.plugin(ChipList);\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}