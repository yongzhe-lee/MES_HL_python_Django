{"version":3,"sources":["raw-js/kendo.pivot.configurator.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendopivot","configurator","js","this","Navigation","constructor","options","tabIndex","root","eventHandlers","update","elements","Array","from","querySelectorAll","selectors","join","first","querySelector","last","all","length","current","find","el","matches","start","eventType","mouseEvents","ev","target","Element","closest","call","undefined","addEventListener","keyboardEvents","key","stop","removeEventListener","focusElement","element","previous","removeAttribute","classList","remove","setAttribute","String","focus","preventScroll","scrollableValuesSel","scrollableColumnHeaderSel","scrollableRowHeaderSel","emptyCellSel","tableSel","cellSel","navigate","nav","dir","preventDefault","index","indexOf","onDelete","HTMLElement","keydown","Tab","shiftKey","Escape","_target","pivot","previousElementSibling","confButton","nextElementSibling","pivotCell","c","click","Delete","Backspace","prev","hasAttribute","ConfiguratorNavigation","super","arguments","$","undefined$1","kendo","window","ui","encode","htmlEncode","Widget","common","pivotgrid","fetchDiscover","configuratorReducer","PIVOT_CONFIGURATOR_ACTION","ns","HOVER_EVENTS","SETTING_CONTAINER_TEMPLATE","name","addKPI","data","found","idx","type","splice","caption","defaultHierarchy","uniqueName","kpiNode","node","normalizeKPIs","settingTargetFromNode","PivotConfiguratorV2","extend","init","fn","_ariaId","attr","guid","addClass","role","_dataSource","navigatable","_initPivotGridConfiguratorNavigation","_layout","refresh","height","notify","events","orientation","filterable","sortable","messages","title","cancelButtonText","applyButtonText","measures","columns","rows","setDataSource","dataSource","that","configuratorNavigation","firstCell","_refreshHandler","unbind","_errorHandler","_progressHandler","_error","bind","_requestStart","PivotDataSourceV2","create","horizontal","panel","append","headerTextId","SETTINGS_TEMPLATE","appendTo","formClass","ariaId","CONTENT_TEMPLATE","each","elm","html","renderChipList","_fields","cancelText","applyText","ACTIONS_TEMPLATE","_targets","on","_actions","e","currentTarget","_applyState","read","_cancelChanges","treeView","targetItemTemplate","menuenabled","chip","renderChip","TARGET_ITEM_TEMPLATE","fillMode","themeColor","rounded","removable","removeIcon","actions","icon","_createTarget","template","connectWith","empty","fieldMenu","setting","forEach","x","PivotSettingTargetV2","hint","clone","item","wrapper","id","dataItem","getByUid","checked","container","kendoTreeView","checkboxes","checkChildren","result","hasChildren","aggregator","local","uid","dataTextField","autoBind","check","sender","action","toggleSelection","payload","state","columnAxes","_state","rowAxes","measureAxes","cubeSchema","restoreMeasure","items","_checkMembers","trigger","_redraw","_treeViewDataSource","off","_clickHandler","HierarchicalDataSource","schema","model","transport","fields","dsMeasures","catalog","cube","fetchOptions","url","members","concat","isEmptyObject","dimensions","success","connection","restrictions","catalogName","cubeName","command","then","newFields","get","_getKPIOptions","buildKPImeasures","_loadFieldsCommand","newData","hash","field","dimensionUniqueName","hierarchyUniqueName","_progress","toggle","progress","destroy","fetch","plugin","PivotConfigurator","outerHeight","measuresLabel","columnsLabel","rowsLabel","fieldsLabel","PivotDataSource","kpi","schemaDimensions","done","cubeBuilder","fail","error","schemaKPIs","schemaMeasures","schemaLevels","schemaHierarchies","form","dragAndDrop","dragstart","sourceNode","measure","drag","status","dropTarget","validate","setStatusClass","drop","push","add","sortIcon","getIcons","PivotSettingTarget","emptyTemplate","columnsContainer","rowsContainer","measuresContainer","_toggleHover","toggleClass","_resize","_cube","_catalog","kpiMeasure","value","goal","trend","cssProperties","registerPrefix","registerValues","prop","values","roundedValues","jQuery"],"mappings":"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","file":"kendo.pivot.configurator.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.dom.js'), require('kendo.html.chip.js'), require('kendo.html.chiplist.js'), require('kendo.pivot.common.js'), require('kendo.icons.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.dom', 'kendo.html.chip', 'kendo.html.chiplist', 'kendo.pivot.common', 'kendo.icons'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendopivot = global.kendopivot || {}, global.kendopivot.configurator = global.kendopivot.configurator || {}, global.kendopivot.configurator.js = factory()));\n})(this, (function () {\n    class Navigation {\n        constructor(options) {\n            this.tabIndex = 0;\n            this.root = null;\n            this.eventHandlers = {};\n            this.update = () => { };\n            this.tabIndex = options.tabIndex;\n        }\n        get elements() {\n            return this.root ? Array.from(this.root.querySelectorAll(this.selectors.join(','))) : [];\n        }\n        get first() {\n            return (this.root && this.root.querySelector(this.selectors.join(','))) || null;\n        }\n        get last() {\n            const all = this.elements;\n            return all[all.length - 1] || null;\n        }\n        get current() {\n            return this.elements.find(el => el.matches(':focus'));\n        }\n        start(root) {\n            this.root = root;\n            for (const eventType in this.mouseEvents) {\n                if (this.mouseEvents[eventType]) {\n                    this.eventHandlers[eventType] = (ev => {\n                        const target = ev.target instanceof Element && ev.target.closest(this.selectors.join(','));\n                        if (target) {\n                            this.mouseEvents[eventType].call(undefined, target, this, ev);\n                        }\n                    });\n                    root.addEventListener(eventType, this.eventHandlers[eventType]);\n                }\n            }\n            for (const eventType in this.keyboardEvents) {\n                if (this.keyboardEvents[eventType]) {\n                    this.eventHandlers[eventType] = (ev => {\n                        const target = ev.target instanceof Element && ev.target.closest(this.selectors.join(','));\n                        const key = ev.key === ' ' ? 'Space' : ev.key;\n                        if (target && this.keyboardEvents[eventType][key]) {\n                            this.keyboardEvents[eventType][key].call(undefined, target, this, ev);\n                        }\n                    });\n                    root.addEventListener(eventType, this.eventHandlers[eventType]);\n                }\n            }\n        }\n        stop() {\n            if (this.root) {\n                for (const eventType in this.eventHandlers) {\n                    if (this.eventHandlers[eventType]) {\n                        this.root.removeEventListener(eventType, this.eventHandlers[eventType]);\n                    }\n                }\n            }\n            this.root = null;\n        }\n        focusElement(element, previous) {\n            if (element) {\n                if (previous) {\n                    previous.removeAttribute('tabindex');\n                    previous.classList.remove('k-focus');\n                }\n                element.setAttribute('tabindex', String(this.tabIndex));\n                element.focus({ preventScroll: true });\n            }\n        }\n    }\n\n    const scrollableValuesSel = '.k-pivotgrid .k-pivotgrid-values';\n    const scrollableColumnHeaderSel = '.k-pivotgrid .k-pivotgrid-column-headers';\n    const scrollableRowHeaderSel = '.k-pivotgrid .k-pivotgrid-row-headers';\n    const emptyCellSel = '.k-pivotgrid > .k-pivotgrid-empty-cell';\n    const tableSel = 'table.k-pivotgrid-table';\n    const cellSel = '.k-pivotgrid-cell';\n    const scrollables = [scrollableValuesSel, scrollableColumnHeaderSel, scrollableRowHeaderSel].join(',');\n    const selectors$1 = [\n        emptyCellSel,\n        [scrollableColumnHeaderSel, tableSel, cellSel].join(' '),\n        [scrollableRowHeaderSel, tableSel, cellSel].join(' '),\n        [scrollableValuesSel, tableSel, cellSel].join(' ')\n    ];\n    const onEnter = (target, nav, ev) => {\n        const icon = target.querySelector('.k-icon, .k-svg-icon');\n        if (icon) {\n            const index = nav.elements.indexOf(target);\n            nav.update = () => {\n                nav.focusElement(nav.elements[index], null);\n                nav.update = () => { };\n            };\n            icon.click();\n            ev.preventDefault();\n        }\n    };\n    const tryScrollLeft = (target, scrollable, elToScroll) => {\n        if (target.offsetLeft < scrollable.scrollLeft) {\n            elToScroll.scrollLeft = target.offsetLeft;\n        }\n    };\n    const tryScrollRight = (target, scrollable, elToScroll) => {\n        if (target.offsetLeft + target.offsetWidth > scrollable.scrollLeft + scrollable.offsetWidth &&\n            target.offsetWidth < scrollable.offsetWidth) {\n            elToScroll.scrollLeft = target.offsetLeft + target.offsetWidth - scrollable.offsetWidth;\n        }\n    };\n    const tryScrollUp = (target, scrollable, elToScroll) => {\n        if (scrollable.scrollTop && target.offsetTop < scrollable.scrollTop) {\n            elToScroll.scrollTop = target.offsetTop;\n        }\n    };\n    const tryScrollDown = (target, scrollable, elToScroll) => {\n        if (target.offsetTop + target.offsetHeight > scrollable.scrollTop + scrollable.offsetHeight &&\n            target.offsetHeight < scrollable.offsetHeight) {\n            elToScroll.scrollTop = target.offsetTop + target.offsetHeight - scrollable.offsetHeight;\n        }\n    };\n    const scrollTo = (target, root, scrollFunc) => {\n        const elToScroll = root.querySelector(scrollableValuesSel);\n        const scrollable = target && target.closest(scrollables);\n        if (!elToScroll || !scrollable || !target) {\n            return;\n        }\n        scrollFunc.forEach(scroll => scroll(target, scrollable, elToScroll));\n    };\n    const tableMap = (table) => {\n        const rows = Array.from(table.rows);\n        const colsCount = Array.from((rows && rows[0] && rows[0].cells) || [])\n            .map(c => c.colSpan)\n            .reduce((prev, cur) => prev + cur, 0);\n        const map = rows.map(() => new Array(colsCount));\n        rows.forEach((row, r) => {\n            let curColSpan = 0;\n            Array.from(row.cells).forEach((c) => {\n                for (let colSp = 0; colSp < c.colSpan; colSp++) {\n                    for (let rowSp = 0; rowSp < c.rowSpan; rowSp++) {\n                        const ind = map[r + rowSp].findIndex((val, curInd) => curInd >= curColSpan && !val);\n                        map[r + rowSp][ind] = c;\n                    }\n                    curColSpan++;\n                }\n            });\n        });\n        return map;\n    };\n    const navigationMap = (root) => {\n        const columnHeader = tableMap(root.querySelector([scrollableColumnHeaderSel, tableSel].join(' ')));\n        const rowHeader = tableMap(root.querySelector([scrollableRowHeaderSel, tableSel].join(' ')));\n        const values = tableMap(root.querySelector([scrollableValuesSel, tableSel].join(' ')));\n        const emptyCell = root.querySelector(emptyCellSel);\n        const emptyCellRow = new Array(rowHeader[0].length).fill(emptyCell);\n        const map = [];\n        for (let i = 0; i < columnHeader.length; i++) {\n            map.push(emptyCellRow.concat(columnHeader[i]));\n        }\n        for (let i = 0; i < rowHeader.length; i++) {\n            map.push(rowHeader[i].concat(values[i]));\n        }\n        return map;\n    };\n    const getTargetPos = (map, target) => {\n        for (let r = 0; r < map.length; r++) {\n            for (let c = 0; c < map[r].length; c++) {\n                if (map[r][c] === target) {\n                    return [r, c];\n                }\n            }\n        }\n        return [-1, -1];\n    };\n    const ctrlKey = (ev) => ev.ctrlKey || ev.metaKey;\n    const cellAt = (root, target, pos) => {\n        const map = navigationMap(root);\n        let targetPos = getTargetPos(map, target);\n        let nextPos = [targetPos[0] + pos[0], targetPos[1] + pos[1]];\n        let next = map[nextPos[0]] && map[nextPos[0]][nextPos[1]];\n        while (next && next === target) {\n            nextPos = [nextPos[0] + pos[0], nextPos[1] + pos[1]];\n            next = map[nextPos[0]] && map[nextPos[0]][nextPos[1]];\n        }\n        return next;\n    };\n    const keyboardEvents$1 = {\n        keydown: {\n            ArrowLeft: (target, nav, ev) => {\n                ev.preventDefault();\n                const next = cellAt(nav.root, target, [0, -1]);\n                nav.focusElement(next, target);\n                scrollTo(next, nav.root, [tryScrollRight, tryScrollLeft, tryScrollDown, tryScrollUp]);\n            },\n            ArrowRight: (target, nav, ev) => {\n                ev.preventDefault();\n                const next = cellAt(nav.root, target, [0, 1]);\n                nav.focusElement(next, target);\n                scrollTo(next, nav.root, [tryScrollLeft, tryScrollRight, tryScrollDown, tryScrollUp]);\n            },\n            ArrowUp: (target, nav, ev) => {\n                ev.preventDefault();\n                const next = cellAt(nav.root, target, [-1, 0]);\n                nav.focusElement(next, target);\n                scrollTo(next, nav.root, [tryScrollRight, tryScrollLeft, tryScrollDown, tryScrollUp]);\n            },\n            ArrowDown: (target, nav, ev) => {\n                ev.preventDefault();\n                const next = cellAt(nav.root, target, [1, 0]);\n                nav.focusElement(next, target);\n                scrollTo(next, nav.root, [tryScrollRight, tryScrollLeft, tryScrollUp, tryScrollDown]);\n            },\n            o: (_target, nav, _ev) => {\n                if (!nav.root) {\n                    return;\n                }\n                // FIX: ADDED manually to fix an issue where depending on the order of the config element and button\n                // you either can open the configurator with Ctrl+O, or you can close the configurator with ESC\n                let next = nav.root.nextElementSibling;\n                if (!(next && next instanceof HTMLElement)) {\n                    return;\n                }\n\n                if (!next.matches('div.k-pivotgrid-configurator-button')) {\n                    next = next.nextElementSibling;\n                }\n\n                if (next && next instanceof HTMLElement && next.matches('div.k-pivotgrid-configurator-button')) {\n                    if (!nav.root.parentNode || nav.root.parentNode.querySelector(\".k-pivotgrid-configurator.k-hidden\")) {\n                        next.click();\n                    }\n\n                    setTimeout(() => {\n                        if (nav.root.parentNode) {\n                            const confHeader = nav.root.parentNode.querySelector('.k-pivotgrid-configurator-content .k-form-field .k-fields-list-wrapper .k-treeview');\n                            if (confHeader instanceof HTMLElement) {\n                                confHeader.setAttribute('tabindex', String(nav.tabIndex));\n                                confHeader.focus();\n                            }\n                        }\n                    }, 0);\n                }\n            },\n            Enter: onEnter,\n            Space: onEnter,\n            Home: (target, nav, ev) => {\n                const map = navigationMap(nav.root);\n                const ctrl = ctrlKey(ev);\n                let row = ctrl ? map[0] : (map.find(ro => Boolean(ro.find(x => x === target))) || []);\n                let next = row[0];\n                if (next) {\n                    nav.focusElement(next, target);\n                    scrollTo(next, nav.root, [tryScrollRight, tryScrollLeft, tryScrollDown, tryScrollUp]);\n                    ev.preventDefault();\n                }\n            },\n            End: (target, nav, ev) => {\n                const map = navigationMap(nav.root);\n                const ctrl = ctrlKey(ev);\n                let row = ctrl ? map[map.length - 1] : (map.find(ro => Boolean(ro.find(x => x === target))) || []);\n                let next = row && row[row.length - 1] || null;\n                if (next) {\n                    nav.focusElement(next, target);\n                    scrollTo(next, nav.root, [tryScrollLeft, tryScrollRight, tryScrollUp, tryScrollDown]);\n                    ev.preventDefault();\n                }\n            }\n        }\n    };\n    const mouseEvents$1 = {\n        click: (target, nav) => {\n            if (target && target instanceof HTMLElement) {\n                const prev = nav.elements.find(c => c.hasAttribute('tabindex')) || null;\n                nav.focusElement(target, prev);\n            }\n        }\n    };\n    /**\n     * The PivotGrid keyboard navigation functionality.\n     *\n     * Usage:\n     *\n     * On Initialize\n     * const navigation = new PivotGridNavigation({ tabindex: 0 });\n     *\n     * Turn on\n     * navigation.start(rootDomElement);\n     *\n     * On After Update\n     * navigation.update();\n     *\n     * On Destroy / Turn off\n     * navigation.stop();\n     */\n    class PivotGridNavigation extends Navigation {\n        constructor() {\n            super(...arguments);\n            this.selectors = selectors$1;\n            this.mouseEvents = mouseEvents$1;\n            this.keyboardEvents = keyboardEvents$1;\n        }\n    }\n\n    const selectors = [\n        '.k-pivotgrid-configurator-content .k-form-field .k-fields-list-wrapper .k-treeview',\n        '.k-pivotgrid-configurator-content .k-chip',\n        '.k-pivotgrid-configurator-actions button'\n    ];\n    const onEscape = (_target, nav, ev) => {\n        if (ev.target instanceof HTMLElement) {\n            if (nav.root) {\n                const pivot = nav.root.previousElementSibling;\n                const confButton = nav.root.nextElementSibling;\n                const pivotCell = Array.from(pivot instanceof HTMLElement ? pivot.querySelectorAll('[tabindex]') : []).find((c) => c.tabIndex >= 0);\n                if (pivotCell instanceof HTMLElement) {\n                    pivotCell.focus();\n                    if (confButton instanceof HTMLElement) {\n                        confButton.click();\n                    }\n                }\n            }\n        }\n    };\n    const navigate = (target, nav, ev, dir) => {\n        ev.preventDefault();\n        const all = nav.elements;\n        let index = all.indexOf(target) + dir;\n        if (index < 0) {\n            index = all.length - 1;\n        }\n        nav.focusElement(all[index % all.length], target);\n    };\n    const onDelete = (target, nav, ev) => {\n        if (ev.target instanceof HTMLElement) {\n            const deleteButton = ev.target.querySelector('.k-icon.k-i-x-circle, .k-svg-icon.k-svg-i-x-circle');\n            if (deleteButton instanceof HTMLElement) {\n                ev.preventDefault();\n                navigate(target, nav, ev, -1);\n            }\n        }\n    };\n    const keyboardEvents = {\n        keydown: {\n            Tab: (target, nav, ev) => {\n                navigate(target, nav, ev, ev.shiftKey ? -1 : 1);\n            },\n            Escape: onEscape,\n            Delete: onDelete,\n            Backspace: onDelete\n        }\n    };\n    const mouseEvents = {\n        click: (target, nav) => {\n            if (target && target instanceof HTMLElement) {\n                const prev = nav.elements.find((c) => c.hasAttribute('tabindex')) || null;\n                nav.focusElement(target, prev);\n            }\n        }\n    };\n    /**\n     * The PivotGrid Configurator keyboard navigation functionality.\n     *\n     * Usage:\n     *\n     * On Initialize\n     * const navigation = new ConfiguratorNavigation({ tabindex: 0 });\n     *\n     * Turn on\n     * navigation.start(rootDomElement);\n     *\n     * On After Update\n     * navigation.update();\n     *\n     * On Destroy / Turn off\n     * navigation.stop();\n     */\n    class ConfiguratorNavigation extends Navigation {\n        constructor() {\n            super(...arguments);\n            this.selectors = selectors;\n            this.mouseEvents = mouseEvents;\n            this.keyboardEvents = keyboardEvents;\n        }\n    }\n\n    var __meta__ = {\n        id: \"pivot.configurator\",\n        name: \"PivotConfigurator\",\n        category: \"web\",\n        depends: [ \"dropdownlist\", \"treeview\", \"treeview.draganddrop\", \"pivot.fieldmenu\", \"html.chip\", \"html.chiplist\", \"pivot.common\", \"icons\" ],\n        hidden: true\n    };\n\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            encode = kendo.htmlEncode,\n            Widget = ui.Widget,\n            common = window.kendo.pivotgrid.common,\n            fetchDiscover = common.fetchDiscover,\n            configuratorReducer = common.configuratorReducer,\n            PIVOT_CONFIGURATOR_ACTION = common.PIVOT_CONFIGURATOR_ACTION,\n            ns = \".kendoPivotConfigurator\",\n            HOVER_EVENTS = \"mouseenter\" + ns + \" mouseleave\" + ns,\n            SETTINGS_TEMPLATE = ({ title, headerTextId }) => '<div class=\"k-pivotgrid-configurator-header\">' +\n                                                `<div class=\"k-pivotgrid-configurator-header-text\" id=\"${headerTextId}\">${encode(title)}</div>` +\n                                              '</div>',\n            CONTENT_TEMPLATE = ({ formClass, horizontal, ariaId }) => '<div class=\"k-pivotgrid-configurator-content\">' +\n                `<form class=\"${encode(formClass)}\">` +\n                    `${horizontal ? '<div class=\"k-form-field-wrapper\">' : ''}` +\n                    '<div class=\"k-form-field\">' +\n                        `<label class=\"k-label\" id=\"${ariaId}-configurator-fields\">Fields</label>` +\n                    '</div>' +\n                    '<div class=\"k-form-field\">' +\n                      '<div class=\"k-fields-list-wrapper\"></div>' +\n                    '</div>' +\n                    `${horizontal ? '</div><div class=\"k-form-field-wrapper\">' : ''}` +\n                    '<div class=\"k-form-field\">' +\n                        `<label class=\"k-label\" id=\"${ariaId}-configurator-columns\">Columns</label>` +\n                    '</div>' +\n                    '<div class=\"k-chip-list k-column-fields\"></div>' +\n                    '<div class=\"k-form-field\">' +\n                        `<label class=\"k-label\" id=\"${ariaId}-configurator-rows\">Rows</label>` +\n                    '</div>' +\n                    '<div class=\"k-chip-list k-row-fields\"></div>' +\n                    `${horizontal ? '</div><div class=\"k-form-field-wrapper\">' : ''}` +\n                    '<div class=\"k-form-field\">' +\n                        `<label class=\"k-label\" id=\"${ariaId}-configurator-values\">Values</label>` +\n                    '</div>' +\n                    '<div class=\"k-chip-list k-column-fields\"></div>' +\n                    `${horizontal ? '</div>' : ''}` +\n                '</form>' +\n            '</div>',\n            TARGET_ITEM_TEMPLATE = ({ name }) => '<span>' +\n                    `<span class=\"k-chip-label\">${encode(name)}</span>` +\n                '</span>',\n            ACTIONS_TEMPLATE = ({ cancelText, applyText }) =>\n                    '<div class=\"k-pivotgrid-configurator-actions k-actions k-hstack k-justify-content-end\">' +\n                      '<button class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base\" aria-disabled=\"false\">' +\n                        `<span class=\"k-button-text\">${encode(cancelText)}</span>` +\n                      '</button>' +\n                      '<button class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary\" aria-disabled=\"false\">' +\n                        `<span class=\"k-button-text\">${encode(applyText)}</span>` +\n                      '</button>' +\n                    '</div>',\n            SETTING_CONTAINER_TEMPLATE = ({ name }) => `<div class=\"k-pivotgrid-target k-pivotgrid-configurator-section\"><strong>${encode(name)}</strong><div class=\"k-pivotgrid-target-wrap\"></div>`;\n\n        function addKPI(data) {\n            var found;\n            var idx = 0;\n            var length = data.length;\n\n            for (; idx < length; idx++) {\n                if (data[idx].type == 2) {\n                    found = true;\n                    break;\n                }\n            }\n\n            if (found) {\n                data.splice(idx + 1, 0, {\n                    caption: \"KPIs\",\n                    defaultHierarchy: \"[KPIs]\",\n                    name: \"KPIs\",\n                    uniqueName: \"[KPIs]\"\n                });\n            }\n        }\n\n        function kpiNode(node) {\n            return {\n                name: node.uniqueName,\n                type: node.type\n            };\n        }\n\n        function normalizeKPIs(data) {\n            for (var idx = 0, length = data.length; idx < length; idx++) {\n                data[idx].uniqueName = data[idx].name;\n                data[idx].type = \"kpi\";\n            }\n\n            return data;\n        }\n\n        function settingTargetFromNode(node) {\n            var target = $(node).closest(\".k-pivot-setting\");\n\n            if (target.length) {\n                return target.data(\"kendoPivotSettingTarget\");\n            }\n            return null;\n        }\n\n        function getIcons(sortIcon, options) {\n            var sortable = options.sortable;\n            var result = '';\n\n            if (sortable) {\n                result += sortIcon ? `<span class=\"k-chip-action\">${kendo.ui.icon(sortIcon + \"-sm\")}</span>` : '';\n            }\n\n            if (options.filterable || sortable) {\n                result += `<span class=\"k-setting-fieldmenu k-chip-action\">${kendo.ui.icon(\"more-vertical\")}</span>`;\n            }\n\n            result += `<span class=\"k-setting-delete k-chip-action\">${kendo.ui.icon(\"x\")}</span>`;\n\n            return result;\n        }\n\n        var PivotConfiguratorV2 = Widget.extend({\n            init: function(element, options) {\n                Widget.fn.init.call(this, element, options);\n\n                this._ariaId = this.element.attr(\"id\") || kendo.guid();\n                this.element.addClass(\"k-widget k-pivotgrid-configurator k-pos-relative\");\n                this.element.attr({\n                    \"role\": \"dialog\",\n                    \"aria-hidden\": true,\n                    \"aria-labelledby\": `${this._ariaId}-configurator-header`\n                });\n\n                this._dataSource();\n\n                if (this.options.navigatable) {\n                    this._initPivotGridConfiguratorNavigation();\n                }\n\n                this._layout();\n\n                this.refresh();\n\n                if (options.height) {\n                    this.element.height(options.height);\n                }\n\n                kendo.notify(this);\n            },\n\n            events: [],\n\n            options: {\n                name: \"PivotConfiguratorV2\",\n                orientation: \"vertical\",\n                filterable: false,\n                sortable: false,\n                messages: {\n                    title: \"Settings\",\n                    cancelButtonText: \"Cancel\",\n                    applyButtonText: \"Apply\",\n                    measures: \"Select some fields to begin setup\",\n                    columns: \"Select some fields to begin setup\",\n                    rows: \"Select some fields to begin setup\"\n                }\n            },\n\n            setDataSource: function(dataSource) {\n                this.options.dataSource = dataSource;\n\n                this._dataSource();\n\n                if (this.measures) {\n                    this.measures.setDataSource(dataSource);\n                }\n\n                if (this.rows) {\n                    this.rows.setDataSource(dataSource);\n                }\n\n                if (this.columns) {\n                    this.columns.setDataSource(dataSource);\n                }\n\n                this.refresh();\n            },\n\n            _initPivotGridConfiguratorNavigation: function() {\n                var that = this;\n                that.configuratorNavigation = new ConfiguratorNavigation({ tabIndex: 0 });\n                that.configuratorNavigation.start(that.element[0]);\n\n                const firstCell = that.configuratorNavigation.first;\n\n                if (firstCell) {\n                    firstCell.setAttribute('tabindex', '0');\n                }\n            },\n\n            _dataSource: function() {\n                var that = this;\n\n                if (that.dataSource && that._refreshHandler) {\n                    that.dataSource.unbind(\"change\", that._refreshHandler)\n                                   .unbind(\"error\", that._errorHandler)\n                                   .unbind(\"progress\", that._progressHandler);\n                } else {\n                    that._errorHandler = that._error.bind(that);\n                    that._refreshHandler = that.refresh.bind(that);\n                    that._progressHandler = that._requestStart.bind(that);\n                }\n\n                that.dataSource = kendo.data.PivotDataSourceV2.create(that.options.dataSource);\n                that.dataSource.bind(\"change\", that._refreshHandler)\n                               .bind(\"error\", that._errorHandler)\n                               .bind(\"progress\", that._progressHandler);\n            },\n\n            _layout: function() {\n\n                var that = this;\n                var options = that.options;\n                var messages = options.messages;\n                var horizontal = options.orientation == \"horizontal\";\n\n                var panel = $(\"<div class='k-pivotgrid-configurator-panel k-pivotgrid-configurator-push'></div>\");\n\n                panel.addClass(horizontal ? \"k-pivotgrid-configurator-horizontal\" : \"k-pivotgrid-configurator-vertical\");\n\n                that.element.append(panel);\n\n                that.panel = panel;\n\n                $(SETTINGS_TEMPLATE({ title: this.options.messages.title, headerTextId: `${that._ariaId}-configurator-header` })).appendTo(that.panel);\n\n                $(CONTENT_TEMPLATE({ formClass: horizontal ? \"k-form k-form-horizontal\" : \"k-form\", filterable: options.filterable, horizontal: horizontal, ariaId: that._ariaId }))\n                    .appendTo(that.panel).find(\".k-chip-list\")\n                    .each(function(index, elm) {\n                        kendo.html.renderChipList(elm, $.extend({}, options));\n                        $(elm).attr({\n                            \"role\": \"listbox\",\n                            \"aria-orientation\": \"horizontal\",\n                        });\n                    });\n\n                that._fields();\n                $(ACTIONS_TEMPLATE({ cancelText: messages.cancelButtonText, applyText: messages.applyButtonText })).appendTo(that.panel);\n                that._targets();\n\n                that.element.on(\"click\" + ns, \".k-pivotgrid-configurator-actions > button\", that._actions.bind(that));\n            },\n\n            _actions: function(e) {\n                e.preventDefault();\n\n                var target = $(e.currentTarget).closest(\":not(path,svg)\");\n                if (target.index()) {\n                    this.columns._applyState();\n                    this.rows._applyState();\n                    this.measures._applyState();\n                    this.dataSource.read();\n                } else {\n                    this.columns._cancelChanges();\n                    this.rows._cancelChanges();\n                    this.measures._cancelChanges();\n                    this.treeView.dataSource.read();\n                }\n            },\n\n            _targets: function() {\n                var that = this;\n                var columns = that.panel.find(\".k-column-fields\").first();\n                var rows = that.panel.find(\".k-row-fields\");\n                var measures = that.panel.find(\".k-chip-list\").last();\n                var options = this.options;\n\n                var targetItemTemplate = ({ name, menuenabled }) => {\n                        var chip = kendo.html.renderChip(TARGET_ITEM_TEMPLATE({ name, menuenabled }), $.extend({}, options, {\n                            fillMode: \"solid\",\n                            themeColor: \"base\",\n                            rounded: \"full\",\n                            removable: true,\n                            removeIcon: \"x-circle\",\n                            actions: menuenabled ? [\n                                { icon: \"more-vertical\" }\n                            ] : null\n                        }));\n\n                        return chip;\n                    };\n\n                this.columns = this._createTarget(columns, {\n                    navigatable: options.navigatable,\n                    filterable: options.filterable,\n                    sortable: options.sortable,\n                    template: targetItemTemplate,\n                    connectWith: rows,\n                    messages: {\n                        empty: options.messages.columns,\n                        fieldMenu: this.options.messages.fieldMenu\n                    },\n                    configuratorNavigation: that.configuratorNavigation\n                });\n                this.columns.element.attr(\"aria-labelledby\", `${this._ariaId}-configurator-header ${this._ariaId}-configurator-columns`);\n\n                this.rows = this._createTarget(rows, {\n                    navigatable: options.navigatable,\n                    filterable: options.filterable,\n                    sortable: options.sortable,\n                    template: targetItemTemplate,\n                    setting: \"rows\",\n                    connectWith: columns,\n                    messages: {\n                        empty: this.options.messages.rows,\n                        fieldMenu: this.options.messages.fieldMenu\n                    },\n                    configuratorNavigation: that.configuratorNavigation\n                });\n                this.rows.element.attr(\"aria-labelledby\", `${this._ariaId}-configurator-header ${this._ariaId}-configurator-rows`);\n\n                this.measures = this._createTarget(measures, {\n                    navigatable: options.navigatable,\n                    filterable: false,\n                    sortable: false,\n                    setting: \"measures\",\n                    template: targetItemTemplate,\n                    messages: {\n                        empty: options.messages.measures,\n                        fieldMenu: this.options.messages.fieldMenu\n                    },\n                    configuratorNavigation: that.configuratorNavigation\n                });\n\n                this.measures.element.attr(\"aria-labelledby\", `${this._ariaId}-configurator-header ${this._ariaId}-configurator-values`);\n\n                [this.columns, this.rows, this.measures].forEach(x=> x.element.find(\".k-chip\").attr(\"role\", \"option\"));\n            },\n\n            _createTarget: function(element, options) {\n                var that = this;\n                return new kendo.ui.PivotSettingTargetV2(element, $.extend({\n                    dataSource: this.dataSource,\n                    hint: function(element) {\n                        return element.clone();\n                    },\n                    remove: function(e) {\n                        var item = that.treeView.wrapper\n                            .find(\"[data-name='\" + e.name + \"']\")\n                            .closest(\"li\");\n                        var id = item.attr(kendo.attr(\"uid\"));\n                        var dataItem = that.treeView.dataSource.getByUid(id);\n\n                        if (dataItem) {\n                            dataItem.checked = false;\n                            item.find(\"input\").attr(\"checked\", false);\n                        }\n                    },\n                    template: options.template\n                }, options));\n            },\n\n            _fields: function() {\n                var that = this;\n                var container = that.element.find(\".k-fields-list-wrapper\");\n\n                this.treeView = $(`<div aria-labelledby=\"${this._ariaId}-configurator-header ${this._ariaId}-configurator-fields\" />`).appendTo(container)\n                    .kendoTreeView({\n                        checkboxes: {\n                            checkChildren: true,\n                            template: ({ item }) => {\n                                var result = '';\n\n                                if ((item.hasChildren || item.aggregator || item.local) && item.uniqueName !== \"[KPIs]\" && item.uniqueName !== \"[Measures]\" && item.uniqueName !== \"Measures\") {\n                                    result += `<input type=\"checkbox\" data-name=\"${encode(item.uniqueName)}\" ${item.checked ? \"checked\" : \"\"} class=\"k-checkbox k-checkbox-md k-rounded-md\" id=\"${encode(item.uid)}\" tabindex=\"-1\">`;\n                                }\n\n                                return result;\n                            }\n                        },\n                        dataTextField: \"caption\",\n                        autoBind: false,\n                        check: function(e) {\n                          var dataItem = e.sender.dataItem(e.node);\n                          var action = {\n                            type: PIVOT_CONFIGURATOR_ACTION.toggleSelection,\n                            payload: dataItem\n                          };\n                          var state = {\n                            columnAxes: that.columns._state(),\n                            rowAxes: that.rows._state(),\n                            measureAxes: that.measures._state()\n                          };\n                          var result = configuratorReducer(state, action);\n\n                          if (that.dataSource.cubeSchema && result.measureAxes && result.measureAxes.length &&\n                            result.measureAxes.length > state.measureAxes.length) {\n                              that.dataSource.cubeSchema.restoreMeasure(result.measureAxes, dataItem);\n                          }\n\n                          if (dataItem.defaultHierarchy && dataItem.items && dataItem.items.length) {\n                              that._checkMembers([{ name: dataItem.defaultHierarchy }], dataItem.items);\n                              dataItem.items.trigger(\"change\");\n                          }\n\n                          if (result.columnAxes) {\n                              that.columns._state(result.columnAxes);\n                              that.columns._redraw();\n                          }\n                          if (result.rowAxes) {\n                              that.rows._state(result.rowAxes);\n                              that.rows._redraw();\n                          }\n                          if (result.measureAxes) {\n                              that.measures._state(result.measureAxes);\n                              that.measures._redraw();\n                          }\n                        },\n                        dataSource: this._treeViewDataSource()\n                     })\n                    .data(\"kendoTreeView\");\n\n                this.treeView.wrapper.off(\"click\", this.treeView._clickHandler);\n            },\n\n            _treeViewDataSource: function() {\n                var that = this;\n\n                return kendo.data.HierarchicalDataSource.create({\n                    schema: {\n                        model: {\n                            id: \"uniqueName\",\n                            hasChildren: function(item) {\n                                if (that.dataSource.cubeSchema && item.uniqueName !== \"Measures\") {\n                                    item.local = true;\n                                    return false;\n                                }\n                                return !(\"hierarchyUniqueName\" in item) && !(\"aggregator\" in item);\n                            }\n                        }\n                    },\n                    transport: {\n                        read: function(options) {\n                            var node;\n                            var transport = that.dataSource.transport;\n                            var catalog = transport.catalog();\n                            var cube = transport.cube();\n                            var fetchOptions = {\n                                url: transport.options.read\n                            };\n                            var columns = that.columns._state();\n                            var rows = that.rows._state();\n                            var measures = that.measures._state();\n                            var members = columns.concat(rows).concat(measures);\n                            var fields;\n                            var dsMeasures;\n                            var fetchOpts;\n\n                            if ($.isEmptyObject(options.data)) {\n                                if (that.dataSource.cubeSchema) {\n                                    fields = that.dataSource.cubeSchema.dimensions();\n                                    that._checkMembers(members, fields);\n                                    options.success(fields);\n                                } else {\n                                    fetchOpts = {\n                                        connection: {\n                                            catalog: catalog,\n                                            cube: cube\n                                        },\n                                        restrictions: {\n                                            catalogName: catalog,\n                                            cubeName: cube\n                                        },\n                                        command: 'schemaDimensions'\n                                    };\n\n                                    fetchDiscover(fetchOptions, fetchOpts)\n                                        .then(function(newFields) {\n                                            that._checkMembers(members, newFields);\n                                            addKPI(newFields);\n                                            options.success(newFields);\n                                         });\n                                }\n                            } else {\n                                //Hack to get the actual node as the HierarchicalDataSource does not support passing it\n                                node = that.treeView.dataSource.get(options.data.uniqueName);\n\n                                if (that.dataSource.cubeSchema) {\n                                    dsMeasures = that.dataSource.measures();\n                                    that._checkMembers(members, dsMeasures);\n                                    options.success(dsMeasures);\n                                } else {\n                                    if (node.uniqueName === \"[KPIs]\") {\n                                        fetchDiscover(fetchOptions, that._getKPIOptions(catalog, cube))\n                                        .then(function(newFields) {\n                                            options.success(normalizeKPIs(newFields));\n                                        });\n                                    } else if (node.type == \"kpi\") {\n                                        options.success(buildKPImeasures(node));\n                                    } else {\n                                        fetchDiscover(fetchOptions ,that._loadFieldsCommand(node, catalog, cube))\n                                        .then(function(newFields) {\n                                            that._checkMembers(members, newFields);\n                                            options.success(newFields);\n                                        });\n                                    }\n                                }\n                            }\n                        }\n                    }\n                });\n            },\n\n            _checkMembers: function(members, newData) {\n                var hash = {};\n                var index = 0;\n\n                for (index = 0; index < members.length; index++) {\n                    hash[members[index].name] = true;\n                }\n\n                for (index = 0; index < newData.length; index++) {\n                    if (hash[newData[index].uniqueName]) {\n                        newData[index].checked = true;\n                    }\n                }\n            },\n\n            _getKPIOptions: function(catalog, cube) {\n                return {\n                    connection: {\n                        catalog: catalog,\n                        cube: cube\n                    },\n                    restrictions: {\n                        catalogName: catalog,\n                        cubeName: cube\n                    },\n                    command: 'schemaKPIs'\n                };\n            },\n\n            _loadFieldsCommand: function(field, catalog, cube) {\n                var command;\n                var dimensionUniqueName;\n                var hierarchyUniqueName;\n\n                if (field.type === 2) {\n                    command = 'schemaMeasures';\n                } else if (field.dimensionUniqueName) {\n                    command = 'schemaLevels';\n                    hierarchyUniqueName = field.uniqueName;\n                } else {\n                    command = 'schemaHierarchies';\n                    dimensionUniqueName = field.uniqueName;\n                }\n\n                var options = {\n                    connection: {\n                        catalog: catalog,\n                        cube: cube\n                    },\n                    restrictions: {\n                        catalogName: catalog,\n                        cubeName: cube,\n                        hierarchyUniqueName: hierarchyUniqueName,\n                        dimensionUniqueName: dimensionUniqueName\n                    },\n                    command: command\n                };\n\n                return options;\n            },\n\n            _progress: function(toggle) {\n                kendo.ui.progress(this.element, toggle);\n            },\n\n            _error: function() {\n                this._progress(false);\n            },\n\n            _requestStart: function() {\n                this._progress(true);\n            },\n\n            destroy: function() {\n                Widget.fn.destroy.call(this);\n\n                this.dataSource.unbind(\"change\", this._refreshHandler);\n\n                this.element.off(ns);\n\n                this.rows.destroy();\n                this.columns.destroy();\n                this.measures.destroy();\n                this.treeView.destroy();\n\n                this.element = null;\n                this._refreshHandler = null;\n            },\n\n            refresh: function() {\n                if (this.treeView) {\n                    this.treeView.dataSource.fetch();\n                }\n\n                this._progress(false);\n            }\n\n        });\n\n        ui.plugin(PivotConfiguratorV2);\n\n        var PivotConfigurator = Widget.extend({\n            init: function(element, options) {\n                Widget.fn.init.call(this, element, options);\n\n                this.element.addClass(\"k-pivotgrid-configurator-panel kendo-jquery\");\n\n                if (this.options.height) {\n                    this.element.outerHeight(this.options.height);\n                }\n\n                this._dataSource();\n\n                this._layout();\n\n                this.refresh();\n\n                kendo.notify(this);\n            },\n\n            events: [],\n\n            options: {\n                name: \"PivotConfigurator\",\n                filterable: false,\n                sortable: false,\n                messages: {\n                    measures: \"Drop Data Fields Here\",\n                    columns: \"Drop Column Fields Here\",\n                    rows: \"Drop Rows Fields Here\",\n                    measuresLabel: \"Measures\",\n                    columnsLabel: \"Columns\",\n                    rowsLabel: \"Rows\",\n                    fieldsLabel: \"Fields\"\n                }\n            },\n\n            _dataSource: function() {\n                var that = this;\n\n                if (that.dataSource && that._refreshHandler) {\n                    that.dataSource.unbind(\"change\", that._refreshHandler)\n                                   .unbind(\"error\", that._errorHandler)\n                                   .unbind(\"progress\", that._progressHandler);\n                } else {\n                    that._errorHandler = that._error.bind(that);\n                    that._refreshHandler = that.refresh.bind(that);\n                    that._progressHandler = that._requestStart.bind(that);\n                }\n\n                that.dataSource = kendo.data.PivotDataSource.create(that.options.dataSource);\n                that.dataSource.bind(\"change\", that._refreshHandler)\n                               .bind(\"error\", that._errorHandler)\n                               .bind(\"progress\", that._progressHandler);\n            },\n\n            setDataSource: function(dataSource) {\n                this.options.dataSource = dataSource;\n\n                this._dataSource();\n\n                if (this.measures) {\n                    this.measures.setDataSource(dataSource);\n                }\n\n                if (this.rows) {\n                    this.rows.setDataSource(dataSource);\n                }\n\n                if (this.columns) {\n                    this.columns.setDataSource(dataSource);\n                }\n\n                this.refresh();\n            },\n\n            _treeViewDataSource: function() {\n                var that = this;\n\n                return kendo.data.HierarchicalDataSource.create({\n                    schema: {\n                        model: {\n                            id: \"uniqueName\",\n                            hasChildren: function(item) {\n                                return !(\"hierarchyUniqueName\" in item) && !(\"aggregator\" in item);\n                            }\n                        }\n                    },\n                    transport: {\n                        read: function(options) {\n                            var promise;\n                            var node;\n                            var kpi;\n\n                            if ($.isEmptyObject(options.data)) {\n                                promise = that.dataSource.schemaDimensions();\n\n                                promise.done(function(data) {\n                                            if (!that.dataSource.cubeBuilder) {\n                                                addKPI(data);\n                                            }\n                                            options.success(data);\n                                        })\n                                        .fail(options.error);\n                            } else {\n                                //Hack to get the actual node as the HierarchicalDataSource does not support passing it\n                                node = that.treeView.dataSource.get(options.data.uniqueName);\n\n                                if (node.uniqueName === \"[KPIs]\") {\n                                    kpi = true;\n                                    promise = that.dataSource.schemaKPIs();\n                                    promise.done(function(data) {\n                                                options.success(normalizeKPIs(data));\n                                           })\n                                           .fail(options.error);\n                                } else if (node.type == \"kpi\") {\n                                    kpi = true;\n                                    options.success(buildKPImeasures(node));\n                                }\n\n                                if (!kpi) {\n                                    if (node.type == 2) { //measure\n                                        promise = that.dataSource.schemaMeasures();\n                                    } else if (node.dimensionUniqueName) { // hierarchy\n                                        promise = that.dataSource.schemaLevels(options.data.uniqueName);\n                                    } else { // dimension\n                                        promise = that.dataSource.schemaHierarchies(options.data.uniqueName);\n                                    }\n\n                                    promise.done(options.success)\n                                            .fail(options.error);\n                                }\n                            }\n                        }\n                    }\n                });\n            },\n\n            _progress: function(toggle) {\n                kendo.ui.progress(this.element, toggle);\n            },\n\n            _error: function() {\n                this._progress(false);\n            },\n\n            _requestStart: function() {\n                this._progress(true);\n            },\n\n            _layout: function() {\n                $('<div class=\"k-pivotgrid-configurator\"><div class=\"k-pivotgrid-configurator-content\"></div></div>').appendTo(this.element);\n                this.form = this.element.find('.k-pivotgrid-configurator-content');\n\n                this._fields();\n                this._targets();\n            },\n\n            _fields: function() {\n                var container = $('<div class=\"k-pivotgrid-fields k-pivotgrid-configurator-section\"><strong>' + encode(this.options.messages.fieldsLabel) + '</strong><div class=\"k-fields-list-wrapper\"></div></div>').appendTo(this.form);\n\n                var template = ({ item }) => {\n                    var result = '';\n\n                    if (item.type == 2 || item.uniqueName == \"[KPIs]\") {\n                        result += kendo.ui.icon(item.type == 2 ? \"sum\" : \"caret-alt-expand\"/* \"kpi\" */);\n                    } else if (item.type && item.type !== \"kpi\") {\n                        result += kendo.ui.icon(\"arrows-axes\");\n                    }\n\n                    result += `${encode(item.caption || item.name)}`;\n\n                    return result;\n                };\n\n                this.treeView = $(\"<div/>\").appendTo(container.find('.k-fields-list-wrapper'))\n                    .kendoTreeView({\n                        template: template,\n                        dataTextField: \"caption\",\n                        dragAndDrop: true,\n                        autoBind: false,\n                        dataSource: this._treeViewDataSource(),\n                        dragstart: function(e) {\n                            var dataItem = this.dataItem(e.sourceNode);\n\n                            if ((!dataItem.hasChildren && !dataItem.aggregator && !dataItem.measure) || (dataItem.type == 2) || dataItem.uniqueName === \"[KPIs]\") {\n                                e.preventDefault();\n                            }\n                        },\n                        drag: function(e) {\n                            var status = \"cancel\";\n                            var setting = settingTargetFromNode(e.dropTarget);\n\n                            if (setting && setting.validate(this.dataItem(e.sourceNode))) {\n                                status = \"plus\";\n                            }\n\n                            e.setStatusClass(status);\n                        },\n                        drop: function(e) {\n                            e.preventDefault();\n\n                            var setting = settingTargetFromNode(e.dropTarget);\n                            var node = this.dataItem(e.sourceNode);\n                            var idx, length, measures;\n                            var name;\n\n                            if (setting && setting.validate(node)) {\n                                name = node.defaultHierarchy || node.uniqueName;\n\n                                if (node.type === \"kpi\") {\n                                    measures = buildKPImeasures(node);\n                                    length = measures.length;\n                                    name = [];\n\n                                    for (idx = 0; idx < length; idx++) {\n                                        name.push(kpiNode(measures[idx]));\n                                    }\n                                } else if (node.kpi) {\n                                    name = [kpiNode(node)];\n                                }\n\n                                setting.add(name);\n                            }\n                        }\n                     })\n                    .data(\"kendoTreeView\");\n            },\n\n            _createTarget: function(element, options) {\n                var template;\n\n                template = ({ name, sortIcon }) => ''\n                    + `<div class=\"k-chip k-chip-md k-rounded-full k-chip-solid k-chip-solid-base\" data-${kendo.ns}name=\"${name}\">`\n                        + '<span class=\"k-chip-content\">'\n                            + `<span class=\"k-chip-label\">${name}</span>`\n                        + '</span>'\n                        + '<span class=\"k-chip-actions k-field-actions\">'\n                        + getIcons(sortIcon, options)\n                        + '</span>'\n                    + '</div>';\n\n                return new kendo.ui.PivotSettingTarget(element, $.extend({\n                    dataSource: this.dataSource,\n                    template: template,\n                    emptyTemplate: (data) => `<span class=\"k-empty\">${data}</span>`\n                }, options));\n            },\n\n            _targets: function() {\n                var container = $('<div class=\"k-pivotgrid-targets\"/>').appendTo(this.form);\n\n                var columnsContainer = $(SETTING_CONTAINER_TEMPLATE({ name: this.options.messages.columnsLabel, icon: \"columns\" })).appendTo(container);\n                var columns = $('<div class=\"k-column-fields k-chip-list\" />').appendTo(columnsContainer.find('.k-pivotgrid-target-wrap'));\n\n                var rowsContainer = $(SETTING_CONTAINER_TEMPLATE({ name: this.options.messages.rowsLabel, icon: \"rows\" })).appendTo(container);\n                var rows = $('<div class=\"k-column-fields k-chip-list\" />').appendTo(rowsContainer.find('.k-pivotgrid-target-wrap'));\n\n                var measuresContainer = $(SETTING_CONTAINER_TEMPLATE({ name: this.options.messages.measuresLabel, icon: \"sum\" })).appendTo(container);\n                var measures = $('<div class=\"k-column-fields k-chip-list\" />').appendTo(measuresContainer.find('.k-pivotgrid-target-wrap'));\n\n                var options = this.options;\n\n                this.columns = this._createTarget(columns, {\n                    filterable: options.filterable,\n                    sortable: options.sortable,\n                    connectWith: rows,\n                    messages: {\n                        empty: options.messages.columns,\n                        fieldMenu: options.messages.fieldMenu\n                    }\n                });\n\n                this.rows = this._createTarget(rows, {\n                    filterable: options.filterable,\n                    sortable: options.sortable,\n                    setting: \"rows\",\n                    connectWith: columns,\n                    messages: {\n                        empty: this.options.messages.rows,\n                        fieldMenu: this.options.messages.fieldMenu\n                    }\n                });\n\n                this.measures = this._createTarget(measures, {\n                    setting: \"measures\",\n                    messages: {\n                        empty: options.messages.measures\n                    }\n                });\n\n                columns\n                    .add(rows)\n                    .add(measures)\n                    .on(HOVER_EVENTS, \".k-item:not(.k-empty)\", this._toggleHover);\n            },\n\n            _toggleHover: function(e) {\n                $(e.currentTarget).closest(\":not(path,svg)\").toggleClass(\"k-hover\", e.type === \"mouseenter\");\n            },\n\n            _resize: function() {\n                var element = this.element;\n                var height = this.options.height;\n\n                if (!height) {\n                    return;\n                }\n\n                element.outerHeight(height);\n            },\n\n            refresh: function() {\n                var dataSource = this.dataSource;\n\n                if (dataSource.cubeBuilder || this._cube !== dataSource.cube() || this._catalog !== dataSource.catalog()) {\n                    this.treeView.dataSource.fetch();\n                }\n\n                this._catalog = this.dataSource.catalog();\n                this._cube = this.dataSource.cube();\n\n                this._resize();\n\n                this._progress(false);\n            },\n\n            destroy: function() {\n                Widget.fn.destroy.call(this);\n\n                this.dataSource.unbind(\"change\", this._refreshHandler);\n\n                this.form.find(\".k-pivot-setting\").off(ns);\n\n                this.rows.destroy();\n                this.columns.destroy();\n                this.measures.destroy();\n                this.treeView.destroy();\n\n                this.element = null;\n                this._refreshHandler = null;\n            }\n        });\n\n        function kpiMeasure(name, measure, type) {\n            return {\n                hierarchyUniqueName: name,\n                uniqueName: measure,\n                caption: measure,\n                measure: measure,\n                name: measure,\n                type: type,\n                kpi: true\n            };\n        }\n\n        function buildKPImeasures(node) {\n            var name = node.name;\n            return [\n                kpiMeasure(name, node.value, \"value\"),\n                kpiMeasure(name, node.goal, \"goal\"),\n                kpiMeasure(name, node.status, \"status\"),\n                kpiMeasure(name, node.trend, \"trend\")\n            ];\n        }\n\n        kendo.cssProperties.registerPrefix(\"HTMLChip\", \"k-chip-\");\n\n        kendo.cssProperties.registerValues(\"HTMLChip\", [{\n            prop: \"rounded\",\n            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n\n        ui.plugin(PivotConfigurator);\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}