{"version":3,"sources":["raw-js/kendo.taskboard.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendotaskboard","js","this","$","undefined$1","kendo","window","ui","Observable","encode","htmlEncode","extend","DOT","NS","CLICK","ACTION","preventDefault","ev","TaskBoardColumn","init","options","dataItem","that","_dataItem","sortableUniqueClass","sortableIdentifier","styles","sortableSuffix","_render","_attachEvents","states","isReorderable","_initSortable","fn","call","empty","container","addCard","cardHtml","append","edit","element","addClass","editColumn","_renderEditHeader","getDataItem","cards","children","template","data","headerText","ellipsis","getter","dataTextField","spacer","buttons","editTemplate","textbox","input","messages","newColumn","attr","actionButton","icon","spriteCssClass","text","command","html","renderButton","iconClass","fillMode","builtinButtons","name","rules","deleteColumn","defaultButtons","headerLabelId","guid","uid","css","width","header","cardsContainer","columnCards","appendTo","_renderHeader","_buildActionsHtml","setTimeout","find","trigger","actions","disabled","i","length","button","isPlainObject","Object","keys","_validateRules","tool","split","_actionClick","target","closest","value","_textboxBlur","on","bind","keyCode","ENTER","card","cardTitle","dirClass","isRtl","sortable","Sortable","ignore","ignoreDrag","connectWith","filter","hint","clone","dragHint","grabbingCursor","offsetWidth","height","offsetHeight","placeholder","dragPlaceholder","move","_move","start","_start","end","_end","change","_change","draggable","userEvents","unbind","_select","ignoreDragSelectors","event","is","columnElement","sender","parents","action","newIndex","oldIndex","destroy","off","TaskBoardNewColumn","taskboard","Column","NewColumn","jQuery","TaskBoardCard","resources","contentTemplate","hbox","title","link","selectable","dataTitleField","cardMenuButton","body","dataDescriptionField","cardMenuButtonTemplate","headerActions","flatButton","actionsIcon","categoryColor","moveCursor","cardMenu","_resources","borderDir","isDisabled","toggleClass","dataCategoryField","color","get","categoryBorder","isSelectable","key","resource","field","cardResources","multiple","dataSource","view","resourceIndex","cardResource","valuePrimitive","dataValueField","dataIndex","resourceColor","dataColorField","result","push","_buildTemplate","format","headerTemplate","bodyTemplate","Card","ContextMenu","TaskBoardCardMenu","_overrideTemplates","_extendItems","_onSelect","_onOpen","_focus","templates","sprite","defaultItems","editCard","deleteCard","events","concat","item","items","_append","_extendItem","isEmptyObject","args","CardMenu","TaskBoardCommand","Class","_confirm","content","okText","cancel","confirm","taskboardOptions","editable","confirmation","fakePromise","Deferred","resolve","kendoConfirm","buttonLayout","open","AddColumnCommand","exec","column","columns","each","index","enableByColumn","addColumn","EditColumnCommand","DeleteColumnCommand","columnDS","columnsDataSource","deleteColumnConfirm","done","cancelChanges","remove","sync","SaveColumnCommand","columnSettings","val","set","CancelEditColumnCommand","MoveFocusCommand","columnIndex","cardElement","currentColumnIndex","direction","Math","max","min","_getColumnByElement","eq","_moveFromCardFocus","focusCard","currentIndex","seekFocusableCard","_getFocusableCard","focus","lastIndex","focusable","TaskBoardBaseCardCommand","_updateOrder","nextCard","dataOrderField","currentCard","cardIndex","map","idx","prevCard","SelectCardCommand","SaveChangesCommand","taskBoardOptions","receivedStatus","dataStatusField","targetColumn","_getColumn","activeElm","document","activeElement","pane","form","validate","then","DeleteCardCommand","deleteCardConfirm","fail","MoveCardCommand","EditCardCommand","_openPane","AddCardCommand","OpenPaneCommand","ClosePaneCommand","_closePane","SearchCommand","filters","searchOptions","search","operator","fields","_buildFilters","logic","Command","commands","Form","TaskBoardPane","_commandClick","fieldFormat","close","buttonTemplate","themeColor","delete","saveChanges","create","buttonsContainer","footerActions","footerActionButtons","_renderContent","_buildButtonsHtml","_buildHeaderTemplate","primary","TaskBoardPreviewPane","previewPane","preview","TaskBoardEditPane","formSettings","label","buttonsTemplate","formLabelId","focusFirst","formData","TaskBoardCreatePane","columnStatusField","firstColumn","at","status","add","createNewCard","Pane","panes","Preview","Edit","Create","baseButton","primaryButton","Keyboard","register","registerShortcut","selector","shortcut","isNaN","toUpperCase","charCodeAt","ctrlKey","shiftKey","altKey","handler","_handler","shortcuts","_getAction","_trigger","_compareShortcut","_getShortcutModifier","navigator","platform","indexOf","metaKey","KeyboardManager","TaskBoardStyles","wrapper","toolbar","columnsContainer","selected","Widget","DataSource","isArray","Array","GENERIC","MOVE","MOVE_START","MOVE_END","SELECT","EXECUTE","CHANGE","ERROR","DATABINDING","DATABOUND","COLUMNSDATABINDING","COLUMNSDATABOUND","TaskBoard","_sortableIdentifier","_wrapper","_columnsDataSource","_initResources","_dataSource","_initToolbar","_initCardMenu","_initKeyboard","autoBind","load","notify","reorderable","previewCard","description","defaultTools","type","overflow","component","componentOptions","commandOn","_columns","merge","itemsByStatus","itemsByColumn","columnElm","fetchPromises","_progress","fetch","when","apply","read","cardElm","getByUid","columnDataItem","columnByStatus","select","toggle","removeClass","_extendExecArgs","saveCard","model","_buildStates","_createNewModel","insert","before","executeCommand","saveColumn","keyboardManager","enable","readOnly","readOnlyByColumn","setDataSource","setColumnsDataSource","_renderCards","after","outerWidth","parseInt","ESC","headerElm","contentElm","colsContainer","tools","toolbarElm","toolbarOptions","_processTools","parentMessages","ToolBar","_toolbarClick","isDefaultTool","forEach","t","temp","hidden","_isToolEnabled","toolName","found","isEditable","_isEditable","_isReorderable","_isSelectable","isReadOnly","isSearchable","_isSearchable","notLocalColumns","transport","LocalTransport","support","commandName","commandOptions","console","warn","cardDataItem","draggableEvent","elm","ns","sort","dir","schema","defaultValue","_columnsChangeHandler","_columnsErrorHandler","_columnsDataSourceChange","_error","statusField","_moveEnd","_moveStart","_changeOrder","_tabindex","_changeHandler","_errorHandler","_clearColumns","_renderCard","cardMenuOptions","showOn","alignToAnchor","_addResource","_resourceDataSource","resourceDS","progress","_registerShortcuts","DELETE","UP","DOWN","LEFT","RIGHT","plugin"],"mappings":"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","file":"kendo.taskboard.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.sortable.js'), require('kendo.html.button.js'), require('kendo.core.js'), require('kendo.icons.js'), require('kendo.menu.js'), require('kendo.dialog.js'), require('kendo.form.js'), require('kendo.data.js'), require('kendo.toolbar.js'), require('kendo.textbox.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.sortable', 'kendo.html.button', 'kendo.core', 'kendo.icons', 'kendo.menu', 'kendo.dialog', 'kendo.form', 'kendo.data', 'kendo.toolbar', 'kendo.textbox'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendotaskboard = global.kendotaskboard || {}, global.kendotaskboard.js = factory()));\n})(this, (function () {\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            Observable = kendo.Observable,\n            encode = kendo.htmlEncode,\n            extend = $.extend,\n\n            DOT = \".\",\n            NS = DOT + \"kendoTaskBoardColumn\",\n\n            CLICK = \"click\",\n            BLUR = \"blur\",\n\n            MOVE = \"move\",\n            MOVE_START = \"moveStart\",\n            MOVE_END = \"moveEnd\",\n            CHANGE = \"change\",\n            ACTION = \"action\";\n\n        var TaskBoardColumnStyles = {\n            element: \"k-taskboard-column\",\n            header: \"k-taskboard-column-header\",\n            headerText: \"k-taskboard-column-header-text\",\n            ellipsis: \"k-text-ellipsis\",\n            spacer: \"k-spacer\",\n            actions: \"k-taskboard-column-header-actions\",\n            cardsContainer: \"k-taskboard-column-cards-container\",\n            columnCards: \"k-taskboard-column-cards\",\n            actionButton: \"k-taskboard-column-action-button\",\n            card: \"k-taskboard-card\",\n            cardTitle: \"k-card-title\",\n            sortableSuffix: \"-kendosortable\",\n            textbox: \"k-textbox k-input k-input-md k-rounded-md k-input-solid\",\n            input: \"k-input-inner\",\n            newColumn: \"k-taskboard-column-new\",\n            editColumn: \"k-taskboard-column-edit\",\n            disabled: \"k-disabled\",\n            dragPlaceholder: \"k-taskboard-drag-placeholder\",\n            dragHint: \"k-taskboard-drag-hint\",\n            ignoreDrag: \"k-taskboard-drag-ignore\",\n            grabbingCursor: \"k-cursor-grabbing\"\n        };\n\n        function preventDefault(ev) { ev.preventDefault(); }\n\n        var TaskBoardColumn = Observable.extend({\n            init: function(options, dataItem) {\n                var that = this;\n\n                that._dataItem = dataItem;\n                that.options = extend(true, {}, options);\n\n                that.sortableUniqueClass = that.options.sortableIdentifier + TaskBoardColumn.styles.sortableSuffix;\n                that._render();\n                that._attachEvents();\n\n                if (options.states.isReorderable) {\n                    that._initSortable();\n                }\n\n                Observable.fn.init.call(that);\n            },\n\n            empty: function() {\n                var that = this;\n                that.container.empty();\n            },\n\n            addCard: function(cardHtml) {\n                var that = this;\n                that.container.append(cardHtml);\n            },\n\n            edit: function() {\n                var that = this,\n                    styles = TaskBoardColumn.styles;\n\n                that.element.addClass(styles.editColumn);\n                that._renderEditHeader();\n            },\n\n            getDataItem: function() {\n                return this._dataItem;\n            },\n\n            cards: function() {\n                var that = this;\n\n                return that.container.children();\n            },\n\n            template: (data) => `<div class=\"${encode(data.styles.headerText)} ${encode(data.styles.ellipsis)}\">${kendo.getter(data.dataTextField)(data)}</div>` +\n                      `<span class=\"${encode(data.styles.spacer)}\"></span>` +\n                      `${data.buttons}`,\n\n            editTemplate: (data) => `<div class=\"${encode(data.styles.headerText)} ${encode(data.styles.ellipsis)}\">` +\n                            `<span class=\"${encode(data.styles.textbox)}\">` +\n                                `<input class=\"${encode(data.styles.input)}\" placeholder=\"${encode(kendo.getter(data.dataTextField)(data) ? data.messages.editColumn : data.messages.newColumn)}\" ${encode(kendo.attr(\"command\"))}=\"SaveColumnCommand\" value=\"${encode(kendo.getter(data.dataTextField)(data))}\" />` +\n                            '</span>' +\n                            '</div>' +\n                            `<span class=\"${encode(data.styles.spacer)}\"></span>` +\n                            `${data.buttons}`,\n\n            actionButton: ({ styles, icon, spriteCssClass, text, command, options }) =>\n                        kendo.html.renderButton(`<button class=\"${encode(styles.actionButton)}\" title=\"${encode(text)}\" ${encode(kendo.attr(\"command\"))}=\"${encode(command)}\" ${options ? encode(kendo.attr('options')) + \"=\" + encode(options) : \"\"}></button>`, {\n                            icon: encode(icon),\n                            iconClass: `k-button-icon ${encode(spriteCssClass)}`,\n                            fillMode: \"flat\"\n                        }),\n\n            builtinButtons: {\n                \"editColumn\": { name: \"editColumn\", icon: \"pencil\", text: \"Edit Column\", command: \"EditColumnCommand\", rules: \"isEditable\" },\n                \"addCard\": { name: \"addCard\", icon: \"plus\", text: \"Add Card\", command: \"AddCardCommand\", rules: \"isEditable\" },\n                \"deleteColumn\": { name: \"deleteColumn\", icon: \"x\", text: \"Delete Column\", command: \"DeleteColumnCommand\", rules: \"isEditable\" }\n            },\n\n            defaultButtons: [ \"editColumn\", \"addCard\", \"deleteColumn\" ],\n\n            _render: function() {\n                var that = this,\n                    styles = TaskBoardColumn.styles,\n                    headerLabelId = kendo.guid(),\n                    element = $(\"<div class='\" + styles.element + \"'></div>\")\n                        .attr(kendo.attr(\"uid\"), that._dataItem.uid)\n                        .css({\n                            width: that.options.width\n                        })\n                        .attr(\"role\", \"list\").attr(\"aria-labelledby\", headerLabelId),\n                    header = $(\"<div class='\" + styles.header + \"'></div>\"),\n                    cardsContainer = $(\"<div class='\" + styles.cardsContainer + \"'></div>\"),\n                    columnCards = $(\"<div class='\" + styles.columnCards + \"'></div>\");\n\n                that.header = header.appendTo(element).attr(\"id\", headerLabelId);\n\n                that._renderHeader();\n\n                cardsContainer.appendTo(element);\n                that.container = columnCards\n                                    .appendTo(cardsContainer)\n                                    .addClass(that.sortableUniqueClass);\n\n                that.element = element;\n            },\n\n            _renderHeader: function() {\n                var that = this,\n                    styles = TaskBoardColumn.styles,\n                    options = that.options,\n                    template = options.template ? options.template : that.template;\n\n                that.header.append(kendo.template(template)(extend(true, {}, {\n                    styles: styles,\n                    buttons: that._buildActionsHtml(),\n                    dataTextField: options.dataTextField\n                }, that._dataItem)));\n            },\n\n            _renderEditHeader: function() {\n                var that = this,\n                    styles = TaskBoardColumn.styles,\n                    options = that.options,\n                    template = options.editTemplate ? options.editTemplate : that.editTemplate;\n\n                that.header.html(\"\");\n\n                that.header.append(kendo.template(template)(extend(true, {}, {\n                    styles: styles,\n                    messages: options.messages,\n                    buttons: that._buildActionsHtml(),\n                    dataTextField: options.dataTextField\n                }, that._dataItem)));\n\n                setTimeout(function() {\n                    that.header.find(\"input\").trigger(\"focus\");\n                }, 0);\n\n                that.header.find(DOT + styles.actions).addClass(styles.disabled);\n            },\n\n            _buildActionsHtml: function() {\n                var that = this,\n                    options = that.options,\n                    messages = options.messages,\n                    buttons = options.buttons || that.defaultButtons,\n                    styles = TaskBoardColumn.styles,\n                    html = \"<div class='\" + styles.actions + \"'>\";\n\n                for (var i = 0; i < buttons.length; i++) {\n                    var button = buttons[i];\n                    button = ($.isPlainObject(button) && Object.keys(button).length === 1 && button.name) ? button.name : button;\n\n                    if (typeof button === \"string\") {\n                        button = extend(true, {},\n                            that.builtinButtons[button] || { spriteCssClass: button, command: button + \"Command\" },\n                            { text: messages[button] || button }\n                        );\n                    } else if ($.isPlainObject(button) && button.name) {\n                        button = extend(true, button,\n                            { text: messages[button.name] }\n                        );\n                    }\n\n                    if (!that._validateRules(button)) {\n                        continue;\n                    }\n\n                    button.spriteCssClass = button.spriteCssClass || \"\";\n\n                    html += kendo.template(that.actionButton)(extend(true, {}, {\n                        styles: styles,\n                        options: false\n                    }, button));\n                }\n\n                html += \"</div>\";\n\n                return html;\n            },\n\n            _validateRules: function(tool) {\n                var that = this,\n                    states = that.options.states,\n                    rules = tool.rules ? tool.rules.split(\";\") : [];\n\n                if (!rules.length) {\n                    return true;\n                }\n\n                for (var i = 0; i < rules.length; i++) {\n                    if (!states[rules[i]]) {\n                        return false;\n                    }\n                }\n\n                return true;\n            },\n\n            _actionClick: function(ev) {\n                var that = this,\n                    target = $(ev.target).closest(\"[\" + kendo.attr(\"command\") + \"]\"),\n                    command = target.attr(kendo.attr(\"command\")),\n                    options = target.attr(kendo.attr(\"options\"));\n\n                options = typeof(options) === \"string\" ? { value: options } : options;\n\n                if (!command) {\n                    return;\n                }\n\n                that.trigger(ACTION, {\n                    command: command,\n                    options: extend({ target: target }, options)\n                });\n            },\n\n            _textboxBlur: function(ev) {\n                var that = this,\n                    target = $(ev.target).closest(\"[\" + kendo.attr(\"command\") + \"]\"),\n                    command = target.attr(kendo.attr(\"command\")),\n                    options = target.attr(kendo.attr(\"options\"));\n\n                options = typeof(options) === \"string\" ? { value: options } : options;\n\n                if (!command) {\n                    return;\n                }\n\n                that.trigger(ACTION, {\n                    command: command,\n                    options: extend({ target: target }, options)\n                });\n            },\n\n            _attachEvents: function() {\n                var that = this;\n\n                that.header.on(CLICK + NS,\n                    DOT + TaskBoardColumn.styles.actionButton,\n                    that._actionClick.bind(that));\n\n                that.header.on(BLUR + NS,\n                    DOT + TaskBoardColumn.styles.input,\n                    that._textboxBlur.bind(that));\n\n                that.header.on(\"keyup\" + NS,\n                    DOT + TaskBoardColumn.styles.input,\n                    function(ev) {\n                        if (ev.keyCode === kendo.keys.ENTER) {\n                            that._textboxBlur(ev);\n                        }\n                    }\n                );\n\n                if (that.container) {\n                    that.container.on(CLICK + NS,\n                        DOT + TaskBoardColumn.styles.card + \" [\" + kendo.attr(\"command\") + \"]\",\n                        that._actionClick.bind(that));\n\n                    that.container.on(CLICK + NS,\n                        DOT + TaskBoardColumn.styles.card + \" a.\" + TaskBoardColumn.styles.cardTitle,\n                        preventDefault);\n\n                }\n            },\n\n            _initSortable: function() {\n                var that = this,\n                    isRtl = that.options.states.isRtl,\n                    dirClass = isRtl ? \" k-rtl\" : \"\",\n                    container = that.container;\n\n                if (!that.container) {\n                    return;\n                }\n\n                that.sortable = new ui.Sortable(container, {\n                    ignore: DOT + TaskBoardColumn.styles.ignoreDrag + \" *\",\n                    connectWith: DOT + that.sortableUniqueClass,\n                    filter: DOT + TaskBoardColumn.styles.card,\n                    hint: function(element) {\n                        return element.clone()\n                            .addClass(TaskBoardColumn.styles.dragHint + \" \" + TaskBoardColumn.styles.grabbingCursor + dirClass)\n                            .css({\n                            width: element[0].offsetWidth,\n                            height: element[0].offsetHeight\n                        });\n                    },\n                    placeholder: function(element) {\n                        return $(\"<div></div>\")\n                            .addClass(TaskBoardColumn.styles.dragPlaceholder)\n                            .css({\n                                height: element[0].offsetHeight\n                            });\n                    },\n                    move: that._move.bind(that),\n                    start: that._start.bind(that),\n                    end: that._end.bind(that),\n                    change: that._change.bind(that)\n                });\n\n                that.sortable.draggable.userEvents.unbind(\"select\");\n                that.sortable.draggable.userEvents.bind(\"select\", that._select.bind(that));\n            },\n\n            _select: function(ev) {\n                var ignoreDragSelectors = TaskBoardColumn.ignoreDragSelectors;\n                var target = $(ev.event.target);\n\n                for (var i = 0; i < ignoreDragSelectors.length; i++) {\n                    if (target.is(ignoreDragSelectors[i])) {\n                        ev.preventDefault();\n                        break;\n                    }\n                }\n            },\n\n            _move: function(ev) {\n                extend(ev, {\n                    columnElement: ev.sender.element.parents(DOT + TaskBoardColumn.styles.element)\n                });\n                this.trigger(MOVE, ev);\n            },\n\n            _start: function(ev) {\n                extend(ev, {\n                    columnElement: ev.sender.element.parents(DOT + TaskBoardColumn.styles.element)\n                });\n                this.trigger(MOVE_START, ev);\n            },\n\n            _end: function(ev) {\n                extend(ev, {\n                    columnElement: ev.sender.element.parents(DOT + TaskBoardColumn.styles.element)\n                });\n                this.trigger(MOVE_END, ev);\n            },\n\n            _change: function(ev) {\n                var that = this;\n\n                extend(ev, {\n                    columnElement: ev.sender.element.parents(DOT + TaskBoardColumn.styles.element)\n                });\n\n                that.trigger(CHANGE, ev);\n\n                if ((ev.action === \"receive\" && ev.newIndex >= 0) || (ev.action === \"sort\" && ev.newIndex !== ev.oldIndex)) {\n                    that.trigger(ACTION, {\n                        command: \"MoveCardCommand\",\n                        options: ev\n                    });\n                }\n            },\n\n            destroy: function() {\n                var that = this;\n\n                that.header.off(NS);\n                that.container.off(NS);\n\n                if (that.sortable) {\n                    that.sortable.destroy();\n                }\n            }\n        });\n\n        var TaskBoardNewColumn = TaskBoardColumn.extend({\n            _render: function() {\n                var that = this,\n                    styles = TaskBoardColumn.styles,\n                    element = $(\"<div class='\" + styles.element + \"'></div>\").addClass(styles.newColumn).attr(kendo.attr(\"uid\"), that._dataItem.uid),\n                    header = $(\"<div class='\" + styles.header + \"'></div>\");\n\n                that.header = header.appendTo(element);\n\n                that._renderEditHeader();\n\n                that.element = element;\n            }\n        });\n\n        extend(kendo.ui, {\n            taskboard: {\n                Column: TaskBoardColumn,\n                NewColumn: TaskBoardNewColumn\n            }\n        });\n\n        extend(true, kendo.ui.taskboard.Column, {\n            styles: TaskBoardColumnStyles,\n            ignoreDragSelectors: [\"img\"]\n        });\n\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            Observable = kendo.Observable,\n            encode = kendo.htmlEncode,\n            extend = $.extend;\n\n        var TaskBoardCardStyles = {\n            element: \"k-taskboard-card\",\n            card: \"k-card\",\n            header: \"k-card-header\",\n            hbox: \"k-hbox\",\n            title: \"k-card-title\",\n            link: \"k-link\",\n            spacer: \"k-spacer\",\n            button: \"k-button\",\n            cardMenuButton: \"k-taskboard-card-menu-button k-icon-button\",\n            flatButton: \"k-button-md k-rounded-md k-button-flat k-button-flat-base\",\n            body: \"k-card-body\",\n            actionsIcon: \"more-vertical\",\n            moveCursor: \"k-cursor-move\",\n            categoryBorder: \"k-taskboard-card-category\",\n            headerActions: \"k-card-header-actions\",\n            disabled: \"k-disabled\"\n        };\n\n        var TaskBoardCard = Observable.extend({\n            init: function(options, dataItem, resources) {\n                var that = this;\n\n                that._dataItem = dataItem;\n                that.resources = resources;\n\n                that.options = extend(true, {}, options);\n\n                that._render();\n\n                Observable.fn.init.call(that);\n            },\n\n            contentTemplate: (data) => `<div class=\"${encode(data.styles.header)} ${encode(data.styles.hbox)}\">` +\n                `<a class=\"${encode(data.styles.title)} ${encode(data.styles.link)}\" href=\"#\" ${data.selectable ? kendo.attr(\"command\") + '=SelectCardCommand' : ''}>${encode(kendo.getter(data.dataTitleField)(data))}</a>` +\n                `<span class=\"${encode(data.styles.spacer)}\"></span>` +\n                `${data.cardMenuButton}` +\n            '</div>' +\n            `<div class=\"${encode(data.styles.body)}\"><p>${encode(kendo.getter(data.dataDescriptionField)(data))}</p></div>`,\n\n            cardMenuButtonTemplate: ({ styles }) => `<div class=\"${encode(styles.headerActions)}\"><button aria-label=\"menu\" class=\"${encode(styles.button)} ${encode(styles.flatButton)} ${encode(styles.cardMenuButton)}\">` +\n                                        kendo.ui.icon({ icon: encode(styles.actionsIcon), iconClass: \"k-button-icon\" }) +\n                                    '</button></div>',\n\n            _render: function() {\n                var that = this,\n                    options = that.options,\n                    styles = TaskBoardCard.styles,\n                    template = options.template || that.contentTemplate,\n                    element = $(\"<div class='\" + styles.element + \" \" + styles.card + \" \" + styles.moveCursor + \"'></div>\"),\n                    cardMenuButtonTemplate = options.cardMenu ? that.cardMenuButtonTemplate : \"\",\n                    resources = that._resources(that._dataItem),\n                    borderDir = options.states.isRtl ? \"borderRightColor\" : \"borderLeftColor\",\n                    categoryColor;\n\n                element\n                    .attr(kendo.attr(\"uid\"), that._dataItem.uid)\n                    .attr(\"aria-disabled\", !options.states.isDisabled)\n                    .attr(\"role\", \"listitem\")\n                    .toggleClass(styles.disabled, options.states.isDisabled);\n\n                categoryColor = (resources[options.dataCategoryField] && resources[options.dataCategoryField].color) ||\n                                    that._dataItem.get(options.dataCategoryField);\n\n                if (categoryColor) {\n                    element.addClass(styles.categoryBorder).css(borderDir, categoryColor);\n                }\n\n                element.append(kendo.template(template)(extend(true, {}, {\n                    styles: styles,\n                    cardMenuButton: kendo.template(cardMenuButtonTemplate)({ styles: styles }),\n                    selectable: options.states.isSelectable,\n                    resources: resources,\n                    dataTitleField: options.dataTitleField,\n                    dataDescriptionField: options.dataDescriptionField\n                }, that._dataItem)));\n\n                that.element = element;\n            },\n\n            _resources: function(card) {\n                var that = this,\n                    resources = {};\n\n                if (!that.resources) {\n                    return resources;\n                }\n\n                for (var key in that.resources) {\n                    var resource = that.resources[key];\n                    var field = resource.field;\n                    var cardResources = kendo.getter(field)(card);\n\n                    if (!cardResources) {\n                        continue;\n                    }\n\n                    if (!resource.multiple) {\n                        cardResources = [cardResources];\n                    }\n\n                    var data = resource.dataSource.view();\n\n                    for (var resourceIndex = 0; resourceIndex < cardResources.length; resourceIndex++) {\n                        var cardResource = null;\n\n                        var value = cardResources[resourceIndex];\n\n                        if (!resource.valuePrimitive) {\n                            value = kendo.getter(resource.dataValueField)(value);\n                        }\n\n                        for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n                            if (data[dataIndex].get(resource.dataValueField) == value) {\n                                cardResource = data[dataIndex];\n                                break;\n                            }\n                        }\n\n                        if (cardResource !== null) {\n                            var resourceColor = kendo.getter(resource.dataColorField)(cardResource);\n                            var result = {\n                                field: resource.field,\n                                title: resource.title,\n                                name: resource.name,\n                                text: kendo.getter(resource.dataTextField)(cardResource),\n                                value: value,\n                                color: resourceColor\n                            };\n\n                            if (resource.multiple) {\n                                if (resources[resource.field]) {\n                                    resources[resource.field].push(result);\n                                } else {\n                                    resources[resource.field] = [result];\n                                }\n                            } else {\n                                resources[resource.field] = result;\n                            }\n                        }\n                    }\n                }\n                return resources;\n            },\n\n            _buildTemplate: function() {\n                var that = this,\n                    options = that.options,\n                    headerTemplate = kendo.format(that.headerTemplate, options.dataTitleField),\n                    bodyTemplate = kendo.format(that.bodyTemplate, options.dataDescriptionField);\n\n                return headerTemplate + bodyTemplate;\n            }\n        });\n\n        extend(kendo.ui.taskboard, {\n            Card: TaskBoardCard\n        });\n\n        extend(true, kendo.ui.taskboard.Card, { styles: TaskBoardCardStyles });\n\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            extend = $.extend,\n            template = kendo.template,\n            ContextMenu = kendo.ui.ContextMenu,\n            encode = kendo.htmlEncode,\n\n            ACTION = \"action\";\n\n        var TaskBoardCardMenu = ContextMenu.extend({\n            init: function(element, options) {\n                var that = this;\n\n                ContextMenu.fn.init.call(that, element, options);\n\n                that._overrideTemplates();\n                that._extendItems();\n\n                that.bind(\"select\", that._onSelect.bind(that));\n                that.bind(\"open\", that._onOpen.bind(that));\n                that.bind(\"activate\", that._focus.bind(that));\n            },\n\n            _overrideTemplates: function() {\n                this.templates.sprite = ({ icon, spriteCssClass }) => `${(icon || spriteCssClass) ? kendo.ui.icon({ icon: encode(icon || \"\"), iconClass: encode(spriteCssClass || \"\") }) : ''}`;\n            },\n\n            defaultItems: {\n                \"editCard\": { name: \"editCard\", text: \"Edit card\", icon: \"pencil\", command: \"EditCardCommand\", rules: \"isEditable\" },\n                \"deleteCard\": { name: \"deleteCard\", text: \"Delete card\", icon: \"trash\", command: \"DeleteCardCommand\", rules: \"isEditable\" }\n            },\n\n            events: ContextMenu.fn.events.concat([\n                ACTION\n            ]),\n\n            _extendItems: function() {\n                var that = this,\n                    items = that.options.items,\n                    item, isBuiltInTool;\n\n                if (items && items.length) {\n                    for (var i = 0; i < items.length; i++) {\n                        item = items[i];\n                        isBuiltInTool = $.isPlainObject(item) && Object.keys(item).length === 1 && item.name;\n\n                        if (isBuiltInTool) {\n                            item = item.name;\n                        }\n\n                        if ($.isPlainObject(item)) {\n                            that._append(item);\n                        } else if (that.defaultItems[item]) {\n                            item = that.defaultItems[item];\n                            that._append(item);\n                        } else if (typeof(item) === \"string\") {\n                            item = { name: item, text: item, spriteCssClass: item, command: item + \"Command\" };\n                            that._append(item);\n                        }\n                    }\n                } else {\n                    for (var key in that.defaultItems) {\n                        item = that.defaultItems[key];\n                        that._append(item);\n                    }\n                }\n            },\n\n            _append: function(item) {\n                var that = this;\n\n                that._extendItem(item);\n\n                if (that._validateRules(item)) {\n                    that.append(item);\n                }\n            },\n\n            _extendItem: function(item) {\n                var that = this,\n                    messages = that.options.messages,\n                    attr = {};\n\n                attr[kendo.attr(\"command\")] = item.command;\n\n                if (item.options) {\n                    attr[kendo.attr(\"options\")] = item.options;\n                }\n\n                extend(item, {\n                    text: messages[item.name],\n                    icon: item.icon || \"\",\n                    spriteCssClass: item.spriteCssClass || \"\",\n                    attr: attr,\n                    uid: kendo.guid()\n                });\n            },\n\n            _validateRules: function(tool) {\n                var that = this,\n                    states = that.options.states,\n                    rules = tool.rules ? tool.rules.split(\";\") : [];\n\n                if (!rules.length) {\n                    return true;\n                }\n\n                for (var i = 0; i < rules.length; i++) {\n                    if (!states[rules[i]]) {\n                        return false;\n                    }\n                }\n\n                return true;\n            },\n\n            _onSelect: function(ev) {\n                var command = $(ev.item).attr(kendo.attr(\"command\")),\n                    options = $(ev.item).attr(kendo.attr(\"options\")),\n                    target = $(ev.target);\n\n                options = typeof(options) === \"string\" ? { value: options } : options;\n\n                if (!command) {\n                    return;\n                }\n\n                this.action({\n                    command: command,\n                    options: extend({ target: target }, options)\n                });\n            },\n\n            _onOpen: function(ev) {\n                var menu = ev.sender,\n                    items = menu.options.items;\n\n                if (!items && $.isEmptyObject(this.defaultItems)) {\n                    ev.preventDefault();\n                }\n            },\n\n            _focus: function(ev) {\n                if (ev.sender) {\n                    ev.sender.element.trigger(\"focus\");\n                }\n            },\n\n            action: function(args) {\n                this.trigger(ACTION, args);\n            }\n        });\n\n        extend(kendo.ui.taskboard, {\n            CardMenu: TaskBoardCardMenu\n        });\n\n        })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n            var kendo = window.kendo,\n                extend = $.extend,\n                isPlainObject = $.isPlainObject,\n                Class = kendo.Class;\n\n            var TaskBoardCommand = Class.extend({\n                init: function(options) {\n                    this.options = options;\n                    this.taskboard = options.taskboard;\n                },\n                _confirm: function(title, content, okText, cancel) {\n                    var that = this,\n                        taskboard = that.taskboard,\n                        taskboardOptions = taskboard.options,\n                        confirm;\n\n                    if (isPlainObject(taskboardOptions.editable) && taskboardOptions.editable.confirmation === false ) {\n                        var fakePromise = $.Deferred();\n                        fakePromise.resolve();\n                        return fakePromise;\n                    }\n\n                    confirm = $(\"<div></div>\").kendoConfirm(extend({}, {\n                        title: title,\n                        content: content,\n                        messages: {\n                            okText: okText,\n                            cancel: cancel\n                        },\n                        buttonLayout: \"normal\"\n                    })).data(\"kendoConfirm\");\n\n                    confirm.open();\n\n                    setTimeout(function() {\n                        confirm.element.trigger(\"focus\");\n                    });\n\n                    return confirm.result;\n                }\n            });\n\n            // Column commands\n            var AddColumnCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        taskboard = that.taskboard;\n\n                    if (taskboard.trigger(\"editColumn\", { column: null })) {\n                        return;\n                    }\n\n                    taskboard.columns().each(function(index, column) {\n                        taskboard.enableByColumn(column, false);\n                    });\n                    taskboard.addColumn();\n                }\n            });\n\n            var EditColumnCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        options = that.options,\n                        taskboard = that.taskboard;\n\n                    if (taskboard.trigger(\"editColumn\", { column: options.column })) {\n                        return;\n                    }\n\n                    taskboard.columns().each(function(index, column) {\n                        taskboard.enableByColumn(column, false);\n                    });\n                    taskboard.editColumn(options.columnElement);\n                }\n            });\n\n            var DeleteColumnCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        options = that.options,\n                        taskboard = that.taskboard,\n                        taskboardOptions = taskboard.options,\n                        messages = taskboardOptions.messages,\n                        columnDS = taskboard.columnsDataSource;\n\n                    var result = that._confirm(messages.deleteColumn, messages.deleteColumnConfirm, messages[\"delete\"], messages.cancel);\n\n                    result.done(function() {\n                        if (taskboard.trigger(\"deleteColumn\", { column: options.column })) {\n                            taskboard.dataSource.cancelChanges();\n                            return;\n                        }\n\n                        columnDS.remove(options.column);\n                        columnDS.sync();\n                    });\n                }\n            });\n\n            var SaveColumnCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        options = that.options,\n                        taskboard = that.taskboard,\n                        columnSettings = taskboard.options.columnSettings,\n                        columnDS = taskboard.columnsDataSource,\n                        column = options.column,\n                        text = options.target.val();\n\n                    if (taskboard.trigger(\"saveColumn\", { column: options.column })) {\n                        taskboard.dataSource.cancelChanges();\n                        return;\n                    }\n\n                    column.set(columnSettings.dataTextField, text);\n                    columnDS.sync();\n                }\n            });\n\n            var CancelEditColumnCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        taskboard = that.taskboard,\n                        columnDS = taskboard.columnsDataSource;\n\n                    columnDS.cancelChanges();\n                }\n            });\n\n            //Move focus command\n            var MoveFocusCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        taskboard = that.taskboard,\n                        options = that.options,\n                        cardElement = options.cardElement,\n                        columnElement = options.columnElement,\n                        columns = taskboard.columns(),\n                        currentColumnIndex = columnElement.index(),\n                        direction = options.value,\n                        columnIndex, column;\n\n                    switch (direction) {\n                        case \"left\":\n                            columnIndex = Math.max(0, currentColumnIndex - 1);\n                            break;\n                        case \"right\":\n                            columnIndex = Math.min(columns.length - 1, currentColumnIndex + 1);\n                            break;\n                        default:\n                            columnIndex = currentColumnIndex;\n                            break;\n                    }\n\n                    that.columns = columns;\n                    that.columnIndex = columnIndex;\n                    that.column = column = taskboard._getColumnByElement(columns.eq(columnIndex));\n                    that.cards = column.cards();\n\n                    if (cardElement) {\n                        that._moveFromCardFocus(direction, cardElement);\n                    } else if (columnElement && direction === \"down\") {\n                        that.cards.eq(0).trigger(\"focus\");\n                    } else {\n                        columns.eq(columnIndex).trigger(\"focus\");\n                    }\n                },\n                _moveFromCardFocus: function(direction, cardElement) {\n                    var that = this,\n                        currentIndex = cardElement.index(),\n                        focusCard, index, seekFocusableCard = false;\n\n                    switch (direction) {\n                        case \"up\":\n                            index = currentIndex - 1;\n                            break;\n                        case \"down\":\n                            index = currentIndex + 1;\n                            break;\n                        default:\n                            seekFocusableCard = true;\n                            index = currentIndex;\n                            break;\n                    }\n\n                    focusCard = that.cards.eq(index);\n\n                    if (!focusCard.length && seekFocusableCard) {\n                        focusCard = that._getFocusableCard(index, direction);\n                    }\n\n                    if (index >= 0) {\n                        focusCard.trigger(\"focus\");\n                    } else {\n                        that.options.columnElement.focus();\n                    }\n                },\n                _getFocusableCard: function(index, direction) {\n                    var that = this,\n                        lastIndex = that.cards.length - 1,\n                        focusable = that.cards.eq(Math.min(index, lastIndex));\n\n                    if (focusable.length) {\n                        return focusable;\n                    }\n\n                    if (that.columnIndex <= 0 || that.columnIndex >= that.columns.length - 1) {\n                        return;\n                    }\n\n                    switch (direction) {\n                        case \"left\":\n                            that.columnIndex = Math.max(0, that.columnIndex - 1);\n                            break;\n                        case \"right\":\n                            that.columnIndex = Math.min(that.columns.length - 1, that.columnIndex + 1);\n                            break;\n                    }\n\n                    that.column = that.taskboard._getColumnByElement(that.columns.eq(that.columnIndex));\n                    that.cards = that.column.cards();\n\n                    return that._getFocusableCard(index, direction);\n\n                }\n            });\n\n            // Card commands\n            var TaskBoardBaseCardCommand = TaskBoardCommand.extend({\n                _updateOrder: function(column, currentIndex) {\n                    var that = this,\n                        taskboard = that.taskboard,\n                        taskBoardOptions = taskboard.options,\n                        dataOrderField = taskBoardOptions.dataOrderField,\n                        options = that.options,\n                        currentCard = options.card,\n                        cardIndex = options.cardElement ? options.cardElement.index() : column.cards().length,\n                        newIndex = currentIndex,\n                        cards = column.cards().map(function(idx, card) {\n                            return taskboard.dataItem(card);\n                        }),\n                        prevCard = cards[cardIndex - 1],\n                        nextCard;\n\n                        currentCard.set(dataOrderField, newIndex);\n\n                        if (prevCard && prevCard.get(dataOrderField) >= currentCard.get(dataOrderField)) {\n                            currentCard.set(dataOrderField, prevCard.get(dataOrderField) + 1);\n                        }\n\n                        for (var i = newIndex + 1; i < cards.length; i++) {\n                            nextCard = cards[i];\n\n                            if (nextCard.get(dataOrderField) <= currentCard.get(dataOrderField)) {\n                                nextCard.set(dataOrderField, currentCard.get(dataOrderField) + 1);\n                                currentCard = nextCard;\n                            } else {\n                                break;\n                            }\n                        }\n                }\n            });\n\n            var SelectCardCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        taskboard = that.taskboard,\n                        options = that.options,\n                        cardElement = options.cardElement;\n\n                    taskboard._select(cardElement, true);\n                    cardElement.focus();\n                }\n            });\n\n            var SaveChangesCommand = TaskBoardBaseCardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        taskboard = that.taskboard,\n                        taskBoardOptions = taskboard.options,\n                        options = that.options,\n                        receivedStatus = options.card.get(taskBoardOptions.dataStatusField),\n                        targetColumn = taskboard._getColumn(receivedStatus),\n                        activeElm = $(document.activeElement);\n\n                    if (activeElm.length) {\n                        activeElm.trigger(\"change\");\n                    }\n\n                    if (taskboard.pane && taskboard.pane.form && !taskboard.pane.form.validate()) {\n                        return;\n                    }\n\n                    if (taskboard.trigger(\"saveCard\", { card: options.card })) {\n                        taskboard.dataSource.cancelChanges();\n                        return;\n                    }\n\n                    if (targetColumn && taskBoardOptions.dataOrderField) {\n                        that._updateOrder(targetColumn, options.card.get(taskBoardOptions.dataOrderField));\n                    }\n\n                    taskboard.dataSource.sync().then(function() {\n                        taskboard.columns().eq(0).trigger(\"focus\");\n                    });\n                }\n            });\n\n            var DeleteCardCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        taskboard = that.taskboard,\n                        messages = taskboard.options.messages,\n                        options = that.options;\n\n                    var result = that._confirm(messages.deleteCard, messages.deleteCardConfirm, messages[\"delete\"], messages.cancel);\n\n                    result\n                        .done(function() {\n                            if (taskboard.trigger(\"deleteCard\", { card: options.card })) {\n                                taskboard.dataSource.cancelChanges();\n                                return;\n                            }\n\n                            taskboard.dataSource.remove(options.card);\n                            taskboard.dataSource.sync().then(function() {\n                                taskboard.columns().eq(0).trigger(\"focus\");\n                            });\n                        })\n                        .fail(function() {\n                            options.cardElement.trigger(\"focus\");\n                        });\n                }\n            });\n\n            var MoveCardCommand = TaskBoardBaseCardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        taskboard = that.taskboard,\n                        taskBoardOptions = taskboard.options,\n                        columnSettings = taskBoardOptions.columnSettings,\n                        options = that.options,\n                        receivedStatus = options.column.get(columnSettings.dataStatusField);\n\n                    options.card.set(taskBoardOptions.dataStatusField, receivedStatus);\n\n                    if (taskBoardOptions.dataOrderField) {\n                        that._updateOrder(taskboard._getColumn(receivedStatus), options.newIndex);\n                    }\n\n                    taskboard.dataSource.sync();\n                }\n            });\n\n            var EditCardCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        taskboard = that.taskboard,\n                        options = that.options;\n\n                    if (taskboard.trigger(\"editCard\", { card: options.card })) {\n                        return;\n                    }\n\n                    taskboard._openPane(extend({\n                        pane: \"Edit\"\n                    }, options));\n                }\n            });\n\n            var AddCardCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        taskboard = that.taskboard,\n                        options = that.options;\n\n                    if (taskboard.trigger(\"editCard\", { card: null })) {\n                        return;\n                    }\n                    taskboard.dataSource.cancelChanges();\n                    taskboard._openPane(extend({\n                        pane: \"Create\"\n                    }, options));\n                }\n            });\n\n            // Pane commands\n            var OpenPaneCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        options = that.options,\n                        taskboard = that.taskboard;\n\n                    taskboard._openPane({\n                        pane: options.value,\n                        card: options.card,\n                        cardElement: options.cardElement,\n                        column: options.column,\n                        columnElement: options.columnElement\n                    });\n                }\n            });\n\n            var ClosePaneCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        taskboard = that.taskboard;\n\n                    taskboard._closePane();\n                    taskboard.dataSource.cancelChanges();\n                }\n            });\n\n            // Search command\n\n            var SearchCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        value = that.options.value,\n                        taskboard = that.taskboard,\n                        taskboardOptions = taskboard.options,\n                        searchOptions = taskboardOptions.search,\n                        operator = searchOptions.operator,\n                        fields = (searchOptions && searchOptions.fields) || [ taskboardOptions.dataTitleField, taskboardOptions.dataDescriptionField ],\n                        filters;\n\n                    filters = that._buildFilters(fields, operator, value);\n\n                    taskboard.dataSource.filter(filters);\n                },\n                _buildFilters: function(fields, operator, value) {\n                    var filters = fields.map(function(field) {\n                        return { field: field, operator: operator, value: value };\n                    });\n\n                    return { logic: \"or\", filters: filters };\n                }\n            });\n\n            extend(kendo.ui.taskboard, {\n                Command: TaskBoardCommand,\n                commands: {\n                    AddColumnCommand: AddColumnCommand,\n                    EditColumnCommand: EditColumnCommand,\n                    DeleteColumnCommand: DeleteColumnCommand,\n                    SaveColumnCommand: SaveColumnCommand,\n                    CancelEditColumnCommand: CancelEditColumnCommand,\n                    OpenPaneCommand: OpenPaneCommand,\n                    ClosePaneCommand: ClosePaneCommand,\n                    SelectCardCommand: SelectCardCommand,\n                    MoveFocusCommand: MoveFocusCommand,\n                    SaveChangesCommand: SaveChangesCommand,\n                    DeleteCardCommand: DeleteCardCommand,\n                    MoveCardCommand: MoveCardCommand,\n                    EditCardCommand: EditCardCommand,\n                    AddCardCommand: AddCardCommand,\n                    SearchCommand: SearchCommand\n                }\n            });\n\n        })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            extend = $.extend,\n            Observable = kendo.Observable,\n            encode = kendo.htmlEncode,\n\n            Form = kendo.ui.Form,\n\n            DOT = \".\",\n            NS = DOT + \"kendoTaskBoardPane\",\n\n            ACTION = \"action\",\n            CLICK = \"click\";\n\n        var TaskBoardPaneStyles = {\n            element: \"k-taskboard-pane\",\n            edit: \"k-taskboard-edit-pane\",\n            preview: \"k-taskboard-preview-pane\",\n            header: \"k-taskboard-pane-header\",\n            headerText: \"k-taskboard-pane-header-text\",\n            spacer: \"k-spacer\",\n            headerActions: \"k-taskboard-pane-header-actions\",\n            content: \"k-taskboard-pane-content\",\n            footerActions: \"k-taskboard-pane-actions\",\n            footerActionButtons: \"k-actions k-hstack k-justify-content-start\",\n            baseButton: \"k-button-solid-base\",\n            primaryButton: \"k-button-solid-primary\"\n        };\n\n        var TaskBoardPane = Observable.extend({\n            init: function(taskboard, options, dataItem, resources) {\n                var that = this;\n\n                that.taskboard = taskboard;\n                that._dataItem = dataItem;\n                that.resources = resources;\n                that.options = extend(true, {}, options);\n\n                that._render();\n\n                that.element.on(CLICK + NS,\n                    \"[\" + kendo.attr(\"command\") + \"]\",\n                    that._commandClick.bind(that));\n\n                Observable.fn.init.call(that);\n            },\n            headerTemplate: ({ styles, messages, fieldFormat }) => `<div class=\"${encode(styles.headerText)}\">${fieldFormat}</div>` +\n                            `<span class=\"${encode(styles.spacer)}\"></span>` +\n                            `<div class=\"${encode(styles.headerActions)}\">` +\n                                kendo.html.renderButton(`<button title=\"${encode(messages.close)}\" ${encode(kendo.attr(\"command\"))}=\"ClosePaneCommand\"></button>`, {\n                                    icon: \"x\",\n                                    iconClass: 'k-button-icon',\n                                    fillMode: \"flat\",\n                                }) +\n                            '</div>',\n            buttonTemplate: ({ styles, icon, spriteCssClass, text, fillMode, themeColor, command, options }) =>\n                kendo.html.renderButton(`<button title=\"${encode(text)}\" ${encode(kendo.attr(\"command\"))}=\"${encode(command)}\" ${encode(kendo.attr(\"options\"))}=\"${encode(options)}\">` +\n                    `${encode(text)}` +\n                '</button>', {\n                    icon: encode(icon),\n                    iconClass: `k-button-icon ${encode(spriteCssClass)}`,\n                    fillMode: fillMode,\n                    themeColor: themeColor\n                }),\n            contentTemplate: () => ``,\n            builtinButtons: {\n                \"edit\": { name: \"edit\", icon: \"pencil\", text: \"Edit\", themeColor: \"primary\", command: \"EditCardCommand\", rules: \"isEditable\" },\n                \"delete\": { name: \"delete\", icon: \"trash\", text: \"Delete\", command: \"DeleteCardCommand\", rules: \"isEditable\", fillMode: \"flat\", themeColor: \"primary\" },\n                \"cancel\": { name: \"cancel\", icon: \"cancel-outline\", text: \"Cancel\", command: \"ClosePaneCommand\" },\n                \"saveChanges\": { name: \"saveChanges\", icon: \"save\", text: \"Save\", command: \"SaveChangesCommand\", themeColor: \"primary\", rules: \"isEditable\" },\n                \"create\": { name: \"create\", icon: \"save\", text: \"Create\", command: \"SaveChangesCommand\", themeColor: \"primary\", rules: \"isEditable\" }\n            },\n            defaultButtons: [],\n            _render: function() {\n                var that = this,\n                    styles = TaskBoardPane.styles,\n                    element = $(\"<div class='\" + styles.element + \"'></div>\"),\n                    header = $(\"<div class='\" + styles.header + \"'></div>\"),\n                    content = $(\"<div class='\" + styles.content + \"'></div>\"),\n                    buttonsContainer = $(\"<div class='\" + styles.footerActions + \" \" + styles.footerActionButtons + \"'></div>\");\n\n                that.header = header.appendTo(element);\n                that._renderHeader();\n                that.content = content.appendTo(element);\n                that._renderContent();\n                that.buttonsContainer = buttonsContainer.appendTo(element);\n                that.buttonsContainer.append(that._buildButtonsHtml());\n                that.element = element;\n            },\n            _renderHeader: function() {\n                var that = this,\n                    styles = TaskBoardPane.styles,\n                    options = that.options,\n                    messages = options.messages,\n                    headerTemplate = options.headerTemplate ? options.headerTemplate : that.headerTemplate,\n                    resources = that._resources(that._dataItem);\n\n                that.header.append(kendo.template(headerTemplate)(extend(true, {}, {\n                    styles: styles,\n                    messages: messages,\n                    resources: resources,\n                    fieldFormat: that._buildHeaderTemplate(that._dataItem)\n                }, that._dataItem)));\n            },\n            _buildHeaderTemplate: function(dataItem) {\n                var that = this;\n                return encode(kendo.getter(that.options.dataTitleField)(dataItem));\n            },\n            _renderContent: function() {\n                var that = this,\n                    styles = TaskBoardPane.styles,\n                    options = that.options,\n                    messages = options.messages,\n                    contentTemplate = options.template || that.contentTemplate,\n                    resources = that._resources(that._dataItem);\n\n                that.content.append(kendo.template(contentTemplate)(extend(true, {}, {\n                    styles: styles,\n                    messages: messages,\n                    resources: resources\n                }, that._dataItem)));\n            },\n            _resources: function(card) {\n                var that = this,\n                    resources = {};\n\n                if (!that.resources) {\n                    return resources;\n                }\n\n                for (var key in that.resources) {\n                    var resource = that.resources[key];\n                    var field = resource.field;\n                    var cardResources = kendo.getter(field)(card);\n\n                    if (!cardResources) {\n                        continue;\n                    }\n\n                    if (!resource.multiple) {\n                        cardResources = [cardResources];\n                    }\n\n                    var data = resource.dataSource.view();\n\n                    for (var resourceIndex = 0; resourceIndex < cardResources.length; resourceIndex++) {\n                        var cardResource = null;\n\n                        var value = cardResources[resourceIndex];\n\n                        if (!resource.valuePrimitive) {\n                            value = kendo.getter(resource.dataValueField)(value);\n                        }\n\n                        for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n                            if (data[dataIndex].get(resource.dataValueField) == value) {\n                                cardResource = data[dataIndex];\n                                break;\n                            }\n                        }\n\n                        if (cardResource !== null) {\n                            var resourceColor = kendo.getter(resource.dataColorField)(cardResource);\n                            var result = {\n                                field: resource.field,\n                                title: resource.title,\n                                name: resource.name,\n                                text: kendo.getter(resource.dataTextField)(cardResource),\n                                value: value,\n                                color: resourceColor\n                            };\n\n                            if (resource.multiple) {\n                                if (resources[resource.field]) {\n                                    resources[resource.field].push(result);\n                                } else {\n                                    resources[resource.field] = [result];\n                                }\n                            } else {\n                                resources[resource.field] = result;\n                            }\n                        }\n                    }\n                }\n                return resources;\n            },\n            _buildButtonsHtml: function() {\n                var that = this,\n                    options = that.options,\n                    messages = options.messages,\n                    buttons = options.buttons || that.defaultButtons,\n                    styles = TaskBoardPane.styles,\n                    html = \"\";\n\n                for (var i = 0; i < buttons.length; i++) {\n                    var button = buttons[i];\n                    button = ($.isPlainObject(button) && Object.keys(button).length === 1 && button.name) ? button.name : button;\n\n                    if (typeof button === \"string\") {\n                        if (button === \"spacer\") {\n                            html += '<span class=\"k-spacer\"></span>';\n                            continue;\n                        }\n\n                        button = extend(true, {},\n                            that.builtinButtons[button] || { spriteCssClass: button, command: button + \"Command\" },\n                            { text: messages[button] || button }\n                        );\n                    } else if ($.isPlainObject(button) && button.name) {\n                        button = extend(true, button,\n                            { text: messages[button.name] }\n                        );\n                    }\n\n                    if (!that._validateRules(button)) {\n                        continue;\n                    }\n\n                    button.spriteCssClass = button.spriteCssClass || \"\";\n\n                    html += kendo.template(that.buttonTemplate)(extend(true, {}, {\n                        styles: styles,\n                        messages: messages,\n                        primary: false,\n                        options: null\n                    }, button));\n                }\n\n                return html;\n            },\n            _commandClick: function(ev) {\n                var that = this,\n                    target = $(ev.target).closest(\"[\" + kendo.attr(\"command\") + \"]\"),\n                    command = target.attr(kendo.attr(\"command\")),\n                    options = target.attr(kendo.attr(\"options\")),\n                    card = that._dataItem;\n\n                options = typeof(options) === \"string\" ? { value: options } : options;\n\n                if (!command) {\n                    return;\n                }\n\n                that.trigger(ACTION, {\n                    command: command,\n                    options: extend({ card: card }, options)\n                });\n            },\n            _validateRules: function(tool) {\n                var that = this,\n                    states = that.options.states,\n                    rules = tool.rules ? tool.rules.split(\";\") : [];\n\n                if (!rules.length) {\n                    return true;\n                }\n\n                for (var i = 0; i < rules.length; i++) {\n                    if (!states[rules[i]]) {\n                        return false;\n                    }\n                }\n\n                return true;\n            },\n            destroy: function() {\n                var that = this;\n\n                that.element.off(NS);\n                that.element.remove();\n            }\n        });\n\n        var TaskBoardPreviewPane = TaskBoardPane.extend({\n            init: function(taskboard, options, dataItem, resources) {\n                var that = this;\n\n                options = extend({}, options.previewPane, {\n                    dataTitleField: options.dataTitleField,\n                    dataDescriptionField: options.dataDescriptionField,\n                    messages: options.messages,\n                    states: options.states\n                });\n\n                that.contentTemplate = (data) => encode(kendo.getter(options.dataDescriptionField)(data));\n\n                TaskBoardPane.fn.init.call(that, taskboard, options, dataItem, resources);\n\n                that.element.addClass(TaskBoardPane.styles.preview);\n            },\n            defaultButtons: [ \"edit\", \"spacer\", \"delete\" ]\n        });\n\n        var TaskBoardEditPane = TaskBoardPane.extend({\n            init: function(taskboard, options, dataItem) {\n                var that = this;\n\n                options = extend({}, options.editable, {\n                    dataTitleField: options.dataTitleField,\n                    dataDescriptionField: options.dataDescriptionField,\n                    messages: options.messages,\n                    states: options.states\n                });\n\n                that.formSettings = extend(that.formSettings, {\n                    items: [\n                        { field: options.dataTitleField, label: options.messages[options.dataTitleField] },\n                        { field: options.dataDescriptionField, label: options.messages[options.dataDescriptionField] }\n                    ]\n                }, options.form);\n\n                TaskBoardPane.fn.init.call(that, taskboard, options, dataItem);\n\n                that.element.addClass(TaskBoardPane.styles.edit);\n            },\n            defaultButtons: [ \"saveChanges\", \"cancel\" ],\n            formSettings: {\n                buttonsTemplate: () => \"\"\n            },\n            _buildHeaderTemplate: function(dataItem) {\n                var that = this;\n                return `${that.options.messages.edit} ${encode(kendo.getter(that.options.dataTitleField)(dataItem))}`;\n            },\n            _renderContent: function() {\n                var that = this,\n                    options = that.options,\n                    styles = TaskBoardPane.styles,\n                    formSettings = options.form || that.formSettings,\n                    formLabelId = kendo.guid(),\n                    element = $(\"<div></div>\")\n                        .attr(\"role\", \"form\")\n                        .attr(\"aria-labelledby\", formLabelId),\n                    focusFirst = (options.form && options.form.focusFirst !== undefined$1) ? options.form.focusFirst : true;\n\n                that.header.find(DOT + styles.headerText).attr(\"id\", formLabelId);\n\n                that.content.append(element);\n\n                that.form = new Form(element, extend({}, formSettings, {\n                    formData: that._dataItem,\n                    focusFirst: focusFirst\n                }));\n            }\n        });\n\n        var TaskBoardCreatePane = TaskBoardEditPane.extend({\n            init: function(taskboard, options, dataItem, resources, column) {\n                var that = this,\n                    columnStatusField = options.columnSettings.dataStatusField,\n                    firstColumn = taskboard.columnsDataSource.view().at(0),\n                    status = column ? column[columnStatusField] : firstColumn[columnStatusField],\n                    clone = extend({}, dataItem);\n\n                dataItem = taskboard.dataSource.add();\n                dataItem.set(options.dataStatusField, status);\n\n                for (var key in clone) {\n                    dataItem.set(key, clone[key]);\n                }\n\n                TaskBoardEditPane.fn.init.call(that, taskboard, options, dataItem, resources);\n            },\n            _buildHeaderTemplate: function(dataItem) {\n                var that = this;\n                return that.options.messages.createNewCard;\n            },\n            defaultButtons: [ \"create\", \"cancel\"]\n        });\n\n        extend(kendo.ui.taskboard, {\n            Pane: TaskBoardPane,\n            panes: {\n                Preview: TaskBoardPreviewPane,\n                Edit: TaskBoardEditPane,\n                Create: TaskBoardCreatePane\n            }\n        });\n\n        extend(true, kendo.ui.taskboard.Pane, { styles: TaskBoardPaneStyles });\n\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            Observable = kendo.Observable,\n\n            extend = $.extend,\n\n            DOT = \".\",\n            NS = DOT + \"kendoKeyboardManager\",\n            KEYDOWN = \"keydown\",\n            ACTION = \"action\";\n\n\n        var Keyboard = Observable.extend({\n            init: function(element) {\n                var that = this;\n\n                that.register = {};\n                that.element = element;\n\n                that._attachEvents();\n\n                Observable.fn.init.call(that);\n            },\n\n            registerShortcut: function(selector, shortcut, options) {\n                var that = this;\n\n                if (!that.register[selector]) {\n                    that.register[selector] = [];\n                }\n\n                if (shortcut.keyCode && isNaN(shortcut.keyCode) && shortcut.keyCode.toUpperCase) {\n                    shortcut.keyCode = shortcut.keyCode.toUpperCase().charCodeAt(0);\n                }\n\n                that.register[selector].push({\n                    shortcut: extend({\n                        keyCode: null,\n                        ctrlKey: false,\n                        shiftKey: false,\n                        altKey: false\n                    }, shortcut),\n                    options: options\n                });\n\n            },\n\n            _attachEvents: function() {\n                var that = this,\n                    handler = that._handler.bind(that);\n\n                that.element.on(KEYDOWN + NS, handler);\n            },\n\n            _handler: function(ev) {\n                var that = this,\n                    target = $(ev.target),\n                    shortcuts, action;\n\n                for (var selector in that.register) {\n                    if (target.is(selector)) {\n                        shortcuts = that.register[selector];\n                        action = that._getAction(shortcuts, ev);\n\n                        if (action) {\n                            that._trigger(action, ev);\n                            break;\n                        }\n                    }\n                }\n            },\n\n            _trigger: function(action, ev) {\n                var that = this,\n                    target = $(ev.target);\n\n                if (action.command) {\n                    that.trigger(ACTION, extend({}, ev, {\n                        command: action.command,\n                        options: extend({}, {\n                            target: target\n                        }, action.options)\n                    }));\n                }\n\n                if (action.handler) {\n                    action.handler(ev);\n                }\n            },\n\n            _getAction: function(shortcuts, ev) {\n                var that = this;\n\n                for (var i = 0; i < shortcuts.length; i++) {\n                    if (that._compareShortcut(shortcuts[i].shortcut, ev)) {\n                        return shortcuts[i].options;\n                    }\n                }\n            },\n\n            _compareShortcut: function(shortcut, ev) {\n                var that = this;\n\n                for (var key in shortcut) {\n                    var result = false;\n\n                    switch (key) {\n                        case \"ctrlKey\":\n                            result = shortcut[key] !== that._getShortcutModifier(ev);\n                            break;\n                        default:\n                            result = shortcut[key] !== ev[key];\n                            break;\n                    }\n\n                    if (result) {\n                        return false;\n                    }\n                }\n\n                return true;\n            },\n\n            _getShortcutModifier: function(ev) {\n                var mac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n                return mac ? ev.metaKey : ev.ctrlKey;\n            },\n\n            destroy: function() {\n                var that = this;\n\n                that.element.off(NS);\n            }\n        });\n\n        extend(kendo.ui.taskboard, {\n            KeyboardManager: Keyboard\n        });\n\n    })(window.kendo.jQuery);\n\n    var __meta__ = {\n            id: \"taskboard\",\n            name: \"TaskBoard\",\n            category: \"web\",\n            description: \"The TaskBoard widget displays cards.\",\n            depends: [\"data\", \"sortable\", \"dialog\", \"form\", \"menu\", \"toolbar\", \"textbox\"]\n        };\n\n        var TaskBoardStyles = {\n            wrapper: \"k-taskboard\",\n            header: \"k-taskboard-header\",\n            content: \"k-taskboard-content\",\n            toolbar: \"k-taskboard-toolbar k-toolbar-flat\",\n            columnsContainer: \"k-taskboard-columns-container\",\n            card: \"k-taskboard-card\",\n            column: \"k-taskboard-column\",\n            selected: \"k-selected\",\n            disabled: \"k-disabled\",\n            ignoreDrag: \"k-taskboard-drag-ignore\"\n        };\n\n        var preventDefault = function(ev) { ev.preventDefault(); };\n\n        (function($, undefined$1) {\n            var kendo = window.kendo,\n                Widget = kendo.ui.Widget,\n                DataSource = kendo.data.DataSource,\n                extend = $.extend,\n                ui = kendo.ui,\n                isArray = Array.isArray,\n                isPlainObject = $.isPlainObject,\n\n                GENERIC = \"_generic\",\n\n                DOT = \".\",\n\n                MOVE = \"move\",\n                MOVE_START = \"moveStart\",\n                MOVE_END = \"moveEnd\",\n                SELECT = \"select\",\n                EXECUTE = \"execute\",\n                ACTION = \"action\",\n                CHANGE = \"change\",\n                CLICK = \"click\",\n                TOGGLE = \"toggle\",\n                ERROR = \"change\",\n                DATABINDING = \"dataBinding\",\n                DATABOUND = \"dataBound\",\n                EDIT_CARD = \"editCard\",\n                SAVE_CARD = \"saveCard\",\n                DELETE_CARD = \"deleteCard\",\n                EDIT_COLUMN = \"editColumn\",\n                SAVE_COLUMN = \"saveColumn\",\n                DELETE_COLUMN = \"deleteColumn\",\n\n                COLUMNSDATABINDING = \"columnsDataBinding\",\n                COLUMNSDATABOUND = \"columnsDataBound\";\n\n            var TaskBoard = Widget.extend({\n                init: function(element, options) {\n                    var that = this;\n\n                    Widget.fn.init.call(that, element, options);\n\n                    element = that.wrapper = that.element;\n\n                    that._sortableIdentifier = that.element.attr(\"id\") || kendo.guid();\n\n                    that._wrapper();\n                    that._columnsDataSource();\n                    that._initResources();\n                    that._dataSource();\n                    that._initToolbar();\n                    that._initCardMenu();\n                    that._initKeyboard();\n\n                    if (that.options.autoBind) {\n                        that.load();\n                    }\n\n                    kendo.notify(that);\n                },\n\n                events: [\n                    MOVE,\n                    MOVE_START,\n                    MOVE_END,\n                    CHANGE,\n                    EXECUTE,\n                    SELECT,\n                    DATABINDING,\n                    DATABOUND,\n                    COLUMNSDATABINDING,\n                    COLUMNSDATABOUND,\n                    EDIT_CARD,\n                    SAVE_CARD,\n                    DELETE_CARD,\n                    EDIT_COLUMN,\n                    SAVE_COLUMN,\n                    DELETE_COLUMN\n                ],\n\n                options: {\n                    name: \"TaskBoard\",\n                    autoBind: true,\n                    height: 600,\n                    width: \"100%\",\n                    toolbar: true,\n                    dataStatusField: \"status\",\n                    dataTitleField: \"title\",\n                    dataDescriptionField: \"description\",\n                    dataCategoryField: \"category\",\n                    dataOrderField: null,\n                    cardMenu: true,\n                    editable: true,\n                    selectable: true,\n                    reorderable: true,\n                    previewPane: true,\n                    search: {\n                        operator: \"contains\"\n                    },\n                    dataSource: [],\n                    columns: [],\n                    columnSettings: {\n                        dataStatusField: \"status\",\n                        dataTextField: \"text\",\n                        dataOrderField: null\n                    },\n                    resources: [],\n                    messages: {\n                        edit: \"Edit\",\n                        createNewCard: \"Create new card\",\n                        create: \"Create\",\n                        search: \"Search\",\n                        previewCard: \"Preview card\",\n                        addCard: \"Add card\",\n                        editCard: \"Edit card\",\n                        deleteCard: \"Delete Card\",\n                        addColumn: \"Add column\",\n                        editColumn: \"Edit column\",\n                        deleteColumn: \"Delete column\",\n                        close: \"Close\",\n                        cancel: \"Cancel\",\n                        \"delete\": \"Delete\",\n                        saveChanges: \"Save changes\",\n                        title: \"Title:\",\n                        description: \"Description:\",\n                        newColumn: \"New column\",\n                        deleteColumnConfirm: \"Are you sure you want to delete this column?\",\n                        deleteCardConfirm: \"Are you sure you want to delete this card?\"\n                    }\n                },\n\n                defaultTools: {\n                    addColumn: { type: \"button\", name: \"addColumn\", command: \"AddColumnCommand\", icon: \"plus\", rules: \"isEditable\" },\n                    spacer: { type: \"spacer\" },\n                    search: {\n                        type: \"component\",\n                        name: \"search\",\n                        command: \"SearchCommand\",\n                        options: \"{ \\\"field\\\": \\\"name\\\", \\\"operator\\\": \\\"startswith\\\" }\",\n                        rules: \"isSearchable\",\n                        overflow: \"never\",\n                        component: \"TextBox\",\n                        componentOptions: {\n                            placeholder: \"search\",\n                            icon: \"search\",\n                            commandOn: \"input\"\n                        }\n                    }\n                },\n\n                items: function() {\n                    var that = this,\n                        result = $([]);\n\n                    for (var key in that._columns) {\n                        $.merge(result, that._columns[key].cards());\n                    }\n\n                    return result;\n                },\n\n                itemsByStatus: function(status) {\n                    var that = this,\n                        result = that._getColumn(status).cards();\n\n                    return result;\n                },\n\n                itemsByColumn: function(columnElm) {\n                    var that = this,\n                        column = that._getColumnByElement(columnElm);\n\n                    if (column) {\n                        return column.cards();\n                    }\n                },\n\n                load: function() {\n                    var that = this,\n                        fetchPromises = [];\n\n                    that._progress(true);\n\n                    fetchPromises.push(that.columnsDataSource.fetch());\n\n                    for (var key in that.resources) {\n                        fetchPromises.push(that.resources[key].dataSource.fetch());\n                    }\n\n                    $.when.apply(null, fetchPromises)\n                        .then(that.dataSource.read.bind(that.dataSource));\n                },\n\n                dataItem: function(cardElm) {\n                    var that = this,\n                        dataSource = that.dataSource,\n                        uid;\n\n                    cardElm = $(cardElm);\n                    uid = cardElm.attr(kendo.attr(\"uid\"));\n\n                    return dataSource.getByUid(uid);\n                },\n\n                columnDataItem: function(columnElm) {\n                    var that = this,\n                        columnsDataSource = that.columnsDataSource,\n                        uid;\n\n                    columnElm = $(columnElm);\n                    uid = columnElm.attr(kendo.attr(\"uid\"));\n\n                    return columnsDataSource.getByUid(uid);\n                },\n\n                columns: function() {\n                    var that = this,\n                        result = $([]);\n\n                    for (var key in that._columns) {\n                        $.merge(result, that._columns[key].element);\n                    }\n\n                    return result;\n                },\n\n                columnByStatus: function(status) {\n                    return this._getColumn(status).element;\n                },\n\n                select: function(card, toggle) {\n                    var that = this;\n\n                    if (!card) {\n                        return that.element\n                            .find(DOT + TaskBoard.styles.card + DOT + TaskBoard.styles.selected).eq(0);\n                    }\n\n                    card = $(card);\n                    toggle = toggle !== false;\n\n                    if (toggle) {\n                        that.element\n                            .find(DOT + TaskBoard.styles.card + DOT + TaskBoard.styles.selected)\n                            .removeClass(TaskBoard.styles.selected);\n                    }\n\n                    card.toggleClass(TaskBoard.styles.selected, toggle);\n                },\n\n                previewCard: function(cardElement) {\n                    var that = this,\n                        options = that.options,\n                        args = that._extendExecArgs({ target: cardElement });\n\n                    if (options.previewPane) {\n                        that._openPane(extend({\n                            pane: \"Preview\"\n                        }, args));\n                    }\n                },\n\n                editCard: function(cardElement) {\n                    var that = this,\n                        options = that.options,\n                        args;\n\n                    cardElement = $(cardElement);\n                    args = that._extendExecArgs({ target: cardElement });\n\n                    if (options.editable) {\n                        that._openPane(extend({\n                            pane: \"Edit\"\n                        }, args));\n                    }\n                },\n\n                saveCard: function() {\n                    var that = this;\n\n                    that.dataSource.sync();\n                },\n\n                deleteCard: function(cardElement) {\n                    var that = this,\n                        card = that.dataItem(cardElement);\n\n                    that.dataSource.remove(card);\n                    that.dataSource.sync();\n                },\n\n                addCard: function(dataItem) {\n                    var that = this,\n                        options = that.options,\n                        args = { card: dataItem };\n\n                    if (options.editable) {\n                        that._openPane(extend({\n                            pane: \"Create\"\n                        }, args));\n                    }\n                },\n\n                addColumn: function(index, data) {\n                    var that = this,\n                        columnSettings = extend(true, {}, that.options.columnSettings, {\n                            messages: that.options.messages,\n                            states: that._buildStates(),\n                            sortableIdentifier: that._sortableIdentifier\n                        }),\n                        newColumn, model, column;\n\n                    if (isNaN(index) && !data) {\n                        data = index;\n                        index = null;\n                    }\n\n                    model = that.columnsDataSource._createNewModel(data);\n                    index = isNaN(index) || index === null ? that.columnsDataSource.data().length : index;\n                    column = that.columns().eq(index);\n                    that.columnsDataSource.insert(index, model);\n\n                    newColumn = new ui.taskboard.NewColumn(columnSettings, model);\n\n                    if (isNaN(index) || !column.length) {\n                        that.columnsContainer.append(newColumn.element);\n                    } else {\n                        column.before(newColumn.element);\n                    }\n\n                    newColumn.bind(ACTION, that.executeCommand.bind(that));\n                },\n\n                editColumn: function(columnElement) {\n                    var that = this;\n\n                    columnElement = $(columnElement);\n\n                    that._getColumnByElement(columnElement).edit();\n                },\n\n                saveColumn: function() {\n                    var that = this;\n\n                    that.columnsDataSource.sync();\n                },\n\n                deleteColumn: function(columnElement) {\n                    var that = this,\n                        column = that.columnDataItem(columnElement);\n\n                    that.columnsDataSource.remove(column);\n                    that.columnsDataSource.sync();\n                },\n\n                registerShortcut: function(selector, shortcut, options) {\n                    var that = this;\n\n                    that.keyboardManager.registerShortcut(selector, shortcut, options);\n                },\n\n                enable: function(cardElement, toggle) {\n                    cardElement = $(cardElement);\n\n                    cardElement.toggleClass(TaskBoard.styles.disabled, toggle === false);\n                    cardElement.attr(\"aria-disabled\", toggle === false);\n                },\n\n                enableByColumn: function(columnElement, toggle) {\n                    var that = this;\n\n                    columnElement = $(columnElement);\n\n                    that.itemsByColumn(columnElement).each(function(index, card) {\n                        that.enable(card, toggle);\n                    });\n                },\n\n                readOnly: function(cardElement, toggle) {\n                    cardElement = $(cardElement);\n\n                    toggle = toggle !== false;\n\n                    cardElement.find(\"[\" + kendo.attr(\"command\") + \"]\").toggleClass(TaskBoard.styles.disabled, toggle);\n                    cardElement.find(\"a,button\").toggleClass(TaskBoard.styles.disabled, toggle);\n\n                    cardElement.toggleClass(TaskBoard.styles.ignoreDrag, toggle);\n                    cardElement.attr(\"aria-readonly\", toggle);\n                },\n\n                readOnlyByColumn: function(columnElement, toggle) {\n                    var that = this;\n\n                    columnElement = $(columnElement);\n\n                    that.itemsByColumn(columnElement).each(function(index, card) {\n                        that.readOnly(card, toggle);\n                    });\n                },\n\n                setDataSource: function(dataSource) {\n                    var that = this;\n\n                    that.options.dataSource = dataSource;\n                    that._dataSource();\n\n                    if (that.options.autoBind) {\n                        that.dataSource.read();\n                    }\n                },\n\n                setColumnsDataSource: function(dataSource) {\n                    var that = this;\n\n                    that.options.columns = dataSource;\n                    that._columnsDataSource();\n\n                    if (that.options.autoBind) {\n                        that.columnsDataSource.fetch(function() {\n                            that._renderCards(that.dataSource.view());\n                        });\n                    }\n                },\n\n                _getColumn: function(status) {\n                    return this._columns[status];\n                },\n\n                _getColumnByElement: function(columnElement) {\n                    var that = this;\n\n                    columnElement = $(columnElement);\n\n                    for (var key in that._columns) {\n                        if (that._columns[key].element[0] === columnElement[0]) {\n                            return that._columns[key];\n                        }\n                    }\n                },\n\n                _openPane: function(options) {\n                    var that = this,\n                        pane = new ui.taskboard.panes[options.pane](that, extend({}, that.options, {\n                            states: that._buildStates()\n                        }), options.card, that.resources, options.column),\n                        keyboardManager;\n\n                    if (that.pane) {\n                        that._closePane();\n                    }\n\n                    that.pane = pane;\n                    that.content.after(that.pane.element);\n                    that.content.css(\"margin-right\",\n                        that.pane.element.outerWidth() -\n                        parseInt(that.content.css(\"paddingRight\"), 10));\n\n                    that.pane.bind(ACTION, that.executeCommand.bind(that));\n\n                    that.pane.keyboardManager = keyboardManager = new ui.taskboard.KeyboardManager(that.pane.element);\n\n                    keyboardManager.bind(ACTION, that.executeCommand.bind(that));\n\n                    keyboardManager.registerShortcut(\"*\", {\n                        keyCode: kendo.keys.ESC\n                    }, { command: \"ClosePaneCommand\" });\n\n                    keyboardManager.registerShortcut(\"*\", {\n                        keyCode: kendo.keys.ENTER\n                    }, { command: \"SaveChangesCommand\", options: {\n                        card: that.pane._dataItem\n                    } });\n\n                    if (this.options.editable && this.options.editable.form && this.options.editable.form.focusFirst === false) {\n                        setTimeout(function() {\n                            that.pane.element.find(\"button\").eq(0).trigger(\"focus\");\n                        }, 0);\n                    }\n                },\n\n                _closePane: function() {\n                    var that = this;\n\n                    if (that.pane) {\n                        that.pane.keyboardManager.destroy();\n                        that.pane.unbind(ACTION);\n                        that.pane.destroy();\n                        delete that.pane;\n\n                        that.content.css(\"margin-right\", \"\");\n                    }\n                },\n\n                _wrapper: function() {\n                    var that = this,\n                        options = that.options,\n                        styles = TaskBoard.styles,\n                        headerElm = \"<div class='\" + styles.header + \"'></div>\",\n                        contentElm = \"<div class='\" + styles.content + \"'></div>\",\n                        colsContainer = \"<div class='\" + styles.columnsContainer + \"'></div>\";\n\n                    that.element.addClass(styles.wrapper)\n                        .width(options.width)\n                        .height(options.height)\n                        .attr(\"role\", \"application\");\n                    that.header = $(headerElm).appendTo(that.element);\n                    that.content = $(contentElm).appendTo(that.element);\n                    that.columnsContainer = $(colsContainer).appendTo(that.content);\n                },\n\n                _initToolbar: function() {\n                    var that = this,\n                        styles = TaskBoard.styles,\n                        options = that.options,\n                        toolbarElm = $(\"<div class='\" + styles.toolbar + \"'></div>\"),\n                        toolbarOptions = isArray(options.toolbar) ? { items: options.toolbar } : options.toolbar,\n                        tools;\n\n                    if (options.toolbar === false) {\n                        return;\n                    } else if (toolbarOptions === true) {\n                        toolbarOptions = {};\n                    }\n\n                    tools = toolbarOptions.items ? toolbarOptions.items : Object.keys(that.defaultTools);\n                    tools = that._processTools(tools);\n                    toolbarOptions.tools = tools;\n                    toolbarOptions.defaultTools = that.defaultTools;\n                    toolbarOptions.parentMessages = that.options.messages;\n\n                    that.header.append(toolbarElm);\n                    that.toolbar = new kendo.ui.ToolBar(toolbarElm, toolbarOptions);\n                    that.options.toolbar = that.toolbar.options;\n\n                    that.toolbar.bind(CLICK, that._toolbarClick.bind(that));\n                    that.toolbar.bind(TOGGLE, that._toolbarClick.bind(that));\n                    that.toolbar.bind(CHANGE, that._toolbarClick.bind(that));\n                },\n\n                _processTools: function(tools) {\n                    var that = this,\n                        states = that._buildStates(),\n                        isDefaultTool;\n\n                    tools.forEach(t => {\n                        var rules = t.rules || that.defaultTools[t] ? that.defaultTools[t].rules : null;\n                        isDefaultTool = isPlainObject(t) && Object.keys(t).length >= 1 && t.name && that.defaultTools[t.name];\n\n                        if (isDefaultTool) {\n                            var temp = extend({}, t);\n                            extend(t, that.defaultTools[t.name], temp);\n                        }\n\n                        if (isDefaultTool && t.name == \"search\") {\n                            extend(t.componentOptions, {\n                                icon: t.icon || that.defaultTools[t.name].componentOptions.icon,\n                                placeholder: t.text || that.options.messages.search\n                            });\n                        }\n\n                        if (!rules) {\n                            return;\n                        }\n\n                        rules = rules.split(\";\");\n\n                        if (!rules.length) {\n                            return;\n                        }\n\n                        for (var i = 0; i < rules.length; i++) {\n                            if (!states[rules[i]]) {\n                                if (t.rules) {\n                                    t.hidden = true;\n                                } else {\n                                    that.defaultTools[t].hidden = true;\n                                }\n                            }\n                        }\n                    });\n\n                    return tools;\n                },\n\n                _toolbarClick: function(ev) {\n                    var command = $(ev.target).data(\"command\"),\n                        options = $(ev.target).data(\"options\");\n\n                    options = extend({}, options, { value: $(ev.target).val() });\n\n                    if (!command) {\n                        return;\n                    }\n\n                    this.executeCommand({\n                        command: command,\n                        options: options\n                    });\n                },\n\n                _isToolEnabled: function(toolName) {\n                    var that = this,\n                        options = that.options.toolbar,\n                        items = options.items || that.defaultTools,\n                        found = false;\n\n                    for (var i = 0; i < items.length; i++) {\n                        if (items[i].name == toolName) {\n                            found = true;\n                            break;\n                        }\n                    }\n\n                    return items[toolName] || found;\n                },\n\n                _buildStates: function() {\n                    var that = this;\n\n                    return {\n                        isEditable: that._isEditable(),\n                        isReorderable: that._isReorderable(),\n                        isSelectable: that._isSelectable(),\n                        isReadOnly: !that._isReorderable() && !that._isEditable(),\n                        isDisabled: !that._isReorderable() && !that._isEditable() && !that._isSelectable(),\n                        isSearchable: that._isSearchable(),\n                        notLocalColumns: !(that.columnsDataSource.transport instanceof kendo.data.LocalTransport),\n                        isRtl: kendo.support.isRtl(that.wrapper)\n                    };\n                },\n\n                _isSearchable: function() {\n                    return !!this.options.search;\n                },\n\n                _isEditable: function() {\n                    return !!this.options.editable;\n                },\n\n                _isReorderable: function() {\n                    return !!this.options.reorderable;\n                },\n\n                _isSelectable: function() {\n                    return !!this.options.selectable;\n                },\n\n                executeCommand: function(args) {\n                    var that = this,\n                        commandName = args.command,\n                        commandOptions = extend({ taskboard: this }, isPlainObject(args.options) ? that._extendExecArgs(args.options) : { value: args.options }),\n                        command = ui.taskboard.commands[commandName] && new ui.taskboard.commands[commandName](commandOptions);\n\n\n                    if (!that.trigger(EXECUTE, args)) {\n                        if (command) {\n                            command.exec();\n                        } else {\n                            window.console.warn(kendo.format(\"Trying to use {0} command, but such is not available in the kendo.ui.taskboard.commands namespace!\", commandName));\n                        }\n                    }\n                },\n\n                _extendExecArgs: function(args) {\n                    var that = this,\n                        target = args.draggableEvent ? args.item : args.target,\n                        columnElm, cardElm, columnDataItem, cardDataItem;\n\n                    if (args.card) {\n                        target = that.items().filter(function(idx, elm) {\n                            return $(elm).attr(kendo.attr(\"uid\")) === args.card.get(\"uid\");\n                        });\n                    }\n\n                    if (!target || !(target && target.length)) {\n                        return args;\n                    }\n\n                    columnElm = args.columnElement || (target.is(DOT + TaskBoard.styles.column) ? target : target.parents(DOT + TaskBoard.styles.column));\n                    columnDataItem = that.columnsDataSource.getByUid(columnElm.data(kendo.ns + \"uid\"));\n                    cardElm = target.is(DOT + TaskBoard.styles.card) ? target : target.closest(DOT + TaskBoard.styles.card);\n                    cardDataItem = that.dataSource.getByUid(cardElm.data(kendo.ns + \"uid\"));\n\n                    return extend(args, {\n                        card: cardDataItem,\n                        cardElement: cardElm.length ? cardElm : undefined$1,\n                        column: columnDataItem,\n                        columnElement: columnElm.length ? columnElm : undefined$1\n                    });\n                },\n\n\n                _select: function(card, toggle) {\n                    var that = this;\n\n                    if (toggle === null) {\n                        toggle = true;\n                    }\n\n                    if (!that.trigger(SELECT, { card: card })) {\n                        that.select(card, toggle);\n                        that.previewCard(card);\n                    }\n                },\n\n                _columnsDataSource: function() {\n                    var that = this,\n                        options = that.options,\n                        columnSettings = options.columnSettings,\n                        columnsDataSource = options.columns;\n\n                    columnsDataSource = isArray(columnsDataSource) ? { data: columnsDataSource } : columnsDataSource;\n\n                    if (columnSettings.dataOrderField && !columnsDataSource.sort) {\n                        columnsDataSource.sort = { field: columnSettings.dataOrderField, dir: \"asc\" };\n                    }\n\n                    if (!columnsDataSource.schema) {\n                        var fields = {};\n\n                        fields[columnSettings.dataStatusField] = { type: \"string\", defaultValue: function() { return kendo.guid().split(\"-\")[0]; } };\n                        fields[columnSettings.dataTextField] = { type: \"string\" };\n\n                        if (columnSettings.dataOrderField) {\n                            fields[columnSettings.dataOrderField] = { type: \"number\" };\n                        }\n\n                        columnsDataSource.schema = {\n                            model: {\n                                fields: fields\n                            }\n                        };\n                    }\n\n                    if (that.columnsDataSource && that._columnsChangeHandler) {\n                        that.columnsDataSource.unbind(CHANGE, that._columnsChangeHandler);\n                        that.columnsDataSource.unbind(CHANGE, that._columnsErrorHandler);\n                    } else {\n                        that._columnsChangeHandler = that._columnsDataSourceChange.bind(that);\n                        that._columnsErrorHandler = that._error.bind(that);\n                    }\n\n                    that.columnsDataSource = DataSource.create(columnsDataSource)\n                                    .bind(CHANGE, that._columnsChangeHandler)\n                                    .bind(ERROR, that._columnsErrorHandler);\n                },\n\n                _columnsDataSourceChange: function(ev) {\n                    var that = this,\n                        view = that.columnsDataSource.view(),\n                        columnSettings = extend(true, {}, that.options.columnSettings, {\n                            messages: that.options.messages,\n                            states: that._buildStates(),\n                            sortableIdentifier: that._sortableIdentifier\n                         }),\n                        statusField = columnSettings.dataStatusField;\n\n                    if (ev.action && ev.action !== \"sync\") {\n                        return;\n                    }\n\n                    if (that.trigger(COLUMNSDATABINDING, ev)) {\n                        return;\n                    }\n\n                    that._progress(true);\n\n                    that._columns = {};\n                    that.columnsContainer.html(\"\");\n\n                    for (var i = 0; i < view.length; i++) {\n                        var data = view[i];\n                        var status = data[statusField] || GENERIC;\n                        var column;\n\n                        column = that._columns[status] = new ui.taskboard.Column(columnSettings, data);\n                        that.columnsContainer.append(column.element);\n                        column.bind(ACTION, that.executeCommand.bind(that));\n                        column.bind(MOVE, that._move.bind(that));\n                        column.bind(MOVE_END, that._moveEnd.bind(that));\n                        column.bind(MOVE_START, that._moveStart.bind(that));\n                        column.bind(CHANGE, that._changeOrder.bind(that));\n                        that._tabindex(column.element);\n                    }\n\n                    if (ev.action === \"sync\" || ev.action === undefined$1) {\n                        that._renderCards(that.dataSource.view());\n                    }\n\n                    that._progress(false);\n                    that.trigger(COLUMNSDATABOUND, ev);\n                },\n\n                _move: function(ev) {\n                    this.trigger(MOVE, this._extendExecArgs(ev));\n                },\n\n                _moveEnd: function(ev) {\n                    this.trigger(MOVE_END, this._extendExecArgs(ev));\n                },\n\n                _moveStart: function(ev) {\n                    this.trigger(MOVE_START, this._extendExecArgs(ev));\n                },\n\n                _changeOrder: function(ev) {\n                    this.trigger(CHANGE, this._extendExecArgs(ev));\n                },\n\n                _dataSource: function() {\n                    var that = this,\n                        options = that.options,\n                        dataSource = options.dataSource;\n\n                        dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;\n\n                    if (options.dataOrderField && !dataSource.sort) {\n                        dataSource.sort = { field: options.dataOrderField, dir: \"asc\" };\n                    }\n\n                    if (!dataSource.schema) {\n                        var fields = {};\n\n                        fields[options.dataStatusField] = { type: \"string\" };\n                        fields[options.dataTitleField] = { type: \"string\" };\n                        fields[options.dataDescriptionField] = { type: \"string\" };\n                        fields[options.dataCategoryField] = { type: \"string\" };\n\n                        if (options.dataOrderField) {\n                            fields[options.dataOrderField] = { type: \"number\" };\n                        }\n\n                        dataSource.schema = {\n                            model: {\n                                fields: fields\n                            }\n                        };\n                    }\n\n                    if (that.dataSource && that._changeHandler) {\n                        that.dataSource.unbind(CHANGE, that._changeHandler);\n                        that.dataSource.unbind(ERROR, that._errorHandler);\n                    } else {\n                        that._changeHandler = that._change.bind(that);\n                        that._errorHandler = that._error.bind(that);\n                    }\n\n                    that.dataSource = DataSource.create(dataSource)\n                                    .bind(CHANGE, that._changeHandler);\n                },\n\n                _change: function(ev) {\n                    var that = this;\n\n                    if (ev.action && ev.action !== \"sync\") {\n                        return;\n                    }\n\n                    if (that.trigger(DATABINDING, ev)) {\n                        return;\n                    }\n\n                    that._progress(true);\n\n                    that._clearColumns();\n                    that._renderCards(that.dataSource.view());\n                    that._closePane();\n\n                    that.trigger(DATABOUND, ev);\n                    that._progress(false);\n                },\n\n                _error: function() {\n                    this._progress(false);\n                },\n\n                _renderCards: function(data) {\n                    var that = this;\n\n                    for (var i = 0; i < data.length; i++) {\n                        that._renderCard(data[i]);\n                    }\n                },\n\n                _renderCard: function(card) {\n                    var that = this,\n                        options = extend({}, that.options, { states: that._buildStates() }),\n                        statusField = options.dataStatusField,\n                        status = card[statusField] || GENERIC;\n\n                    if (status && that._columns[status]) {\n                        card = new ui.taskboard.Card(options, card, that.resources);\n                        that._columns[status].addCard(card.element);\n                        that._tabindex(card.element);\n                    }\n                },\n\n                _clearColumns: function() {\n                    var that = this;\n\n                    for (var key in that._columns) {\n                        that._columns[key].empty();\n                    }\n                },\n\n                _initCardMenu: function() {\n                    var that = this,\n                        options = that.options,\n                        cardMenuOptions = isArray(options.cardMenu) ? { items: options.cardMenu } : options.cardMenu;\n\n                    cardMenuOptions = extend({}, {\n                        messages: options.messages,\n                        target: that.columnsContainer,\n                        filter: \".k-taskboard-card-menu-button\",\n                        action: that.executeCommand.bind(that),\n                        showOn: \"click\",\n                        alignToAnchor: true,\n                        states: that._buildStates()\n                    }, cardMenuOptions);\n\n                    if (options.cardMenu === false) {\n                        return;\n                    }\n\n                    that.cardMenu = new ui.taskboard.CardMenu(\"<ul></ul>\", cardMenuOptions);\n                },\n\n                _initResources: function() {\n                    var that = this,\n                        resources = that.options.resources;\n\n                    for (var i = 0; i < resources.length; i++) {\n                        that._addResource(resources[i]);\n                    }\n                },\n\n                _addResource: function(resource) {\n                    var that = this;\n\n                    if (!that.resources) {\n                        that.resources = {};\n                    }\n\n                    that.resources[resource.field] = {\n                        field: resource.field,\n                        name: resource.name,\n                        title: resource.title || resource.field,\n                        dataTextField: resource.dataTextField || \"text\",\n                        dataValueField: resource.dataValueField || \"value\",\n                        dataColorField: resource.dataColorField || \"color\",\n                        valuePrimitive: resource.valuePrimitive === false ? false : true,\n                        multiple: resource.multiple || false,\n                        dataSource: that._resourceDataSource(resource.dataSource)\n                    };\n                },\n\n                _resourceDataSource: function(resourceDS) {\n                    var dataSource = isArray(resourceDS) ? { data: resourceDS } : resourceDS,\n                        dataSourceInstance = kendo.data.DataSource.create(dataSource);\n\n                    return dataSourceInstance;\n                },\n\n                _progress: function(toggle) {\n                    var that = this;\n\n                    kendo.ui.progress(that.element, toggle);\n                },\n\n                _initKeyboard: function() {\n                    var that = this;\n\n                    that.keyboardManager = new ui.taskboard.KeyboardManager(that.element);\n\n                    that.keyboardManager.bind(ACTION, that.executeCommand.bind(that));\n                    that._registerShortcuts();\n                },\n\n                _registerShortcuts: function() {\n                    var that = this,\n                        states = that._buildStates();\n\n                    if (states.isEditable) {\n                        that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                            keyCode: kendo.keys.DELETE\n                        }, { command: \"DeleteColumnCommand\" });\n\n                        that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                            keyCode: \"e\",\n                            ctrlKey: true\n                        }, { command: \"EditColumnCommand\", handler: preventDefault });\n\n                        that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                            keyCode: \"a\",\n                            ctrlKey: true\n                        }, { command: \"AddCardCommand\", handler: preventDefault });\n\n                        that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column + \" *\", {\n                            keyCode: kendo.keys.ESC\n                        }, { command: \"CancelEditColumnCommand\" });\n\n                        that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                            keyCode: kendo.keys.DELETE\n                        }, { command: \"DeleteCardCommand\" });\n\n                        that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                            keyCode: \"e\",\n                            ctrlKey: true\n                        }, { command: \"EditCardCommand\", handler: preventDefault });\n                    }\n\n                    if (states.isSelectable) {\n                        that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                            keyCode: kendo.keys.ENTER\n                        }, { command: \"SelectCardCommand\", handler: preventDefault });\n                    }\n\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                        keyCode: kendo.keys.UP\n                    }, { command: \"MoveFocusCommand\", options: { value: \"up\" }, handler: preventDefault });\n\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                        keyCode: kendo.keys.DOWN\n                    }, { command: \"MoveFocusCommand\", options: { value: \"down\" }, handler: preventDefault });\n\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                        keyCode: kendo.keys.LEFT\n                    }, { command: \"MoveFocusCommand\", options: { value: \"left\" }, handler: preventDefault });\n\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                        keyCode: kendo.keys.RIGHT\n                    }, { command: \"MoveFocusCommand\", options: { value: \"right\" }, handler: preventDefault });\n\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                        keyCode: kendo.keys.LEFT\n                    }, { command: \"MoveFocusCommand\", options: { value: \"left\" }, handler: preventDefault });\n\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                        keyCode: kendo.keys.RIGHT\n                    }, { command: \"MoveFocusCommand\", options: { value: \"right\" }, handler: preventDefault });\n\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                        keyCode: kendo.keys.DOWN\n                    }, { command: \"MoveFocusCommand\", options: { value: \"down\" }, handler: preventDefault });\n                },\n\n                destroy: function() {\n                    var that = this;\n\n                    if (that._columnsChangeHandler) {\n                        that.columnsDataSource.unbind(CHANGE, that._columnsChangeHandler);\n                        that.columnsDataSource.unbind(CHANGE, that._columnsErrorHandler);\n                    }\n\n                    if (that._changeHandler) {\n                        that.dataSource.unbind(CHANGE, that._changeHandler);\n                        that.dataSource.unbind(ERROR, that._errorHandler);\n                    }\n\n                    for (var key in that._columns) {\n                        that._columns[key].destroy();\n                    }\n\n                    if (that.toolbar) {\n                        that.toolbar.destroy();\n                    }\n\n                    if (that.cardMenu) {\n                        that.cardMenu.destroy();\n                    }\n\n                    if (that.keyboardManager) {\n                        that.keyboardManager.destroy();\n                    }\n\n                    if (that.pane) {\n                        that._closePane();\n                    }\n\n                    Widget.fn.destroy.call(that);\n                }\n            });\n\n            kendo.ui.plugin(TaskBoard);\n\n            extend(true, TaskBoard, { styles: TaskBoardStyles });\n\n        })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}