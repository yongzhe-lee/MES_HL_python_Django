{"version":3,"sources":["raw-js/kendo.upload.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendoupload","js","this","$","undefined$1","kendo","window","Widget","ui","antiForgeryTokens","logToConsole","rFileExtension","NS","SELECT","UPLOAD","SUCCESS","ERROR","COMPLETE","CANCEL","CLEAR","PAUSE","RESUME","PROGRESS","REMOVE","VALIDATIONERRORS","INVALIDMAXFILESIZE","INVALIDMINFILESIZE","INVALIDFILEEXTENSION","HOVER_STATE","FOCUS_STATE","PROGRESSBAR_CLASS","PROGRESSBAR_SELECTOR","TABINDEX","headerStatusIconName","Upload","extend","init","element","options","that","progressbars","fn","call","name","multiple","directory","localization","activeInput","wrapper","closest","length","_wrapInput","_activeInput","addClass","toggle","enabled","ns","_ns","guid","on","_onParentFormSubmit","bind","_onParentFormReset","_initUploadModule","_toggleDropZone","_onUploadButtonKeydown","_onFileAction","_onClearSelected","e","preventDefault","click","_onUploadSelected","_onKeyDown","_focusout","val","_onInputChange","target","events","showFileList","template","files","async","autoRetryAfter","bufferChunkSize","maxAutoRetries","removeVerb","autoUpload","withCredentials","accept","useArrayBuffer","select","cancel","retry","remove","pause","resume","clearSelectedFiles","uploadSelectedFiles","dropFilesHere","invalidFiles","statusUploading","statusUploaded","statusWarning","statusFailed","headerStatusUploading","headerStatusPaused","headerStatusUploaded","uploadSuccess","uploadFail","invalidMaxFileSize","invalidMinFileSize","invalidFileExtension","validation","allowedExtensions","maxFileSize","minFileSize","dropZone","saveUrl","_module","_supportsFormData","formDataUploadModule","iframeUploadModule","_async","initialFiles","_renderInitialFiles","syncUploadModule","setOptions","off","attr","_supportsMultiple","enable","disable","toggleClass","prop","focus","find","trigger","destroy","customDropZone","document","add","forEach","progressbar","fileEntry","onPause","pauseIcon","htmlEncode","icon","parent","onResume","playIcon","upload","onSaveSelected","getFiles","filesData","allFiles","listItems","i","data","j","push","clearAllFiles","each","index","file","_removeFileByDomElement","removeAllFiles","removeFileByUid","uid","_removeFileByUid","clearFileByUid","shouldSendRemoveRequest","clearFile","callback","_removeFile","removeFile","fileData","hasClass","onCancel","onRemove","_hideHeaderUploadstatus","_updateHeaderUploadStatus","_addInput","sourceInput","nodeType","input","clone","insertAfter","prefix","removeAttr","_adjustFocusState","focusedItem","toFocus","removeClass","_arrowKeyNavigation","key","kendoKeys","keys","DOWN","stopPropagation","first","next","UP","prev","RIGHT","LEFT","_preventFocusRemove","_asyncCommandKeyNavigation","eventArgs","_retryClicked","ESC","_checkAllComplete","SPACEBAR","ENTER","is","chunkSize","concurrent","finish","show","metaData","prepareChunk","onRetry","_commandKeyNavigation","hasValidationErrors","_filesContainValidationErrors","headers","DELETE","TAB","commandKeys","keyCode","indexOf","assignGuidToFiles","_inputFiles","_isAsyncNonBatch","validateFiles","onSelect","last","_readDirectory","item","deferred","Deferred","dirReader","createReader","allFolderFiles","readEntries","entries","concat","resolve","reject","promise","_readFile","fullpath","fullPath","relativePath","slice","droppedFolderFiles","droppedFolderCounter","setTimeout","_proceedDroppedItems","_traverseFileTree","skipCounter","then","items","isFile","isDirectory","_onDrop","dt","originalEvent","dataTransfer","droppedFiles","stopEvent","directoryDrop","webkitGetAsEntry","entry","getAllFileInfo","splice","hasErrors","batch","idx","currentFile","_enqueueFile","fileNames","_supportsRemove","_fileAction","_prepareTemplateData","templateData","totalSize","size","_createProgressbarWapper","_createFileIconWrapper","fileTypeIcon","iconClass","_progressbarInit","kendoProgressBar","animation","showStatus","_prepareDefaultSingleFileEntryTemplate","fileSize","getTotalFilesSizeMessage","fileGroup","getFileGroup","extension","errors","isError","invalidClass","fileDetails","_prepareDefaultMultipleFileEntriesTemplate","filesHaveValidationErrors","totalFileSize","sort","a","b","existingFileEntries","removeEventArgs","isProgressbar","fileUid","fileList","progressbarSelector","appendTo","hide","value","_removeFileEntry","_hideActionButtons","fileElement","actionKey","skipClear","firstActionButton","iconsNameDictionary","actionKeyText","hasOwnProperty","_clearFileAction","firstActionIcon","append","_renderAction","_fileState","stateKey","currentState","uploading","text","uploaded","failed","iconName","actionText","empty","button","_onFileProgress","percentComplete","progressBar","prepend","getFileEntry","_onUploadSuccess","response","xhr","fileInfo","operation","XMLHttpRequest","_setUploadErrorState","after","_hideUploadProgress","_onUploadError","responseText","_decreasePosition","_autoRetryAfter","retries","performUpload","uploadPercentage","_updateUploadProgress","fileMetaData","totalChunks","Math","round","delay","fadeOut","_showActionButtons","actionsWrapper","uploadButton","clearButton","html","renderButton","themeColor","_showHeaderUploadStatus","isUploading","headerUploadStatus","headerUploadStatusIcon","currentlyUploading","not","currentlyFailed","currentlyPaused","onAbort","windows","_userAgent","support","browser","opera","safari","_supportsDrop","userAgent","toLowerCase","test","navigator","_setupDropZone","dropEffect","bindDragEventWrappers","_bindDocumentDragEventWrappers","_setupCustomDropZone","removeUrl","_submitRemove","onSuccess","onError","removeField","params","jQuery","ajax","type","dataType","dataFilter","normalizeJSON","url","traditional","success","error","xhrFields","hasLabel","selectText","wrap","prependTo","tabindex","inputFiles","prototype","filesContainErrors","relatedInput","getFileName","iframes","_frameId","prepareUpload","iframe","form","saveField","createFrame","registerFrame","createForm","frame","fileValidation","cleanupFrame","unregisterFrame","body","dataInput","one","onIframeLoad","submit","started","isFileUploadStarted","contents","ex","processResponse","fakeXHR","tryParseJSON","jsonResult","statusText","status","stopFrameSubmit","removeUploadedFile","id","action","stop","execCommand","grep","position","cancelled","paused","map","join","$input","slashIndex","lastIndexOf","substr","getFileExtension","rawFiles","fileName","rawFile","matches","match","unique","validationInfo","extensions","ext","substring","parseAllowedExtensions","validateFileExtension","validateFileSize","validationErrors","inArray","toFixed","shouldRemoveFileEntry","textStatus","json","JSON","parse","namespace","onDragEnter","onDragLeave","hideInterval","lastDrag","Date","setInterval","clearInterval","sourceElement","fileEntries","enqueueFiles","filesLength","webkitRelativePath","formData","createFormData","createXHR","removeFileEntry","populateFormData","FileReader","postFormData","reader","onload","fileArrayBuffer","_appendBuffer","result","err","onerror","readAsArrayBuffer","_getCurrentChunk","buffer1","buffer2","tmp","Uint8Array","byteLength","set","buffer","filter","prevEntry","stopUploadRequest","_increaseChunkIndex","addEventListener","onRequestSuccess","onRequestError","onRequestProgress","open","setRequestHeader","send","FormData","chunk","serializedMetaData","stringify","raiseError","cleanupFileEntry","_resetChunkIndex","uploadComplete","isUploadButtonVisible","loaded","total","abort","chunkIndex","contentType","ceil","uploadUid","_decreaseChunkIndex","methodToInvoke","oldPosition","_getChunker","mozSlice","webkitSlice","plugin"],"mappings":"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","file":"kendo.upload.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.core.js'), require('kendo.progressbar.js'), require('kendo.icons.js'), require('kendo.html.button.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.core', 'kendo.progressbar', 'kendo.icons', 'kendo.html.button'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendoupload = global.kendoupload || {}, global.kendoupload.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n        id: \"upload\",\n        name: \"Upload\",\n        category: \"web\",\n        description: \"The Upload widget uses progressive enhancement to deliver the best possible uploading experience to users.\",\n        depends: [\"core\", \"progressbar\", \"icons\", \"html.button\"]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            antiForgeryTokens = kendo.antiForgeryTokens,\n            logToConsole = kendo.logToConsole,\n            rFileExtension = /\\.([^\\.]+)$/,\n            NS = \".kendoUpload\",\n            SELECT = \"select\",\n            UPLOAD = \"upload\",\n            SUCCESS = \"success\",\n            ERROR = \"error\",\n            COMPLETE = \"complete\",\n            CANCEL = \"cancel\",\n            CLEAR = \"clear\",\n            PAUSE = \"pause\",\n            RESUME = \"resume\",\n            PROGRESS = \"progress\",\n            REMOVE = \"remove\",\n            VALIDATIONERRORS = \"validationErrors\",\n            INVALIDMAXFILESIZE = \"invalidMaxFileSize\",\n            INVALIDMINFILESIZE = \"invalidMinFileSize\",\n            INVALIDFILEEXTENSION = \"invalidFileExtension\",\n            PROGRESSHIDEDELAY = 1000,\n            PROGRESSHIDEDURATION = 2000,\n            HOVER_STATE = \"k-hover\",\n            FOCUS_STATE = \"k-focus\",\n            PROGRESSBAR_CLASS = \"k-progressbar\",\n            PROGRESSBAR_SELECTOR = \".\" + PROGRESSBAR_CLASS,\n            PROGRESSBAR_TEMPLATE_SELECTOR = \".k-progress\",\n            TABINDEX = \"tabindex\",\n            WARNINGICON_SELECTOR = `.k-i-exclamation-circle,.k-svg-i-exclamation-circle`;\n\n        var headerStatusIconName = {\n            loading: \"upload\",\n            warning: \"exclamation-circle\",\n            success: \"check\"\n        };\n\n        var Upload = Widget.extend({\n            init: function(element, options) {\n                var that = this;\n                that.progressbars = [];\n\n                Widget.fn.init.call(that, element, options);\n\n                that.name = element.name;\n                that.multiple = that.options.multiple;\n                that.directory = that.options.directory;\n                that.localization = that.options.localization;\n\n                var activeInput = that.element;\n                that.wrapper = activeInput.closest(\".k-upload\");\n                if (that.wrapper.length === 0) {\n                    that.wrapper = that._wrapInput(activeInput);\n                }\n\n                that._activeInput(activeInput);\n                that.element.addClass(\"k-hidden\");\n                that.toggle(that.options.enabled);\n\n                var ns = that._ns = NS + \"-\" + kendo.guid();\n                activeInput.closest(\"form\")\n                    .on(\"submit\" + ns, that._onParentFormSubmit.bind(that))\n                    .on(\"reset\" + ns, that._onParentFormReset.bind(that));\n\n                that._initUploadModule();\n\n                that._toggleDropZone();\n\n                that.wrapper\n                    .on(\"keydown\", \".k-upload-button\", that._onUploadButtonKeydown.bind(that))\n                    .on(\"click\", \".k-upload-action\", that._onFileAction.bind(that))\n                    .on(\"click\", \".k-clear-selected\", that._onClearSelected.bind(that))\n                    .on(\"click\", \".k-upload-button\", function(e) {\n                        e.preventDefault();\n                        that.element.click();\n                    })\n                    .on(\"click\", \".k-upload-selected\", that._onUploadSelected.bind(that))\n                    .on(\"keydown\", that._onKeyDown.bind(that))\n                    .on(\"focusout\", that._focusout.bind(that));\n\n                if (that.element.val()) {\n                    that._onInputChange({ target: that.element });\n                }\n            },\n\n            events: [\n                SELECT,\n                UPLOAD,\n                SUCCESS,\n                ERROR,\n                COMPLETE,\n                CANCEL,\n                CLEAR,\n                PROGRESS,\n                REMOVE,\n                PAUSE,\n                RESUME\n            ],\n\n            options: {\n                name: \"Upload\",\n                enabled: true,\n                multiple: true,\n                directory: false,\n                showFileList: true,\n                template: \"\",\n                files: [],\n                async: {\n                    autoRetryAfter: 0,\n                    bufferChunkSize: 10000000,\n                    maxAutoRetries: 1,\n                    removeVerb: \"POST\",\n                    autoUpload: true,\n                    withCredentials: true,\n                    accept: \"*/*; q=0.5, application/json\",\n                    useArrayBuffer: false\n                },\n                localization: {\n                    \"select\": \"Select files...\",\n                    \"cancel\": \"Cancel\",\n                    \"retry\": \"Retry\",\n                    \"remove\": \"Remove\",\n                    \"pause\": \"Pause\",\n                    \"resume\": \"Resume\",\n                    \"clearSelectedFiles\": \"Clear\",\n                    \"uploadSelectedFiles\": \"Upload\",\n                    \"dropFilesHere\": \"Drop files here to upload\",\n                    \"invalidFiles\": \"Invalid file(s). Please check file upload requirements.\",\n                    \"statusUploading\": \"uploading\",\n                    \"statusUploaded\": \"uploaded\",\n                    \"statusWarning\": \"warning\",\n                    \"statusFailed\": \"failed\",\n                    \"headerStatusUploading\": \"Uploading...\",\n                    \"headerStatusPaused\": \"Paused\",\n                    \"headerStatusUploaded\": \"Done\",\n                    \"uploadSuccess\": \"File(s) uploaded successfully.\",\n                    \"uploadFail\": \"File(s) failed to upload.\",\n                    \"invalidMaxFileSize\": \"File size too large.\",\n                    \"invalidMinFileSize\": \"File size too small.\",\n                    \"invalidFileExtension\": \"File type not allowed.\"\n                },\n                validation: {\n                    allowedExtensions: [],\n                    maxFileSize: 0,\n                    minFileSize: 0\n                },\n                dropZone: \"\"\n            },\n\n            _initUploadModule: function() {\n                var that = this,\n                    options = that.options;\n\n                if (options.async.saveUrl) {\n                    that._module = that._supportsFormData() ?\n                    new formDataUploadModule(that) :\n                    new iframeUploadModule(that);\n                    that._async = true;\n\n                    var initialFiles = options.files;\n                    if (initialFiles.length > 0) {\n                        that._renderInitialFiles(initialFiles);\n                    }\n\n                } else {\n                    that._module = new syncUploadModule(that);\n                }\n            },\n\n            setOptions: function(options) {\n                var that = this,\n                    activeInput = that.element;\n\n                $(that.options.dropZone).off(that._ns);\n\n                Widget.fn.setOptions.call(that, options);\n\n                that.multiple = that.options.multiple;\n                that.directory = that.options.directory;\n\n                activeInput.attr(\"multiple\", that._supportsMultiple() ? that.multiple : false);\n                if (that.directory) {\n                    activeInput.attr(\"webkitdirectory\", that.directory);\n                    activeInput.attr(\"directory\", that.directory);\n                }\n                that.toggle(that.options.enabled);\n\n                that._initUploadModule();\n\n                that._toggleDropZone();\n            },\n\n            enable: function(enable) {\n                enable = typeof (enable) === \"undefined\" ? true : enable;\n                this.toggle(enable);\n            },\n\n            disable: function() {\n                this.toggle(false);\n            },\n\n            toggle: function(enable) {\n                enable = typeof (enable) === \"undefined\" ? enable : !enable;\n                this.wrapper.toggleClass(\"k-disabled\", enable);\n                this.element.prop(\"disabled\", enable);\n            },\n\n            focus: function() {\n                this.wrapper.find(\".k-upload-button\").trigger(\"focus\");\n            },\n\n            destroy: function() {\n                var that = this;\n                var customDropZone = $(that.options.dropZone);\n\n                $(document)\n                    .add($(\".k-dropzone\", that.wrapper))\n                    .add(that.wrapper.closest(\"form\"))\n                    .off(that._ns);\n\n                if (customDropZone.length > 0) {\n                    customDropZone.off(that._ns);\n                }\n\n                $(that.element).off(NS);\n\n                if (that.progressbars) {\n                    that.progressbars.forEach(progressbar => {\n                        progressbar.destroy();\n                    });\n                }\n                Widget.fn.destroy.call(that);\n            },\n            pause: function(fileEntry) {\n                this._module.onPause({ target: $(fileEntry, this.wrapper) });\n\n                var pauseIcon = fileEntry.find(\".k-i-pause-sm,.k-svg-i-pause-sm\");\n                var resume = kendo.htmlEncode(this.localization.resume);\n                kendo.ui.icon(pauseIcon, { icon: \"play-sm\" });\n                pauseIcon.attr(\"title\", resume);\n                $(pauseIcon).parent().attr(\"aria-label\", resume);\n            },\n            resume: function(fileEntry) {\n                this._module.onResume({ target: $(fileEntry, this.wrapper) });\n\n                var playIcon = fileEntry.find(\".k-i-play-sm,.k-svg-i-play-sm\");\n                var pause = kendo.htmlEncode(this.localization.pause);\n                kendo.ui.icon(playIcon, { icon: \"pause-sm\" });\n                playIcon.attr(\"title\", pause);\n                $(playIcon).parent().attr(\"aria-label\", pause);\n            },\n            upload: function() {\n                var that = this;\n\n                that._module.onSaveSelected();\n            },\n\n            getFiles: function() {\n                var that = this;\n                var filesData;\n                var allFiles = [];\n                var listItems = that.wrapper.find(\".k-file\");\n\n                for (var i = 0; i < listItems.length; i++) {\n                    filesData = $(listItems[i]).data(\"fileNames\");\n\n                    if (filesData) {\n                        for (var j = 0; j < filesData.length; j++) {\n                            allFiles.push(filesData[j]);\n                        }\n                    }\n                }\n\n                return allFiles;\n            },\n\n            clearAllFiles: function() {\n                var that = this;\n                var files = that.wrapper.find(\".k-file\");\n\n                files.each(function(index, file) {\n                    that._removeFileByDomElement(file, false);\n                });\n            },\n\n            removeAllFiles: function() {\n                var that = this;\n                var files = that.wrapper.find(\".k-file\");\n\n                files.each(function(index, file) {\n                    that._removeFileByDomElement(file, true);\n                });\n            },\n\n            removeFileByUid: function(uid) {\n                this._removeFileByUid(uid, true);\n            },\n\n            clearFileByUid: function(uid) {\n                this._removeFileByUid(uid, false);\n            },\n\n            _removeFileByUid: function(uid, shouldSendRemoveRequest) {\n                var that = this;\n                var fileEntry;\n\n                if (typeof uid !== 'string') { return; }\n\n                fileEntry = $('.k-file[' + kendo.attr('uid') + '=\"' + uid + '\"]', that.wrapper);\n\n                if (fileEntry.length > 0) {\n                    that._removeFileByDomElement(fileEntry, shouldSendRemoveRequest);\n                }\n            },\n\n            clearFile: function(callback) {\n                this._removeFile(callback, false);\n            },\n\n            removeFile: function(callback) {\n                this._removeFile(callback, true);\n            },\n\n            _removeFile: function(callback, shouldSendRemoveRequest) {\n                var that = this;\n                var files = that.wrapper.find(\".k-file\");\n                var fileData;\n\n                if (typeof callback === \"function\") {\n                    files.each(function(index, file) {\n                        fileData = $(file).data(\"fileNames\");\n\n                        if (callback(fileData)) {\n                            that._removeFileByDomElement(file, shouldSendRemoveRequest);\n                        }\n                    });\n                }\n            },\n\n            _removeFileByDomElement: function(fileEntry, shouldSendRemoveRequest) {\n                var that = this;\n                var fileData = {\n                    target: $(fileEntry, that.wrapper)\n                };\n                var allFiles;\n\n                if (that.options.async.saveUrl) {\n                    if ($(fileEntry).hasClass(\"k-file-progress\")) {\n                        that._module.onCancel(fileData);\n                    } else {\n                        that._module.onRemove(fileData, {}, shouldSendRemoveRequest);\n                    }\n\n                    allFiles = $(\".k-file\", that.wrapper);\n\n                    if (allFiles.length === 0) {\n                        that._hideHeaderUploadstatus();\n                    } else {\n                        that._updateHeaderUploadStatus();\n                    }\n                } else {\n                    that._module.onRemove(fileData, {}, shouldSendRemoveRequest);\n                }\n            },\n\n            _addInput: function(sourceInput) {\n                //check if source input is a DOM element. Required for some unit tests\n                if (!sourceInput[0].nodeType) {\n                    return;\n                }\n\n                var that = this,\n                    input = sourceInput.clone().val(\"\");\n\n                input\n                    .insertAfter(that.element)\n                    .data(\"kendo\" + that.options.prefix + that.options.name, that);\n\n                $(that.element)\n                    .attr(TABINDEX, \"-1\")\n                    .removeAttr(\"id\")\n                    .off(NS);\n\n                that._activeInput(input);\n                that.wrapper.find(\".k-upload-button\").trigger(\"focus\");\n            },\n\n            _activeInput: function(input) {\n                var that = this,\n                    wrapper = that.wrapper;\n\n                that.element = input;\n\n                if (that.directory) {\n                    input.attr(\"webkitdirectory\", that.directory);\n                    input.attr(\"directory\", that.directory);\n                }\n\n                input\n                    .attr(\"multiple\", that._supportsMultiple() ? that.multiple : false)\n                    .attr(\"autocomplete\", \"off\")\n                    .on(\"click\" + NS, function(e) {\n                        if (wrapper.hasClass(\"k-disabled\")) {\n                            e.preventDefault();\n                        }\n                    })\n                    .on(\"change\" + NS, that._onInputChange.bind(that));\n            },\n\n            _adjustFocusState: function(focusedItem, toFocus) {\n                focusedItem.removeClass(FOCUS_STATE);\n                focusedItem.attr(TABINDEX, -1);\n                toFocus.addClass(FOCUS_STATE);\n                toFocus.attr(TABINDEX, 0);\n            },\n\n            _arrowKeyNavigation: function(e, key, focusedItem) {\n                var that = this,\n                    kendoKeys = kendo.keys,\n                    toFocus;\n\n                if (key === kendoKeys.DOWN) {\n                    e.preventDefault();\n                    e.stopPropagation();\n\n                    toFocus = that.wrapper.find(\".k-upload-files .k-file\").first();\n\n                    if (focusedItem.length > 0) {\n                        if (focusedItem.hasClass(\"k-upload-action\")) {\n                            focusedItem.removeClass(FOCUS_STATE);\n                            focusedItem = focusedItem.closest(\".k-file\");\n                        }\n\n                        toFocus = focusedItem.next();\n                    }\n\n                    that._adjustFocusState(focusedItem, toFocus);\n\n                    if (!toFocus || toFocus.length === 0) {\n                        toFocus = that.wrapper.find(\".k-clear-selected\");\n                    }\n                } else if (key === kendoKeys.UP) {\n                    e.preventDefault();\n                    e.stopPropagation();\n\n                    toFocus = that.wrapper.find(\".k-upload-files .k-file:last\");\n\n                    if (focusedItem.length > 0) {\n                        if (focusedItem.hasClass(\"k-upload-action\")) {\n                            focusedItem.removeClass(FOCUS_STATE);\n                            focusedItem = focusedItem.closest(\".k-file\");\n                        }\n\n                        toFocus = focusedItem.prev();\n                    }\n\n                    that._adjustFocusState(focusedItem, toFocus);\n                } else if (key === kendoKeys.RIGHT) {\n                    if (focusedItem.hasClass(\"k-upload-action\")) {\n                        toFocus = focusedItem.next(\".k-upload-action\");\n\n                        if (!toFocus || toFocus.length === 0) {\n                            toFocus = focusedItem.parent().find(\".k-upload-action:first\");\n                        }\n                    } else if (focusedItem.length > 0) {\n                        toFocus = focusedItem.find(\".k-upload-action:first\");\n                    }\n\n                    if (toFocus && toFocus.length > 0) {\n                        focusedItem.removeClass(FOCUS_STATE);\n                        toFocus.addClass(FOCUS_STATE);\n                    }\n                } else if (key === kendoKeys.LEFT) {\n                    if (focusedItem.hasClass(\"k-upload-action\")) {\n                        toFocus = focusedItem.prev(\".k-upload-action\");\n\n                        if (!toFocus || toFocus.length === 0) {\n                            toFocus = focusedItem.parent().find(\".k-upload-action:last\");\n                        }\n                    } else if (focusedItem.length > 0) {\n                        toFocus = focusedItem.find(\".k-upload-action:last\");\n                    }\n\n                    if (toFocus && toFocus.length > 0) {\n                        focusedItem.removeClass(FOCUS_STATE);\n                        toFocus.addClass(FOCUS_STATE);\n                    }\n                }\n\n                if ((!toFocus || toFocus.length === 0) && (key === kendoKeys.UP || key === kendoKeys.DOWN)) {\n                    toFocus = that.wrapper.find(\".k-upload-button\");\n                }\n\n                if (toFocus && toFocus.length > 0) {\n                    that._preventFocusRemove = true;\n                    toFocus.trigger(\"focus\");\n                }\n            },\n\n            _asyncCommandKeyNavigation: function(key, focusedItem, eventArgs) {\n                var that = this,\n                    kendoKeys = kendo.keys,\n                    fileEntry = $(focusedItem, that.wrapper);\n\n                that._retryClicked = false;\n\n                if (key === kendoKeys.ESC && focusedItem.find(\".k-i-cancel,.k-svg-i-cancel\").length > 0) {\n                    that.trigger(CANCEL, eventArgs);\n                    that._module.onCancel({ target: fileEntry });\n                    that._checkAllComplete();\n                    that._updateHeaderUploadStatus();\n                    that._preventFocusRemove = true;\n                    that.wrapper.find(\".k-upload-button\").trigger(\"focus\");\n                } else if (key === kendoKeys.SPACEBAR) {\n                    if (focusedItem.find(\".k-i-pause-sm,.k-svg-i-pause-sm\").length > 0) {\n                        that.trigger(PAUSE, eventArgs);\n                        that.pause(focusedItem);\n                        that._updateHeaderUploadStatus();\n                    } else if (focusedItem.find(\".k-i-play-sm,.k-svg-i-play-sm\").length > 0) {\n                        that.trigger(RESUME, eventArgs);\n                        that.resume(focusedItem);\n                    }\n                } else if (key === kendoKeys.ENTER && !focusedItem.is(\".k-file-progress, .k-file-success, .k-file-invalid\")) {\n                    if (that.options.async.chunkSize && !that.options.async.concurrent && $('.k-file-progress', that.wrapper).length > 0) {\n                        return;\n                    }\n\n                    $(WARNINGICON_SELECTOR, focusedItem).remove();\n                    $(PROGRESSBAR_SELECTOR, focusedItem).finish().show();\n\n                    if (!that._module.metaData[fileEntry.data(\"uid\")]) {\n                        that._module.prepareChunk(fileEntry);\n                    }\n\n                    that._module.onRetry({ target: fileEntry });\n                    that._retryClicked = true;\n                }\n            },\n\n            _commandKeyNavigation: function(key, focusedItem) {\n                var that = this,\n                    kendoKeys = kendo.keys,\n                    files = focusedItem.data(\"fileNames\"),\n                    hasValidationErrors = that._filesContainValidationErrors(files),\n                    eventArgs = {\n                        files: files,\n                        headers: {}\n                    };\n\n                if (key === kendoKeys.DELETE) {\n                    if (!that.trigger(REMOVE, eventArgs)) {\n                        that._module.onRemove({ target: $(focusedItem, that.wrapper) }, eventArgs, !hasValidationErrors);\n                        that._preventFocusRemove = true;\n                        that.wrapper.find(\".k-upload-button\").trigger(\"focus\");\n                    }\n                } else if (key === kendoKeys.TAB) {\n                    focusedItem.removeClass(FOCUS_STATE);\n                    focusedItem.attr(TABINDEX, -1);\n                } else if (!!that.options.async.saveUrl) {\n                    that._asyncCommandKeyNavigation(key, focusedItem, eventArgs);\n                }\n            },\n\n            _focusout: function() {\n                var focusedItem = this.wrapper.find(\".k-upload-files .k-file.\" + FOCUS_STATE);\n\n                if (!this._preventFocusRemove) {\n                    focusedItem.removeClass(FOCUS_STATE);\n                    focusedItem.attr(TABINDEX, -1);\n                } else {\n                    this._preventFocusRemove = false;\n                }\n            },\n\n            _onKeyDown: function(e) {\n                var that = this,\n                    focusedItem = that.wrapper.find(\".k-upload-files .k-file.\" + FOCUS_STATE + \",\" + \".k-upload-action.\" + FOCUS_STATE),\n                    kendoKeys = kendo.keys,\n                    commandKeys = [kendoKeys.DELETE, kendoKeys.ESC, kendoKeys.ENTER, kendoKeys.SPACEBAR, kendoKeys.TAB],\n                    key = e.keyCode;\n\n                if (key === kendoKeys.DOWN || key === kendoKeys.UP || key === kendoKeys.LEFT || key === kendoKeys.RIGHT) {\n                    that._arrowKeyNavigation(e, key, focusedItem);\n                } else if (focusedItem.length > 0 && focusedItem.hasClass(\"k-file\") && commandKeys.indexOf(key) > -1 && !that.wrapper.hasClass(\"k-disabled\")) {\n                    if (key === kendoKeys.SPACEBAR) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                    }\n\n                    that._commandKeyNavigation(key, focusedItem);\n                }\n            },\n\n            _onInputChange: function(e) {\n                var that = this;\n                var input = $(e.target);\n                var files = assignGuidToFiles(that._inputFiles(input), that._isAsyncNonBatch());\n\n                validateFiles(files, that.options.validation);\n\n                var prevented = that.trigger(SELECT, { files: files });\n                if (prevented) {\n                    that._addInput(input);\n                    input.remove();\n                } else {\n                    that._module.onSelect({ target: input }, files);\n                }\n                that.focus();\n            },\n\n            _onUploadButtonKeydown: function(e) {\n                var key = e.keyCode,\n                    kendoKeys = kendo.keys;\n\n                if (key === kendoKeys.ENTER || key === kendoKeys.SPACEBAR) {\n                    this.wrapper.find(\".k-upload-button-wrap input\").last().trigger(\"click\");\n                }\n            },\n\n            _readDirectory: function(item) {\n                var deferred = new $.Deferred();\n                var dirReader = item.createReader();\n                var allFolderFiles = [];\n\n                var readEntries = function() {\n                    dirReader.readEntries(function(entries) {\n                        if (!entries.length) {\n                            deferred.resolve(allFolderFiles);\n                        } else {\n                            allFolderFiles = allFolderFiles.concat(entries);\n                            readEntries();\n                        }\n                    }, deferred.reject);\n                };\n\n                readEntries();\n\n                 return deferred.promise();\n            },\n\n            _readFile: function(item) {\n                var that = this;\n                var fullpath = item.fullPath;\n\n                item.file(function(file) {\n                        file.relativePath = fullpath.slice(1);\n                        that.droppedFolderFiles.push(file);\n                        that.droppedFolderCounter --;\n                        if (that.droppedFolderCounter === 0) {\n                            setTimeout(function() {\n                                if (that.droppedFolderCounter === 0) {\n                                    if (that.droppedFolderFiles.length) {\n                                        that._proceedDroppedItems(that.droppedFolderFiles);\n                                        that.droppedFolderFiles = [];\n                                    }\n                                }\n                            },0);\n                        }\n                }, function() {\n                    logToConsole(\"File error.\");\n                });\n            },\n\n            _traverseFileTree: function(item, skipCounter) {\n                var that = this;\n                if (!skipCounter) {\n                    that.droppedFolderCounter--;\n                }\n\n                this._readDirectory(item).then(function(items) {\n                    that.droppedFolderCounter += items.length;\n                    for (var i = 0; i < items.length; i++) {\n                        if (items[i].isFile) {\n                            that._readFile(items[i]);\n                        } else if (items[i].isDirectory) {\n                            that._traverseFileTree(items[i]);\n                        }\n                    }\n                });\n            },\n\n            _onDrop: function(e) {\n                var dt = e.originalEvent.dataTransfer;\n                var that = this;\n                var droppedFiles = dt.files;\n                var length;\n\n                stopEvent(e);\n               if (that.options.directoryDrop && dt.items) {\n                    length = dt.items.length;\n                    that.droppedFolderCounter = 0;\n                    that.droppedFolderFiles = [];\n\n                    for (var i = 0; i < length; i++) {\n                        if (dt.items[i].webkitGetAsEntry) {\n                            var entry = dt.items[i].webkitGetAsEntry();\n\n                            if (entry.isDirectory) {\n                                that._traverseFileTree(entry, true);\n                            } else if (entry.isFile) {\n                                that.droppedFolderFiles.push(dt.files[i]);\n                            }\n                        } else {\n                             that._proceedDroppedItems(droppedFiles);\n                        }\n                    }\n               } else {\n                   that._proceedDroppedItems(droppedFiles);\n               }\n            },\n\n            _proceedDroppedItems: function(droppedFiles) {\n                var that = this;\n                var files = assignGuidToFiles(getAllFileInfo(droppedFiles), that._isAsyncNonBatch());\n\n                  if (droppedFiles.length > 0 && !that.wrapper.hasClass(\"k-disabled\")) {\n                    if (!that.multiple && files.length > 1) {\n                        files.splice(1, files.length - 1);\n                    }\n\n                    validateFiles(files, that.options.validation);\n\n                    var prevented = that.trigger(SELECT, { files: files });\n                    if (!prevented) {\n                        that._module.onSelect({ target: $(\".k-dropzone\", that.wrapper) }, files);\n                    }\n                }\n            },\n\n            _filesContainValidationErrors: function(files) {\n                var hasErrors = false;\n\n                $(files).each(function(index, file) {\n                    if (file[VALIDATIONERRORS] && file[VALIDATIONERRORS].length > 0) {\n                        hasErrors = true;\n                        return false;\n                    }\n                });\n\n                return hasErrors;\n            },\n\n            _isAsyncNonBatch: function() {\n                return (this._async && !this.options.async.batch) || false;\n            },\n\n            _renderInitialFiles: function(files) {\n                var that = this;\n                var idx = 0;\n                files = assignGuidToFiles(files, true);\n\n                for (idx = 0; idx < files.length; idx++) {\n                    var currentFile = files[idx];\n\n                    var fileEntry = that._enqueueFile(currentFile.name, { fileNames: [currentFile] });\n                    fileEntry.addClass(\"k-file-success\").data(\"files\", [files[idx]]);\n\n                    if (that._supportsRemove()) {\n                        that._fileAction(fileEntry, REMOVE);\n                    }\n                }\n            },\n\n            _prepareTemplateData: function(name, data) {\n                var filesData = data.fileNames,\n                    templateData = {},\n                    totalSize = 0,\n                    idx = 0;\n\n                for (idx = 0; idx < filesData.length; idx++) {\n                    totalSize += filesData[idx].size;\n                }\n\n                templateData.name = name;\n                templateData.size = totalSize;\n                templateData.files = data.fileNames;\n\n                return templateData;\n            },\n\n            _createProgressbarWapper: function() {\n                return \"<div class='\" + PROGRESSBAR_CLASS + \" k-hidden'></div>\";\n            },\n\n            _createFileIconWrapper: function(fileTypeIcon) {\n                return \"<span class='k-file-icon-wrapper'>\" +\n                    kendo.ui.icon({ icon: fileTypeIcon, iconClass: \"k-file-icon\", size: \"xxlarge\" }) +\n                    \"<span class='k-file-state'></span>\" +\n                    \"</span>\";\n            },\n\n            _progressbarInit: function(wrapper) {\n                let progressbar = wrapper.kendoProgressBar({\n                    animation: false,\n                    showStatus: false\n                }).data(\"kendoProgressBar\");\n                this.progressbars.push(progressbar);\n            },\n\n            _prepareDefaultSingleFileEntryTemplate: function(data) {\n                var that = this;\n                var file = data.fileNames[0];\n                var fileSize = getTotalFilesSizeMessage(data.fileNames);\n                var fileGroup = kendo.getFileGroup(file.extension, true);\n                var errors = file[VALIDATIONERRORS];\n                var isError = errors && errors.length > 0;\n                var invalidClass = isError ? \" k-file-invalid k-file-error\" : \"\";\n                var fileDetails = isError ?\n                        \"<span class='k-file-validation-message' aria-live='polite'>\" + kendo.htmlEncode(that.localization[errors[0]]) + \"</span>\" :\n                        \"<span class='k-file-size'>\" + fileSize + \"</span>\";\n                var template = \"\";\n\n                template += \"<li class='k-file\" + invalidClass + \"'><div class='k-file-single'>\" +\n                    this._createProgressbarWapper() +\n                    this._createFileIconWrapper(fileGroup) +\n                    \"<span class='k-file-info'>\" +\n                        \"<span class='k-file-name' title='\" + file.name + \"'>\" + file.name + \"</span>\" +\n                        fileDetails +\n                    \"</span>\";\n\n                template += \"<span class='k-upload-actions'></span></div>\";\n\n                return $(template);\n            },\n\n            _prepareDefaultMultipleFileEntriesTemplate: function(data) {\n                var that = this;\n                var files = data.fileNames;\n                var filesHaveValidationErrors = that._filesContainValidationErrors(files);\n                var totalFileSize = getTotalFilesSizeMessage(files);\n                var template = \"\";\n                var i, currentFile;\n                var invalidClass = filesHaveValidationErrors ? \" k-file-invalid k-file-error\" : \"\";\n\n                template += \"<li class='k-file\" + invalidClass + \"'><div class='k-file-multiple'>\" +\n                    this._createProgressbarWapper() +\n                    this._createFileIconWrapper(\"copy\");\n\n                files.sort(function(a, b) {\n                    if (a[VALIDATIONERRORS]) { return -1; }\n\n                    if (b[VALIDATIONERRORS]) { return 1; }\n\n                    return 0;\n                });\n\n                template += \"<span class='k-multiple-files-wrapper'>\";\n                for (i = 0; i < files.length; i++) {\n                    currentFile = files[i];\n                    var fileSize = getTotalFilesSizeMessage([currentFile]);\n\n                    template += \"<span class='k-file-info'>\";\n                    if (currentFile[VALIDATIONERRORS] && currentFile[VALIDATIONERRORS].length > 0) {\n                        template += \"<span class='k-file-name k-file-name-invalid' title='\" + currentFile.name + \"'>\" + currentFile.name + \"</span>\";\n                    } else {\n                        template += \"<span class='k-file-name' title='\" + currentFile.name + \"'>\" + currentFile.name + \"</span>\";\n                    }\n                    template += \"<span class='k-file-size'>\" + fileSize + \"</span></span>\";\n                }\n\n                if (filesHaveValidationErrors) {\n                    template += \"<span class='k-file-validation-message' aria-live='polite'>\" + kendo.htmlEncode(that.localization.invalidFiles) + \"</span>\";\n                } else {\n                    template += \"<span class='k-file-summary'>Total: \" + files.length + \" files, \" + totalFileSize + \"</span>\";\n                }\n\n                template += \"</span><span class='k-upload-actions'></span></div>\";\n\n                return $(template);\n            },\n\n            _enqueueFile: function(name, data) {\n                var that = this;\n                var existingFileEntries;\n                var fileEntry;\n                var fileUid = data.fileNames[0].uid;\n                var fileList = $(\".k-upload-files\", that.wrapper);\n                var options = that.options;\n                var template = options.template;\n                var templateData;\n                var removeEventArgs;\n                var progressbarSelector = template ? PROGRESSBAR_TEMPLATE_SELECTOR : PROGRESSBAR_SELECTOR;\n                var progressbar;\n                var isProgressbar;\n\n                if (fileList.length === 0) {\n                    fileList = $(\"<ul class='k-upload-files'></ul>\").appendTo(that.wrapper);\n                    if (!that.options.showFileList) {\n                        fileList.hide();\n                    }\n\n                    that.wrapper.removeClass(\"k-upload-empty\");\n                }\n\n                existingFileEntries = $(\".k-file\", fileList);\n\n                if (!template) {\n                    if (data.fileNames.length === 1) {\n                        fileEntry = that._prepareDefaultSingleFileEntryTemplate(data);\n                    } else {\n                        fileEntry = that._prepareDefaultMultipleFileEntriesTemplate(data);\n                    }\n                } else {\n                    templateData = that._prepareTemplateData(name, data);\n                    template = kendo.template(template);\n\n                    fileEntry = $(\"<li class='k-file'>\" + template(templateData) + \"</li>\");\n                    fileEntry.find(\".k-upload-action\").addClass(\"k-button k-icon-button k-button-md k-rounded-md k-button-flat k-button-flat-base\");\n                }\n\n                progressbar = $(progressbarSelector, fileEntry[0]);\n                isProgressbar = progressbar.length > 0;\n\n                if (isProgressbar) {\n                    that._progressbarInit(progressbar);\n                }\n\n                fileEntry\n                    .attr(kendo.attr(\"uid\"), fileUid)\n                    .appendTo(fileList)\n                    .data(data);\n\n                if (!that._async && isProgressbar) {\n                    progressbar.data(\"kendoProgressBar\").value(100);\n                }\n\n                if (!that.multiple && existingFileEntries.length > 0) {\n                    removeEventArgs = {\n                        files: existingFileEntries.data(\"fileNames\"),\n                        headers: {}\n                    };\n                    if (!that.trigger(REMOVE, removeEventArgs)) {\n                        that._module.onRemove({ target: $(existingFileEntries, that.wrapper) }, removeEventArgs);\n                    }\n                }\n\n                return fileEntry;\n            },\n\n            _removeFileEntry: function(fileEntry) {\n                var that = this;\n                var fileList = fileEntry.closest(\".k-upload-files\");\n                var allFiles, allCompletedFiles, allInvalidFiles;\n\n                fileEntry.remove();\n                allFiles = $(\".k-file\", fileList);\n                allCompletedFiles = $(\".k-file-success, .k-file-error\", fileList);\n\n                if (allCompletedFiles.length === allFiles.length) {\n                    this._hideActionButtons();\n                }\n\n                if (allFiles.length === 0) {\n                    fileList.remove();\n                    that.wrapper.addClass(\"k-upload-empty\");\n                    that._hideHeaderUploadstatus();\n                } else {\n                    that._updateHeaderUploadStatus();\n                }\n            },\n\n            _fileAction: function(fileElement, actionKey, skipClear) {\n                var iconsNameDictionary = { remove: \"x\", cancel: \"cancel\", retry: \"arrow-rotate-cw-small\", pause: \"pause-sm\" };\n                var firstActionButton;\n                let actionKeyText = kendo.htmlEncode(this.localization[actionKey]);\n\n                if (!iconsNameDictionary.hasOwnProperty(actionKey)) {\n                    return;\n                }\n                if (!skipClear) {\n                    this._clearFileAction(fileElement);\n                }\n                if (!this.options.template) {\n                    if (!skipClear) {\n                        fileElement.find(\".k-upload-action\").remove();\n                    }\n                    fileElement.find(\".k-upload-actions\").append(\n                        this._renderAction(iconsNameDictionary[actionKey], actionKeyText, actionKey == \"retry\" ? \"k-i-retry\" : \"\")\n                    );\n                } else {\n                    firstActionButton = fileElement.find(\".k-upload-action\").first();\n                    if (!firstActionButton.find(\".k-icon,.k-svg-icon\").length) {\n                        let firstActionIcon = kendo.ui.icon($(`<span title=\"${actionKeyText}\" aria-label=\"${actionKeyText}\"></span>`), {\n                            icon: iconsNameDictionary[actionKey],\n                            iconClass: \"k-button-icon\" + (actionKey == \"retry\" ? \" k-i-retry\" : \"\")\n                        });\n                        firstActionButton\n                            .addClass(\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button\")\n                            .append(firstActionIcon)\n                            .show();\n                    } else if (firstActionButton.next(\".k-upload-action\").length) {\n                        let firstActionIcon = kendo.ui.icon($(`<span title=\"${actionKeyText}\" aria-label=\"${actionKeyText}\"></span>`), {\n                            icon: iconsNameDictionary[actionKey],\n                            iconClass: \"k-button-icon\" + (actionKey == \"retry\" ? \" k-i-retry\" : \"\")\n                        });\n                        firstActionButton.next(\".k-upload-action\")\n                            .addClass(\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button\")\n                            .append(firstActionIcon)\n                            .show();\n                    }\n                }\n            },\n\n            _fileState: function(fileEntry, stateKey) {\n                var localization = this.localization,\n                    states = {\n                        uploading: {\n                            text: localization.statusUploading\n                        },\n                        uploaded: {\n                            text: localization.statusUploaded\n                        },\n                        failed: {\n                            text: localization.statusFailed\n                        }\n                    },\n                    currentState = states[stateKey];\n\n                if (currentState) {\n                    $(\"span.k-file-state\", fileEntry).text(kendo.htmlEncode(currentState.text));\n                }\n            },\n\n            _renderAction: function(iconName, actionText, iconClass) {\n                if (iconName !== \"\") {\n                    return $(\n                    \"<button type='button' class='k-button k-icon-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-upload-action' aria-hidden='true' aria-label='\" + actionText + \"' tabindex='-1'>\" +\n                        kendo.ui.icon($(`<span title=\"${actionText}\"></span>`), { icon: iconName, iconClass: \"k-button-icon\" + (iconClass ? ` ${iconClass}` : \"\") }) +\n                    \"</button>\"\n                    ).on(\"focus\", function() { $(this).addClass(FOCUS_STATE); })\n                     .on(\"blur\", function() { $(this).removeClass(FOCUS_STATE); });\n                }\n                else {\n                    return $(\n                    \"<button type='button' class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base'>\" +\n                        '<span class=\"k-button-text\">' +\n                            actionText +\n                        '</span>' +\n                    \"</button>\"\n                    );\n                }\n            },\n\n            _clearFileAction: function(fileElement) {\n                $(\".k-upload-action\", fileElement).empty().hide();\n            },\n\n            _onFileAction: function(e) {\n                var that = this;\n                if (!that.wrapper.hasClass(\"k-disabled\")) {\n                    var button = $(e.target).closest(\".k-upload-action\");\n                    var icon = button.find(\".k-icon,.k-svg-icon\");\n                    var fileEntry = button.closest(\".k-file\");\n                    var files = fileEntry.data(\"fileNames\");\n                    var hasValidationErrors = that._filesContainValidationErrors(files);\n                    var eventArgs = {\n                        files: files,\n                        headers: {}\n                    };\n\n                    that._retryClicked = false;\n\n                    if (icon.is(\".k-i-x,.k-svg-i-x\")) {\n                        if (!that.trigger(REMOVE, eventArgs)) {\n                            that._module.onRemove({ target: $(fileEntry, that.wrapper) }, eventArgs, !hasValidationErrors);\n                            that.wrapper.find(\".k-upload-button\").trigger(\"focus\");\n                        }\n                    } else if (icon.is(\".k-i-cancel,.k-svg-i-cancel\")) {\n                        that.trigger(CANCEL, eventArgs);\n                        that._module.onCancel({ target: $(fileEntry, that.wrapper) });\n                        that._checkAllComplete();\n                        that._updateHeaderUploadStatus();\n                        that.wrapper.find(\".k-upload-button\").trigger(\"focus\");\n                    } else if (icon.is(\".k-i-pause-sm,.k-svg-i-pause-sm\")) {\n                        that.trigger(PAUSE, eventArgs);\n                        that.pause(fileEntry);\n                        that._updateHeaderUploadStatus();\n                    } else if (icon.is(\".k-i-play-sm,.k-svg-i-play-sm\")) {\n                        that.trigger(RESUME, eventArgs);\n                        that.resume(fileEntry);\n                    } else if (icon.hasClass(\"k-i-retry\")) {\n                        $(\".k-i-exclamation-circle\", fileEntry).remove();\n                        $(PROGRESSBAR_SELECTOR, fileEntry).finish().show();\n                        that._module.onRetry({ target: $(fileEntry, that.wrapper) });\n                        that._retryClicked = true;\n                    }\n\n                    fileEntry.addClass(FOCUS_STATE);\n                }\n\n                return false;\n            },\n\n            _onUploadSelected: function() {\n                var that = this;\n                var wrapper = that.wrapper;\n\n                if (!wrapper.hasClass(\"k-disabled\")) {\n                    this._module.onSaveSelected();\n                }\n\n                return false;\n            },\n\n            _onClearSelected: function() {\n                var that = this;\n                var wrapper = that.wrapper;\n\n                var clearEventArgs = { };\n                if (!wrapper.hasClass(\"k-disabled\") && !that.trigger(CLEAR, clearEventArgs)) {\n                    that.clearAllFiles();\n                }\n\n                return false;\n            },\n\n            _onFileProgress: function(e, percentComplete) {\n                var progressPct;\n                var progressBar = $(PROGRESSBAR_SELECTOR, e.target).data(\"kendoProgressBar\");\n\n                if (percentComplete > 100) {\n                    percentComplete = 100;\n                }\n\n                $(PROGRESSBAR_SELECTOR, e.target).removeClass('k-hidden');\n\n                if (!this.options.template) {\n                    progressPct = $(\".k-upload-pct\", e.target);\n\n                    if (progressPct.length === 0) {\n                        $(\".k-upload-actions\", e.target).prepend(\"<span class='k-upload-pct'></span>\");\n                    }\n\n                    if (percentComplete !== 100) {\n                        $(\".k-upload-pct\", e.target).text(percentComplete + \"%\");\n                    } else {\n                        $(\".k-upload-pct\", e.target).remove();\n                    }\n                }\n\n                if (progressBar) {\n                    progressBar.value(percentComplete);\n                }\n\n                this.trigger(PROGRESS, {\n                    files: getFileEntry(e).data(\"fileNames\"),\n                    percentComplete: percentComplete\n                });\n            },\n\n            _onUploadSuccess: function(e, response, xhr) {\n                var that = this;\n                var fileEntry = getFileEntry(e);\n                var files = fileEntry.data(\"fileNames\");\n                var fileInfo = fileEntry.find('.k-file-summary');\n                var fileSize = fileEntry.find('.k-file-size');\n\n                var prevented = that.trigger(SUCCESS, {\n                    files: fileEntry.data(\"fileNames\"),\n                    response: response,\n                    operation: \"upload\",\n                    XMLHttpRequest: xhr\n                });\n\n                if (prevented) {\n                    that._setUploadErrorState(fileEntry);\n                } else {\n                    that._fileState(fileEntry, \"uploaded\");\n                    fileEntry.removeClass('k-file-progress').addClass('k-file-success');\n\n                    if (fileInfo.length > 0) {\n                        fileInfo.addClass('k-hidden')\n                            .after('<span class=\"k-file-validation-message\" aria-live=\"polite\">' + files.length + ' ' + kendo.htmlEncode(that.localization.uploadSuccess) + '</span>');\n                    } else if (fileSize.length > 0) {\n                        fileSize.addClass('k-hidden')\n                            .after('<span class=\"k-file-validation-message\" aria-live=\"polite\">' + kendo.htmlEncode(that.localization.uploadSuccess) + '</span>');\n                    }\n\n                    that._updateHeaderUploadStatus();\n\n                    if (that._supportsRemove()) {\n                        that._fileAction(fileEntry, REMOVE);\n                    } else {\n                        that._clearFileAction(fileEntry);\n                    }\n                }\n\n                that._hideUploadProgress(fileEntry);\n\n                that._checkAllComplete();\n            },\n\n            _onUploadError: function(e, xhr) {\n                var that = this;\n                var module = that._module;\n                var fileEntry = getFileEntry(e);\n                var fileUid = fileEntry.data(\"uid\");\n\n                that._setUploadErrorState(fileEntry);\n\n                that.trigger(ERROR, {\n                    operation: \"upload\",\n                    files: fileEntry.data(\"fileNames\"),\n                    XMLHttpRequest: xhr\n                });\n\n                logToConsole(\"Server response: \" + xhr.responseText);\n\n                if (!that.options.async.chunkSize) {\n                    that._hideUploadProgress(fileEntry);\n                } else {\n                    if (module._decreasePosition) {\n                        module._decreasePosition(fileUid);\n                    }\n                }\n\n               that._checkAllComplete();\n\n                if (this.options.async.autoRetryAfter) {\n                   this._autoRetryAfter(fileEntry);\n                }\n            },\n            _autoRetryAfter: function(fileEntry) {\n                var that = this;\n                var retries = this._module.retries;\n\n                if (!retries) {\n                    return;\n                }\n\n                if (!retries[fileEntry.data(\"uid\")]) {\n                    retries[fileEntry.data(\"uid\")] = 1;\n                }\n\n                if (retries[fileEntry.data(\"uid\")] <= this.options.async.maxAutoRetries) {\n                    retries[fileEntry.data(\"uid\")]++;\n                    setTimeout(function() {\n                        that._module.performUpload(fileEntry);\n                    },this.options.async.autoRetryAfter);\n                }\n            },\n            _setUploadErrorState: function(fileEntry) {\n                var that = this,\n                    uploadPercentage,\n                    files = fileEntry.data(\"fileNames\"),\n                    fileInfo = fileEntry.find('.k-file-summary'),\n                    fileSize = fileEntry.find('.k-file-size');\n\n                that._fileState(fileEntry, \"failed\");\n                fileEntry.removeClass('k-file-progress').addClass('k-file-error');\n\n                if (fileInfo.length > 0) {\n                    fileInfo.addClass('k-hidden')\n                        .after('<span class=\"k-file-validation-message\" aria-live=\"polite\">' + files.length + ' ' + kendo.htmlEncode(that.localization.uploadFail) + '</span>');\n                } else if (fileSize.length > 0) {\n                    fileSize.addClass('k-hidden')\n                        .after('<span class=\"k-file-validation-message\" aria-live=\"polite\">' + kendo.htmlEncode(that.localization.uploadFail) + '</span>');\n                }\n\n                that._updateUploadProgress(fileEntry);\n\n                uploadPercentage = $('.k-upload-pct', fileEntry);\n\n                if (uploadPercentage.length > 0) {\n                    uploadPercentage.remove();\n                }\n\n                this._updateHeaderUploadStatus();\n                this._fileAction(fileEntry, \"retry\");\n                this._fileAction(fileEntry, REMOVE, true);\n\n                if (that._retryClicked) {\n                    fileEntry.trigger(\"focus\");\n                }\n            },\n\n           _updateUploadProgress: function(fileEntry) {\n                var that = this;\n                var progressbar = $( PROGRESSBAR_SELECTOR, fileEntry);\n                var isProgressbar = progressbar.length > 0;\n\n                if (!that.options.async.chunkSize && isProgressbar) {\n                    progressbar.data(\"kendoProgressBar\").value(100);\n                } else {\n                    var fileUid = fileEntry.data(\"uid\");\n                    if (that._module.metaData) {\n                        var fileMetaData = that._module.metaData[fileUid];\n\n                        if (fileMetaData) {\n                            var percentComplete = fileMetaData.totalChunks ? Math.round(((fileMetaData.chunkIndex) / fileMetaData.totalChunks) * 100) : 100;\n\n                            that._onFileProgress({ target: $(fileEntry, that.wrapper) }, percentComplete);\n                        }\n                    }\n                }\n            },\n\n            _hideUploadProgress: function(fileEntry) {\n                $(PROGRESSBAR_SELECTOR, fileEntry)\n                    .delay(PROGRESSHIDEDELAY)\n                    .fadeOut(PROGRESSHIDEDURATION, function() {\n                        if ($(this).data(\"kendoProgressBar\")) {\n                            $(this).data(\"kendoProgressBar\").value(0);\n                        }\n                    });\n            },\n\n            _showActionButtons: function() {\n                var that = this;\n                var actionsWrapper = $(\".k-actions\", that.wrapper);\n                var uploadButton = $(\".k-upload-selected\", that.wrapper);\n                var clearButton = $(\".k-clear-selected\", that.wrapper);\n\n                if (uploadButton.length === 0) {\n                    uploadButton = $(kendo.html.renderButton(`<button class='k-upload-selected'>${kendo.htmlEncode(this.localization.uploadSelectedFiles)}</button>`, {\n                            icon: 'upload',\n                            themeColor: 'primary'\n                        }));\n\n                    clearButton = $(kendo.html.renderButton(`<button class='k-clear-selected'>${kendo.htmlEncode(this.localization.clearSelectedFiles)}</button>`, {\n                        icon: 'x'\n                    }));\n\n                }\n\n                if (!actionsWrapper.length) {\n                    actionsWrapper = $(\"<div />\")\n                        .addClass(\"k-actions\")\n                        .append(uploadButton, clearButton);\n                }\n\n\n                this.wrapper.append(actionsWrapper);\n            },\n\n            _hideActionButtons: function() {\n                $(\".k-actions\", this.wrapper).remove();\n            },\n\n            _showHeaderUploadStatus: function(isUploading) {\n                var that = this;\n                var localization = that.localization;\n                var dropZone = $(\".k-dropzone\", that.wrapper);\n                var headerUploadStatus = $('.k-upload-status', that.wrapper);\n\n                if (headerUploadStatus.length !== 0) {\n                    headerUploadStatus.remove();\n                }\n\n                $('.k-dropzone-hint', that.wrapper).addClass('k-hidden');\n\n                headerUploadStatus = '<span class=\"k-upload-status\"><span class=\"k-icon\"></span></span>';\n\n                if (isUploading) {\n                    headerUploadStatus = $(headerUploadStatus).append(kendo.htmlEncode(localization.headerStatusUploading));\n                    kendo.ui.icon(headerUploadStatus.find(\".k-icon,.k-svg-icon\"), { icon: headerStatusIconName.loading });\n                } else {\n                    headerUploadStatus = $(headerUploadStatus).append(kendo.htmlEncode(localization.headerStatusUploaded));\n                    kendo.ui.icon(headerUploadStatus.find(\".k-icon,.k-svg-icon\"), { icon: headerStatusIconName.warning });\n                }\n\n                if (dropZone.length > 0) {\n                    dropZone.append(headerUploadStatus);\n                } else {\n                    $('.k-upload-button', that.wrapper).after(headerUploadStatus);\n                }\n            },\n\n            _updateHeaderUploadStatus: function() {\n                var that = this;\n                var headerUploadStatus = $('.k-upload-status', this.wrapper);\n                var currentlyUploading = $('.k-file', that.wrapper).not('.k-file-success, .k-file-error');\n                var currentlyFailed = $('.k-file-error', that.wrapper);\n                var currentlyPaused = $('.k-file', that.wrapper).find(\".k-i-play-sm,.k-svg-i-play-sm\");\n                var headerUploadStatusIcon;\n\n                if (currentlyPaused.length &&\n                (currentlyPaused.length === currentlyUploading.length || !that.options.async.concurrent)) {\n                    headerUploadStatusIcon = $('.k-icon,.k-svg-icon', headerUploadStatus).removeClass();\n\n                    if (headerUploadStatusIcon.length) {\n                        kendo.ui.icon(headerUploadStatusIcon, { icon: \"pause-sm\" });\n\n                        headerUploadStatus.html(headerUploadStatusIcon)\n                            .append(kendo.htmlEncode(that.localization.headerStatusPaused));\n                    }\n                } else if (currentlyUploading.length === 0 || currentlyFailed.length > 0) {\n                    headerUploadStatus = $('.k-upload-status', that.wrapper);\n                    headerUploadStatusIcon = $('.k-icon,.k-svg-icon', headerUploadStatus).removeClass();\n\n                    if (headerUploadStatusIcon.length) {\n\n                        kendo.ui.icon(headerUploadStatusIcon, { icon: currentlyFailed.length !== 0 ? headerStatusIconName.warning : headerStatusIconName.success });\n\n                        headerUploadStatus.html(headerUploadStatusIcon)\n                            .append(kendo.htmlEncode(that.localization.headerStatusUploaded));\n                    }\n                }\n            },\n\n            _hideHeaderUploadstatus: function() {\n                var that = this,\n                    dropZone = that.options.dropZone;\n\n                $('.k-upload-status', this.wrapper).remove();\n\n                if (dropZone === \"\") {\n                    $('.k-dropzone-hint', that.wrapper).removeClass('k-hidden');\n                }\n            },\n\n            _onParentFormSubmit: function() {\n                var upload = this,\n                    element = upload.element;\n\n                if (typeof this._module.onAbort !== 'undefined') {\n                    this._module.onAbort();\n                }\n\n                if (!element.value) {\n                    var input = $(element);\n\n                    // Prevent submitting an empty input\n                    input.attr(\"disabled\", \"disabled\");\n\n                    window.setTimeout(function() {\n                        // Restore the input so the Upload remains functional\n                        // in case the user cancels the form submit\n                        input.prop(\"disabled\", false);\n                    }, 0);\n                }\n            },\n\n            _onParentFormReset: function() {\n                $(\".k-upload-files\", this.wrapper).remove();\n            },\n\n            _supportsFormData: function() {\n                return typeof(FormData) != \"undefined\";\n            },\n\n            _supportsMultiple: function() {\n                var windows = this._userAgent().indexOf(\"Windows\") > -1;\n\n                return !kendo.support.browser.opera &&\n                       !(kendo.support.browser.safari && windows);\n            },\n\n            _supportsDrop: function() {\n                var userAgent = this._userAgent().toLowerCase();\n                var isChrome = /chrome/.test(userAgent);\n                var isSafari = !isChrome && /safari/.test(userAgent);\n                var isWindowsSafari = isSafari && /windows/.test(userAgent);\n\n                return !isWindowsSafari && this._supportsFormData() && (this.options.async.saveUrl);\n            },\n\n            _userAgent: function() {\n                return navigator.userAgent;\n            },\n\n            _setupDropZone: function() {\n                var that = this;\n\n                var ns = that._ns;\n                var dropZone = $(\".k-dropzone\", that.wrapper)\n\n                    .on(\"dragenter\" + ns, stopEvent)\n                    .on(\"dragover\" + ns, function(e) {\n                        if (e.originalEvent) {\n                            e.originalEvent.dataTransfer.dropEffect = \"copy\";\n                        }\n                        e.preventDefault();\n                     })\n                    .on(\"drop\" + ns, that._onDrop.bind(that));\n\n                if (!dropZone.find(\".k-dropzone-hint\").length) {\n                    dropZone.append($(\"<span class='k-dropzone-hint'>\" + kendo.htmlEncode(that.localization.dropFilesHere) + \"</span>\"));\n                }\n\n                bindDragEventWrappers(dropZone, ns,\n                    function() {\n                        if (!dropZone.closest('.k-upload').hasClass(\"k-disabled\")) {\n                            dropZone.addClass(HOVER_STATE);\n                        }\n                    },\n                    function() { dropZone.removeClass(HOVER_STATE); });\n\n                that._bindDocumentDragEventWrappers(dropZone);\n            },\n\n            _setupCustomDropZone: function() {\n                var that = this;\n                var dropZone = $(that.options.dropZone);\n\n                if (!that.wrapper.find(\".k-dropzone-hint\").length) {\n                    $(\".k-dropzone\", that.wrapper)\n                        .append($(\"<span class='k-dropzone-hint k-hidden'>\" + kendo.htmlEncode(that.localization.dropFilesHere) + \"</span>\"));\n                } else {\n                    // Dropzone hint in upload should be hidden if customDropZone is used\n                    $('.k-dropzone-hint', that.wrapper).addClass('k-hidden');\n                }\n\n                var ns = that._ns;\n                dropZone.on(\"dragenter\" + ns, stopEvent)\n                        .on(\"dragover\" + ns, function(e) {\n                            if (e.originalEvent) {\n                                e.originalEvent.dataTransfer.dropEffect = \"copy\";\n                            }\n                            e.preventDefault();\n                        })\n                        .on(\"drop\" + ns, that._onDrop.bind(that));\n\n                bindDragEventWrappers(dropZone, ns,\n                    function(e) {\n                        if (!that.wrapper.hasClass(\"k-disabled\")) {\n                            dropZone.removeClass(HOVER_STATE);\n                            dropZone.addClass(HOVER_STATE);\n                            $(e.target).addClass(HOVER_STATE);\n                        }\n                    },\n                    function() {\n                        dropZone.removeClass(HOVER_STATE);\n                    }\n                );\n\n                that._bindDocumentDragEventWrappers(dropZone);\n            },\n\n            _bindDocumentDragEventWrappers: function(dropZone) {\n                var that = this;\n                var ns = that._ns;\n\n                bindDragEventWrappers($(document), ns,\n                    function() {\n                        if (!that.wrapper.hasClass(\"k-disabled\")) {\n                            dropZone.addClass(\"k-dropzone-active\");\n                            dropZone.closest('.k-upload').removeClass('k-upload-empty');\n                            dropZone.find('.k-dropzone-hint').removeClass('k-hidden');\n                        }\n                    },\n                    function() {\n                        dropZone.removeClass(\"k-dropzone-active\");\n                        dropZone.find('.k-dropzone-hint').addClass('k-hidden');\n                        if ($('li.k-file', dropZone.closest('.k-upload')).length === 0) {\n                            dropZone.closest('.k-upload').addClass('k-upload-empty');\n                        }\n                    }\n                );\n            },\n\n            _toggleDropZone: function() {\n                var that = this,\n                    dropZone = that.options.dropZone;\n\n                if (!that._supportsDrop()) {\n                    return;\n                }\n\n                $(dropZone).off(that._ns);\n                $(\".k-dropzone\", that.wrapper).off(that._ns);\n\n                if (dropZone !== \"\") {\n                    that._setupCustomDropZone();\n                } else {\n                    that._setupDropZone();\n                }\n            },\n\n            _supportsRemove: function() {\n                return !!this.options.async.removeUrl;\n            },\n\n            _submitRemove: function(fileNames, eventArgs, onSuccess, onError) {\n                var upload = this,\n                    removeField = upload.options.async.removeField || \"fileNames\",\n                    params = $.extend(eventArgs.data, antiForgeryTokens());\n\n                params[removeField] = fileNames;\n\n                jQuery.ajax({\n                      type: this.options.async.removeVerb,\n                      dataType: \"json\",\n                      dataFilter: normalizeJSON,\n                      url: this.options.async.removeUrl,\n                      traditional: true,\n                      data: params,\n                      headers: eventArgs.headers,\n                      success: onSuccess,\n                      error: onError,\n                      xhrFields: {\n                        withCredentials: this.options.async.withCredentials\n                      }\n                });\n            },\n\n            _wrapInput: function(input) {\n                var that = this;\n                var options = that.options;\n                var hasLabel = !!input.attr(\"id\") && $(\"[for='\" + input.attr(\"id\") + \"']\").length > 0;\n                var selectText = kendo.htmlEncode(that.localization.select);\n                var uploadButton = $(\"<div class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-upload-button' tabindex='0' role='button'><span class='k-button-text'></span></div>\");\n\n                uploadButton.find('.k-button-text').text(selectText);\n\n                input.wrap(\"<div class='k-upload' role='application'><div class='k-dropzone k-upload-dropzone'><div class='k-upload-button-wrap'></div></div></div>\");\n                uploadButton.prependTo(input.parent());\n\n                if (!options.async.saveUrl) {\n                    input.closest(\".k-upload\").addClass(\"k-upload-sync\");\n                } else {\n                    input.closest(\".k-upload\").addClass(\"k-upload-async\");\n                }\n\n                input.closest(\".k-upload\").addClass(\"k-upload-empty\");\n\n                if (!hasLabel && !input.attr(\"aria-label\")) {\n                    input.attr(\"aria-label\", selectText);\n                }\n\n                input.attr({\n                    tabindex: -1,\n                    \"aria-hidden\": true\n                });\n\n                return input.closest(\".k-upload\");\n            },\n\n            _checkAllComplete: function() {\n                if ($(\".k-file.k-file-progress\", this.wrapper).length === 0) {\n                    this.trigger(COMPLETE);\n                }\n            },\n\n            _inputFiles: function(sourceInput) {\n                return inputFiles(sourceInput);\n            }\n        });\n\n        // Synchronous upload module\n        var syncUploadModule = function(upload) {\n            this.name = \"syncUploadModule\";\n            this.element = upload.wrapper;\n            this.upload = upload;\n            this.element\n                .closest(\"form\")\n                    .attr(\"enctype\", \"multipart/form-data\")\n                    .attr(\"encoding\", \"multipart/form-data\");\n        };\n\n        syncUploadModule.prototype = {\n            onSelect: function(e, files) {\n                var upload = this.upload;\n                var sourceInput = $(e.target);\n                var filesContainErrors = upload._filesContainValidationErrors(files);\n\n                upload._addInput(sourceInput);\n\n                var fileData = { \"fileNames\": files };\n\n                if (filesContainErrors) {\n                    sourceInput.remove();\n                } else {\n                    fileData.relatedInput = sourceInput;\n                }\n\n                var file = upload._enqueueFile(getFileName(sourceInput), fileData);\n\n                if (filesContainErrors) {\n                    upload._hideUploadProgress(file);\n                }\n\n                upload._fileAction(file, REMOVE);\n            },\n\n            onRemove: function(e) {\n                var fileEntry = getFileEntry(e);\n                var relatedInput = fileEntry.data(\"relatedInput\");\n\n                if (relatedInput) {\n                    relatedInput.remove();\n                }\n\n                this.upload._removeFileEntry(fileEntry);\n            }\n        };\n\n        var iframeUploadModule = function(upload) {\n            this.name = \"iframeUploadModule\";\n            this.element = upload.wrapper;\n            this.upload = upload;\n            this.iframes = [];\n        };\n\n        Upload._frameId = 0;\n\n        iframeUploadModule.prototype = {\n            onSelect: function(e, files) {\n                var upload = this.upload;\n                var sourceInput = $(e.target);\n                var hasValidationErrors = upload._filesContainValidationErrors(files);\n\n                var fileEntry = this.prepareUpload(sourceInput, files, hasValidationErrors);\n\n                if (upload.options.async.autoUpload) {\n                    if (!hasValidationErrors) {\n                        this.performUpload(fileEntry);\n                    } else {\n                        upload._fileAction(fileEntry, REMOVE);\n                        upload._showHeaderUploadStatus(false);\n                    }\n                } else {\n                    upload._fileAction(fileEntry, REMOVE);\n\n                    if (!hasValidationErrors) {\n                        upload._showActionButtons();\n                    } else {\n                        upload._updateHeaderUploadStatus();\n                    }\n                }\n\n                if (hasValidationErrors) {\n                    upload._hideUploadProgress(fileEntry);\n                }\n            },\n\n            prepareUpload: function(sourceInput, files, hasValidationErrors) {\n                var upload = this.upload;\n                var activeInput = $(upload.element);\n                var name = upload.options.async.saveField || sourceInput.attr(\"name\");\n                var fileEntry, fileData, iframe, form;\n\n                upload._addInput(sourceInput);\n                sourceInput.attr(\"name\", name);\n\n                if (!hasValidationErrors) {\n                    iframe = this.createFrame(upload.name + \"_\" + Upload._frameId++);\n                    this.registerFrame(iframe);\n\n                    form = this.createForm(upload.options.async.saveUrl, iframe.attr(\"name\"))\n                        .append(activeInput);\n\n                    fileData = { \"frame\": iframe, \"relatedInput\": activeInput, \"fileNames\": files };\n                } else {\n                    sourceInput.remove();\n\n                    fileData = { \"fileNames\": files };\n                }\n\n                fileEntry = upload._enqueueFile(getFileName(sourceInput), fileData);\n\n                if (iframe) {\n                    iframe.data({ \"form\": form, \"file\": fileEntry });\n                }\n\n                return fileEntry;\n            },\n\n            performUpload: function(fileEntry) {\n                var e = { files: fileEntry.data(\"fileNames\") };\n                var iframe = fileEntry.data(\"frame\");\n                var upload = this.upload;\n                var fileValidation = fileEntry.find('.k-file-validation-message');\n                var fileInfo = fileEntry.find('.k-file-summary');\n                var fileSize = fileEntry.find('.k-file-size');\n\n                if (!upload.trigger(UPLOAD, e)) {\n                    upload._hideActionButtons();\n                    upload._showHeaderUploadStatus(true);\n\n                    iframe.appendTo(document.body);\n\n                    var form = iframe.data(\"form\")\n                        .attr(\"action\", upload.options.async.saveUrl)\n                        .appendTo(document.body);\n\n                    e.data = $.extend({ }, e.data, antiForgeryTokens());\n                    for (var key in e.data) {\n                        var dataInput = form.find(\"input[name='\" + key + \"']\");\n                        if (dataInput.length === 0) {\n                            dataInput = $(\"<input>\", { type: \"hidden\", name: key })\n                                .prependTo(form);\n                        }\n                        dataInput.val(e.data[key]);\n                    }\n\n                    upload._fileAction(fileEntry, CANCEL);\n                    upload._fileState(fileEntry, \"uploading\");\n                    $(fileEntry).removeClass(\"k-file-error\").addClass(\"k-file-progress\");\n\n                    if (fileValidation.length > 0) {\n                        fileValidation.remove();\n                    }\n\n                    if (fileInfo.length > 0) {\n                        fileInfo.removeClass('k-hidden');\n                    } else if (fileSize.length > 0) {\n                        fileSize.removeClass('k-hidden');\n                    }\n\n                    iframe\n                        .one(\"load\", this.onIframeLoad.bind(this));\n\n                    form[0].submit();\n                } else {\n                    upload._removeFileEntry(iframe.data(\"file\"));\n                    this.cleanupFrame(iframe);\n                    this.unregisterFrame(iframe);\n                }\n            },\n\n            onSaveSelected: function() {\n                var module = this;\n                var upload = module.upload;\n\n                $(\".k-file\", this.element).each(function() {\n                    var fileEntry = $(this);\n                    var started = isFileUploadStarted(fileEntry);\n                    var hasValidationErrors = upload._filesContainValidationErrors(fileEntry.data(\"fileNames\"));\n\n                    if (!started && !hasValidationErrors) {\n                        module.performUpload(fileEntry);\n                    }\n                });\n            },\n\n            onIframeLoad: function(e) {\n                var iframe = $(e.target),\n                    responseText;\n\n                try {\n                    responseText = iframe.contents().text();\n                } catch (ex) {\n                    responseText = \"Error trying to get server response: \" + ex;\n                }\n\n                this.processResponse(iframe, responseText);\n            },\n\n            processResponse: function(iframe, responseText) {\n                var fileEntry = iframe.data(\"file\"),\n                    module = this,\n                    fakeXHR = {\n                        responseText: responseText\n                    };\n                tryParseJSON(responseText,\n                    function(jsonResult) {\n                        $.extend(fakeXHR, { statusText: \"OK\", status: \"200\" });\n                        module.upload._onFileProgress({ target: $(fileEntry, module.upload.wrapper) }, 100);\n                        module.upload._onUploadSuccess({ target: $(fileEntry, module.upload.wrapper) }, jsonResult, fakeXHR);\n\n                        module.cleanupFrame(iframe);\n                        module.unregisterFrame(iframe);\n                    },\n                    function() {\n                        $.extend(fakeXHR, { statusText: \"error\", status: \"500\" });\n                        module.upload._onUploadError({ target: $(fileEntry, module.upload.wrapper) }, fakeXHR);\n                    }\n                );\n            },\n\n            onCancel: function(e) {\n                var iframe = $(e.target).data(\"frame\");\n\n                this.stopFrameSubmit(iframe);\n                this.cleanupFrame(iframe);\n                this.unregisterFrame(iframe);\n                this.upload._removeFileEntry(iframe.data(\"file\"));\n            },\n\n            onRetry: function(e) {\n                var fileEntry = getFileEntry(e);\n                this.performUpload(fileEntry);\n            },\n\n            onRemove: function(e, eventArgs, shouldSendRemoveRequest) {\n                var module = this;\n                var upload = module.upload;\n                var fileEntry = getFileEntry(e);\n                var iframe = fileEntry.data(\"frame\");\n\n                if (iframe) {\n                    module.unregisterFrame(iframe);\n                    upload._removeFileEntry(fileEntry);\n                    module.cleanupFrame(iframe);\n                } else {\n                    if (fileEntry.hasClass(\"k-file-success\")) {\n                        removeUploadedFile(fileEntry, upload, eventArgs, shouldSendRemoveRequest);\n                    } else {\n                        upload._removeFileEntry(fileEntry);\n                    }\n                }\n            },\n\n            onAbort: function() {\n                var element = this.element,\n                    module = this;\n\n                $.each(this.iframes, function() {\n                    $(\"input\", this.data(\"form\")).appendTo(element);\n                    module.stopFrameSubmit(this[0]);\n                    this.data(\"form\").remove();\n                    this.remove();\n                });\n\n                this.iframes = [];\n            },\n\n            createFrame: function(id) {\n                return $(\n                    \"<iframe\" +\n                    \" name='\" + id + \"'\" +\n                    \" id='\" + id + \"'\" +\n                    \" />\"\n                ).hide();\n            },\n\n            createForm: function(action, target) {\n                return $(\n                    \"<form enctype='multipart/form-data' method='POST'\" +\n                    \" action='\" + action + \"'\" +\n                    \" target='\" + target + \"'\" +\n                    \"/>\");\n            },\n\n            stopFrameSubmit: function(frame) {\n                if (typeof(frame.stop) != \"undefined\") {\n                    frame.stop();\n                } else if (frame.document) {\n                    frame.document.execCommand(\"Stop\");\n                }\n            },\n\n            registerFrame: function(frame) {\n                this.iframes.push(frame);\n            },\n\n            unregisterFrame: function(frame) {\n                this.iframes = $.grep(this.iframes, function(value) {\n                    return value.attr(\"name\") != frame.attr(\"name\");\n                });\n            },\n\n            cleanupFrame: function(frame) {\n                var form = frame.data(\"form\");\n\n                frame.data(\"file\").data(\"frame\", null);\n\n                setTimeout(function() {\n                    form.remove();\n                    frame.remove();\n                }, 1);\n            }\n        };\n\n        // FormData upload module\n        var formDataUploadModule = function(upload) {\n            this.name = \"formDataUploadModule\";\n            this.element = upload.wrapper;\n            this.upload = upload;\n            this.position = {};\n            this.metaData = {};\n            this.cancelled = {};\n            this.resume = {};\n            this.paused = {};\n            this.retries = {};\n        };\n\n        formDataUploadModule.prototype = {\n            onSelect: function(e, files) {\n                var upload = this.upload;\n                var module = this;\n                var sourceElement = $(e.target);\n                var fileEntries = this.prepareUpload(sourceElement, files);\n                var hasValidationErrors;\n                var prev;\n\n                $.each(fileEntries, function(index) {\n                    hasValidationErrors = upload._filesContainValidationErrors($(this.data(\"fileNames\")));\n\n                    if (upload.options.async.autoUpload) {\n                        if (!hasValidationErrors) {\n                            if (upload.options.async.chunkSize) {\n                                module.prepareChunk(this);\n                                prev = this.prev();\n\n                                if (upload.options.async.concurrent || (index === 0 && !prev.length) ||\n                                 (index === 0 && prev.hasClass(\"k-file-success\"))) {\n                                    module.performUpload(this);\n                                }\n                            } else {\n                                module.performUpload(this);\n                            }\n                        } else {\n                            upload._fileAction(this, REMOVE);\n                            upload._showHeaderUploadStatus(false);\n                        }\n                    } else {\n                        upload._fileAction(this, REMOVE);\n\n                        if (!hasValidationErrors) {\n                            upload._showActionButtons();\n                            this.addClass(\"k-toupload\");\n                        } else {\n                            upload._updateHeaderUploadStatus();\n                        }\n                    }\n\n                    if (hasValidationErrors) {\n                        upload._hideUploadProgress(this);\n                    }\n                });\n            },\n\n            prepareUpload: function(sourceElement, files) {\n                var fileEntries = this.enqueueFiles(files);\n\n                if (sourceElement.is(\"input\")) {\n                    $.each(fileEntries, function() {\n                        $(this).data(\"relatedInput\", sourceElement);\n                    });\n                    sourceElement.data(\"relatedFileEntries\", fileEntries);\n                    this.upload._addInput(sourceElement);\n                }\n\n                return fileEntries;\n            },\n\n            enqueueFiles: function(files) {\n                var upload = this.upload;\n                var name;\n                var i;\n                var filesLength = files.length;\n                var currentFile;\n                var fileEntry;\n                var fileEntries = [];\n\n                if (upload.options.async.batch === true) {\n                    name = $.map(files, function(file) { return file.name; }).join(\", \");\n\n                    if (upload.directory || upload.options.directoryDrop) {\n                        $(files).each(function() {\n                            if (this.rawFile.webkitRelativePath || this.rawFile.relativePath) {\n                                this.name = this.rawFile.webkitRelativePath || this.rawFile.relativePath;\n                            }\n                        });\n                    }\n\n                    fileEntry = upload._enqueueFile(name, { fileNames: files });\n                    fileEntry.data(\"files\", files);\n\n                    fileEntries.push(fileEntry);\n                } else {\n                    for (i = 0; i < filesLength; i++) {\n                        currentFile = files[i];\n                        name = currentFile.name;\n                        if (upload.directory || upload.options.directoryDrop) {\n                            if (currentFile.rawFile.webkitRelativePath || currentFile.rawFile.relativePath) {\n                                currentFile.name = currentFile.rawFile.webkitRelativePath || currentFile.rawFile.relativePath;\n                            }\n                        }\n                        fileEntry = upload._enqueueFile(name, { fileNames: [currentFile] });\n                        fileEntry.data(\"files\", [currentFile]);\n\n                        fileEntries.push(fileEntry);\n                    }\n                }\n\n                return fileEntries;\n            },\n\n            performUpload: function(fileEntry) {\n                var upload = this.upload,\n                    formData = this.createFormData(),\n                    xhr = this.createXHR(),\n                    e = {\n                        files: fileEntry.data(\"fileNames\"),\n                        XMLHttpRequest: xhr\n                    },\n                    files;\n                var fileValidation = fileEntry.find('.k-file-validation-message');\n                var fileInfo = fileEntry.find('.k-file-summary');\n                var fileSize = fileEntry.find('.k-file-size');\n\n                if (!upload.trigger(UPLOAD, e)) {\n                    if (fileEntry.find(\".k-i-cancel,.k-svg-i-cancel\").length === 0) {\n                        if (upload.options.async.chunkSize) {\n                            upload._fileAction(fileEntry, PAUSE);\n                        }\n                        upload._fileAction(fileEntry, CANCEL, upload.options.async.chunkSize);\n                    }\n\n                    if (!upload.wrapper.find(\".k-toupload\").length) {\n                        upload._hideActionButtons();\n                    }\n\n                    upload._showHeaderUploadStatus(true);\n\n                    if (e.formData) {\n                        formData = e.formData;\n                    } else {\n                        e.data = $.extend({ }, e.data, antiForgeryTokens());\n                        for (var key in e.data) {\n                            formData.append(key, e.data[key]);\n                        }\n\n                        files = fileEntry.data(\"files\");\n                        if (files) {\n                            this.populateFormData(formData, files);\n                        }\n                    }\n\n                    upload._fileState(fileEntry, \"uploading\");\n                    $(fileEntry).removeClass(\"k-file-error\").addClass(\"k-file-progress\");\n\n                    if (fileValidation.length > 0) {\n                        fileValidation.remove();\n                    }\n\n                    if (fileInfo.length > 0) {\n                        fileInfo.removeClass('k-hidden');\n                    } else if (fileSize.length > 0) {\n                        fileSize.removeClass('k-hidden');\n                    }\n\n                    if (upload.options.async.useArrayBuffer && window.FileReader) {\n                        this._readFile(upload.options.async.saveUrl, formData, fileEntry, xhr);\n                    } else {\n                        this.postFormData(upload.options.async.saveUrl, formData, fileEntry, xhr);\n                    }\n                } else {\n                    this.removeFileEntry(fileEntry);\n                }\n            },\n\n            _readFile: function(saveUrl, formData, fileEntry, xhr) {\n                var that = this;\n                var upload = that.upload;\n                var file = fileEntry.data(\"files\")[0];\n\n                var reader = new FileReader();\n                reader.onload = function(e) {\n                    try {\n                        if (!that.fileArrayBuffer) {\n                            that.fileArrayBuffer = e.target.result;\n                        } else {\n                            that.fileArrayBuffer = that._appendBuffer(that.fileArrayBuffer, e.target.result);\n                        }\n                    } catch (err) {\n                        upload._onUploadError({ target: $(fileEntry, upload.wrapper) }, xhr);\n                        return;\n                    }\n\n                    if (that.position[file.uid] > file.size) {\n                        that.postFormData(upload.options.async.saveUrl, that.fileArrayBuffer, fileEntry, xhr);\n                        that.fileArrayBuffer = null;\n                    } else {\n                        that._readFile(saveUrl, formData, fileEntry, xhr);\n                    }\n                };\n                reader.onerror = function() {\n                    upload._onUploadError({ target: $(fileEntry, upload.wrapper) }, xhr);\n                };\n                reader.readAsArrayBuffer(that._getCurrentChunk(file.rawFile, file.uid));\n            },\n\n            _appendBuffer: function(buffer1, buffer2) {\n                var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n\n                tmp.set(new Uint8Array(buffer1), 0);\n                tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n\n                return tmp.buffer;\n            },\n\n            onSaveSelected: function() {\n                var module = this;\n                var upload = module.upload;\n\n                $(\".k-toupload\", this.element).filter(function() {\n                    var fileEntry = $(this);\n                    var started = isFileUploadStarted(fileEntry);\n                    var hasValidationErrors = upload._filesContainValidationErrors(fileEntry.data(\"fileNames\"));\n\n                    return !started && !hasValidationErrors;\n                }).each(function(index) {\n                    var fileEntry = $(this);\n                    var prevEntry = fileEntry.prev();\n\n                    fileEntry.removeClass(\"k-toupload\");\n                    if (upload.options.async.chunkSize) {\n                        module.prepareChunk(fileEntry);\n\n                        if (upload.options.async.concurrent || (index === 0 && !prevEntry.length) ||\n                            (index === 0 && prevEntry.hasClass(\"k-file-success\") || prevEntry.hasClass(\"k-file-error:not(k-file-invalid)\"))) {\n                            module.performUpload(fileEntry);\n                        }\n                    } else {\n                        module.performUpload(fileEntry);\n                    }\n                });\n            },\n\n            onCancel: function(e) {\n                var fileEntry = getFileEntry(e);\n\n                if (this.upload.options.async.chunkSize) {\n                    this.cancelled[fileEntry.data(\"uid\")] = true;\n                }\n                this.stopUploadRequest(fileEntry);\n                this.removeFileEntry(fileEntry);\n            },\n\n            onPause: function(e) {\n                var fileEntry = getFileEntry(e);\n                var fileUid = fileEntry.data(\"uid\");\n                var async = this.upload.options.async;\n\n                if (async.chunkSize) {\n                    this.retries[fileUid] = async.maxAutoRetries + 1;\n                    this.paused[fileUid] = true;\n                    this.resume[fileUid] = false;\n                }\n            },\n\n            onResume: function(e) {\n                var fileEntry = getFileEntry(e);\n                var fileUid = fileEntry.data(\"uid\");\n\n                if (this.upload.options.async.chunkSize) {\n                    delete this.paused[fileUid];\n                    this.resume[fileUid] = true;\n                    this.retries[fileEntry.data(\"uid\")] = 1;\n                    this._increaseChunkIndex(fileUid);\n                    this.performUpload(fileEntry);\n                }\n            },\n\n            onRetry: function(e) {\n                var fileEntry = getFileEntry(e);\n                var async = this.upload.options.async;\n\n                if (async.chunkSize) {\n                    this.retries[fileEntry.data(\"uid\")] = async.maxAutoRetries + 1;\n                    delete this.paused[fileEntry.data(\"uid\")];\n                }\n\n                this.performUpload(fileEntry);\n            },\n\n            onRemove: function(e, eventArgs, shouldSendRemoveRequest) {\n                var module = this;\n                var upload = module.upload;\n                var fileEntry = getFileEntry(e);\n                var async = this.upload.options.async;\n\n                if (async.chunkSize) {\n                    this.retries[fileEntry.data(\"uid\")] = async.maxAutoRetries + 1;\n                }\n\n                if (fileEntry.hasClass(\"k-file-success\")) {\n                    removeUploadedFile(fileEntry, upload, eventArgs, shouldSendRemoveRequest);\n                } else {\n                    module.removeFileEntry(fileEntry);\n                }\n            },\n\n            createXHR: function() {\n                return new XMLHttpRequest();\n            },\n\n            postFormData: function(url, data, fileEntry, xhr) {\n                var module = this;\n\n                fileEntry.data(\"request\", xhr);\n\n                xhr.addEventListener(\"load\", function(e) {\n                    module.onRequestSuccess.call(module, e, fileEntry);\n                }, false);\n\n                xhr.addEventListener(ERROR, function(e) {\n                    module.onRequestError.call(module, e, fileEntry);\n                }, false);\n\n                xhr.upload.addEventListener(\"progress\", function(e) {\n                    module.onRequestProgress.call(module, e, fileEntry);\n                }, false);\n\n                xhr.open(\"POST\", url, true);\n                xhr.withCredentials = this.upload.options.async.withCredentials;\n\n                var accept = this.upload.options.async.accept;\n                if (accept) {\n                    xhr.setRequestHeader(\"Accept\", accept);\n                }\n\n                xhr.send(data);\n            },\n\n            createFormData: function() {\n                return new FormData();\n            },\n\n            populateFormData: function(data, files) {\n                var chunk;\n                var i;\n                var length = files.length;\n                var uid;\n                var upload = this.upload;\n\n                if (upload.options.async.chunkSize) {\n                     uid = files[0].uid;\n                     chunk = this._getCurrentChunk(files[0].rawFile, uid);\n\n                    data.append(\n                        upload.options.async.saveField || upload.name,\n                        chunk\n                    );\n\n                    var serializedMetaData = JSON.stringify(this.metaData[uid]);\n                    data.append(\"metadata\", serializedMetaData);\n                } else {\n                     for (i = 0; i < length; i++) {\n                        data.append(\n                            upload.options.async.saveField || upload.name,\n                            files[i].rawFile\n                        );\n                     }\n                }\n\n                return data;\n            },\n\n            onRequestSuccess: function(e, fileEntry) {\n                var xhr = e.target,\n                    module = this;\n\n                function raiseError() {\n                    module.upload._onUploadError({ target: $(fileEntry, module.upload.wrapper) }, xhr);\n                }\n\n                function parseSuccess(jsonResult) {\n                    var batch = module.upload.options.async.batch;\n                    var chunkSize = module.upload.options.async.chunkSize;\n                    var concurrent = module.upload.options.async.concurrent;\n                    var fileUid = jsonResult.fileUid;\n\n                    if (module.paused[fileUid] || module.cancelled[fileUid]) {\n                        return;\n                    }\n\n                    delete module.retries[fileUid];\n\n                    if (chunkSize && !batch && !jsonResult.uploaded) {\n\n                        module._increaseChunkIndex(fileUid);\n                        module.performUpload(fileEntry);\n                    } else if (chunkSize && !batch && !concurrent && fileEntry.next().length && !fileEntry.next().hasClass(\"k-toupload\")) {\n                            module.upload._onFileProgress({ target: $(fileEntry, module.upload.wrapper) }, 100);\n                            module._resetChunkIndex(fileUid);\n                            module.upload._onUploadSuccess({ target: $(fileEntry, module.upload.wrapper) }, jsonResult, xhr);\n\n                            module.performUpload(fileEntry.next());\n                    } else {\n                        module.upload._onFileProgress({ target: $(fileEntry, module.upload.wrapper) }, 100);\n                        module.upload._onUploadSuccess({ target: $(fileEntry, module.upload.wrapper) }, jsonResult, xhr);\n                        module.cleanupFileEntry(fileEntry);\n                    }\n                }\n\n                if (xhr.status >= 200 && xhr.status <= 299) {\n                    tryParseJSON(xhr.responseText,\n                        parseSuccess,\n                        raiseError\n                    );\n                } else {\n                    raiseError();\n                }\n            },\n\n            onRequestError: function(e, fileEntry) {\n                var xhr = e.target;\n\n                this.upload._onUploadError({ target: $(fileEntry, this.upload.wrapper) }, xhr);\n            },\n\n            cleanupFileEntry: function(fileEntry) {\n                var relatedInput = fileEntry.data(\"relatedInput\"),\n                    uploadComplete = true;\n\n                if (relatedInput) {\n                    $.each(relatedInput.data(\"relatedFileEntries\") || [], function() {\n                        // Exclude removed file entries and self\n                        if (this.parent().length > 0 && this[0] != fileEntry[0]) {\n                            uploadComplete = uploadComplete && this.hasClass(\"k-file-success\");\n                        }\n                    });\n\n                    if (uploadComplete) {\n                        relatedInput.remove();\n                    }\n                }\n            },\n\n            removeFileEntry: function(fileEntry) {\n                var chunkSize = this.upload.options.async.chunkSize;\n                var concurrent = this.upload.options.async.concurrent;\n                var isUploadButtonVisible = this.upload.wrapper.find(\".k-upload-selected\").length > 0;\n\n                this.cleanupFileEntry(fileEntry);\n                if (chunkSize && !concurrent && !isUploadButtonVisible) {\n                     if (fileEntry.next().length) {\n                         this.performUpload(fileEntry.next());\n                     }\n                }\n                this.upload._removeFileEntry(fileEntry);\n            },\n\n            onRequestProgress: function(e, fileEntry) {\n                var percentComplete = Math.round(e.loaded * 100 / e.total);\n                var fileUid = fileEntry.data(\"uid\");\n                var fileMetaData;\n\n                if (this.upload.options.async.chunkSize) {\n                    fileMetaData = this.metaData[fileUid];\n                    percentComplete = fileMetaData && fileMetaData.totalChunks ? Math.round(((fileMetaData.chunkIndex) / fileMetaData.totalChunks) * 100) : 100;\n                }\n                this.upload._onFileProgress({ target: $(fileEntry, this.upload.wrapper) }, percentComplete);\n            },\n\n            stopUploadRequest: function(fileEntry) {\n                if (fileEntry.data(\"request\")) {\n                    fileEntry.data(\"request\").abort();\n                }\n            },\n\n            prepareChunk: function(fileEntry) {\n                var file = fileEntry.data(\"files\")[0];\n                var rawFile = file.rawFile;\n                var uid = file.uid;\n                var chunkSize = this.upload.options.async.chunkSize;\n                this.position[uid] = 0;\n\n                this.metaData[uid] = {\n                    chunkIndex: 0,\n                    contentType: rawFile.type,\n                    fileName: rawFile.name,\n                    relativePath: file.name,\n                    totalFileSize: rawFile.size,\n                    totalChunks: Math.ceil(rawFile.size / chunkSize),\n                    uploadUid: uid\n                };\n            },\n\n            _decreaseChunkIndex: function(uid) {\n                this.metaData[uid].chunkIndex--;\n            },\n\n            _increaseChunkIndex: function(uid) {\n                this.metaData[uid].chunkIndex++;\n            },\n\n            _resetChunkIndex: function(uid) {\n                this.metaData[uid].chunkIndex = 0;\n            },\n\n            _decreasePosition: function(uid) {\n                this.position[uid] -= this.upload.options.async.chunkSize;\n            },\n\n            _getCurrentChunk: function(file, uid) {\n                var oldPosition = this.position[uid];\n                var methodToInvoke;\n                var async = this.upload.options.async;\n                var chunkSize = async.chunkSize || async.bufferChunkSize;\n\n                if (!this.position[uid]) {\n                    this.position[uid] = 0;\n                }\n                this.position[uid] += chunkSize;\n\n                if (!!(methodToInvoke = this._getChunker(file))) {\n                    return file[methodToInvoke](oldPosition, this.position[uid]);\n                } else {\n                    return file;\n                }\n            },\n\n            _getChunker: function(file) {\n                if (file.slice) {\n                    return \"slice\";\n                } else if (file.mozSlice) {\n                    return \"mozSlice\";\n                } else if (file.webkitSlice) {\n                        return \"webkitSlice\";\n                } else {\n                    return null;\n                }\n            }\n        };\n\n        // Helper functions\n        function getFileName(input) {\n            return $.map(inputFiles(input), function(file) {\n                return file.name;\n            }).join(\", \");\n        }\n\n        function inputFiles($input) {\n            var input = $input[0];\n\n            if (input.files) {\n                return getAllFileInfo(input.files);\n            } else {\n                return [{\n                    name: stripPath(input.value),\n                    extension: getFileExtension(input.value),\n                    size: null\n                }];\n            }\n        }\n\n        function getAllFileInfo(rawFiles) {\n            return $.map(rawFiles, function(file) {\n                return getFileInfo(file);\n            });\n        }\n\n        function getFileInfo(rawFile) {\n            // Older Firefox versions (before 3.6) use fileName and fileSize\n            var fileName = rawFile.name || rawFile.fileName;\n            return {\n                name: kendo.htmlEncode(fileName),\n                extension: getFileExtension(fileName),\n                size: typeof rawFile.size == \"number\" ? rawFile.size : rawFile.fileSize, //rawFile.size || rawFile.fileSize,\n                rawFile: rawFile\n            };\n        }\n\n        function getFileExtension(fileName) {\n            var matches = fileName.match(rFileExtension);\n            return matches ? matches[0] : \"\";\n        }\n\n        function stripPath(name) {\n            var slashIndex = name.lastIndexOf(\"\\\\\");\n            return (slashIndex != -1) ? name.substr(slashIndex + 1) : name;\n        }\n\n        function assignGuidToFiles(files, unique) {\n            var uid = kendo.guid();\n\n            return $.map(files, function(file) {\n                file.uid = unique ? kendo.guid() : uid;\n\n                return file;\n            });\n        }\n\n        function validateFiles(files, validationInfo) {\n            var allowedExtensions = parseAllowedExtensions(validationInfo.allowedExtensions);\n            var maxFileSize = validationInfo.maxFileSize;\n            var minFileSize = validationInfo.minFileSize;\n\n            for (var i = 0; i < files.length; i++) {\n                validateFileExtension(files[i], allowedExtensions);\n                validateFileSize(files[i], minFileSize, maxFileSize);\n            }\n        }\n\n        function parseAllowedExtensions(extensions) {\n            var allowedExtensions = $.map(extensions, function(ext) {\n                var parsedExt = (ext.substring(0, 1) === \".\") ? ext : (\".\" + ext);\n                return parsedExt.toLowerCase();\n            });\n\n            return allowedExtensions;\n        }\n\n        function validateFileExtension(file, allowedExtensions) {\n            if (allowedExtensions.length > 0) {\n                if (allowedExtensions.indexOf(file.extension.toLowerCase()) < 0) {\n                    file.validationErrors = file.validationErrors || [];\n                    if ($.inArray(INVALIDFILEEXTENSION, file.validationErrors) === -1) {\n                        file.validationErrors.push(INVALIDFILEEXTENSION);\n                    }\n                }\n            }\n        }\n\n        function validateFileSize(file, minFileSize, maxFileSize) {\n            if (minFileSize !== 0 && file.size < minFileSize) {\n                file.validationErrors = file.validationErrors || [];\n                if ($.inArray(INVALIDMINFILESIZE, file.validationErrors) === -1) {\n                    file.validationErrors.push(INVALIDMINFILESIZE);\n                }\n            }\n\n            if (maxFileSize !== 0 && file.size > maxFileSize) {\n                file.validationErrors = file.validationErrors || [];\n                if ($.inArray(INVALIDMAXFILESIZE, file.validationErrors) === -1) {\n                    file.validationErrors.push(INVALIDMAXFILESIZE);\n                }\n            }\n        }\n\n        function getTotalFilesSizeMessage(files) {\n            var totalSize = 0;\n\n            if (typeof files[0].size == \"number\") {\n                for (var i = 0; i < files.length; i++) {\n                    if (files[i].size) {\n                        totalSize += files[i].size;\n                    }\n                }\n            } else {\n                return \"\";\n            }\n\n            totalSize /= 1024;\n\n            if (totalSize < 1024) {\n                return totalSize.toFixed(2) + \" KB\";\n            } else {\n                return (totalSize / 1024).toFixed(2) + \" MB\";\n            }\n        }\n\n        function shouldRemoveFileEntry(upload) {\n            return !upload.multiple && $(\".k-file\", upload.wrapper).length > 1;\n        }\n\n        function removeUploadedFile(fileEntry, upload, eventArgs, shouldSendRemoveRequest) {\n            if (!upload._supportsRemove()) {\n                if (shouldRemoveFileEntry(upload) || !shouldSendRemoveRequest) {\n                    upload._removeFileEntry(fileEntry);\n                }\n\n                return;\n            }\n\n            var files = fileEntry.data(\"fileNames\");\n            var fileNames = $.map(files, function(file) { return file.name; });\n\n            if (shouldSendRemoveRequest === false) {\n                upload._removeFileEntry(fileEntry);\n\n                return;\n            }\n\n            upload._submitRemove(fileNames, eventArgs,\n                function onSuccess(data, textStatus, xhr) {\n                    var prevented = upload.trigger(SUCCESS, {\n                        operation: \"remove\",\n                        files: files,\n                        response: data,\n                        XMLHttpRequest: xhr\n                    });\n\n                    if (!prevented) {\n                        upload._removeFileEntry(fileEntry);\n                    }\n                },\n\n                function onError(xhr) {\n                    if (shouldRemoveFileEntry(upload)) {\n                        upload._removeFileEntry(fileEntry);\n                    }\n\n                    upload.trigger(ERROR, {\n                        operation: \"remove\",\n                        files: files,\n                        XMLHttpRequest: xhr\n                    });\n\n                    logToConsole(\"Server response: \" + xhr.responseText);\n                }\n            );\n        }\n\n        function tryParseJSON(input, onSuccess, onError) {\n            var success = false,\n                json = \"\";\n\n            try {\n                json = JSON.parse(normalizeJSON(input));\n                success = true;\n            } catch (e) {\n                onError();\n            }\n\n            if (success) {\n                onSuccess(json);\n            }\n        }\n\n        function normalizeJSON(input) {\n            if (typeof input === \"undefined\" || input === \"\") {\n                input = \"{}\";\n            }\n\n            return input;\n        }\n\n        function stopEvent(e) {\n            if (e.originalEvent) {\n                e.originalEvent.dataTransfer.dropEffect = \"copy\";\n            }\n            e.stopPropagation(); e.preventDefault();\n        }\n\n        function bindDragEventWrappers(element, namespace, onDragEnter, onDragLeave) {\n            var hideInterval, lastDrag;\n\n            element\n                .on(\"dragenter\" + namespace, function(e) {\n                    onDragEnter(e);\n                    lastDrag = new Date();\n\n                    if (!hideInterval) {\n                        hideInterval = setInterval(function() {\n                            var sinceLastDrag = new Date() - lastDrag;\n                            if (sinceLastDrag > 100) {\n                                onDragLeave();\n\n                                clearInterval(hideInterval);\n                                hideInterval = null;\n                            }\n                        }, 100);\n                    }\n                })\n                .on(\"dragover\" + namespace, function() {\n                    lastDrag = new Date();\n                });\n        }\n\n        function isFileUploadStarted(fileEntry) {\n            return fileEntry.is(\".k-file-progress, .k-file-success, .k-file-error:not(.k-file-invalid)\");\n        }\n\n        function getFileEntry(e) {\n            return $(e.target).closest(\".k-file\");\n        }\n\n        kendo.ui.plugin(Upload);\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}