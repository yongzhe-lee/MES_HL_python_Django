{"version":3,"sources":["raw-js/kendo.dataviz.qrcode.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendodataviz","qrcode","js","this","$","undefined$1","kendo","window","extend","draw","drawing","dataviz","Widget","ui","Box2D","terminator","NUMERIC","ALPHA_NUMERIC","BYTE","powersOfTwo","powersOfTwoResult","generatorPolynomials","irregularAlignmentPatternsStartDistance","versionsCodewordsInformation","L","groups","totalDataCodewords","errorCodewordsPerBlock","M","Q","H","finderPattern","alignmentPattern","errorCorrectionPatterns","paddingCodewords","maskPatternConditions","row","column","Math","floor","numberRegex","alphaPattern","alphaRegex","RegExp","alphaNumericRegex","byteRegex","round","crossPattern","squarePattern","toDecimal","value","parseInt","toBitsString","length","result","Number","toString","Array","join","splitInto","str","n","idx","push","substring","QRDataMode","Class","getVersionIndex","version","getBitsCharacterCount","bitsInCharacterCount","getModeCountString","modeIndicator","encode","getStringBitsLength","getValue","modes","character","parts","i","inputLength","mod3","characters","A","B","C","D","E","F","G","I","J","K","N","O","P","R","S","T","U","V","W","X","Y","Z","mode","charAt","code","charCodeAt","Error","modeInstances","FreeCellVisitor","matrix","that","startColumn","dir","c","move","getNextCell","getNextRemainderCell","fillFunctionCell","matrices","bit","x","y","fillDataCell","fillData","blocks","block","codewordIdx","cell","cellVisitor","blockIdx","j","splice","padDataString","dataString","dataBitsCount","terminatorIndex","paddingCodewordIndex","xorPolynomials","multiplyPolynomials","multiplyByConstant","polynomial","power","generatePowersOfTwo","firstPolynomial","secondPolynomial","generateGeneratorPolynomials","generateErrorCodewords","data","errorCodewordsCount","divisor","generator","concat","generatorPolynomial","steps","errorCodewords","getBlocks","dataStream","versionCodewordsInformation","dataBlock","blockCodewordsCount","groupBlocksCount","messagePolynomial","codeword","codewordStart","dataBlocks","errorBlocks","versionGroups","groupIdx","chooseMode","minNumericBeforeAlpha","minNumericBeforeByte","minAlphaBeforeByte","previousMode","modeString","numeric","exec","numericMatch","alpha","alphaMatch","alphaNumeric","alphaNumericMatch","test","getModes","substr","nextMode","getDataCodewordsCount","ceil","getVersion","dataCodewordsCount","errorCorrectionLevel","getDataString","encodeFormatInformation","format","encodedString","encodeBCH","codeLength","generatorNumber","polynomialLength","valueNumber","valueString","dividePolynomials","numberX","numberY","yLength","xLength","getNumberAt","initMatrices","modules","addFormatInformation","formatString","encodeVersionInformation","addVersionInformation","quotient","mod","y1","x2","addCentricPattern","pattern","size","addFinderSeparator","direction","nextX","nextY","addFinderPatterns","addAlignmentPatterns","startDistance","distance","pointsCount","points","addTimingFunctions","scoreMaskMatrixes","scores","previousBits","darkModules","patterns","adjacentSameBits","k","scoreFinderPatternOccurance","scoreAdjacentSameBits","minIdx","total","min","MAX_VALUE","calculateDarkModulesRatioScore","rowColumn","adjacentBits","percent","mod5","previous","abs","next","EncodingResult","IsoEncoder","getEncodingResult","inputString","UTF8Encoder","encodingMode","fn","prototype","utfBOM","initialModeCountStringLength","dataLength","encodeCharacter","bytesCount","getBytesCount","bc","significantOnes","ranges","QRCodeDataEncoder","encoding","toLowerCase","indexOf","encodeData","encodingResult","versionInformation","optimalMatrix","QRCodeDefaults","DEFAULT_SIZE","QUIET_ZONE_LENGTH","DEFAULT_ERROR_CORRECTION_LEVEL","DEFAULT_BACKGROUND","DEFAULT_DARK_MODULE_COLOR","MIN_BASE_UNIT_SIZE","QRCode","init","element","options","call","wrapper","addClass","surfaceWrap","css","appendTo","surface","Surface","create","type","renderAs","setOptions","redraw","_getSize","width","height","clear","resize","createVisual","visual","getSize","dimensions","_resize","_render","exportVisual","baseUnit","quietZoneSize","contentSize","_value","border","padding","borderWidth","Group","errorCorrection","_calculateBaseUnit","append","_renderBackground","_renderMatrix","_hasCustomLogo","_renderLogo","_isSwiss","_renderSwissCode","qrSize","imageRect","center","logoSize","_getLogoSize","logoUrl","overlay","imageUrl","position","geometry","Rect","Point","Size","Image","crossSize","max","crossOffset","start","_renderShape","color","step","path","MultiPath","fill","stroke","moveTo","lineTo","close","matrixSize","x1","y2","box","unpad","Path","fromRect","toRect","background","name","defautLogoSize","ExportMixin","plugin","deepExtend","QRCodeFunctions","QRCodeFields","jQuery"],"mappings":"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","file":"kendo.dataviz.qrcode.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.dataviz.core.js'), require('kendo.drawing.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.dataviz.core', 'kendo.drawing'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendodataviz = global.kendodataviz || {}, global.kendodataviz.qrcode = global.kendodataviz.qrcode || {}, global.kendodataviz.qrcode.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n        id: \"dataviz.qrcode\",\n        name: \"QRCode\",\n        category: \"dataviz\",\n        description: \"QRCode widget.\",\n        depends: [ \"dataviz.core\", \"drawing\" ]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            extend = $.extend,\n            draw = kendo.drawing,\n            dataviz = kendo.dataviz,\n            Widget = kendo.ui.Widget,\n            Box2D = dataviz.Box2D,\n            terminator = \"0000\",\n            NUMERIC = \"numeric\",\n            ALPHA_NUMERIC = \"alphanumeric\",\n            BYTE = \"byte\",\n            powersOfTwo = { \"1\": 0 },\n            powersOfTwoResult = { \"0\": 1 },\n            generatorPolynomials = [[1,0],[1,25,0]],\n            irregularAlignmentPatternsStartDistance = { 15: 20,16: 20,18: 24,19: 24,22: 20,24: 22,26: 24,28: 20,30: 20,31: 24,32: 28,33: 24,36: 18,37: 22,39: 20,40: 24 },\n            versionsCodewordsInformation = [{ L: { groups: [[1,19]],totalDataCodewords: 19,errorCodewordsPerBlock: 7 },M: { groups: [[1,16]],totalDataCodewords: 16,errorCodewordsPerBlock: 10 },Q: { groups: [[1,13]],totalDataCodewords: 13,errorCodewordsPerBlock: 13 },H: { groups: [[1,9]],totalDataCodewords: 9,errorCodewordsPerBlock: 17 } },{ L: { groups: [[1,34]],totalDataCodewords: 34,errorCodewordsPerBlock: 10 },M: { groups: [[1,28]],totalDataCodewords: 28,errorCodewordsPerBlock: 16 },Q: { groups: [[1,22]],totalDataCodewords: 22,errorCodewordsPerBlock: 22 },H: { groups: [[1,16]],totalDataCodewords: 16,errorCodewordsPerBlock: 28 } },{ L: { groups: [[1,55]],totalDataCodewords: 55,errorCodewordsPerBlock: 15 },M: { groups: [[1,44]],totalDataCodewords: 44,errorCodewordsPerBlock: 26 },Q: { groups: [[2,17]],totalDataCodewords: 34,errorCodewordsPerBlock: 18 },H: { groups: [[2,13]],totalDataCodewords: 26,errorCodewordsPerBlock: 22 } },{ L: { groups: [[1,80]],totalDataCodewords: 80,errorCodewordsPerBlock: 20 },M: { groups: [[2,32]],totalDataCodewords: 64,errorCodewordsPerBlock: 18 },Q: { groups: [[2,24]],totalDataCodewords: 48,errorCodewordsPerBlock: 26 },H: { groups: [[4,9]],totalDataCodewords: 36,errorCodewordsPerBlock: 16 } },{ L: { groups: [[1,108]],totalDataCodewords: 108,errorCodewordsPerBlock: 26 },M: { groups: [[2,43]],totalDataCodewords: 86,errorCodewordsPerBlock: 24 },Q: { groups: [[2,15],[2,16]],totalDataCodewords: 62,errorCodewordsPerBlock: 18 },H: { groups: [[2,11],[2,12]],totalDataCodewords: 46,errorCodewordsPerBlock: 22 } },{ L: { groups: [[2,68]],totalDataCodewords: 136,errorCodewordsPerBlock: 18 },M: { groups: [[4,27]],totalDataCodewords: 108,errorCodewordsPerBlock: 16 },Q: { groups: [[4,19]],totalDataCodewords: 76,errorCodewordsPerBlock: 24 },H: { groups: [[4,15]],totalDataCodewords: 60,errorCodewordsPerBlock: 28 } },{ L: { groups: [[2,78]],totalDataCodewords: 156,errorCodewordsPerBlock: 20 },M: { groups: [[4,31]],totalDataCodewords: 124,errorCodewordsPerBlock: 18 },Q: { groups: [[2,14],[4,15]],totalDataCodewords: 88,errorCodewordsPerBlock: 18 },H: { groups: [[4,13],[1,14]],totalDataCodewords: 66,errorCodewordsPerBlock: 26 } },{ L: { groups: [[2,97]],totalDataCodewords: 194,errorCodewordsPerBlock: 24 },M: { groups: [[2,38],[2,39]],totalDataCodewords: 154,errorCodewordsPerBlock: 22 },Q: { groups: [[4,18],[2,19]],totalDataCodewords: 110,errorCodewordsPerBlock: 22 },H: { groups: [[4,14],[2,15]],totalDataCodewords: 86,errorCodewordsPerBlock: 26 } },{ L: { groups: [[2,116]],totalDataCodewords: 232,errorCodewordsPerBlock: 30 },M: { groups: [[3,36],[2,37]],totalDataCodewords: 182,errorCodewordsPerBlock: 22 },Q: { groups: [[4,16],[4,17]],totalDataCodewords: 132,errorCodewordsPerBlock: 20 },H: { groups: [[4,12],[4,13]],totalDataCodewords: 100,errorCodewordsPerBlock: 24 } },{ L: { groups: [[2,68],[2,69]],totalDataCodewords: 274,errorCodewordsPerBlock: 18 },M: { groups: [[4,43],[1,44]],totalDataCodewords: 216,errorCodewordsPerBlock: 26 },Q: { groups: [[6,19],[2,20]],totalDataCodewords: 154,errorCodewordsPerBlock: 24 },H: { groups: [[6,15],[2,16]],totalDataCodewords: 122,errorCodewordsPerBlock: 28 } },{ L: { groups: [[4,81]],totalDataCodewords: 324,errorCodewordsPerBlock: 20 },M: { groups: [[1,50],[4,51]],totalDataCodewords: 254,errorCodewordsPerBlock: 30 },Q: { groups: [[4,22],[4,23]],totalDataCodewords: 180,errorCodewordsPerBlock: 28 },H: { groups: [[3,12],[8,13]],totalDataCodewords: 140,errorCodewordsPerBlock: 24 } },{ L: { groups: [[2,92],[2,93]],totalDataCodewords: 370,errorCodewordsPerBlock: 24 },M: { groups: [[6,36],[2,37]],totalDataCodewords: 290,errorCodewordsPerBlock: 22 },Q: { groups: [[4,20],[6,21]],totalDataCodewords: 206,errorCodewordsPerBlock: 26 },H: { groups: [[7,14],[4,15]],totalDataCodewords: 158,errorCodewordsPerBlock: 28 } },{ L: { groups: [[4,107]],totalDataCodewords: 428,errorCodewordsPerBlock: 26 },M: { groups: [[8,37],[1,38]],totalDataCodewords: 334,errorCodewordsPerBlock: 22 },Q: { groups: [[8,20],[4,21]],totalDataCodewords: 244,errorCodewordsPerBlock: 24 },H: { groups: [[12,11],[4,12]],totalDataCodewords: 180,errorCodewordsPerBlock: 22 } },{ L: { groups: [[3,115],[1,116]],totalDataCodewords: 461,errorCodewordsPerBlock: 30 },M: { groups: [[4,40],[5,41]],totalDataCodewords: 365,errorCodewordsPerBlock: 24 },Q: { groups: [[11,16],[5,17]],totalDataCodewords: 261,errorCodewordsPerBlock: 20 },H: { groups: [[11,12],[5,13]],totalDataCodewords: 197,errorCodewordsPerBlock: 24 } },{ L: { groups: [[5,87],[1,88]],totalDataCodewords: 523,errorCodewordsPerBlock: 22 },M: { groups: [[5,41],[5,42]],totalDataCodewords: 415,errorCodewordsPerBlock: 24 },Q: { groups: [[5,24],[7,25]],totalDataCodewords: 295,errorCodewordsPerBlock: 30 },H: { groups: [[11,12],[7,13]],totalDataCodewords: 223,errorCodewordsPerBlock: 24 } },{ L: { groups: [[5,98],[1,99]],totalDataCodewords: 589,errorCodewordsPerBlock: 24 },M: { groups: [[7,45],[3,46]],totalDataCodewords: 453,errorCodewordsPerBlock: 28 },Q: { groups: [[15,19],[2,20]],totalDataCodewords: 325,errorCodewordsPerBlock: 24 },H: { groups: [[3,15],[13,16]],totalDataCodewords: 253,errorCodewordsPerBlock: 30 } },{ L: { groups: [[1,107],[5,108]],totalDataCodewords: 647,errorCodewordsPerBlock: 28 },M: { groups: [[10,46],[1,47]],totalDataCodewords: 507,errorCodewordsPerBlock: 28 },Q: { groups: [[1,22],[15,23]],totalDataCodewords: 367,errorCodewordsPerBlock: 28 },H: { groups: [[2,14],[17,15]],totalDataCodewords: 283,errorCodewordsPerBlock: 28 } },{ L: { groups: [[5,120],[1,121]],totalDataCodewords: 721,errorCodewordsPerBlock: 30 },M: { groups: [[9,43],[4,44]],totalDataCodewords: 563,errorCodewordsPerBlock: 26 },Q: { groups: [[17,22],[1,23]],totalDataCodewords: 397,errorCodewordsPerBlock: 28 },H: { groups: [[2,14],[19,15]],totalDataCodewords: 313,errorCodewordsPerBlock: 28 } },{ L: { groups: [[3,113],[4,114]],totalDataCodewords: 795,errorCodewordsPerBlock: 28 },M: { groups: [[3,44],[11,45]],totalDataCodewords: 627,errorCodewordsPerBlock: 26 },Q: { groups: [[17,21],[4,22]],totalDataCodewords: 445,errorCodewordsPerBlock: 26 },H: { groups: [[9,13],[16,14]],totalDataCodewords: 341,errorCodewordsPerBlock: 26 } },{ L: { groups: [[3,107],[5,108]],totalDataCodewords: 861,errorCodewordsPerBlock: 28 },M: { groups: [[3,41],[13,42]],totalDataCodewords: 669,errorCodewordsPerBlock: 26 },Q: { groups: [[15,24],[5,25]],totalDataCodewords: 485,errorCodewordsPerBlock: 30 },H: { groups: [[15,15],[10,16]],totalDataCodewords: 385,errorCodewordsPerBlock: 28 } },{ L: { groups: [[4,116],[4,117]],totalDataCodewords: 932,errorCodewordsPerBlock: 28 },M: { groups: [[17,42]],totalDataCodewords: 714,errorCodewordsPerBlock: 26 },Q: { groups: [[17,22],[6,23]],totalDataCodewords: 512,errorCodewordsPerBlock: 28 },H: { groups: [[19,16],[6,17]],totalDataCodewords: 406,errorCodewordsPerBlock: 30 } },{ L: { groups: [[2,111],[7,112]],totalDataCodewords: 1006,errorCodewordsPerBlock: 28 },M: { groups: [[17,46]],totalDataCodewords: 782,errorCodewordsPerBlock: 28 },Q: { groups: [[7,24],[16,25]],totalDataCodewords: 568,errorCodewordsPerBlock: 30 },H: { groups: [[34,13]],totalDataCodewords: 442,errorCodewordsPerBlock: 24 } },{ L: { groups: [[4,121],[5,122]],totalDataCodewords: 1094,errorCodewordsPerBlock: 30 },M: { groups: [[4,47],[14,48]],totalDataCodewords: 860,errorCodewordsPerBlock: 28 },Q: { groups: [[11,24],[14,25]],totalDataCodewords: 614,errorCodewordsPerBlock: 30 },H: { groups: [[16,15],[14,16]],totalDataCodewords: 464,errorCodewordsPerBlock: 30 } },{ L: { groups: [[6,117],[4,118]],totalDataCodewords: 1174,errorCodewordsPerBlock: 30 },M: { groups: [[6,45],[14,46]],totalDataCodewords: 914,errorCodewordsPerBlock: 28 },Q: { groups: [[11,24],[16,25]],totalDataCodewords: 664,errorCodewordsPerBlock: 30 },H: { groups: [[30,16],[2,17]],totalDataCodewords: 514,errorCodewordsPerBlock: 30 } },{ L: { groups: [[8,106],[4,107]],totalDataCodewords: 1276,errorCodewordsPerBlock: 26 },M: { groups: [[8,47],[13,48]],totalDataCodewords: 1000,errorCodewordsPerBlock: 28 },Q: { groups: [[7,24],[22,25]],totalDataCodewords: 718,errorCodewordsPerBlock: 30 },H: { groups: [[22,15],[13,16]],totalDataCodewords: 538,errorCodewordsPerBlock: 30 } },{ L: { groups: [[10,114],[2,115]],totalDataCodewords: 1370,errorCodewordsPerBlock: 28 },M: { groups: [[19,46],[4,47]],totalDataCodewords: 1062,errorCodewordsPerBlock: 28 },Q: { groups: [[28,22],[6,23]],totalDataCodewords: 754,errorCodewordsPerBlock: 28 },H: { groups: [[33,16],[4,17]],totalDataCodewords: 596,errorCodewordsPerBlock: 30 } },{ L: { groups: [[8,122],[4,123]],totalDataCodewords: 1468,errorCodewordsPerBlock: 30 },M: { groups: [[22,45],[3,46]],totalDataCodewords: 1128,errorCodewordsPerBlock: 28 },Q: { groups: [[8,23],[26,24]],totalDataCodewords: 808,errorCodewordsPerBlock: 30 },H: { groups: [[12,15],[28,16]],totalDataCodewords: 628,errorCodewordsPerBlock: 30 } },{ L: { groups: [[3,117],[10,118]],totalDataCodewords: 1531,errorCodewordsPerBlock: 30 },M: { groups: [[3,45],[23,46]],totalDataCodewords: 1193,errorCodewordsPerBlock: 28 },Q: { groups: [[4,24],[31,25]],totalDataCodewords: 871,errorCodewordsPerBlock: 30 },H: { groups: [[11,15],[31,16]],totalDataCodewords: 661,errorCodewordsPerBlock: 30 } },{ L: { groups: [[7,116],[7,117]],totalDataCodewords: 1631,errorCodewordsPerBlock: 30 },M: { groups: [[21,45],[7,46]],totalDataCodewords: 1267,errorCodewordsPerBlock: 28 },Q: { groups: [[1,23],[37,24]],totalDataCodewords: 911,errorCodewordsPerBlock: 30 },H: { groups: [[19,15],[26,16]],totalDataCodewords: 701,errorCodewordsPerBlock: 30 } },{ L: { groups: [[5,115],[10,116]],totalDataCodewords: 1735,errorCodewordsPerBlock: 30 },M: { groups: [[19,47],[10,48]],totalDataCodewords: 1373,errorCodewordsPerBlock: 28 },Q: { groups: [[15,24],[25,25]],totalDataCodewords: 985,errorCodewordsPerBlock: 30 },H: { groups: [[23,15],[25,16]],totalDataCodewords: 745,errorCodewordsPerBlock: 30 } },{ L: { groups: [[13,115],[3,116]],totalDataCodewords: 1843,errorCodewordsPerBlock: 30 },M: { groups: [[2,46],[29,47]],totalDataCodewords: 1455,errorCodewordsPerBlock: 28 },Q: { groups: [[42,24],[1,25]],totalDataCodewords: 1033,errorCodewordsPerBlock: 30 },H: { groups: [[23,15],[28,16]],totalDataCodewords: 793,errorCodewordsPerBlock: 30 } },{ L: { groups: [[17,115]],totalDataCodewords: 1955,errorCodewordsPerBlock: 30 },M: { groups: [[10,46],[23,47]],totalDataCodewords: 1541,errorCodewordsPerBlock: 28 },Q: { groups: [[10,24],[35,25]],totalDataCodewords: 1115,errorCodewordsPerBlock: 30 },H: { groups: [[19,15],[35,16]],totalDataCodewords: 845,errorCodewordsPerBlock: 30 } },{ L: { groups: [[17,115],[1,116]],totalDataCodewords: 2071,errorCodewordsPerBlock: 30 },M: { groups: [[14,46],[21,47]],totalDataCodewords: 1631,errorCodewordsPerBlock: 28 },Q: { groups: [[29,24],[19,25]],totalDataCodewords: 1171,errorCodewordsPerBlock: 30 },H: { groups: [[11,15],[46,16]],totalDataCodewords: 901,errorCodewordsPerBlock: 30 } },{ L: { groups: [[13,115],[6,116]],totalDataCodewords: 2191,errorCodewordsPerBlock: 30 },M: { groups: [[14,46],[23,47]],totalDataCodewords: 1725,errorCodewordsPerBlock: 28 },Q: { groups: [[44,24],[7,25]],totalDataCodewords: 1231,errorCodewordsPerBlock: 30 },H: { groups: [[59,16],[1,17]],totalDataCodewords: 961,errorCodewordsPerBlock: 30 } },{ L: { groups: [[12,121],[7,122]],totalDataCodewords: 2306,errorCodewordsPerBlock: 30 },M: { groups: [[12,47],[26,48]],totalDataCodewords: 1812,errorCodewordsPerBlock: 28 },Q: { groups: [[39,24],[14,25]],totalDataCodewords: 1286,errorCodewordsPerBlock: 30 },H: { groups: [[22,15],[41,16]],totalDataCodewords: 986,errorCodewordsPerBlock: 30 } },{ L: { groups: [[6,121],[14,122]],totalDataCodewords: 2434,errorCodewordsPerBlock: 30 },M: { groups: [[6,47],[34,48]],totalDataCodewords: 1914,errorCodewordsPerBlock: 28 },Q: { groups: [[46,24],[10,25]],totalDataCodewords: 1354,errorCodewordsPerBlock: 30 },H: { groups: [[2,15],[64,16]],totalDataCodewords: 1054,errorCodewordsPerBlock: 30 } },{ L: { groups: [[17,122],[4,123]],totalDataCodewords: 2566,errorCodewordsPerBlock: 30 },M: { groups: [[29,46],[14,47]],totalDataCodewords: 1992,errorCodewordsPerBlock: 28 },Q: { groups: [[49,24],[10,25]],totalDataCodewords: 1426,errorCodewordsPerBlock: 30 },H: { groups: [[24,15],[46,16]],totalDataCodewords: 1096,errorCodewordsPerBlock: 30 } },{ L: { groups: [[4,122],[18,123]],totalDataCodewords: 2702,errorCodewordsPerBlock: 30 },M: { groups: [[13,46],[32,47]],totalDataCodewords: 2102,errorCodewordsPerBlock: 28 },Q: { groups: [[48,24],[14,25]],totalDataCodewords: 1502,errorCodewordsPerBlock: 30 },H: { groups: [[42,15],[32,16]],totalDataCodewords: 1142,errorCodewordsPerBlock: 30 } },{ L: { groups: [[20,117],[4,118]],totalDataCodewords: 2812,errorCodewordsPerBlock: 30 },M: { groups: [[40,47],[7,48]],totalDataCodewords: 2216,errorCodewordsPerBlock: 28 },Q: { groups: [[43,24],[22,25]],totalDataCodewords: 1582,errorCodewordsPerBlock: 30 },H: { groups: [[10,15],[67,16]],totalDataCodewords: 1222,errorCodewordsPerBlock: 30 } },{ L: { groups: [[19,118],[6,119]],totalDataCodewords: 2956,errorCodewordsPerBlock: 30 },M: { groups: [[18,47],[31,48]],totalDataCodewords: 2334,errorCodewordsPerBlock: 28 },Q: { groups: [[34,24],[34,25]],totalDataCodewords: 1666,errorCodewordsPerBlock: 30 },H: { groups: [[20,15],[61,16]],totalDataCodewords: 1276,errorCodewordsPerBlock: 30 } }],\n            finderPattern = [1,0,1,1,1],\n            alignmentPattern = [1,0,1],\n            errorCorrectionPatterns = { L: \"01\", M: \"00\", Q: \"11\", H: \"10\" },\n            formatMaskPattern = \"101010000010010\",\n            formatGeneratorPolynomial = \"10100110111\",\n            versionGeneratorPolynomial = \"1111100100101\",\n            paddingCodewords = [\"11101100\", \"00010001\"],\n            finderPatternValue = 93,\n            maskPatternConditions = [\n                function(row,column) {return (row + column) % 2 === 0;},\n                function(row) {return row % 2 === 0;},\n                function(row,column) {return column % 3 === 0;},\n                function(row,column) {return (row + column) % 3 === 0;},\n                function(row,column) {return (Math.floor(row / 2) + Math.floor(column / 3)) % 2 === 0;},\n                function(row,column) {return ((row * column) % 2) + ((row * column) % 3) === 0;},\n                function(row,column) {return (((row * column) % 2) + ((row * column) % 3)) % 2 === 0;},\n                function(row,column) {return (((row + column) % 2) + ((row * column) % 3)) % 2 === 0;}\n            ],\n            numberRegex = /^\\d+/,\n            alphaPattern = \"A-Z0-9 $%*+./:-\",\n            alphaExclusiveSet = \"A-Z $%*+./:-\",\n            alphaRegex = new RegExp(\"^[\" + alphaExclusiveSet + \"]+\"),\n            alphaNumericRegex = new RegExp(\"^[\" + alphaPattern + \"]+\"),\n            byteRegex = new RegExp(\"^[^\" + alphaPattern + \"]+\"),\n            initMinNumericBeforeAlpha = 8,\n            initMinNumericBeforeByte = 5,\n            initMinAlphaBeforeByte = 8,\n            minNumericBeforeAlpha = 17,\n            minNumericBeforeByte = 9,\n            minAlphaBeforeByte = 16,\n            round = Math.round,\n            IMAGE = \"image\",\n            SWISS_QR = \"swiss\",\n            crossPattern = [[0,1],[1,1],[1,2],[2,2],[2,1],[3,1],[3,0],[2,0],[2,-1],[1,-1],[1,0]],\n            squarePattern = [[0,1],[1,1],[1,0]],\n            DEFAULT_LOGO_SIZE = 7;\n\n            function toDecimal(value) {\n                return parseInt(value, 2);\n            }\n\n            function toBitsString(value, length) {\n                var result = Number(value).toString(2);\n                if (result.length < length) {\n                    result = new Array(length - result.length + 1).join(0) + result;\n                }\n                return result;\n            }\n\n            function splitInto(str, n) {\n                var result = [],\n                    idx = 0;\n                while (idx < str.length) {\n                    result.push(str.substring(idx, idx + n));\n                    idx += n;\n                }\n                return result;\n            }\n\n            var QRDataMode = kendo.Class.extend({\n                getVersionIndex: function(version) {\n                    if (version < 10) {\n                        return 0;\n                    }\n                    else if (version > 26) {\n                        return 2;\n                    }\n\n                    return 1;\n                },\n                getBitsCharacterCount: function(version) {\n                    var mode = this;\n                    return mode.bitsInCharacterCount[mode.getVersionIndex(version || 40)];\n                },\n                getModeCountString: function(length, version) {\n                    var mode = this;\n                    return mode.modeIndicator + toBitsString(length, mode.getBitsCharacterCount(version));\n                },\n                encode: function() {},\n                getStringBitsLength: function() {},\n                getValue: function() {},\n                modeIndicator: \"\",\n                bitsInCharacterCount: []\n            });\n\n            var modes = {};\n            modes[NUMERIC] = QRDataMode.extend({\n                bitsInCharacterCount: [10, 12, 14],\n                modeIndicator: \"0001\",\n                getValue: function(character) {\n                    return parseInt(character, 10);\n                },\n                encode: function(str, version) {\n                    var mode = this,\n                        parts = splitInto(str, 3),\n                        result = mode.getModeCountString(str.length, version);\n\n                    for (var i = 0; i < parts.length - 1; i++) {\n                        result += toBitsString(parts[i], 10);\n                    }\n                    return result + toBitsString(parts[i], 1 + 3 * parts[i].length);\n                },\n                getStringBitsLength: function(inputLength, version) {\n                    var mod3 = inputLength % 3;\n                    return 4 + this.getBitsCharacterCount(version) + 10 * Math.floor(inputLength / 3) + 3 * mod3 + (mod3 === 0 ? 0 : 1);\n                }\n            });\n\n            modes[ALPHA_NUMERIC] = QRDataMode.extend({\n                characters: { \"0\": 0,\"1\": 1,\"2\": 2,\"3\": 3,\"4\": 4,\"5\": 5,\"6\": 6,\"7\": 7,\"8\": 8,\"9\": 9,\"A\": 10,\"B\": 11,\"C\": 12,\"D\": 13,\"E\": 14,\"F\": 15,\"G\": 16,\"H\": 17,\"I\": 18,\"J\": 19,\"K\": 20,\"L\": 21,\"M\": 22,\"N\": 23,\"O\": 24,\"P\": 25,\"Q\": 26,\"R\": 27,\"S\": 28,\"T\": 29,\"U\": 30,\"V\": 31,\"W\": 32,\"X\": 33,\"Y\": 34,\"Z\": 35,\" \": 36,\"$\": 37,\"%\": 38,\"*\": 39,\"+\": 40,\"-\": 41,\".\": 42,\"/\": 43,\":\": 44 },\n                bitsInCharacterCount: [9,11,13],\n                modeIndicator: \"0010\",\n                getValue: function(character) {\n                    return this.characters[character];\n                },\n                encode: function(str, version) {\n                    var mode = this,\n                        parts = splitInto(str, 2),\n                        result = mode.getModeCountString(str.length, version),\n                        value;\n                    for (var i = 0; i < parts.length - 1; i++) {\n                        value = 45 * mode.getValue(parts[i].charAt(0)) + mode.getValue(parts[i].charAt(1));\n                        result += toBitsString(value, 11);\n                    }\n                    value = parts[i].length == 2 ?\n                        45 * mode.getValue(parts[i].charAt(0)) + mode.getValue(parts[i].charAt(1)) :\n                        mode.getValue(parts[i].charAt(0));\n                    return result + toBitsString(value, 1 + 5 * parts[i].length);\n                },\n                getStringBitsLength: function(inputLength, version) {\n                    return 4 + this.getBitsCharacterCount(version) + 11 * Math.floor(inputLength / 2) + 6 * (inputLength % 2);\n                }\n            });\n\n            modes[BYTE] = QRDataMode.extend({\n                bitsInCharacterCount: [8,16,16],\n                modeIndicator: \"0100\",\n                getValue: function(character) {\n                    var code = character.charCodeAt(0);\n                    if (code <= 127 || (160 <= code && code <= 255)) {\n                        return code;\n                    }\n                    else {\n                        throw new Error(\"Unsupported character: \" + character);\n                    }\n                },\n                encode: function(str, version) {\n                    var mode = this,\n                        result = mode.getModeCountString(str.length, version);\n\n                    for (var i = 0; i < str.length; i++) {\n                        result += toBitsString(mode.getValue(str.charAt(i)), 8);\n                    }\n                    return result;\n                },\n                getStringBitsLength: function(inputLength, version) {\n                    return 4 + this.getBitsCharacterCount(version) + 8 * inputLength;\n                }\n            });\n\n            var modeInstances = {};\n            for (var mode in modes) {\n                modeInstances[mode] = new modes[mode]();\n            }\n\n            var FreeCellVisitor = function(matrix) {\n                var that = this,\n                    row = matrix.length - 1,\n                    column = matrix.length - 1,\n                    startColumn = column,\n                    dir = -1,\n                    c = 0;\n                that.move = function() {\n                    row += dir * c;\n                    c ^= 1;\n                    column = startColumn - c;\n                };\n                that.getNextCell = function() {\n                    while (matrix[row][column] !== undefined$1) {\n                        that.move();\n                        if (row < 0 || row >= matrix.length) {\n                            dir = -dir;\n                            startColumn -= startColumn != 8 ? 2 : 3;\n                            column = startColumn;\n                            row = dir < 0 ? matrix.length - 1 : 0;\n                        }\n                    }\n                    return { row: row, column: column };\n                };\n                that.getNextRemainderCell = function() {\n                    that.move();\n                    if (matrix[row][column] === undefined$1) {\n                         return { row: row, column: column };\n                    }\n                };\n            };\n\n            function fillFunctionCell(matrices, bit, x, y) {\n                for (var i = 0; i < matrices.length; i++) {\n                    matrices[i][x][y] = bit;\n                }\n            }\n\n            function fillDataCell(matrices, bit, x, y) {\n                for (var i = 0; i < maskPatternConditions.length; i++) {\n                    matrices[i][x][y] = maskPatternConditions[i](x,y) ? bit ^ 1 : parseInt(bit, 10);\n                }\n            }\n\n            var fillData = function(matrices, blocks) {\n                var cellVisitor = new FreeCellVisitor(matrices[0]),\n                    block,\n                    codewordIdx,\n                    cell;\n\n                for (var blockIdx = 0; blockIdx < blocks.length; blockIdx++) {\n                    block = blocks[blockIdx];\n                    codewordIdx = 0;\n                    while (block.length > 0) {\n                        for (var i = 0; i < block.length; i++) {\n                             for (var j = 0; j < 8; j++) {\n                                cell = cellVisitor.getNextCell();\n                                fillDataCell(matrices, block[i][codewordIdx].charAt(j), cell.row, cell.column);\n                            }\n                        }\n\n                        codewordIdx++;\n                        while (block[0] && codewordIdx == block[0].length) {\n                            block.splice(0,1);\n                        }\n                    }\n                }\n\n                while ((cell = cellVisitor.getNextRemainderCell())) {\n                    fillDataCell(matrices, 0, cell.row, cell.column);\n                }\n            };\n\n            var padDataString = function(dataString, totalDataCodewords) {\n                var dataBitsCount = totalDataCodewords * 8,\n                    terminatorIndex = 0,\n                    paddingCodewordIndex = 0;\n                while (dataString.length < dataBitsCount && terminatorIndex < terminator.length) {\n                    dataString += terminator.charAt(terminatorIndex++);\n                }\n\n                if (dataString.length % 8 !== 0) {\n                    dataString += new Array(9 - dataString.length % 8).join(\"0\");\n                }\n\n                while (dataString.length < dataBitsCount) {\n                    dataString += paddingCodewords[paddingCodewordIndex];\n                    paddingCodewordIndex ^= 1;\n                }\n                return dataString;\n            };\n\n            function generatePowersOfTwo() {\n                var result;\n                for (var power = 1; power < 255; power++) {\n\n                    result = powersOfTwoResult[power - 1] * 2;\n                    if (result > 255) {\n                        result = result ^ 285;\n                    }\n\n                    powersOfTwoResult[power] = result;\n                    powersOfTwo[result] = power;\n                }\n\n                result = (powersOfTwoResult[power - 1] * 2) ^ 285;\n                powersOfTwoResult[power] = result;\n                powersOfTwoResult[-1] = 0;\n            }\n\n            var xorPolynomials = function(x,y) {\n                var result = [],\n                    idx = x.length - 2;\n                for (var i = idx; i >= 0; i--) {\n                     result[i] = x[i] ^ y[i];\n                }\n\n                return result;\n            };\n\n            var multiplyPolynomials = function(x, y) {\n                var result = [];\n                for (var i = 0; i < x.length; i++) {\n                    for (var j = 0; j < y.length; j++) {\n                        if (result[i + j] === undefined$1) {\n                             result[i + j] = (x[i] + (y[j] >= 0 ? y[j] : 0)) % 255;\n                        }\n                        else {\n                           result[i + j] = powersOfTwo[powersOfTwoResult[result[i + j]] ^ powersOfTwoResult[(x[i] + y[j]) % 255]];\n                        }\n                    }\n                }\n\n                return result;\n            };\n\n            function generateGeneratorPolynomials() {\n                var maxErrorCorrectionCodeWordsCount = 68;\n                for (var idx = 2; idx <= maxErrorCorrectionCodeWordsCount; idx++) {\n                    var firstPolynomial = generatorPolynomials[idx - 1],\n                        secondPolynomial = [idx, 0];\n                    generatorPolynomials[idx] = multiplyPolynomials(firstPolynomial, secondPolynomial);\n                }\n            }\n\n            //possibly generate on demand\n            generatePowersOfTwo();\n            generateGeneratorPolynomials();\n\n            function multiplyByConstant(polynomial, power) {\n                var result = [],\n                    idx = polynomial.length - 1;\n                do {\n                    result[idx] = powersOfTwoResult[(polynomial[idx] + power) % 255];\n                    idx--;\n                } while (polynomial[idx] !== undefined$1);\n\n                return result;\n            }\n\n            var generateErrorCodewords = function(data, errorCodewordsCount) {\n                var generator = generatorPolynomials[errorCodewordsCount - 1],\n                    result = new Array(errorCodewordsCount).concat(data),\n                    generatorPolynomial = new Array(result.length - generator.length).concat(generator),\n                    steps = data.length,\n                    errorCodewords = [],\n                    divisor,\n                    idx;\n\n                for (idx = 0; idx < steps; idx++) {\n                    divisor = multiplyByConstant(generatorPolynomial, powersOfTwo[result[result.length - 1]]);\n                    generatorPolynomial.splice(0,1);\n\n                    result = xorPolynomials(divisor, result);\n                }\n\n                for (idx = result.length - 1; idx >= 0; idx--) {\n                    errorCodewords[errorCodewordsCount - 1 - idx] = toBitsString(result[idx], 8);\n                }\n\n                return errorCodewords;\n            };\n\n            var getBlocks = function(dataStream, versionCodewordsInformation) {\n                var codewordStart = 0,\n                    dataBlocks = [],\n                    errorBlocks = [],\n                    dataBlock,\n                    versionGroups = versionCodewordsInformation.groups,\n                    blockCodewordsCount,\n                    groupBlocksCount,\n                    messagePolynomial,\n                    codeword;\n\n                for (var groupIdx = 0; groupIdx < versionGroups.length; groupIdx++) {\n                    groupBlocksCount = versionGroups[groupIdx][0];\n                    for (var blockIdx = 0; blockIdx < groupBlocksCount; blockIdx++) {\n                        blockCodewordsCount = versionGroups[groupIdx][1];\n                        dataBlock = [];\n                        messagePolynomial = [];\n                        for (var codewordIdx = 1; codewordIdx <= blockCodewordsCount; codewordIdx++) {\n                            codeword = dataStream.substring(codewordStart, codewordStart + 8);\n                            dataBlock.push(codeword);\n                            messagePolynomial[blockCodewordsCount - codewordIdx] = toDecimal(codeword);\n                            codewordStart += 8;\n                        }\n                        dataBlocks.push(dataBlock);\n                        errorBlocks.push(generateErrorCodewords(messagePolynomial,\n                            versionCodewordsInformation.errorCodewordsPerBlock));\n                    }\n                }\n                return [dataBlocks, errorBlocks];\n            };\n\n            var chooseMode = function(str, minNumericBeforeAlpha, minNumericBeforeByte, minAlphaBeforeByte, previousMode) {\n                 var numeric = numberRegex.exec(str),\n                    numericMatch = numeric ? numeric[0] : \"\",\n                    alpha = alphaRegex.exec(str),\n                    alphaMatch = alpha ? alpha[0] : \"\",\n                    alphaNumeric = alphaNumericRegex.exec(str),\n                    alphaNumericMatch = alphaNumeric ? alphaNumeric[0] : \"\",\n                    mode,\n                    modeString;\n\n                 if (numericMatch && (numericMatch.length >= minNumericBeforeAlpha ||\n                         str.length == numericMatch.length || (numericMatch.length >= minNumericBeforeByte &&\n                         !alphaNumericRegex.test(str.charAt(numericMatch.length))))) {\n                    mode = NUMERIC;\n                    modeString = numericMatch;\n                 }\n                 else if (alphaNumericMatch && (str.length == alphaNumericMatch.length ||\n                    alphaNumericMatch.length >= minAlphaBeforeByte || previousMode == ALPHA_NUMERIC)) {\n                    mode = ALPHA_NUMERIC;\n                    modeString = numericMatch || alphaMatch;\n                 }\n                 else {\n                    mode = BYTE;\n                    if (alphaNumericMatch) {\n                        modeString = alphaNumericMatch + byteRegex.exec(str.substring(alphaNumericMatch.length))[0];\n                    }\n                    else {\n                        modeString = byteRegex.exec(str)[0];\n                    }\n                 }\n\n                 return {\n                    mode: mode,\n                    modeString: modeString\n                 };\n            };\n\n            var getModes = function(str) {\n                var modes = [],\n                    previousMode,\n                    idx = 0;\n                modes.push(chooseMode(str, initMinNumericBeforeAlpha, initMinNumericBeforeByte, initMinAlphaBeforeByte, previousMode));\n                previousMode = modes[0].mode;\n                str = str.substr(modes[0].modeString.length);\n\n                while (str.length > 0) {\n                   var nextMode = chooseMode(str, minNumericBeforeAlpha, minNumericBeforeByte, minAlphaBeforeByte, previousMode);\n                   if (nextMode.mode != previousMode) {\n                        previousMode = nextMode.mode;\n                        modes.push(nextMode);\n                        idx++;\n                   }\n                   else {\n                        modes[idx].modeString += nextMode.modeString;\n                   }\n                   str = str.substr(nextMode.modeString.length);\n                }\n\n                return modes;\n            };\n\n            var getDataCodewordsCount = function(modes) {\n                var length = 0,\n                    mode;\n                for (var i = 0; i < modes.length; i++) {\n                    mode = modeInstances[modes[i].mode];\n                    length += mode.getStringBitsLength(modes[i].modeString.length);\n                }\n\n                return Math.ceil(length / 8);\n            };\n\n            var getVersion = function(dataCodewordsCount, errorCorrectionLevel) {\n                var x = 0,\n                    y = versionsCodewordsInformation.length - 1,\n                    version = Math.floor(versionsCodewordsInformation.length / 2);\n\n                do {\n                    if (dataCodewordsCount < versionsCodewordsInformation[version][errorCorrectionLevel].totalDataCodewords) {\n                        y = version;\n                    }\n                    else {\n                        x = version;\n                    }\n                    version = x + Math.floor((y - x) / 2);\n\n                } while (y - x > 1);\n\n                if (dataCodewordsCount <= versionsCodewordsInformation[x][errorCorrectionLevel].totalDataCodewords) {\n                    return version + 1;\n                }\n                return y + 1;\n            };\n\n            var getDataString = function(modes, version) {\n                var dataString = \"\",\n                    mode;\n                for (var i = 0; i < modes.length; i++) {\n                    mode = modeInstances[modes[i].mode];\n                    dataString += mode.encode(modes[i].modeString, version);\n                }\n\n                return dataString;\n            };\n\n            //fix case all zeros\n            var encodeFormatInformation = function(format) {\n                var formatNumber = toDecimal(format),\n                    encodedString,\n                    result = \"\";\n                if (formatNumber === 0) {\n                    return \"101010000010010\";\n                }\n                else {\n                    encodedString = encodeBCH(toDecimal(format), formatGeneratorPolynomial, 15);\n                }\n                for (var i = 0; i < encodedString.length; i++) {\n                    result += encodedString.charAt(i) ^ formatMaskPattern.charAt(i);\n                }\n\n                return result;\n            };\n\n            var encodeBCH = function(value, generatorPolynomial, codeLength) {\n                var generatorNumber = toDecimal(generatorPolynomial),\n                    polynomialLength = generatorPolynomial.length - 1,\n                    valueNumber = value << polynomialLength,\n                    length = codeLength - polynomialLength,\n                    valueString = toBitsString(value, length),\n                    result = dividePolynomials(valueNumber, generatorNumber);\n                result = valueString + toBitsString(result, polynomialLength);\n                return result;\n            };\n\n            var dividePolynomials = function(numberX,numberY) {\n                    var yLength = numberY.toString(2).length,\n                        xLength = numberX.toString(2).length;\n                    do {\n                        numberX ^= numberY << xLength - yLength;\n                        xLength = numberX.toString(2).length;\n                    }\n                    while (xLength >= yLength);\n\n                    return numberX;\n            };\n\n            function getNumberAt(str, idx) {\n                return parseInt(str.charAt(idx), 10);\n            }\n\n            var initMatrices = function(version) {\n                var matrices = [],\n                    modules = 17 + 4 * version;\n                for (var i = 0; i < maskPatternConditions.length; i++) {\n                    matrices[i] = new Array(modules);\n                    for (var j = 0; j < modules; j++) {\n                        matrices[i][j] = new Array(modules);\n                    }\n                }\n\n                return matrices;\n            };\n\n            var addFormatInformation = function(matrices, formatString) {\n                var matrix = matrices[0],\n                    x,\n                    y,\n                    idx = 0,\n                    length = formatString.length;\n\n                for (x = 0, y = 8; x <= 8; x++) {\n                    if (x !== 6) {\n                        fillFunctionCell(matrices, getNumberAt(formatString, length - 1 - idx++), x, y);\n                    }\n                }\n\n                for (x = 8, y = 7; y >= 0; y--) {\n                    if (y !== 6) {\n                        fillFunctionCell(matrices, getNumberAt(formatString, length - 1 - idx++), x, y);\n                    }\n                }\n                idx = 0;\n                for (y = matrix.length - 1, x = 8; y >= matrix.length - 8; y--) {\n                    fillFunctionCell(matrices,getNumberAt(formatString, length - 1 - idx++), x, y);\n                }\n\n                fillFunctionCell(matrices, 1, matrix.length - 8, 8);\n\n                for (x = matrix.length - 7, y = 8; x < matrix.length; x++) {\n                    fillFunctionCell(matrices, getNumberAt(formatString, length - 1 - idx++), x, y);\n                }\n            };\n\n            var encodeVersionInformation = function(version) {\n                return encodeBCH(version, versionGeneratorPolynomial, 18);\n            };\n\n            var addVersionInformation = function(matrices, dataString) {\n                var matrix = matrices[0],\n                    modules = matrix.length,\n                    x1 = 0,\n                    y1 = modules - 11,\n                    x2 = modules - 11,\n                    y2 = 0,\n                    quotient,\n                    mod,\n                    value;\n\n                for (var idx = 0; idx < dataString.length; idx++) {\n                    quotient = Math.floor(idx / 3);\n                    mod = idx % 3;\n                    value = getNumberAt(dataString, dataString.length - idx - 1);\n                    fillFunctionCell(matrices, value, x1 + quotient, y1 + mod);\n                    fillFunctionCell(matrices, value, x2 + mod, y2 + quotient);\n                }\n            };\n\n            var addCentricPattern = function(matrices, pattern, x, y) {\n                var size = pattern.length + 2,\n                    length = pattern.length + 1,\n                    value;\n\n                for (var i = 0; i < pattern.length; i++) {\n                    for (var j = i; j < size - i; j++) {\n                        value = pattern[i];\n                        fillFunctionCell(matrices, value, x + j, y + i);\n                        fillFunctionCell(matrices, value, x + i, y + j);\n                        fillFunctionCell(matrices, value, x + length - j, y + length - i);\n                        fillFunctionCell(matrices, value, x + length - i, y + length - j);\n                    }\n                }\n            };\n\n            var addFinderSeparator = function(matrices, direction, x, y) {\n                var nextX = x,\n                    nextY = y,\n                    matrix = matrices[0];\n                do {\n                    fillFunctionCell(matrices, 0, nextX, y);\n                    fillFunctionCell(matrices, 0, x, nextY);\n                    nextX += direction[0];\n                    nextY += direction[1];\n                }\n                while (nextX >= 0 && nextX < matrix.length);\n            };\n\n            var addFinderPatterns = function(matrices) {\n                var modules = matrices[0].length;\n                addCentricPattern(matrices, finderPattern, 0, 0);\n                addFinderSeparator(matrices, [-1,-1], 7,7);\n                addCentricPattern(matrices, finderPattern, modules - 7, 0);\n                addFinderSeparator(matrices, [1,-1], modules - 8, 7);\n                addCentricPattern(matrices, finderPattern, 0 , modules - 7);\n                addFinderSeparator(matrices, [-1,1],7, modules - 8);\n            };\n\n            var addAlignmentPatterns = function(matrices, version) {\n                if (version < 2) {\n                    return;\n                }\n\n                var matrix = matrices[0],\n                    modules = matrix.length,\n                    pointsCount = Math.floor(version / 7),\n                    points = [6],\n                    startDistance,\n                    distance,\n                    idx = 0;\n\n                if ((startDistance = irregularAlignmentPatternsStartDistance[version])) {\n                    distance = (modules - 13 - startDistance) / pointsCount;\n                }\n                else {\n                    startDistance = distance = (modules - 13) / (pointsCount + 1);\n                }\n                points.push(points[idx++] + startDistance);\n                while ((points[idx] + distance) < modules) {\n                    points.push(points[idx++] + distance);\n                }\n                for (var i = 0; i < points.length; i++) {\n                    for (var j = 0; j < points.length; j++) {\n                        if (matrix[points[i]][points[j]] === undefined$1) {\n                            addCentricPattern(matrices, alignmentPattern, points[i] - 2, points[j] - 2);\n                        }\n                    }\n                }\n            };\n\n            var addTimingFunctions = function(matrices) {\n                var row = 6,\n                    column = 6,\n                    value = 1,\n                    modules = matrices[0].length;\n                for (var i = 8; i < modules - 8; i++) {\n                    fillFunctionCell(matrices, value, row, i);\n                    fillFunctionCell(matrices, value, i, column);\n                    value ^= 1;\n                }\n            };\n\n            var scoreMaskMatrixes = function(matrices) {\n                var scores = [],\n                    previousBits = [],\n                    darkModules = [],\n                    patterns = [],\n                    adjacentSameBits = [],\n                    matrix,\n                    i,\n                    row = 0,\n                    column = 1,\n                    modules = matrices[0].length;\n\n\n                for (i = 0; i < matrices.length; i++) {\n                    scores[i] = 0;\n                    darkModules[i] = 0;\n                    adjacentSameBits[i] = [0,0];\n                    patterns[i] = [0, 0];\n                    previousBits[i] = [];\n                }\n                for (i = 0; i < modules; i++) {\n                    for (var j = 0; j < modules; j++) {\n                        for (var k = 0; k < matrices.length; k++) {\n                            matrix = matrices[k];\n                            darkModules[k] += parseInt(matrix[i][j], 10);\n                            if (previousBits[k][row] === matrix[i][j] && i + 1 < modules && j - 1 >= 0 &&\n                                matrix[i + 1][j] == previousBits[k][row] && matrix[i + 1][j - 1] == previousBits[k][row]) {\n                                scores[k] += 3;\n                            }\n                            scoreFinderPatternOccurance(k, patterns, scores, row, matrix[i][j]);\n                            scoreFinderPatternOccurance(k, patterns, scores, column, matrix[j][i]);\n                            scoreAdjacentSameBits(k,scores,previousBits,matrix[i][j],adjacentSameBits,row);\n                            scoreAdjacentSameBits(k,scores,previousBits,matrix[j][i],adjacentSameBits,column);\n                        }\n                    }\n                }\n                var total = modules * modules,\n                    minIdx,\n                    min = Number.MAX_VALUE;\n\n                for (i = 0; i < scores.length; i++) {\n                    scores[i] += calculateDarkModulesRatioScore(darkModules[i], total);\n                    if (scores[i] < min) {\n                        min = scores[i];\n                        minIdx = i;\n                    }\n                }\n\n                return minIdx;\n            };\n\n            function scoreFinderPatternOccurance(idx, patterns, scores, rowColumn, bit) {\n                patterns[idx][rowColumn] = ((patterns[idx][rowColumn] << 1) ^ bit) % 128;\n                if (patterns[idx][rowColumn] == finderPatternValue) {\n                    scores[idx] += 40;\n                }\n            }\n\n            function scoreAdjacentSameBits(idx, scores, previousBits, bit, adjacentBits, rowColumn) {\n                if (previousBits[idx][rowColumn] == bit) {\n                    adjacentBits[idx][rowColumn]++;\n                }\n                else {\n                    previousBits[idx][rowColumn] = bit;\n                    if (adjacentBits[idx][rowColumn] >= 5) {\n                        scores[idx] += 3 + adjacentBits[idx][rowColumn] - 5;\n                    }\n                    adjacentBits[idx][rowColumn] = 1;\n                }\n            }\n\n            function calculateDarkModulesRatioScore(darkModules, total) {\n                var percent = Math.floor((darkModules / total) * 100),\n                    mod5 = percent % 5,\n                    previous = Math.abs(percent - mod5 - 50),\n                    next = Math.abs(percent + 5 - mod5 - 50),\n                    score = 10 * Math.min(previous / 5, next / 5);\n                return score;\n            }\n\n            var EncodingResult = function(dataString, version) {\n                this.dataString = dataString;\n                this.version = version;\n            };\n\n            var IsoEncoder = function() {\n                this.getEncodingResult = function(inputString, errorCorrectionLevel) {\n                    var modes = getModes(inputString),\n                    dataCodewordsCount = getDataCodewordsCount(modes),\n                    version = getVersion(dataCodewordsCount, errorCorrectionLevel),\n                    dataString = getDataString(modes, version);\n\n                    return new EncodingResult(dataString, version);\n                };\n            };\n\n            var UTF8Encoder = function() {\n                this.mode = modeInstances[this.encodingMode];\n            };\n\n            UTF8Encoder.fn = UTF8Encoder.prototype = {\n                encodingMode: BYTE,\n                utfBOM: \"111011111011101110111111\",\n                initialModeCountStringLength: 20,\n                getEncodingResult: function(inputString, errorCorrectionLevel) {\n                    var that = this,\n                        data = that.encode(inputString),\n                        dataCodewordsCount = that.getDataCodewordsCount(data),\n                        version = getVersion(dataCodewordsCount, errorCorrectionLevel),\n                        dataString = that.mode.getModeCountString(data.length / 8, version) + data;\n\n                    return new EncodingResult(dataString, version);\n                },\n                getDataCodewordsCount: function(data) {\n                    var that = this,\n                        dataLength = data.length,\n                        dataCodewordsCount = Math.ceil(( that.initialModeCountStringLength + dataLength) / 8);\n\n                    return dataCodewordsCount;\n                },\n                encode: function(str) {\n                    var that = this,\n                        result = that.utfBOM;\n                    for (var i = 0; i < str.length; i++) {\n                        result += that.encodeCharacter(str.charCodeAt(i));\n                    }\n                    return result;\n                },\n                encodeCharacter: function(code) {\n                    var bytesCount = this.getBytesCount(code),\n                        bc = bytesCount - 1,\n                        result = \"\";\n\n                    if (bytesCount == 1) {\n                        result = toBitsString(code, 8);\n                    }\n                    else {\n                        var significantOnes = 8 - bytesCount;\n\n                        for (var i = 0; i < bc; i++) {\n                            result = toBitsString(code >> (i * 6) & 63 | 128, 8) + result;\n                        }\n\n                        result = ((code >> bc * 6) | ((255 >> significantOnes) << significantOnes)).toString(2) + result;\n                    }\n                    return result;\n                },\n                getBytesCount: function(code) {\n                    var ranges = this.ranges;\n                    for (var i = 0; i < ranges.length; i++) {\n                        if (code < ranges[i]) {\n                            return i + 1;\n                        }\n                    }\n                },\n                ranges: [128,2048,65536,2097152,67108864]\n            };\n\n            var QRCodeDataEncoder = function(encoding) {\n                if (encoding && encoding.toLowerCase().indexOf(\"utf_8\") >= 0) {\n                    return new UTF8Encoder();\n                }\n                else {\n                    return new IsoEncoder();\n                }\n            };\n\n            var encodeData = function(inputString, errorCorrectionLevel, encoding) {\n                var encoder = new QRCodeDataEncoder(encoding),\n                    encodingResult = encoder.getEncodingResult(inputString, errorCorrectionLevel),\n                    version = encodingResult.version,\n                    versionInformation = versionsCodewordsInformation[version - 1][errorCorrectionLevel],\n                    dataString = padDataString(encodingResult.dataString, versionInformation.totalDataCodewords),\n                    blocks = getBlocks(dataString, versionInformation),\n                    matrices = initMatrices(version);\n\n                addFinderPatterns(matrices);\n                addAlignmentPatterns(matrices, version);\n                addTimingFunctions(matrices);\n\n                if (version >= 7) {\n                    addVersionInformation(matrices, toBitsString(0, 18));\n                }\n\n                addFormatInformation(matrices, toBitsString(0, 15));\n                fillData(matrices, blocks);\n\n                var minIdx = scoreMaskMatrixes(matrices),\n                    optimalMatrix = matrices[minIdx];\n\n                if (version >= 7) {\n                    addVersionInformation([optimalMatrix], encodeVersionInformation(version));\n                }\n\n                var formatString = errorCorrectionPatterns[errorCorrectionLevel] + toBitsString(minIdx, 3);\n                addFormatInformation([optimalMatrix], encodeFormatInformation(formatString));\n\n                return optimalMatrix;\n            };\n\n            var QRCodeDefaults = {\n                DEFAULT_SIZE: 200,\n                QUIET_ZONE_LENGTH: 4,\n                DEFAULT_ERROR_CORRECTION_LEVEL: \"L\",\n                DEFAULT_BACKGROUND: \"#fff\",\n                DEFAULT_DARK_MODULE_COLOR: \"#000\",\n                MIN_BASE_UNIT_SIZE: 1\n            };\n\n            var QRCode = Widget.extend({\n                init: function(element, options) {\n                    var that = this;\n\n                    Widget.fn.init.call(that, element, options);\n\n                    that.element = $(element);\n                    that.wrapper = that.element;\n                    that.element.addClass(\"k-qrcode\");\n                    that.surfaceWrap = $(\"<div />\").css(\"position\", \"relative\").appendTo(this.element);\n                    that.surface = draw.Surface.create(that.surfaceWrap, {\n                        type: that.options.renderAs\n                    });\n                    that.setOptions(options);\n                },\n\n                redraw: function() {\n                    var size = this._getSize();\n\n                    this.surfaceWrap.css({\n                        width: size,\n                        height: size\n                    });\n                    this.surface.clear();\n                    this.surface.resize();\n\n                    this.createVisual();\n                    this.surface.draw(this.visual);\n                },\n\n                getSize: function() {\n                    return kendo.dimensions(this.element);\n                },\n\n                _resize: function() {\n                    this.redraw();\n                },\n\n                createVisual: function() {\n                    this.visual = this._render();\n                },\n\n                exportVisual: function() {\n                    return this._render();\n                },\n\n                _render: function() {\n                    var that = this,\n                        value = that._value,\n                        baseUnit,\n                        border = that.options.border || {},\n                        padding = that.options.padding || 0,\n                        borderWidth = border.width || 0,\n                        quietZoneSize,\n                        matrix,\n                        size,\n                        dataSize,\n                        contentSize;\n\n                    border.width = borderWidth;\n\n                    var visual = new draw.Group();\n\n                    if (value) {\n                        matrix = encodeData(value, that.options.errorCorrection, that.options.encoding);\n                        size = that._getSize();\n                        contentSize = size - 2 * (borderWidth + padding);\n                        baseUnit = that._calculateBaseUnit(contentSize, matrix.length);\n                        dataSize = matrix.length * baseUnit;\n                        quietZoneSize = borderWidth + padding + (contentSize - dataSize) / 2;\n\n                        visual.append(that._renderBackground(size, border));\n                        visual.append(that._renderMatrix(matrix, baseUnit, quietZoneSize));\n                        if (that._hasCustomLogo()) {\n                            visual.append(that._renderLogo(size, baseUnit));\n                        } else if (that._isSwiss()) {\n                            visual.append(that._renderSwissCode(size, baseUnit));\n                        }\n                    }\n\n                    return visual;\n                },\n\n                _renderLogo: function name(qrSize, baseUnit) {\n                    var image;\n                    var imageRect;\n                    var center = round(qrSize / 2);\n                    var logoSize = this._getLogoSize(baseUnit * DEFAULT_LOGO_SIZE);\n                    var logoUrl = this.options.overlay.imageUrl;\n                    var position = {\n                        x: center - logoSize.width / 2,\n                        y: center - logoSize.height / 2\n                    };\n\n                    imageRect = new kendo.geometry.Rect(\n                        new kendo.geometry.Point(position.x, position.y),\n                        new kendo.geometry.Size(logoSize.width, logoSize.height)\n                    );\n\n                    image = new draw.Image(logoUrl, imageRect);\n                    return image;\n                },\n\n                _renderSwissCode: function(qrSize, baseUnit) {\n                    var logoSize = this._getLogoSize(baseUnit * DEFAULT_LOGO_SIZE);\n                    logoSize = Math.max(logoSize.width, logoSize.height);\n                    var crossSize = logoSize / 4;\n                    var crossOffset = crossSize / 2;\n                    var center = qrSize / 2;\n                    var start = {};\n                    var visual = new draw.Group();\n\n                    start.x = start.y = Math.ceil(center - baseUnit - logoSize / 2);\n                    visual.append(this._renderShape(start, Math.ceil(logoSize + baseUnit * 2), squarePattern, \"#fff\"));\n\n                    start.x = start.y = center - logoSize / 2;\n                    visual.append(this._renderShape(start, logoSize, squarePattern, this.options.color));\n\n                    start.x = center + crossOffset - logoSize / 2;\n                    start.y = center + crossOffset + crossSize - logoSize / 2;\n                    visual.append(this._renderShape(start, crossSize, crossPattern, \"#fff\"));\n\n                    return visual;\n                },\n\n                _renderShape: function(start, step, pattern, color) {\n                    var path = new draw.MultiPath({\n                        fill: {\n                            color: color\n                        },\n                        stroke: null\n                    });\n\n                    path.moveTo(start.x, start.y);\n                    for (var i = 0; i < pattern.length; i++) {\n                        path.lineTo(start.x + step * pattern[i][0], start.y + step * pattern[i][1]);\n                    }\n                    path.close();\n\n                    return path;\n                },\n\n                _getSize: function() {\n                    var that = this,\n                        size;\n\n                    if (that.options.size) {\n                       size = parseInt(that.options.size, 10);\n                    } else {\n                        var element = that.element,\n                            min = Math.min(element.width(), element.height());\n\n                        if (min > 0) {\n                            size = min;\n                        } else {\n                            size = QRCodeDefaults.DEFAULT_SIZE;\n                        }\n                    }\n\n                    return size;\n                },\n\n                _calculateBaseUnit: function(size, matrixSize) {\n                    var baseUnit = Math.floor(size / matrixSize);\n\n                    if (baseUnit < QRCodeDefaults.MIN_BASE_UNIT_SIZE) {\n                        throw new Error(\"Insufficient size.\");\n                    }\n\n                    if (baseUnit * matrixSize >= size &&\n                        baseUnit - 1 >= QRCodeDefaults.MIN_BASE_UNIT_SIZE) {\n                        baseUnit--;\n                    }\n\n                    return baseUnit;\n                },\n\n                _renderMatrix: function(matrix, baseUnit, quietZoneSize) {\n                    var path = new draw.MultiPath({\n                        fill: {\n                            color: this.options.color\n                        },\n                        stroke: null\n                    });\n\n                    for (var row = 0; row < matrix.length; row++) {\n                        var y = quietZoneSize + row * baseUnit;\n                        var column = 0;\n\n                        while (column < matrix.length) {\n                            while (matrix[row][column] === 0 && column < matrix.length) {\n                                column++;\n                            }\n\n                            if (column < matrix.length) {\n                                var x = column;\n                                while (matrix[row][column] == 1) {\n                                    column++;\n                                }\n\n                                var x1 = round(quietZoneSize + x * baseUnit);\n                                var y1 = round(y);\n                                var x2 = round(quietZoneSize + column * baseUnit);\n                                var y2 = round(y + baseUnit);\n\n                                path.moveTo(x1, y1)\n                                    .lineTo(x1, y2)\n                                    .lineTo(x2, y2)\n                                    .lineTo(x2, y1)\n                                    .close();\n                            }\n                        }\n                    }\n\n                    return path;\n                },\n\n                _renderBackground: function(size, border) {\n                    var box = new Box2D(0,0, size, size).unpad(border.width / 2);\n                    return draw.Path.fromRect(box.toRect(), {\n                        fill: {\n                            color: this.options.background\n                        },\n                        stroke: {\n                            color: border.color,\n                            width: border.width\n                        }\n                    });\n                },\n\n                setOptions: function(options) {\n                    var that = this;\n                    options = options || {};\n                    that.options = extend(that.options, options);\n                    if (options.value !== undefined$1) {\n                        that._value = that.options.value + \"\";\n                    }\n                    that.redraw();\n                },\n                value: function(value) {\n                    var that = this;\n                    if (value === undefined$1) {\n                        return that._value;\n                    }\n                    that._value = value + \"\";\n                    that.redraw();\n                },\n                options: {\n                    name: \"QRCode\",\n                    renderAs: \"svg\",\n                    encoding: \"ISO_8859_1\",\n                    value: \"\",\n                    errorCorrection: QRCodeDefaults.DEFAULT_ERROR_CORRECTION_LEVEL,\n                    background: QRCodeDefaults.DEFAULT_BACKGROUND,\n                    color: QRCodeDefaults.DEFAULT_DARK_MODULE_COLOR,\n                    size: \"\",\n                    padding: 0,\n                    border: {\n                        color: \"\",\n                        width: 0\n                    },\n                    overlay: {\n                        type: IMAGE,\n                        imageUrl: \"\",\n                        width: 0,\n                        height: 0\n                    }\n                },\n\n                _hasCustomLogo: function() {\n                    return !!this.options.overlay.imageUrl;\n                },\n\n                _isSwiss: function() {\n                    return this.options.overlay.type === SWISS_QR;\n                },\n\n                _getLogoSize: function(defautLogoSize) {\n                    var width = this.options.overlay.width;\n                    var height = this.options.overlay.height;\n\n                    if (!width && !height) {\n                        width = height = defautLogoSize;\n                    } else if (width && !height) {\n                        height = width;\n                    } else if (!width && height) {\n                        width = height;\n                    }\n\n                    return {\n                        width: width,\n                        height: height\n                    };\n                }\n            });\n\n            dataviz.ExportMixin.extend(QRCode.fn);\n            dataviz.ui.plugin(QRCode);\n\n          kendo.deepExtend(dataviz, {\n                QRCode: QRCode,\n                QRCodeDefaults: QRCodeDefaults,\n                QRCodeFunctions: {\n                    FreeCellVisitor: FreeCellVisitor,\n                    fillData: fillData,\n                    padDataString: padDataString,\n                    generateErrorCodewords: generateErrorCodewords,\n                    xorPolynomials: xorPolynomials,\n                    getBlocks: getBlocks,\n                    multiplyPolynomials: multiplyPolynomials,\n                    chooseMode: chooseMode,\n                    getModes: getModes,\n                    getDataCodewordsCount: getDataCodewordsCount,\n                    getVersion: getVersion,\n                    getDataString: getDataString,\n                    encodeFormatInformation: encodeFormatInformation,\n                    encodeBCH: encodeBCH,\n                    dividePolynomials: dividePolynomials,\n                    initMatrices: initMatrices,\n                    addFormatInformation: addFormatInformation,\n                    encodeVersionInformation: encodeVersionInformation,\n                    addVersionInformation: addVersionInformation,\n                    addCentricPattern: addCentricPattern,\n                    addFinderSeparator: addFinderSeparator,\n                    addFinderPatterns: addFinderPatterns,\n                    addAlignmentPatterns: addAlignmentPatterns,\n                    addTimingFunctions: addTimingFunctions,\n                    scoreMaskMatrixes: scoreMaskMatrixes,\n                    encodeData: encodeData,\n                    UTF8Encoder: UTF8Encoder\n                },\n                QRCodeFields: {\n                    modes: modeInstances,\n                    powersOfTwo: powersOfTwo,\n                    powersOfTwoResult: powersOfTwoResult,\n                    generatorPolynomials: generatorPolynomials\n                }\n          });\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}