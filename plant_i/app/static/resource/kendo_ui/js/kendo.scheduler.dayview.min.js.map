{"version":3,"sources":["raw-js/kendo.scheduler.dayview.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendoscheduler","dayview","js","this","$","undefined$1","kendo","window","ui","encode","htmlEncode","setTime","date","SchedulerView","outerWidth","_outerWidth","outerHeight","_outerHeight","extend","getDate","MS_PER_MINUTE","MS_PER_DAY","CURRENT_TIME_MARKER_CLASS","CURRENT_TIME_MARKER_ARROW_CLASS","INVERSE_COLOR_CLASS","getMilliseconds","NS","DAY_VIEW_EVENT_TEMPLATE","template","start","end","title","format","replace","DAY_VIEW_ALL_DAY_EVENT_TEMPLATE","DATA_HEADER_TEMPLATE","isMobile","toString","ALLDAY_EVENT_WRAPPER_TEMPLATE","event","ariaLabel","attr","uid","resources","color","tail","middle","icon","isException","isRecurring","showDelete","messages","destroy","head","resizable","singleDay","EVENT_WRAPPER_TEMPLATE","toInvariantTime","staticDate","Date","isInDateRange","value","min","max","isInTimeRange","overlaps","addContinuousEvent","group","range","element","isAllDay","events","_continuousEvents","lastEvent","length","startDate","getTime","idx","splice","push","MultiDayView","init","options","that","fn","call","name","_workDays","workDays","dayIndex","workWeekStart","workWeekEnd","Math","abs","getWorkDays","_templates","_editable","calculateDateRange","_groups","_currentTime","_currentTimeMarkerUpdater","_updateCurrentTimeMarker","currentTime","currentTimeMarkers","currentContentMarkers","timesTableMarkerWidth","position","elementHtml","currentTimeMarker","useLocalTimezone","timezone","dataSource","schema","timezoneOffset","offset","convert","getTimezoneOffset","times","find","content","groupsCount","orientation","groups","firstTimesCell","first","lastTimesCell","last","_isRtl","left","groupIndex","currentGroup","utcCurrentTime","toUtcTime","ranges","timeSlotRanges","collection","slotByStartDate","timesTableMarker","eq","prependTo","markerTopPosition","round","innerRect","top","timesTableMarkerCss","right","addClass","css","height","setUpdateTimer","markerOptions","updateInterval","_currentTimeUpdateTimer","setInterval","bind","_updateResizeHint","startTime","endTime","multiday","enforceAllDaySlot","isMultiDay","width","hint","_removeResizeHint","rangeIndex","startSlot","_isGroupedByDate","slotIdx","index","slot","_slots","offsetWidth","clientHeight","offsetTop","_createResizeHint","offsetLeft","_resizeHint","add","innerWidth","rect","outerRect","snap","bottom","container","appendTo","text","toLocalDate","_updateMoveHint","distance","duration","_removeMoveHint","_end","pop","eventHint","clientWidth","offsetHeight","_createEventElement","clone","inverseColor","_appendMoveHint","_moveHint","_slotByPosition","x","y","_isVerticallyGrouped","scrollTop","scrollLeft","ceil","daySlotByPosition","timeSlotByPosition","_groupCount","groupedResources","byDate","_groupOrientation","_columnCountForLevel","_rowCountForLevel","_columnOffsetForResource","_columnCountInResourceView","_timeSlotGroups","groupCount","columnCount","time","rowIndex","cellIndex","interval","_timeSlotInterval","verticalViews","tableRows","rowCount","floor","rowMultiplier","cellMultiplier","cells","children","timeIndex","_addTimeSlotGroup","cell","getTimeSlotCollection","currentDate","_dates","UTC","getFullYear","getMonth","addTimeSlot","_addDaySlotGroup","cellCount","addDaySlot","_daySlotGroups","getDaySlotCollection","view","_addResourceView","columnIndex","addTimeSlotCollection","addDays","allDaySlot","addDaySlotCollection","selectedDateFormat","selectedShortDateFormat","selectedMobileDateFormat","showWorkHours","today","minorTickCount","majorTick","majorTimeHeaderTemplate","minorTimeHeaderTemplate","groupHeaderTemplate","slotTemplate","allDaySlotTemplate","eventTemplate","allDayEventTemplate","dateHeaderTemplate","editable","workDayStart","workDayEnd","footer","command","allDay","showFullDay","showWorkDay","ongoingEvents","cssClass","enabled","settings","Template","templateSettings","_isMobile","_touchEditable","_mouseEditable","on","e","trigger","closest","preventDefault","create","parent","hasClass","pageX","pageY","resourceInfo","_resourceBySlot","eventInfo","endDate","update","threshold","support","mobileOS","android","_addUserEvents","UserEvents","filter","useClickAsTap","browser","edge","tap","_scrolling","target","location","_allDayUserEvents","_editUserEvents","eventElement","touch","initialTouch","is","_layout","dates","columns","rows","column","isToday","className","cellContent","_forTimeRange","middleRow","lastSlotRow","row","_createDateLayout","_createColumnsLayout","_createRowsLayout","toggleFullDay","isWorkDay","_footerItems","items","_defaultTools","todayMobile","fulldayMobile","fulldayDesktop","action","after","msStart","msMin","msMax","msMajorInterval","msInterval","startDay","html","majorTickDivider","_content","_renderRows","rowLevels","columnLevels","append","_virtualContent","isVerticalGroupped","dateID","levels","_recalculateLevels","appendRow","groupIdx","dateIndex","_addCellsToContent","rowIdx","_allDayVerticalGroupRow","result","dateGroupIndex","tmplDate","classes","_isWorkDay","day","getDay","i","_render","_startDate","_endDate","createLayout","_footer","refreshLayout","_isVirtualized","_tryRenderContent","allDayHeader","_allDayHeaderHeight","th","currentTarget","additioanlWidth","additionalHeight","datesHeader","nextDate","nextDay","previousDate","previousDay","clearInterval","off","inRange","selectionByElement","innerHeight","_timeSlotIndex","_slotIndex","_dateSlotIndex","slots","_positionAllDayEvent","slotRange","slotWidth","startIndex","endIndex","allDayEvents","collidingEvents","currentColumnCount","_headerColumnCount","rightOffset","eventHeight","addEvent","slotIndex","createRows","rowEvents","j","eventLength","_arrangeColumns","columnEvents","eventRightOffset","eventElements","slotEvents","tableEl","table","contentEl","columnWidth","createColumns","calculatedWidth","style","scrollWidth","_positionEvent","_startTime","_endTime","borderWidths","getComputedStyles","parseFloat","isOneDayEvent","resize","eventStartTime","_time","eventEndTime","eventStartDate","eventEndDate","eventResources","apply","data","ns","_formatEventAriaLabel","applyStylesFromKendoAttributes","_isInTimeSlot","slotStartTime","slotEndTime","_date","_isInDateSlot","slotStart","firstSlot","slotEnd","lastSlot","_updateAllDayHeaderHeight","_height","allDaySlots","refresh","_renderEvents","allDayEventContainer","isMultiDayEvent","slotRanges","newStart","newEnd","dateRange","daySlotRanges","_inverseEventColor","rangeCount","occurrence","render","_cachedEvents","remove","Query","sort","field","dir","toArray","eventsByResource","_eventsByResource","eventsPerDate","map","grep","_ongoingEvents","parentValue","resource","item","itemParentValue","getter","dataParentValueField","itemIdx","_resourceValue","eventsFilteredByResource","operator","groupEqFilter","slice","level","columnLevel","rowLevel","clearSelection","removeAttr","removeClass","_updateDirection","selection","multiple","reverse","vertical","isDaySlot","endSlot","collectionIndex","backward","_changeViewPeriod","endMilliseconds","newDateStart","newDateEnd","verticalByDate","_timeSlotCollections","_getCollections","daySlotCollectionCount","_isInRange","DayView","WeekView","selectedDate","dayOfWeek","calendarInfo","firstDay","WorkWeekView","weekStart","indexOf","jQuery"],"mappings":"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","file":"kendo.scheduler.dayview.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.scheduler.view.js'), require('kendo.icons.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.scheduler.view', 'kendo.icons'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendoscheduler = global.kendoscheduler || {}, global.kendoscheduler.dayview = global.kendoscheduler.dayview || {}, global.kendoscheduler.dayview.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n        id: \"scheduler.dayview\",\n        name: \"Scheduler Day View\",\n        category: \"web\",\n        description: \"The Scheduler Day View\",\n        depends: [ \"scheduler.view\", \"icons\" ],\n        hidden: true\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            encode = kendo.htmlEncode,\n            setTime = kendo.date.setTime,\n            SchedulerView = ui.SchedulerView,\n            outerWidth = kendo._outerWidth,\n            outerHeight = kendo._outerHeight,\n            extend = $.extend,\n            getDate = kendo.date.getDate,\n            MS_PER_MINUTE = kendo.date.MS_PER_MINUTE,\n            MS_PER_DAY = kendo.date.MS_PER_DAY,\n            CURRENT_TIME_MARKER_CLASS = \"k-current-time\",\n            CURRENT_TIME_MARKER_ARROW_CLASS = \"k-current-time-arrow\",\n            INVERSE_COLOR_CLASS = \"k-event-inverse\",\n            BORDER_SIZE_COEFF = 0.8666,\n            getMilliseconds = kendo.date.getMilliseconds,\n            NS = \".kendoMultiDayView\";\n\n        var DAY_VIEW_EVENT_TEMPLATE = kendo.template(({ start, end, title }) => `<div title=\"(${kendo.format(\"{0:t} - {1:t}\", start, end)}): ${title.replace(/\"/g,\"&#34;\")}\">` +\n                        `<div class=\"k-event-template k-event-time\">${encode(kendo.format(\"{0:t} - {1:t}\", start, end))}</div>` +\n                        `<div class=\"k-event-template\">${title}</div>` +\n                    '</div>'),\n\n            DAY_VIEW_ALL_DAY_EVENT_TEMPLATE = kendo.template(({ start, title }) => `<div title=\"(${kendo.format(\"{0:t}\", start)}): ${title.replace(/\"/g,\"&#34;\")}\">` +\n                        `<div class=\"k-event-template\">${title}</div>` +\n                    '</div>'),\n\n            DATA_HEADER_TEMPLATE = kendo.template(({ isMobile, date }) => `<span class='k-link k-nav-day'>${isMobile ? kendo.toString(date,'ddd')[0] : kendo.toString(date,'ddd M/dd')}</span>`),\n\n            ALLDAY_EVENT_WRAPPER_TEMPLATE = (event) => `<div role=\"button\" aria-label=\"${encode(event.ariaLabel)}\" ${kendo.attr('uid')}=\"${event.uid}\"` +\n                    `${(event.resources[0] ? `${kendo.attr(\"style-background-color\")}=\"${event.resources[0].color}\" ${kendo.attr(\"style-border-color\")}=\"${event.resources[0].color}\"` : '')} class=\"k-event\">` +\n                    '<span class=\"k-event-actions\">' +\n                        (event.tail || event.middle ? kendo.ui.icon(\"caret-alt-left\") : '') +\n                        (event.isException() ? kendo.ui.icon(\"arrows-no-repeat\") : (event.isRecurring() ? kendo.ui.icon(\"arrow-rotate-cw\") : '') ) +\n                    '</span>' +\n                    kendo.template(event.template)(event) +\n                    '<span class=\"k-event-actions\">' +\n                        (event.showDelete ? `<a href=\"#\" class=\"k-link k-event-delete\" title=\"${event.messages.destroy}\" aria-label=\"${event.messages.destroy}\">${kendo.ui.icon(\"x\")}</a>` : '') +\n                        (event.head || event.middle ? kendo.ui.icon(\"caret-alt-right\") : '') +\n                    '</span>' +\n                    (event.resizable && !event.singleDay && !event.tail && !event.middle ? '<span class=\"k-resize-handle k-resize-w\"></span>' : '') +\n                    (event.resizable && !event.singleDay && !event.head && !event.middle ? '<span class=\"k-resize-handle k-resize-e\"></span>' : '') +\n                '</div>',\n\n            EVENT_WRAPPER_TEMPLATE = (event) => `<div role=\"button\" aria-label=\"${encode(event.ariaLabel)}\" ${kendo.attr('uid')}=\"${event.uid}\"` +\n                    `${(event.resources[0] ? `${kendo.attr(\"style-background-color\")}=\"${event.resources[0].color}\" ${kendo.attr(\"style-border-color\")}=\"${event.resources[0].color}\"` : '')} class=\"k-event\">` +\n                     '<span class=\"k-event-actions\">' +\n                        (event.isException() ? kendo.ui.icon(\"arrows-no-repeat\") : (event.isRecurring() ? kendo.ui.icon(\"arrow-rotate-cw\") : '') ) +\n                    '</span>' +\n                    kendo.template(event.template)(event) +\n                    '<span class=\"k-event-actions\">' +\n                        (event.showDelete ? `<a href=\"#\" class=\"k-link k-event-delete\" title=\"${event.messages.destroy}\" aria-label=\"${event.messages.destroy}\">${kendo.ui.icon(\"x\")}</a>` : '') +\n                    '</span>' +\n                    '<span class=\"k-event-top-actions\">' +\n                        (event.tail || event.middle ? kendo.ui.icon(\"caret-alt-up\") : '') +\n                    '</span>' +\n                    '<span class=\"k-event-bottom-actions\">' +\n                        (event.head || event.middle ? kendo.ui.icon(\"caret-alt-down\") : '') +\n                    '</span>' +\n                    (event.resizable && !event.tail && !event.middle ? '<span class=\"k-resize-handle k-resize-n\"></span>' : '') +\n                    (event.resizable && !event.head && !event.middle ? '<span class=\"k-resize-handle k-resize-s\"></span>' : '') +\n                '</div>';\n\n        function toInvariantTime(date) {\n            var staticDate = new Date(1980, 1, 1, 0, 0, 0);\n            setTime(staticDate, getMilliseconds(date));\n            return staticDate;\n        }\n\n        function isInDateRange(value, min, max) {\n            return value >= min && value <= max;\n        }\n\n        function isInTimeRange(value, min, max, overlaps) {\n            overlaps = overlaps ? value <= max : value < max;\n            return value > min && overlaps;\n        }\n\n        function addContinuousEvent(group, range, element, isAllDay) {\n            var events = group._continuousEvents;\n            var lastEvent = events[events.length - 1];\n            var startDate = getDate(range.start.startDate()).getTime();\n\n            //this handles all day event which is over multiple slots but starts\n            //after one of the time events\n            if (isAllDay && lastEvent &&\n                getDate(lastEvent.start.startDate()).getTime() == startDate) {\n\n                    var idx = events.length - 1;\n                    for ( ; idx > -1; idx --) {\n                        if (events[idx].isAllDay ||\n                            getDate(events[idx].start.startDate()).getTime() < startDate) {\n                                break;\n                            }\n                    }\n\n                    events.splice(idx + 1, 0, {\n                        element: element,\n                        isAllDay: true,\n                        uid: element.attr(kendo.attr(\"uid\")),\n                        start: range.start,\n                        end: range.end\n                    });\n                } else {\n                    events.push({\n                        element: element,\n                        isAllDay: isAllDay,\n                        uid: element.attr(kendo.attr(\"uid\")),\n                        start: range.start,\n                        end: range.end\n                    });\n                }\n        }\n\n        function getWorkDays(options) {\n            if (options.workDays && options.workDays.length) {\n                return options.workDays;\n            }\n\n            var workDays = [];\n            var dayIndex = options.workWeekStart % 7;\n            var workWeekEnd = Math.abs(options.workWeekEnd % 7);\n\n            workDays.push(dayIndex);\n\n            while (workWeekEnd != dayIndex) {\n                if (dayIndex > 6 ) {\n                    dayIndex -= 7;\n                } else {\n                    dayIndex++;\n                }\n                workDays.push(dayIndex);\n            }\n            return workDays;\n        }\n\n        var MultiDayView = SchedulerView.extend({\n            init: function(element, options) {\n                var that = this;\n\n                SchedulerView.fn.init.call(that, element, options);\n\n                that.title = that.options.title || that.options.name;\n\n                that._workDays = getWorkDays(that.options);\n\n                that._templates();\n\n                that._editable();\n\n                that.calculateDateRange();\n\n                that._groups();\n\n                that._currentTime(true);\n            },\n\n            _currentTimeMarkerUpdater: function() {\n                this._updateCurrentTimeMarker(new Date());\n            },\n\n            _updateCurrentTimeMarker: function(currentTime) {\n                var options = this.options,\n                    currentTimeMarkers, currentContentMarkers, timesTableMarkerWidth, position,\n                    elementHtml = \"<div class='\" + CURRENT_TIME_MARKER_CLASS + \"'></div>\";\n\n                if (options.currentTimeMarker.useLocalTimezone === false) {\n                    var timezone = options.dataSource.options.schema.timezone;\n\n                    if (options.dataSource && timezone) {\n                       var timezoneOffset = kendo.timezone.offset(currentTime, timezone);\n                       currentTime = kendo.timezone.convert(currentTime, currentTime.getTimezoneOffset(), timezoneOffset);\n                    }\n                }\n\n                currentTimeMarkers = this.times.find(\".\" + CURRENT_TIME_MARKER_CLASS);\n                currentContentMarkers = this.content.find(\".\" + CURRENT_TIME_MARKER_CLASS);\n\n                var groupsCount = !options.group || options.group.orientation == \"horizontal\" ? 1 : this.groups.length;\n                var firstTimesCell = this.times.find(\"tr\").first().find(\"th\").first();\n                var lastTimesCell = this.times.find(\"tr\").first().find(\"th\").last();\n\n                if (firstTimesCell.length > 0 && lastTimesCell.length > 0) {\n                    if (this._isRtl) {\n                        position = firstTimesCell.position().left + outerHeight(firstTimesCell) - outerHeight(lastTimesCell);\n                    } else {\n                        position = lastTimesCell.position().left;\n                    }\n                }\n\n                for (var groupIndex = 0; groupIndex < groupsCount; groupIndex++) {\n                    var currentGroup = this.groups[groupIndex];\n\n                    if (!currentGroup) {\n                        return;\n                    }\n\n                    var utcCurrentTime = kendo.date.toUtcTime(currentTime);\n                    var ranges = currentGroup.timeSlotRanges(utcCurrentTime, utcCurrentTime + 1);\n\n                    if (ranges.length === 0) {\n                        return;\n                    }\n\n                    var collection = ranges[0].collection;\n                    var slotElement = collection.slotByStartDate(currentTime);\n\n                    if (slotElement) {\n                        var timesTableMarker = currentTimeMarkers[groupIndex] ? currentTimeMarkers.eq(groupIndex) : $(elementHtml).prependTo(this.times);\n                        var markerTopPosition = Math.round(ranges[0].innerRect(currentTime, new Date(currentTime.getTime() + 1), false).top);\n\n                        var timesTableMarkerCss = {};\n\n                        if (this._isRtl) {\n                            timesTableMarkerCss.right = position;\n                            timesTableMarker.addClass(CURRENT_TIME_MARKER_ARROW_CLASS + \"-left\");\n                        } else {\n                            timesTableMarkerCss.left = position;\n                            timesTableMarker.addClass(CURRENT_TIME_MARKER_ARROW_CLASS + \"-right\");\n                        }\n\n                        if (!timesTableMarkerWidth) {\n                            timesTableMarkerWidth = (outerWidth(timesTableMarker) * BORDER_SIZE_COEFF / 2);\n                        }\n\n                        timesTableMarkerCss.top = markerTopPosition - timesTableMarkerWidth;\n\n                        timesTableMarker.css(timesTableMarkerCss);\n\n                        var contentMarker = currentContentMarkers[groupIndex] ? currentContentMarkers.eq(groupIndex) : $(elementHtml).prependTo(this.content);\n\n                        contentMarker.css({\n                            top: markerTopPosition,\n                            height: \"1px\",\n                            right: 0,\n                            left: 0\n                        });\n                    }\n                }\n            },\n\n            _currentTime: function(setUpdateTimer) {\n                var that = this;\n                var markerOptions = that.options.currentTimeMarker;\n\n                if (markerOptions !== false && markerOptions.updateInterval !== undefined$1) {\n                    that._currentTimeMarkerUpdater();\n\n                    if (setUpdateTimer) {\n                        that._currentTimeUpdateTimer = setInterval(this._currentTimeMarkerUpdater.bind(that), markerOptions.updateInterval);\n                    }\n                }\n            },\n\n            _updateResizeHint: function(event, groupIndex, startTime, endTime) {\n                var multiday;\n\n                if (this.options.enforceAllDaySlot) {\n                    multiday = event.isMultiDay();\n                } else {\n                    multiday = event.isAllDay;\n                }\n\n                var group = this.groups[groupIndex];\n\n                var ranges = group.ranges(startTime, endTime, multiday, event.isAllDay);\n                var width, height, top, hint;\n\n                this._removeResizeHint();\n\n                for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {\n                    var range = ranges[rangeIndex];\n                    var start = range.startSlot();\n\n                    if (this._isGroupedByDate() && multiday) {\n                        for (var slotIdx = start.index; slotIdx <= range.end.index; slotIdx++) {\n                            var slot = range.collection._slots[slotIdx];\n                            width = slot.offsetWidth;\n                            height = slot.clientHeight;\n                            top = slot.offsetTop;\n\n                            hint = SchedulerView.fn._createResizeHint.call(this,\n                                slot.offsetLeft,\n                                top,\n                                width,\n                                height\n                            );\n\n                            this._resizeHint = this._resizeHint.add(hint);\n                        }\n                    } else {\n                        width = start.offsetWidth;\n                        height = start.clientHeight;\n                        top = start.offsetTop;\n\n                        if (multiday) {\n                            width = range.innerWidth();\n                        } else {\n                            var rect = range.outerRect(startTime, endTime, this.options.snap);\n                            top = rect.top;\n                            height = rect.bottom - rect.top;\n                        }\n\n                        hint = SchedulerView.fn._createResizeHint.call(this,\n                            start.offsetLeft,\n                            top,\n                            width,\n                            height\n                        );\n\n                       this._resizeHint = this._resizeHint.add(hint);\n                    }\n                }\n\n                var format = \"t\";\n                var container = this.content;\n\n                if (multiday) {\n                    format = \"M/dd\";\n                    container = this.element.find(\".k-scheduler-header-wrap:has(.k-scheduler-header-all-day) > div\");\n                    if (!container.length) {\n                        container = this.content;\n                    }\n                }\n\n                this._resizeHint.appendTo(container);\n\n                this._resizeHint.find(\".k-label-top,.k-label-bottom\").text(\"\");\n\n                this._resizeHint.first().addClass(\"k-first\").find(\".k-label-top\").text(kendo.toString(kendo.timezone.toLocalDate(startTime), format));\n\n                this._resizeHint.last().addClass(\"k-last\").find(\".k-label-bottom\").text(kendo.toString(kendo.timezone.toLocalDate(endTime), format));\n            },\n\n            _updateMoveHint: function(event, groupIndex, distance) {\n                var multiday;\n\n                if (this.options.enforceAllDaySlot) {\n                    multiday = event.isMultiDay();\n                } else {\n                    multiday = event.isAllDay;\n                }\n\n                var group = this.groups[groupIndex];\n\n                var start = kendo.date.toUtcTime(event.start) + distance;\n\n                var end = start + event.duration();\n\n                var ranges = group.ranges(start, end, multiday, event.isAllDay);\n\n                start = kendo.timezone.toLocalDate(start);\n\n                end = kendo.timezone.toLocalDate(end);\n\n                this._removeMoveHint(event.uid);\n\n                if (!multiday &&\n                    getMilliseconds(end) < getMilliseconds(this.startTime()) &&\n                    (end < this._end().getTime()) &&\n                    getMilliseconds(end) !== 0 &&\n                    ranges.length > 1) {\n                        ranges.pop();\n                }\n\n                var eventHint = $();\n\n                for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {\n                    var range = ranges[rangeIndex];\n                    var startSlot = range.start;\n                    var hint;\n                    var css = {\n                        left: startSlot.offsetLeft + 2,\n                        top: startSlot.offsetTop\n                    };\n\n                    if (this._isGroupedByDate() && multiday) {\n                        for (var slotIdx = startSlot.index; slotIdx <= range.end.index; slotIdx++) {\n                            var slot = range.collection._slots[slotIdx];\n\n                            css.left = this._isRtl ? slot.clientWidth * 0.1 + slot.offsetLeft + 2 : slot.offsetLeft + 2;\n                            css.height = slot.offsetHeight;\n                            css.width = slot.clientWidth * 0.9 - 2;\n\n                            hint = this._createEventElement(event.clone({ start: start, end: end }), !multiday);\n\n                            if (event.inverseColor) {\n                                hint.addClass(INVERSE_COLOR_CLASS);\n                            }\n\n                            this._appendMoveHint(hint, css);\n                            eventHint = eventHint.add(hint);\n                        }\n                    } else {\n                        if (this._isRtl) {\n                           css.left = startSlot.clientWidth * 0.1 + startSlot.offsetLeft + 2;\n                        }\n\n                        if (multiday) {\n                            css.width = range.innerWidth() - 2;\n                        } else {\n                            var rect = range.outerRect(start, end, this.options.snap);\n                            css.top = rect.top;\n                            css.height = rect.bottom - rect.top;\n                            css.width = startSlot.clientWidth * 0.9 - 2;\n                        }\n\n                        hint = this._createEventElement(event.clone({ start: start, end: end }), !multiday);\n\n                        if (event.inverseColor) {\n                            hint.addClass(INVERSE_COLOR_CLASS);\n                        }\n\n                        this._appendMoveHint(hint, css);\n                        eventHint = eventHint.add(hint);\n                    }\n                }\n\n                var content = this.content;\n\n                if (multiday) {\n                    content = this.element.find(\".k-scheduler-header-wrap:has(.k-scheduler-header-all-day) > div\");\n                    if (!content.length) {\n                        content = this.content;\n                    }\n                }\n\n                eventHint.appendTo(content);\n            },\n\n            _appendMoveHint: function(hint, css) {\n                hint.addClass(\"k-event-drag-hint\");\n\n                hint.css(css);\n\n                this._moveHint = this._moveHint.add(hint);\n           },\n\n           _slotByPosition: function(x, y) {\n               var slot, offset;\n\n               if (this._isVerticallyGrouped()) {\n                   offset = this.content.offset();\n                   y += this.content[0].scrollTop;\n                   x += this.content[0].scrollLeft;\n               } else {\n                   offset = this.element.find(\".k-scheduler-header-wrap:has(.k-scheduler-header-all-day)\").find(\">div\").offset();\n               }\n\n               if (offset) {\n                   x -= offset.left;\n                   y -= offset.top;\n               }\n\n               x = Math.ceil(x);\n               y = Math.ceil(y);\n\n               var group;\n               var groupIndex;\n\n               for (groupIndex = 0; groupIndex < this.groups.length; groupIndex++) {\n                    group = this.groups[groupIndex];\n\n                    slot = group.daySlotByPosition(x, y, this._isGroupedByDate());\n\n                    if (slot) {\n                        return slot;\n                    }\n               }\n\n               if (offset) {\n                   x += offset.left;\n                   y += offset.top;\n               }\n\n               offset = this.content.offset();\n\n               x -= offset.left;\n               y -= offset.top;\n\n               if (!this._isVerticallyGrouped()) {\n                   y += this.content[0].scrollTop;\n                   x += this.content[0].scrollLeft;\n               }\n\n               x = Math.ceil(x);\n               y = Math.ceil(y);\n\n               for (groupIndex = 0; groupIndex < this.groups.length; groupIndex++) {\n                    group = this.groups[groupIndex];\n\n                    slot = group.timeSlotByPosition(x, y);\n\n                    if (slot) {\n                        return slot;\n                    }\n               }\n\n               return null;\n           },\n\n           _groupCount: function() {\n                var resources = this.groupedResources;\n                var byDate = this._isGroupedByDate();\n\n                if (resources.length) {\n                    if (this._groupOrientation() === \"vertical\") {\n                        if (byDate) {\n                            return this._columnCountForLevel(resources.length - 1);\n                        } else {\n                            return this._rowCountForLevel(resources.length - 1);\n                        }\n                    } else {\n                        if (byDate) {\n                            return this._columnCountForLevel(resources.length) / this._columnCountForLevel(0);\n                        } else {\n                              return this._columnCountForLevel(resources.length) / this._columnOffsetForResource(resources.length);\n                        }\n                    }\n                }\n                return 1;\n            },\n\n            _columnCountInResourceView: function() {\n                var resources = this.groupedResources;\n                var byDate = this._isGroupedByDate();\n\n                if (!resources.length || this._isVerticallyGrouped()) {\n                    if (byDate) {\n                         return this._rowCountForLevel(0);\n                    } else {\n                         return this._columnCountForLevel(0);\n                    }\n                }\n\n                if (byDate) {\n                    return this._columnCountForLevel(0);\n                } else {\n                    return this._columnOffsetForResource(resources.length);\n                }\n            },\n\n            _timeSlotGroups: function(groupCount, columnCount) {\n                var interval = this._timeSlotInterval();\n                var verticalViews = groupCount;\n                var byDate = this._isGroupedByDate();\n                var tableRows = this.content.find(\"tr:not(.k-scheduler-header-all-day)\");\n                var group, time, rowIndex, cellIndex;\n                var rowCount = tableRows.length;\n\n                if (this._isVerticallyGrouped()) {\n                    if (byDate) {\n                        verticalViews = columnCount;\n                    }\n                    rowCount = Math.floor(rowCount / verticalViews);\n                }\n\n                for (var groupIndex = 0; groupIndex < verticalViews; groupIndex++) {\n                    var rowMultiplier = 0;\n                    var cellMultiplier = 0;\n\n                    if (this._isVerticallyGrouped()) {\n                        rowMultiplier = groupIndex;\n                    } else {\n                        cellMultiplier = groupIndex;\n                    }\n\n                    rowIndex = rowMultiplier * rowCount;\n\n                  while (rowIndex < (rowMultiplier + 1) * rowCount) {\n                        var cells = tableRows[rowIndex].children;\n\n                        if (rowIndex % rowCount === 0) {\n                            time = getMilliseconds(new Date(+this.startTime()));\n                        }\n\n                        var timeIndex = 0;\n                        if (byDate) {\n                            if (this._isVerticallyGrouped()) {\n                                for (cellIndex = 0; cellIndex < groupCount; cellIndex++) {\n                                    group = this.groups[cellIndex];\n                                    this._addTimeSlotGroup(group, cells, cellIndex, time, interval, groupIndex);\n                                }\n                            } else {\n                                group = this.groups[groupIndex];\n                                for (cellIndex = cellMultiplier; cellIndex < groupCount * columnCount; cellIndex = cellIndex + groupCount) {\n                                    this._addTimeSlotGroup(group, cells, cellIndex, time, interval, timeIndex);\n                                    timeIndex++;\n                                }\n                            }\n                        } else {\n                            group = this.groups[groupIndex];\n                            for (cellIndex = cellMultiplier * columnCount; cellIndex < (cellMultiplier + 1) * columnCount; cellIndex++) {\n\n                                this._addTimeSlotGroup(group, cells, cellIndex, time, interval, timeIndex);\n                                 timeIndex++;\n                            }\n                        }\n\n                        time += interval;\n                        rowIndex ++;\n                    }\n                }\n            },\n\n            _addTimeSlotGroup: function(group, cells, cellIndex, time, interval, timeIndex) {\n                  var cell = cells[cellIndex];\n                  var collection = group.getTimeSlotCollection(timeIndex);\n                  var currentDate = this._dates[timeIndex];\n                  if (!currentDate || !cell) {\n                      return;\n                  }\n                  var currentTime = Date.UTC(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());\n                  var start = currentTime + time;\n                  var end = start + interval;\n\n                  collection.addTimeSlot(cell, start, end);\n            },\n\n             _addDaySlotGroup: function(collection, cells, cellIndex, columnCount, cellCount) {\n                    var cell = cells[cellIndex];\n                    var start = this._dates[cellCount];\n                    if (!start) {\n                        return;\n                    }\n                    var currentTime = Date.UTC(start.getFullYear(), start.getMonth(), start.getDate());\n\n                    collection.addDaySlot(cell, currentTime, currentTime + kendo.date.MS_PER_DAY);\n            },\n\n            _daySlotGroups: function(groupCount, columnCount) {\n                var tableRows, cellIndex;\n                var verticalViews = groupCount;\n                var byDate = this._isGroupedByDate();\n\n                if (this._isVerticallyGrouped()) {\n                    if (byDate) {\n                        verticalViews = columnCount;\n                    }\n                    tableRows = this.element.find(\".k-scheduler-header-all-day\");\n                } else {\n                    tableRows = this.element.find(\".k-scheduler-header-all-day tr\");\n                }\n\n                for (var groupIndex = 0; groupIndex < verticalViews; groupIndex++) {\n                    var rowMultiplier = 0;\n                    var group, collection;\n\n                    if (this._isVerticallyGrouped()) {\n                        rowMultiplier = groupIndex;\n                    }\n\n                    var cells = tableRows[rowMultiplier].children;\n                    var cellMultiplier = 0;\n\n                    if (!this._isVerticallyGrouped()) {\n                        cellMultiplier = groupIndex;\n                    }\n\n                    var cellCount = 0;\n                    if (byDate) {\n                        if (this._isVerticallyGrouped()) {\n                            for (cellIndex = 0; cellIndex < groupCount; cellIndex++) {\n                                group = this.groups[cellIndex];\n                                collection = group.getDaySlotCollection(0);\n                                this._addDaySlotGroup(collection, cells, cellIndex, columnCount, groupIndex);\n                            }\n                        } else {\n                            group = this.groups[groupIndex];\n                            collection = group.getDaySlotCollection(0);\n                            for (cellIndex = cellMultiplier; cellIndex < groupCount * columnCount; cellIndex = cellIndex + groupCount) {\n                                this._addDaySlotGroup(collection, cells, cellIndex, columnCount, cellCount);\n                                cellCount++;\n                            }\n                        }\n                    } else {\n                        group = this.groups[groupIndex];\n                        collection = group.getDaySlotCollection(0);\n                        for (cellIndex = cellMultiplier * columnCount; cellIndex < (cellMultiplier + 1) * columnCount; cellIndex++) {\n\n                            this._addDaySlotGroup(collection, cells, cellIndex, columnCount, cellCount);\n                            cellCount++;\n                        }\n                    }\n                }\n            },\n\n            _groups: function() {\n                var groupCount = this._groupCount();\n                var columnCount = this._columnCountInResourceView();\n\n                this.groups = [];\n\n                for (var idx = 0; idx < groupCount; idx++) {\n                    var view = this._addResourceView(idx);\n\n                    for (var columnIndex = 0; columnIndex < columnCount; columnIndex++) {\n                        if (this._dates[columnIndex]) {\n                            view.addTimeSlotCollection(this._dates[columnIndex], kendo.date.addDays(this._dates[columnIndex], 1));\n                        }\n                    }\n\n                    if (this.options.allDaySlot) {\n                        view.addDaySlotCollection(this._dates[0], kendo.date.addDays(this._dates[this._dates.length - 1], 1));\n                    }\n                }\n\n                this._timeSlotGroups(groupCount, columnCount);\n\n                if (this.options.allDaySlot) {\n                    this._daySlotGroups(groupCount, columnCount);\n                }\n            },\n\n            options: {\n                name: \"MultiDayView\",\n                selectedDateFormat: \"{0:D}\",\n                selectedShortDateFormat: \"{0:d}\",\n                selectedMobileDateFormat: \"{0:MMM} {0:dd} - {1:dd}\",\n                allDaySlot: true,\n                showWorkHours: false,\n                title: \"\",\n                startTime: kendo.date.today(),\n                endTime: kendo.date.today(),\n                minorTickCount: 2,\n                majorTick: 60,\n                majorTimeHeaderTemplate: ({ date }) => `<span>${kendo.toString(date, 't')}</span>`,\n                minorTimeHeaderTemplate: () => \"&#8203;\",\n                groupHeaderTemplate: ({ text }) => text,\n                slotTemplate: () => \"&nbsp;\",\n                allDaySlotTemplate: () => \"&nbsp;\",\n                eventTemplate: DAY_VIEW_EVENT_TEMPLATE,\n                allDayEventTemplate: DAY_VIEW_ALL_DAY_EVENT_TEMPLATE,\n                dateHeaderTemplate: DATA_HEADER_TEMPLATE,\n                editable: true,\n                workDayStart: new Date(1980, 1, 1, 8, 0, 0),\n                workDayEnd: new Date(1980, 1, 1, 17, 0, 0),\n                workWeekStart: 1,\n                workWeekEnd: 5,\n                footer: {\n                    command: \"workDay\"\n                },\n                messages: {\n                    allDay: \"all day\",\n                    showFullDay: \"Show full day\",\n                    showWorkDay: \"Show business hours\"\n                },\n                currentTimeMarker: {\n                     updateInterval: 10000,\n                     useLocalTimezone: true\n                },\n                ongoingEvents: {\n                    cssClass: null,\n                    enabled: true,\n                    updateInterval: 60000\n                },\n                // a hidden option that provides us a fallback to the previous behaviour\n                // e.g. all events of 24 hours or more will be rendered in the allDaySlot\n                enforceAllDaySlot: false\n            },\n\n            events: [\"remove\", \"add\", \"edit\"],\n\n            _templates: function() {\n                var options = this.options,\n                    settings = extend({}, kendo.Template, options.templateSettings);\n\n                this.allDayEventTemplate = kendo.template(ALLDAY_EVENT_WRAPPER_TEMPLATE);\n                this.eventTemplate = kendo.template(EVENT_WRAPPER_TEMPLATE);\n\n                this.majorTimeHeaderTemplate = kendo.template(options.majorTimeHeaderTemplate, settings);\n                this.minorTimeHeaderTemplate = kendo.template(options.minorTimeHeaderTemplate, settings);\n                this.dateHeaderTemplate = kendo.template(options.dateHeaderTemplate, settings);\n                this.slotTemplate = kendo.template(options.slotTemplate, settings);\n                this.allDaySlotTemplate = kendo.template(options.allDaySlotTemplate, settings);\n                this.groupHeaderTemplate = kendo.template(options.groupHeaderTemplate, settings);\n            },\n\n            _editable: function() {\n                if (this.options.editable) {\n                    if (this._isMobile()) {\n                        this._touchEditable();\n                    } else {\n                        this._mouseEditable();\n                    }\n                }\n            },\n\n            _mouseEditable: function() {\n                var that = this;\n                that.element.on(\"click\" + NS, \".k-event a:has(.k-i-x),.k-event a:has(.k-svg-i-x)\", function(e) {\n                    that.trigger(\"remove\", { uid: $(this).closest(\".k-event\").attr(kendo.attr(\"uid\")) });\n                    e.preventDefault();\n                });\n\n                if (that.options.editable.create !== false) {\n                    that.element.on(\"dblclick\" + NS, \".k-scheduler-content > table td\", function(e) {\n                        if (!$(this).parent().hasClass(\"k-scheduler-header-all-day\")) {\n                            var slot = that._slotByPosition(e.pageX, e.pageY);\n\n                            if (slot) {\n                                var resourceInfo = that._resourceBySlot(slot);\n                                that.trigger(\"add\", { eventInfo: extend({ start: slot.startDate(), end: slot.endDate() }, resourceInfo) });\n                            }\n\n                            e.preventDefault();\n                        }\n                    }).on(\"dblclick\" + NS, \".k-scheduler-header-all-day td\", function(e) {\n                        var slot = that._slotByPosition(e.pageX, e.pageY);\n                        if (slot) {\n                            var resourceInfo = that._resourceBySlot(slot);\n                            that.trigger(\"add\", { eventInfo: extend({}, { isAllDay: true, start: kendo.date.getDate(slot.startDate()), end: kendo.date.getDate(slot.startDate()) }, resourceInfo) });\n                        }\n                        e.preventDefault();\n                    });\n                }\n\n                if (that.options.editable.update !== false) {\n                    that.element.on(\"dblclick\" + NS, \".k-event\", function(e) {\n                        that.trigger(\"edit\", { uid: $(this).closest(\".k-event\").attr(kendo.attr(\"uid\")) });\n                        e.preventDefault();\n                    });\n                }\n            },\n\n            _touchEditable: function() {\n                var that = this;\n                var threshold = 0;\n\n                if (kendo.support.mobileOS.android) {\n                    threshold = 5;\n                }\n\n                if (that.options.editable.create !== false) {\n                    that._addUserEvents = new kendo.UserEvents(that.element, {\n                        threshold: threshold,\n                        filter: \".k-scheduler-content td\",\n                        useClickAsTap: !kendo.support.browser.edge,\n                        tap: function(e) {\n                            if (that._scrolling) {\n                                return;\n                            }\n                            if (!$(e.target).parent().hasClass(\"k-scheduler-header-all-day\")) {\n                                var x = e.x.location !== undefined$1 ? e.x.location : e.x;\n                                var y = e.y.location !== undefined$1 ? e.y.location : e.y;\n                                var slot = that._slotByPosition(x, y);\n\n                                if (slot) {\n                                    var resourceInfo = that._resourceBySlot(slot);\n                                    that.trigger(\"add\", { eventInfo: extend({ start: slot.startDate(), end: slot.endDate() }, resourceInfo) });\n                                }\n\n                                e.preventDefault();\n                            }\n                        }\n                    });\n\n                    that._allDayUserEvents = new kendo.UserEvents(that.element, {\n                        threshold: threshold,\n                        useClickAsTap: !kendo.support.browser.edge,\n                        filter: \".k-scheduler-header-all-day td\",\n                        tap: function(e) {\n                            if (that._scrolling) {\n                                return;\n                            }\n                            var x = e.x.location !== undefined$1 ? e.x.location : e.x;\n                            var y = e.y.location !== undefined$1 ? e.y.location : e.y;\n                            var slot = that._slotByPosition(x, y);\n\n                            if (slot) {\n                                var resourceInfo = that._resourceBySlot(slot);\n                                that.trigger(\"add\", { eventInfo: extend({}, { isAllDay: true, start: kendo.date.getDate(slot.startDate()), end: kendo.date.getDate(slot.startDate()) }, resourceInfo) });\n                            }\n\n                            e.preventDefault();\n                        }\n                    });\n                }\n\n                if (that.options.editable.update !== false) {\n                    that._editUserEvents = new kendo.UserEvents(that.element, {\n                        threshold: threshold,\n                        useClickAsTap: !kendo.support.browser.edge,\n                        filter: \".k-event\",\n                        tap: function(e) {\n                            if (that._scrolling) {\n                                return;\n                            }\n                            var eventElement = $(e.target).closest(\".k-event\");\n                            var touchElement = $(e.touch.initialTouch);\n\n                            if (touchElement.is(\".k-i-x,.k-svg-i-x\")) {\n                                that.trigger(\"remove\", { uid: eventElement.attr(kendo.attr(\"uid\")) });\n                            } else if (!eventElement.hasClass(\"k-event-active\")) {\n                                that.trigger(\"edit\", { uid: eventElement.attr(kendo.attr(\"uid\")) });\n                            }\n\n                            e.preventDefault();\n                        }\n                    });\n                }\n            },\n\n            _layout: function(dates) {\n                var columns = [];\n                var rows = [];\n                var options = this.options;\n                var that = this;\n                var byDate = that._isGroupedByDate();\n\n                for (var idx = 0; idx < dates.length; idx++) {\n                    var column = {};\n\n                    column.text = that.dateHeaderTemplate({ date: dates[idx], isMobile: that._isMobile() });\n\n                    if (kendo.date.isToday(dates[idx])) {\n                        column.className = \"k-today\";\n                    }\n\n                    columns.push(column);\n                }\n\n                var resources = this.groupedResources;\n\n                if (options.allDaySlot) {\n                    rows.push({\n                        text: options.messages.allDay, allDay: true,\n                        cellContent: function(idx) {\n                            var groupIndex = idx;\n\n                            idx = resources.length && that._groupOrientation() !== \"vertical\" ? idx % dates.length : idx;\n\n                            return that.allDaySlotTemplate({ date: dates[idx], resources: function() {\n                                    return that._resourceBySlot({ groupIndex: groupIndex });\n                                }\n                            });\n                        }\n                    });\n                }\n\n                this._forTimeRange(this.startTime(), this.endTime(), function(date, majorTick, middleRow, lastSlotRow) {\n                    var template = majorTick ? that.majorTimeHeaderTemplate : that.minorTimeHeaderTemplate;\n\n                    var row = {\n                        text: template({ date: date }),\n                        className: lastSlotRow ? \"k-slot-cell\" : \"\"\n                    };\n\n                    rows.push(row);\n                });\n\n\n                if (resources.length) {\n                    if (this._groupOrientation() === \"vertical\") {\n                        if (byDate) {\n                            rows = this._createDateLayout(columns, rows);\n                            columns = this._createColumnsLayout(resources, null, this.groupHeaderTemplate);\n                        } else {\n                            rows = this._createRowsLayout(resources, rows, this.groupHeaderTemplate);\n                        }\n                    } else {\n                          if (byDate) {\n                             columns = this._createColumnsLayout(resources, columns, this.groupHeaderTemplate, columns);\n                          } else {\n                             columns = this._createColumnsLayout(resources, columns, this.groupHeaderTemplate);\n                          }\n                    }\n                }\n\n                return {\n                    columns: columns,\n                    rows: rows\n                };\n            },\n\n            toggleFullDay: function() {\n                var options = this.options;\n\n                this.trigger(\"navigate\", { view: this.name || options.name, date: options.date, isWorkDay: !options.showWorkHours });\n            },\n\n            _footerItems: function() {\n                var that = this,\n                    items = [],\n                    options = this.options,\n                    command = options.footer.command;\n\n                if (that._isMobile()) {\n                    items.push(that._defaultTools.todayMobile);\n                }\n\n                if (command && command === \"workDay\") {\n                    if (that._isMobile()) {\n                        items.push(that._defaultTools.fulldayMobile);\n                    } else {\n                        items.push(that._defaultTools.fulldayDesktop);\n                    }\n                }\n\n                return items;\n            },\n\n            _forTimeRange: function(min, max, action, after) {\n                min = toInvariantTime(min); //convert the date to 1/2/1980 and sets the time\n                max = toInvariantTime(max);\n\n                var that = this,\n                    msMin = getMilliseconds(min),\n                    msMax = getMilliseconds(max),\n                    minorTickCount = that.options.minorTickCount,\n                    msMajorInterval = that.options.majorTick * MS_PER_MINUTE,\n                    msInterval = msMajorInterval / minorTickCount || 1,\n                    start = new Date(+min),\n                    startDay = start.getDate(),\n                    msStart,\n                    idx = 0, length,\n                    html = \"\";\n\n                length = MS_PER_DAY / msInterval;\n\n                if (msMin != msMax) {\n                    if (msMin > msMax) {\n                        msMax += MS_PER_DAY;\n                    }\n\n                    length = ((msMax - msMin) / msInterval);\n                }\n\n                length = Math.round(length);\n\n                for (; idx < length; idx++) {\n                    var majorTickDivider = idx % (msMajorInterval / msInterval),\n                        isMajorTickRow = majorTickDivider === 0,\n                        isMiddleRow = majorTickDivider < minorTickCount - 1,\n                        isLastSlotRow = majorTickDivider === minorTickCount - 1;\n\n                    html += action(start, isMajorTickRow, isMiddleRow, isLastSlotRow);\n\n                    setTime(start, msInterval, false);\n                }\n\n                if (msMax) {\n                    msStart = getMilliseconds(start);\n                    if (startDay < start.getDate()) {\n                        msStart += MS_PER_DAY;\n                    }\n\n                    if (msStart > msMax) {\n                        start = new Date(+max);\n                    }\n                }\n\n                if (after) {\n                    html += after(start);\n                }\n\n                return html;\n            },\n\n            _content: function(dates) {\n                var that = this;\n                var html = '';\n\n                html += '<tbody>';\n\n                html += that._renderRows(dates, that.rowLevels, that.columnLevels);\n\n                html += '</tbody>';\n\n                this.content.find(\"table\").append(html);\n            },\n\n            _virtualContent: function(rowLevels, columnLevels) {\n                var that = this;\n                var html = '';\n                var dates = that._dates;\n\n                html += that._renderRows(dates, rowLevels, columnLevels);\n\n                that.content.find(\"table tbody\").append(html);\n            },\n\n            _renderRows: function(dates, rowLevels, columnLevels) {\n                var that = this;\n                var isVerticalGroupped = that._groupOrientation() === \"vertical\";\n                var byDate = that._isGroupedByDate();\n                var dateID = 0;\n                var columnCount = dates.length;\n                var options = that.options;\n                var start = that.startTime();\n                var end = this.endTime();\n                var groupsCount = 1;\n                var rowCount = 1;\n                var resources = this.groupedResources;\n                var html = '';\n\n                if (resources.length) {\n                    var levels = that._recalculateLevels(rowLevels, columnLevels);\n\n                    rowCount = levels.rowCount;\n                    groupsCount = levels.groupsCount;\n                }\n\n                var appendRow = function(date, majorTick, middleRow) {\n                    var content = \"\";\n                    var groupIdx = 0;\n                    var idx, length;\n\n                    content = '<tr' + (middleRow ? ' class=\"k-middle-row\"' : \"\") + '>';\n\n                    if (byDate) {\n                        for (idx = 0, length = columnCount; idx < length; idx++) {\n                            for (groupIdx = 0; groupIdx < groupsCount; groupIdx++) {\n                                var dateIndex = idx;\n                                if (isVerticalGroupped) {\n                                    dateIndex = dateID;\n                                }\n                                content = that._addCellsToContent(content, dates, date, dateIndex, groupIdx, rowIdx);\n\n                            }\n                            if (isVerticalGroupped) {\n\n                                break;\n                            }\n                        }\n                    } else {\n                         for (; groupIdx < groupsCount; groupIdx++) {\n                            for (idx = 0, length = columnCount; idx < length; idx++) {\n                                content = that._addCellsToContent(content, dates, date, idx, groupIdx, rowIdx);\n                            }\n                         }\n                    }\n\n                    content += \"</tr>\";\n\n                    return content;\n                };\n\n                for (var rowIdx = 0; rowIdx < rowCount; rowIdx++) {\n                    html += options.allDaySlot && isVerticalGroupped ? this._allDayVerticalGroupRow(dates, rowIdx, groupsCount, dateID) : \"\";\n\n                    html += this._forTimeRange(start, end, appendRow);\n                    if (isVerticalGroupped) {\n                            dateID++;\n                    }\n                }\n\n                return html;\n            },\n\n            _recalculateLevels: function(rowLevels, columnLevels) {\n                var that = this;\n                var byDate = that._isGroupedByDate();\n                var isVerticalGroupped = that._groupOrientation() === \"vertical\";\n                var groupsCount = 1;\n                var rowCount = 1;\n\n                if (isVerticalGroupped) {\n                    rowCount = that._rowCountForLevel(rowLevels.length - 2, rowLevels);\n\n                    if (byDate) {\n                         groupsCount = that._columnCountForLevel(columnLevels.length - 1);\n                    }\n                } else {\n                    if (byDate) {\n                         groupsCount = that._columnCountForLevel(columnLevels.length - 1) / this._columnCountForLevel(0);\n                    } else {\n                         groupsCount = that._columnCountForLevel(columnLevels.length - 2);\n                    }\n                }\n\n                return {\n                    rowCount: rowCount,\n                    groupsCount: groupsCount\n                };\n            },\n\n            _allDayVerticalGroupRow: function(dates, groupIndex, groupsCount, dateID) {\n                var that = this;\n                var result = '<tr class=\"k-scheduler-header-all-day\">';\n                var byDate = that._isGroupedByDate();\n                var dateGroupIndex = byDate ? 0 : groupIndex;\n                var allDaySlotTemplate = that.allDaySlotTemplate;\n\n                var resources = function() {\n                    return that._resourceBySlot({ groupIndex: dateGroupIndex });\n                };\n\n                if (byDate) {\n                    for (; dateGroupIndex < groupsCount; dateGroupIndex++) {\n                        result += \"<td>\" + allDaySlotTemplate({ date: dates[dateID], resources: resources }) + \"</td>\";\n                    }\n                } else {\n                    for (var idx = 0; idx < dates.length; idx++) {\n                        result += \"<td>\" + allDaySlotTemplate({ date: dates[idx], resources: resources }) + \"</td>\";\n                    }\n                }\n\n                return result + \"</tr>\";\n            },\n\n            _addCellsToContent: function(content, dates, date, idx, groupIdx, rowIdx) {\n                var that = this;\n                var classes = \"\";\n                var tmplDate;\n                var slotTemplate = this.slotTemplate;\n                var isVerticalGroupped = this._groupOrientation() === \"vertical\";\n                var resources = function(groupIndex) {\n                    return function() {\n                        return that._resourceBySlot({ groupIndex: groupIndex });\n                    };\n                };\n\n                if (kendo.date.isToday(dates[idx])) {\n                    classes += \"k-today\";\n                }\n\n                if (kendo.date.getMilliseconds(date) < kendo.date.getMilliseconds(this.options.workDayStart) ||\n                    kendo.date.getMilliseconds(date) >= kendo.date.getMilliseconds(this.options.workDayEnd) ||\n                    !this._isWorkDay(dates[idx])) {\n                    classes += \" k-nonwork-hour\";\n                }\n\n                content += '<td' + (classes !== \"\" ? ' class=\"' + classes + '\"' : \"\") + \">\";\n                tmplDate = kendo.date.getDate(dates[idx]);\n                kendo.date.setTime(tmplDate, kendo.date.getMilliseconds(date));\n\n                content += slotTemplate({ date: tmplDate, resources: resources(isVerticalGroupped && !that._isGroupedByDate() ? rowIdx : groupIdx) });\n                content += \"</td>\";\n                return content;\n            },\n\n            _isWorkDay: function(date) {\n                var day = date.getDay();\n                var workDays = this._workDays;\n\n                for (var i = 0; i < workDays.length; i++) {\n                    if (workDays[i] === day) {\n                        return true;\n                    }\n                }\n                return false;\n            },\n\n            _render: function(dates) {\n                var that = this;\n\n                dates = dates || [];\n\n                this._dates = dates;\n\n                this._startDate = dates[0];\n\n                this._endDate = dates[(dates.length - 1) || 0];\n\n                this.createLayout(this._layout(dates));\n\n                this._content(dates);\n\n                this._footer();\n\n                this.refreshLayout();\n\n                if (this._isVirtualized()) {\n                    this._tryRenderContent();\n                }\n\n                var allDayHeader = this.element.find(\".k-scheduler-header-all-day td\");\n\n                if (allDayHeader.length) {\n                    this._allDayHeaderHeight = allDayHeader.first()[0].clientHeight;\n                }\n\n                that.element.on(\"click\" + NS, \".k-nav-day\", function(e) {\n                    var th = $(e.currentTarget).closest(\"th\");\n                    var offset = th.offset();\n                    var additioanlWidth = 0;\n                    var additionalHeight = outerHeight(th);\n\n                    if (that._isGroupedByDate()) {\n                        if (that._isVerticallyGrouped()) {\n                            additioanlWidth = outerWidth(that.times);\n                            additionalHeight = 0;\n                        } else {\n                            additionalHeight = outerHeight(that.datesHeader);\n                        }\n                    }\n\n                    var slot = that._slotByPosition(offset.left + additioanlWidth, offset.top + additionalHeight);\n\n                    that.trigger(\"navigate\", { view: \"day\", date: slot.startDate() });\n                });\n            },\n\n            startTime: function() {\n                var options = this.options;\n                return options.showWorkHours ? options.workDayStart : options.startTime;\n            },\n\n            endTime: function() {\n                var options = this.options;\n                return options.showWorkHours ? options.workDayEnd : options.endTime;\n            },\n\n            startDate: function() {\n                return this._startDate;\n            },\n\n            endDate: function() {\n                return this._endDate;\n            },\n\n            _end: function(isAllDay) {\n                var time = getMilliseconds(this.endTime()) || MS_PER_DAY;\n\n                if (isAllDay) {\n                    time = 0;\n                }\n\n                return new Date(this._endDate.getTime() + time);\n            },\n\n            nextDate: function() {\n                return kendo.date.nextDay(this.endDate());\n            },\n\n            previousDate: function() {\n                return kendo.date.previousDay(this.startDate());\n            },\n\n            calculateDateRange: function() {\n                this._render([this.options.date]);\n            },\n\n            destroy: function() {\n                var that = this;\n\n                if (that._currentTimeUpdateTimer) {\n                    clearInterval(that._currentTimeUpdateTimer);\n                }\n\n                if (that.datesHeader) {\n                    that.datesHeader.off(NS);\n                }\n\n                if (that.element) {\n                    that.element.off(NS);\n                }\n\n                SchedulerView.fn.destroy.call(this);\n\n                if (this._isMobile() && that.options.editable) {\n                    if (that.options.editable.create !== false) {\n                        that._addUserEvents.destroy();\n                        that._allDayUserEvents.destroy();\n                    }\n\n                    if (that.options.editable.update !== false) {\n                        that._editUserEvents.destroy();\n                    }\n                }\n            },\n\n            inRange: function(options) {\n                var inRange = SchedulerView.fn.inRange.call(this, options);\n\n                if (options.isAllDay) {\n                    return inRange;\n                }\n\n                var startTime = getMilliseconds(this.startTime());\n                var endTime = getMilliseconds(this.endTime()) || kendo.date.MS_PER_DAY;\n\n                var start = getMilliseconds(options.start);\n                var end = getMilliseconds(options.end) || kendo.date.MS_PER_DAY;\n\n                return inRange && startTime <= start && end <= endTime;\n            },\n\n            selectionByElement: function(cell) {\n                var offset = cell.offset();\n                // The magical number 5 is to buffer properly the height of the cell for all browsers\n                var height = Math.round(cell.innerHeight()) - 5;\n\n                return this._slotByPosition(offset.left, offset.top + height);\n            },\n\n            _timeSlotInterval: function() {\n                var options = this.options;\n                return (options.majorTick / options.minorTickCount) * MS_PER_MINUTE;\n            },\n\n            _timeSlotIndex: function(date) {\n                var options = this.options;\n                var eventStartTime = getMilliseconds(date);\n                var startTime = getMilliseconds(this.startTime());\n                var timeSlotInterval = ((options.majorTick / options.minorTickCount) * MS_PER_MINUTE);\n\n                return (eventStartTime - startTime) / (timeSlotInterval);\n            },\n\n            _slotIndex: function(date, multiday) {\n                if (multiday) {\n                    return this._dateSlotIndex(date);\n                }\n\n                return this._timeSlotIndex(date);\n            },\n\n            _dateSlotIndex: function(date, overlaps) {\n                var idx;\n                var length;\n                var slots = this._dates || [];\n                var slotStart;\n                var slotEnd;\n                var offset = 1;\n\n                for (idx = 0, length = slots.length; idx < length; idx++) {\n                    slotStart = kendo.date.getDate(slots[idx]);\n                    slotEnd = new Date(kendo.date.getDate(slots[idx]).getTime() + MS_PER_DAY - (overlaps ? 0 : 1));\n\n                    if (isInDateRange(date, slotStart, slotEnd)) {\n                        return idx * offset;\n                    }\n                }\n                return -1;\n            },\n\n            _positionAllDayEvent: function(element, slotRange) {\n                var slotWidth = slotRange.innerWidth();\n                var startIndex = slotRange.start.index;\n                var endIndex = slotRange.end.index;\n\n                var allDayEvents = SchedulerView.collidingEvents(slotRange.events(), startIndex, endIndex);\n\n                var currentColumnCount = this._headerColumnCount || 0;\n\n                var leftOffset = 2;\n\n                var rightOffset = startIndex !== endIndex ? 3 : 2;\n\n                var eventHeight = this._allDayHeaderHeight;\n\n                var start = slotRange.startSlot();\n\n                element\n                    .css({\n                        left: start.offsetLeft + leftOffset,\n                        width: slotWidth - rightOffset\n                    });\n\n                slotRange.addEvent({ slotIndex: startIndex, start: startIndex, end: endIndex, element: element });\n\n                allDayEvents.push({ slotIndex: startIndex, start: startIndex, end: endIndex, element: element });\n\n                var rows = SchedulerView.createRows(allDayEvents);\n\n                if (rows.length && rows.length > currentColumnCount) {\n                    this._headerColumnCount = rows.length;\n                }\n\n                var top = slotRange.start.offsetTop;\n\n                for (var idx = 0, length = rows.length; idx < length; idx++) {\n                    var rowEvents = rows[idx].events;\n\n                    for (var j = 0, eventLength = rowEvents.length; j < eventLength; j++) {\n                        $(rowEvents[j].element).css({\n                            top: top + idx * eventHeight,\n                            // apply calculated height.\n                            // -2 is to match normal events\n                            height: eventHeight - 2\n                        });\n                    }\n                }\n            },\n\n            _arrangeColumns: function(element, top, height, slotRange) {\n                var startSlot = slotRange.start;\n\n                element = { element: element, slotIndex: startSlot.index, start: top, end: top + height };\n\n                var columns,\n                    slotWidth = startSlot.clientWidth,\n                    eventRightOffset = slotWidth * 0.10,\n                    columnEvents,\n                    eventElements = slotRange.events(),\n                    slotEvents = SchedulerView.collidingEvents(eventElements, element.start, element.end),\n                    tableEl = this.table.find(\".k-scheduler-content .k-scheduler-table\")[0],\n                    contentEl = this.table.find(\".k-scheduler-content\")[0];\n\n                slotRange.addEvent(element);\n\n                slotEvents.push(element);\n\n                columns = SchedulerView.createColumns(slotEvents);\n\n                var columnWidth = (slotWidth - eventRightOffset) / columns.length;\n\n                for (var idx = 0, length = columns.length; idx < length; idx++) {\n                    columnEvents = columns[idx].events;\n\n                    for (var j = 0, eventLength = columnEvents.length; j < eventLength; j++) {\n                        var calculatedWidth = columnWidth - 2;\n                        columnEvents[j].element[0].style.width = (calculatedWidth > 0 ? calculatedWidth : columnWidth) + \"px\";\n\n                        if (this._isRtl && contentEl.clientWidth < contentEl.scrollWidth) {\n                            // RTL mobile rendering with horizontal scroll\n                            columnEvents[j].element[0].style.left = eventRightOffset +\n                                startSlot.offsetLeft +\n                                idx * columnWidth -\n                                (tableEl.clientWidth - contentEl.clientWidth) +\n                                \"px\";\n                        } else {\n                            columnEvents[j].element[0].style.left = (this._isRtl ? eventRightOffset : 0) + startSlot.offsetLeft + idx * columnWidth + 2 + \"px\";\n                        }\n                    }\n                }\n            },\n\n            _positionEvent: function(event, element, slotRange) {\n                var start = event._startTime || event.start;\n                var end = event._endTime || event.end;\n                var borderWidths = kendo.getComputedStyles(slotRange.start.element, [\"border-top-width\", \"border-bottom-width\"]);\n\n                var rect = slotRange.innerRect(start, end, false);\n\n                var height = rect.bottom - rect.top -\n                                parseFloat(borderWidths[\"border-top-width\"]) -\n                                parseFloat(borderWidths[\"border-bottom-width\"]);\n\n                if (height < 0) {\n                    height = 0;\n                }\n\n                element.css( {\n                    top: rect.top,\n                    height: height\n                } );\n\n                this._arrangeColumns(element, rect.top, element[0].clientHeight, slotRange);\n           },\n\n           _createEventElement: function(event, isOneDayEvent, head, tail) {\n                var template = isOneDayEvent ? this.eventTemplate : this.allDayEventTemplate;\n                var options = this.options;\n                var editable = options.editable;\n                var isMobile = this._isMobile();\n                var showDelete = editable && editable.destroy !== false && !isMobile;\n                var resizable = editable && editable.resize !== false;\n                var startDate = getDate(this.startDate());\n                var endDate = getDate(this.endDate());\n                var startTime = getMilliseconds(this.startTime());\n                var endTime = getMilliseconds(this.endTime());\n                var eventStartTime = event._time(\"start\");\n                var eventEndTime = event._time(\"end\");\n                var eventTemplate = isOneDayEvent ? options.eventTemplate : options.allDayEventTemplate;\n                var middle;\n\n                if (startTime >= endTime) {\n                    endTime = getMilliseconds(new Date(this.endTime().getTime() + MS_PER_DAY - 1));\n                }\n\n                if (!isOneDayEvent && !event.isAllDay) {\n                    endDate = new Date(endDate.getTime() + MS_PER_DAY);\n                }\n\n                var eventStartDate = event.start;\n                var eventEndDate = event.end;\n\n                if (event.isAllDay) {\n                    eventEndDate = getDate(event.end);\n                }\n                if ((!isInDateRange(getDate(eventStartDate), startDate, endDate) &&\n                    !isInDateRange(eventEndDate, startDate, endDate)) ||\n                    (isOneDayEvent &&\n                        event.start.getTime() !== event.end.getTime() &&\n                        (eventStartTime < startTime || eventStartTime >= endTime) &&\n                        (eventEndTime > endTime || eventEndTime <= startTime ))) {\n\n                    middle = true;\n                } else if (getDate(eventStartDate) < startDate ||\n                    (isOneDayEvent &&\n                        eventStartTime !== 0 &&\n                        event.start.getTime() !== event.end.getTime() &&\n                        (eventStartTime < startTime || eventStartTime >= endTime))) {\n\n                    tail = true;\n                } else if ((eventEndDate > endDate && !isOneDayEvent) ||\n                    (isOneDayEvent &&\n                        eventEndTime !== 0 &&\n                        event.start.getTime() !== event.end.getTime() &&\n                        (eventEndTime > endTime || eventEndTime <= startTime))) {\n\n                    head = true;\n                }\n\n                var resources = this.eventResources(event);\n\n               if (event._startTime && eventStartTime !== kendo.date.getMilliseconds(event.start)) {\n                    eventStartDate = new Date(eventStartTime);\n                    eventStartDate = kendo.timezone.apply(eventStartDate, \"Etc/UTC\");\n                }\n\n               if (event._endTime && eventEndTime !== kendo.date.getMilliseconds(event.end)) {\n                    eventEndDate = new Date(eventEndTime);\n                    eventEndDate = kendo.timezone.apply(eventEndDate, \"Etc/UTC\");\n                }\n\n                var data = extend({}, {\n                    ns: kendo.ns,\n                    resizable: resizable,\n                    showDelete: showDelete,\n                    middle: middle,\n                    head: head,\n                    tail: tail,\n                    singleDay: this._dates.length == 1,\n                    resources: resources,\n                    inverseColor: false,\n                    messages: options.messages,\n                    ariaLabel: this._formatEventAriaLabel(event.title, eventStartDate, eventEndDate, event.isAllDay),\n                    template: eventTemplate\n                }, event, {\n                    start: eventStartDate,\n                    end: eventEndDate\n                });\n\n                var element = $(template(data));\n                kendo.applyStylesFromKendoAttributes(element, [\"background-color\", \"border-color\"]);\n\n                return element;\n            },\n\n            _isInTimeSlot: function(event) {\n                var slotStartTime = this.startTime(),\n                    slotEndTime = this.endTime(),\n                    startTime = event._startTime || event.start,\n                    endTime = event._endTime || event.end;\n\n                if (getMilliseconds(slotEndTime) === getMilliseconds(kendo.date.getDate(slotEndTime))) {\n                    slotEndTime = kendo.date.getDate(slotEndTime);\n                    setTime(slotEndTime, MS_PER_DAY - 1);\n                }\n\n                if (event._date(\"end\") > event._date(\"start\")) {\n                   endTime = +event._date(\"end\") + (MS_PER_DAY - 1);\n                }\n\n                endTime = event._endTime ? endTime - event._date(\"end\") : getMilliseconds(new Date(endTime));\n                startTime = event._startTime ? startTime - event._date(\"start\") : getMilliseconds(new Date(startTime));\n\n                slotEndTime = getMilliseconds(slotEndTime);\n                slotStartTime = getMilliseconds(slotStartTime);\n\n                if (slotStartTime === startTime && startTime === endTime) {\n                    return true;\n                }\n\n                var overlaps = startTime !== slotEndTime;\n\n                return isInTimeRange(startTime, slotStartTime, slotEndTime, overlaps) ||\n                    isInTimeRange(endTime, slotStartTime, slotEndTime, overlaps) ||\n                    isInTimeRange(slotStartTime, startTime, endTime) ||\n                    isInTimeRange(slotEndTime, startTime, endTime) ||\n                    (event.end.getDate() > event.start.getDate() && endTime > slotStartTime);\n            },\n\n            _isInDateSlot: function(event) {\n                var groups = this.groups[0];\n                var slotStart = groups.firstSlot().start;\n                var slotEnd = groups.lastSlot().end - 1;\n\n                var startTime = kendo.date.toUtcTime(event.start);\n                var endTime = kendo.date.toUtcTime(event.end);\n\n                return (isInDateRange(startTime, slotStart, slotEnd) ||\n                    isInDateRange(endTime, slotStart, slotEnd) ||\n                    isInDateRange(slotStart, startTime, endTime) ||\n                    isInDateRange(slotEnd, startTime, endTime)) &&\n                    (!isInDateRange(endTime, slotStart, slotStart) || isInDateRange(endTime, startTime, startTime) || event.isAllDay );\n            },\n\n            _updateAllDayHeaderHeight: function(height) {\n                if (this._height !== height) {\n                    this._height = height;\n\n                    var allDaySlots = this.element.find(\".k-scheduler-header-all-day td\");\n\n                    if (allDaySlots.length) {\n                        allDaySlots.parent()\n                            .add(this.element.find(\".k-scheduler-times-all-day\").parent())\n                            .height(height);\n\n                        for (var groupIndex = 0; groupIndex < this.groups.length; groupIndex++) {\n                            this.groups[groupIndex].refresh();\n                        }\n                    }\n                }\n            },\n\n            _renderEvents: function(events, groupIndex) {\n                var allDayEventContainer = this.datesHeader.find(\".k-scheduler-header-wrap > div\");\n                var byDate = this._isGroupedByDate();\n                var event;\n\n                var idx;\n                var length;\n\n                for (idx = 0, length = events.length; idx < length; idx++) {\n                    event = events[idx];\n\n                    if (this._isInDateSlot(event)) {\n                        var isMultiDayEvent, container, element, ranges, range, start, end, group;\n\n                        if (this.options.enforceAllDaySlot) {\n                            isMultiDayEvent = event.isAllDay || event.duration() >= MS_PER_DAY;\n                        } else {\n                            isMultiDayEvent = event.isAllDay;\n                        }\n\n                        container = isMultiDayEvent && !this._isVerticallyGrouped() ? allDayEventContainer : this.content;\n\n                        if (!isMultiDayEvent) {\n                            if (this._isInTimeSlot(event)) {\n                                group = this.groups[groupIndex];\n\n                                if (!group) {\n                                    continue;\n                                }\n\n                                if (!group._continuousEvents) {\n                                    group._continuousEvents = [];\n                                }\n\n                                ranges = group.slotRanges(event);\n\n                                var rangeCount = ranges.length;\n\n                                for (var rangeIndex = 0; rangeIndex < rangeCount; rangeIndex++) {\n                                    range = ranges[rangeIndex];\n                                    start = event.start;\n                                    end = event.end;\n\n                                    if (rangeCount > 1) {\n                                        if (rangeIndex === 0) {\n                                            end = range.end.endDate();\n                                        } else if (rangeIndex == rangeCount - 1) {\n                                            start = range.start.startDate();\n                                        } else {\n                                            start = range.start.startDate();\n                                            end = range.end.endDate();\n                                        }\n                                    }\n\n                                    var occurrence = event.clone({ start: start, end: end, _startTime: event._startTime, _endTime: event.endTime });\n\n                                    if (this._isInTimeSlot(occurrence)) {\n                                        var head = range.head;\n\n                                        element = this._createEventElement(event, !isMultiDayEvent, head, range.tail);\n\n                                        element.appendTo(container);\n\n                                        this._inverseEventColor(element);\n\n                                        this._positionEvent(occurrence, element, range);\n\n                                        addContinuousEvent(group, range, element, false);\n                                    }\n                                }\n                            }\n\n                        } else if (this.options.allDaySlot) {\n                            group = this.groups[groupIndex];\n\n                            if (!group) {\n                                continue;\n                            }\n\n                            if (!group._continuousEvents) {\n                                group._continuousEvents = [];\n                            }\n\n                            ranges = group.slotRanges(event);\n\n                            if (ranges.length) {\n                                range = ranges[0];\n                                var startIndex = range.start.index;\n                                var endIndex = range.end.index;\n\n                                if (byDate && startIndex !== endIndex) {\n                                    start = range.start.start;\n                                    end = range.end.end;\n                                    var newStart = start;\n                                    var newEnd = start;\n\n                                    for (var i = range.start.index; i <= range.end.index; i++) {\n                                        element = this._createEventElement(event, !isMultiDayEvent, i !== endIndex, i !== startIndex);\n\n                                        var dateRange = group.daySlotRanges(newStart, newEnd, true)[0];\n                                        newStart = newEnd += kendo.date.MS_PER_DAY;\n\n                                        this._positionAllDayEvent(element, dateRange);\n\n                                        addContinuousEvent(group, dateRange, element, true);\n\n                                        element.appendTo(container);\n\n                                        this._inverseEventColor(element);\n                                    }\n                                } else {\n                                    element = this._createEventElement(event, !isMultiDayEvent);\n\n                                    this._positionAllDayEvent(element, ranges[0]);\n\n                                    addContinuousEvent(group, ranges[0], element, true);\n\n                                    element.appendTo(container);\n\n                                    this._inverseEventColor(element);\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n\n            render: function(events) {\n                var that = this;\n\n                this._headerColumnCount = 0;\n\n                this._cachedEvents = events;\n\n                this._groups();\n\n                this.element.find(\".k-event\").remove();\n\n                events = new kendo.data.Query(events)\n                    .sort([{ field: \"start\", dir: \"asc\" },{ field: \"end\", dir: \"desc\" }])\n                    .toArray();\n\n                var eventsByResource = [];\n\n                this._eventsByResource(events, this.groupedResources, eventsByResource);\n\n                var eventsPerDate = $.map(this._dates, function(date) {\n                    return Math.max.apply(null,\n                        $.map(eventsByResource, function(events) {\n                            return $.grep(events, function(event) {\n                                if (that.options.enforceAllDaySlot) {\n                                    return event.isMultiDay() && isInDateRange(date, getDate(event.start), getDate(event.end));\n                                } else {\n                                    return event.isAllDay && isInDateRange(date, getDate(event.start), getDate(event.end));\n                                }\n                            }).length;\n                        })\n                    );\n                });\n\n                var height = Math.max.apply(null, eventsPerDate);\n\n                this._updateAllDayHeaderHeight((height + 1) * this._allDayHeaderHeight);\n\n                for (var groupIndex = 0; groupIndex < eventsByResource.length; groupIndex++) {\n                    this._renderEvents(eventsByResource[groupIndex], groupIndex);\n                }\n\n                this.refreshLayout();\n\n                this._currentTime(false);\n                this._ongoingEvents(events);\n\n                this.trigger(\"activate\");\n            },\n\n            _eventsByResource: function(events, resources, result, parentValue) {\n                var resource = resources[0];\n\n                if (resource) {\n                    var view = resource.dataSource.view();\n\n                    view = view.filter(function(item) {\n                        var itemParentValue = kendo.getter(resource.dataParentValueField)(item);\n\n                        return itemParentValue === null || itemParentValue === undefined$1 || itemParentValue === parentValue;\n                    });\n\n                    for (var itemIdx = 0; itemIdx < view.length; itemIdx++) {\n                        var value = this._resourceValue(resource, view[itemIdx]);\n\n                        var eventsFilteredByResource = new kendo.data.Query(events).filter({ field: resource.field, operator: SchedulerView.groupEqFilter(value) }).toArray();\n\n                        if (resources.length > 1) {\n                            this._eventsByResource(eventsFilteredByResource, resources.slice(1), result, value);\n                        } else {\n                            result.push(eventsFilteredByResource);\n                        }\n                    }\n                } else {\n                    result.push(events);\n                }\n            },\n\n            _columnOffsetForResource: function(index) {\n                return this._columnCountForLevel(index) / this._columnCountForLevel(index - 1);\n            },\n\n            _columnCountForLevel: function(level) {\n                var columnLevel = this.columnLevels[level];\n                return columnLevel ? columnLevel.length : 0;\n            },\n\n            _rowCountForLevel: function(level, rowLevels) {\n                rowLevels = rowLevels || this.rowLevels;\n                var rowLevel = rowLevels[level];\n                return rowLevel ? rowLevel.length : 0;\n            },\n\n            clearSelection: function() {\n\n                this.content.add(this.datesHeader)\n                    .find(\".k-selected\")\n                    .removeAttr(\"id\")\n                    .removeClass(\"k-selected\");\n            },\n\n            _updateDirection: function(selection, ranges, multiple, reverse, vertical) {\n                var isDaySlot = selection.isAllDay;\n                var startSlot = ranges[0].start;\n                var endSlot = ranges[ranges.length - 1].end;\n\n                if (multiple) {\n                    if (vertical) {\n                        if (!isDaySlot &&\n                            startSlot.index === endSlot.index &&\n                            startSlot.collectionIndex === endSlot.collectionIndex) {\n                                selection.backward = reverse;\n                        }\n                    } else {\n                        if ((isDaySlot && startSlot.index === endSlot.index) ||\n                            (!isDaySlot && startSlot.collectionIndex === endSlot.collectionIndex)) {\n                                selection.backward = reverse;\n                        }\n                    }\n                }\n            },\n\n            _changeViewPeriod: function(selection, reverse, vertical) {\n                if (!vertical) {\n                    var date = reverse ? this.previousDate() : this.nextDate();\n                    var start = selection.start;\n                    var end = selection.end;\n                    var verticalByDate = this._isGroupedByDate() && this._isVerticallyGrouped();\n                    var group = this.groups[selection.groupIndex];\n                    var collection = reverse ? group._timeSlotCollections : group._getCollections(group.daySlotCollectionCount());\n                    var slots = collection[collection.length - 1]._slots;\n                    var slotIndex = (!reverse && !group.daySlotCollectionCount()) ? 0 : slots.length - 1;\n                    var endMilliseconds;\n                    var newDateStart, newDateEnd;\n\n                    newDateStart = new Date(date);\n                    newDateEnd = new Date(date);\n\n                    if (this._isInRange(newDateStart, newDateEnd)) {\n                        return false;\n                    }\n\n                    selection.start = newDateStart;\n                    selection.end = newDateEnd;\n\n                    if (verticalByDate) {\n                        var newStart = new Date(slots[slotIndex].startDate());\n                        var newEnd = new Date(slots[slotIndex].endDate());\n                        endMilliseconds = getMilliseconds(newEnd) ? getMilliseconds(newEnd) : MS_PER_DAY;\n\n                            setTime(selection.start, getMilliseconds(newStart));\n                            setTime(selection.end, endMilliseconds);\n                            if (group.daySlotCollectionCount()) {\n                                selection.isAllDay = !selection.isAllDay;\n                            }\n                    } else {\n                        endMilliseconds = (selection.isAllDay || !getMilliseconds(end)) ? MS_PER_DAY : getMilliseconds(end);\n\n                        setTime(selection.start, getMilliseconds(start));\n                        setTime(selection.end, endMilliseconds);\n                    }\n\n                    if (!this._isVerticallyGrouped()) {\n                        selection.groupIndex = reverse ? this.groups.length - 1 : 0;\n                    }\n\n                    selection.events = [];\n\n                    return true;\n                }\n            }\n        });\n\n        extend(true, ui, {\n            MultiDayView: MultiDayView,\n            DayView: MultiDayView.extend({\n                options: {\n                    name: \"DayView\",\n                    title: \"Day\",\n                    selectedMobileDateFormat: \"{0:MMM d}\"\n                },\n                name: \"day\"\n            }),\n            WeekView: MultiDayView.extend({\n                options: {\n                    name: \"WeekView\",\n                    title: \"Week\",\n                    selectedDateFormat: \"{0:D} - {1:D}\",\n                    selectedShortDateFormat: \"{0:d} - {1:d}\"\n                },\n                name: \"week\",\n                calculateDateRange: function() {\n                    var selectedDate = this.options.date,\n                        start = kendo.date.dayOfWeek(selectedDate, this.calendarInfo().firstDay, -1),\n                        idx, length,\n                        dates = [];\n\n                    for (idx = 0, length = 7; idx < length; idx++) {\n                        dates.push(start);\n                        start = kendo.date.nextDay(start);\n                    }\n                    this._render(dates);\n                }\n            }),\n            WorkWeekView: MultiDayView.extend({\n                options: {\n                    name: \"WorkWeekView\",\n                    title: \"Work Week\",\n                    selectedDateFormat: \"{0:D} - {1:D}\",\n                    selectedShortDateFormat: \"{0:d} - {1:d}\"\n                },\n                name: \"workWeek\",\n                nextDate: function() {\n                    var weekStart = kendo.date.dayOfWeek(kendo.date.nextDay(this.startDate()), this.calendarInfo().firstDay, 1);\n                    return kendo.date.addDays(weekStart, this._workDays[0]);\n                },\n                previousDate: function() {\n                    var weekStart = kendo.date.dayOfWeek(this.startDate(), this.calendarInfo().firstDay, -1);\n                    var workDays = this._workDays;\n\n                    return kendo.date.addDays(weekStart, workDays[workDays.length - 1] - 7);\n                },\n                calculateDateRange: function() {\n                    var options = this.options,\n                        selectedDate = options.date,\n                        dayOfWeek = kendo.date.dayOfWeek,\n                        weekStart = dayOfWeek(selectedDate, this.calendarInfo().firstDay, -1),\n                        start = dayOfWeek(weekStart, options.workWeekStart, 1),\n                        end = dayOfWeek(start, options.workWeekEnd, 1),\n                        dates = [],\n                        workDays = (options.workDays && options.workDays.length) ? options.workDays.map(function(day) {\n                            return dayOfWeek(weekStart, day, 1).getTime();\n                        }) : null;\n\n                    if (workDays) {\n                        start = weekStart;\n                        end = dayOfWeek(start, this.calendarInfo().firstDay + 6, 1);\n                    }\n\n                    while (start <= end) {\n                        if (workDays && workDays.indexOf(start.getTime()) > -1) {\n                            dates.push(start);\n                        } else if (!workDays) {\n                            dates.push(start);\n                        }\n\n                        start = kendo.date.nextDay(start);\n                    }\n\n                    this._render(dates);\n                }\n            })\n        });\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}