{"version":3,"sources":["raw-js/kendo.gantt.timeline.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendogantt","timeline","js","this","$","Widget","kendo","ui","kendoDomElement","dom","element","kendoTextElement","text","kendoHtmlElement","html","isPlainObject","outerWidth","_outerWidth","outerHeight","_outerHeight","extend","isRtl","keys","Query","data","NS","CLICK","MOUSEMOVE","MOUSEENTER","MOUSELEAVE","DOT","DAY_HEADER_TEMPLATE","start","toString","WEEK_HEADER_TEMPLATE","end","date","addDays","MONTH_HEADER_TEMPLATE","RESIZE_TOOLTIP_TEMPLATE","styles","messages","format","tooltipWrapper","tooltipContent","htmlEncode","TASK_TOOLTIP_TEMPLATE","task","taskDetails","title","taskDetailsPercent","percentComplete","reset","SIZE_CALCULATION_TEMPLATE","attr","defaultViews","day","type","week","month","year","blurActiveElement","activeElement","_activeElement","nodeName","toLowerCase","trigger","GanttView","init","options","fn","call","name","header","find","gridHeader","content","gridContent","contentWidth","width","_workDays","workDays","dayIndex","workWeekStart","push","workWeekEnd","getWorkDays","_headerTree","headerTree","_taskTree","taskTree","_taskTemplate","taskTemplate","template","Template","templateSettings","_dependencyTree","dependencyTree","_taskCoordinates","_currentTime","destroy","clearTimeout","_tooltipTimeout","headerRow","_dragHint","_resizeHint","_resizeTooltip","_taskTooltip","_percentCompleteResizeTooltip","showWorkHours","showWorkDays","workDayStart","Date","workDayEnd","hourSpan","slotSize","currentTimeMarker","updateInterval","renderLayout","_slots","_createSlots","_tableWidth","_calculateTableWidth","createLayout","_layout","_slotDimensions","_adjustHeight","dependenciesWrapper","height","rows","headers","_headers","colgroup","_colgroup","tree","className","tbody","table","headerTable","style","role","render","first","last","slot","children","slots","_timeSlots","i","length","offsetLeft","offsetWidth","tasks","contentTable","totalHeight","taskCount","rowsTable","_rowsTable","columnsTable","_columnsTable","tasksTable","_tasksTable","calculatedSize","row","_contentHeight","_rowHeight","undefined","_renderCurrentTime","rowCount","attributes","tableRow","alt","tableCell","_createTable","slotSpan","cells","slotsCount","totalSpan","span","colspan","isNonWorking","nonWorking","cell","position","plannedPosition","resourcesPosition","resourceStyle","taskElement","rowIndex","taskLeft","taskRight","coordinates","size","_calculateMilestoneWidth","milestoneWidth","Math","round","resourcesField","resource","resourceAlt","resourcesMargin","_calculateResourcesMargin","taskBorderWidth","_calculateTaskBorderWidth","showPlannedTasks","l","_taskPosition","_taskPositionPlanned","borderWidth","_renderTask","navigatable","left","max","clientWidth","resourcesWrap","_renderResources","isMilestone","id","cols","currentSpan","maxSpan","boundingClientRect","taskMilestone","milestone","css","visibility","append","getBoundingClientRect","right","remove","margin","wrapper","parseInt","computedStyle","taskSingle","getComputedStyles","parseFloat","taskWrapper","progressHandleOffset","plannedElement","endTaskDotLeft","taskOffsetWrap","offsetElement","editable","wrapClassName","taskWrap","dragHandleStyle","taskWrapAttr","endTaskDotRight","taskFullWidth","_renderPlannedMilestone","_renderPlannedSingleTask","summary","_renderSummary","taskSummaryWrap","_renderMilestone","taskMilestoneWrap","_renderSingleTask","plannedStart","plannedEnd","taskOffset","resize","update","taskActions","link","taskDelete","href","icon","iconDelete","taskResizeHandle","taskResizeHandleWest","taskResizeHandleEast","taskInnerWrap","dependencyCreate","taskDot","taskDotStart","taskDotEnd","dragPercentComplete","taskDragHandle","progressWidth","taskContent","taskChildren","classes","widthExceptDelay","taskDelayed","taskAdvanced","taskComplete","uid","taskSummary","taskSummaryProgress","taskSummaryComplete","taskPlannedMoment","taskPlannedMomentLeft","taskPlannedDuration","taskPlanned","resources","color","get","reverse","startLeft","_offset","slotOffset","_slotIndex","field","value","middle","startIdx","endIdx","slice","ceil","_timeByPosition","x","snap","snapToEnd","_slotByPosition","offset","duration","getTime","slotIndex","_renderDependencies","dependencies","elements","apply","_renderDependency","dependency","predecessor","predecessorId","successor","successorId","_renderFF","from","to","lines","_dependencyFF","_arrow","_renderSS","_renderFS","_dependencyFS","_renderSF","delta","that","top","dir","rowHeight","fromTop","floor","toTop","addHorizontal","_line","line","lineHorizontal","addVertical","lineVertical","abs","minLineHeight","direction","arrowWest","arrowEast","count","j","_createDragHint","clone","addClass","dragHint","cursor","closest","_updateDragHint","_removeDragHint","_createResizeHint","tooltipTop","taskTop","marquee","marqueeColor","RESIZE_HINT","views","resizeTooltipFormat","_resizeTooltipWidth","_resizeTooltipTop","_updateResizeHint","resizeStart","tooltipLeft","tablesWidth","support","scrollbar","tooltipWidth","tableOffset","tasksWrapper","appendTo","_removeResizeHint","_updatePercentCompleteTooltip","_removePercentCompleteTooltip","tooltip","tooltipCallout","PERCENT_RESIZE_TOOLTIP_TEMPLATE","applyStylesFromKendoAttributes","tooltipMiddle","arrow","callout","arrowHeight","_updateDependencyDragHint","_removeDependencyDragHint","_creteDependencyDragHint","deltaX","deltaY","y","sqrt","angle","atan","PI","dependencyHint","transform","_createTaskTooltip","mouseLeft","contentOffset","contentScrollLeft","scrollLeft","parents","rowOffset","scrollTop","_adjustTooltipDimensions","_removeTaskTooltip","_createOffsetTooltip","hours","_offsetTooltip","offsetValue","plannedTasksMessages","plannedTasks","minutes","offsetText","days","offsetTooltipDelay","offsetPrefix","OFFSET_TOOLTIP_TEMPLATE","_removeOffsetTooltip","_createPlannedTooltip","_plannedTooltip","plannedTooltip","editorMessages","editor","startDate","endDate","PLANNED_TOOLTIP_TEMPLATE","_removePlannedTooltip","_scrollTo","elementLeft","elementWidth","elementRight","rowTop","rowBottom","contentTop","contentBottom","contentLeft","contentRight","scrollbarWidth","_scrollToDate","viewStart","viewEnd","columnLevels","level","column","headerText","levelIndex","levelCount","columnIndex","columnCount","_hours","slotEnd","isWorkHour","getHours","setHours","_days","isWorkDay","nextDay","_isWorkDay","_weeks","daySlots","firstDay","calendarInfo","dayOfWeek","_months","endMonth","firstDayOfMonth","setMonth","getMonth","_years","monthSpan","_slotHeaders","columns","getDay","getCulture","calendars","standard","currentTime","_getCurrentTime","timeOffset","viewStyles","tablesWrap","markerOptions","_currentTimeUpdateTimer","setInterval","bind","gridHeaderWrap","offsetTooltipAdvanced","GanttDayView","timeHeaderTemplate","dayHeaderTemplate","range","optionsRange","getDate","getMilliseconds","daySlot","hourSlots","GanttWeekView","weekHeaderTemplate","endDay","rangeEnd","setDate","GanttMonthView","monthHeaderTemplate","lastDayOfMonth","GanttYearView","yearHeaderTemplate","monthSlots","each","index","GanttTimeline","_wrapper","_domTrees","_views","_selectable","_draggable","_resizable","_percentResizeDraggable","_createDependencyDraggable","_attachEvents","_navigatable","_tooltip","selectable","clearInterval","_unbindView","_selectedView","_moveDraggable","_resizeDraggable","_percentDraggable","_dependencyDraggable","touch","off","_findNext","next","_findFirst","_findLast","_findPrev","prev","_scrollTasks","timelineWrapper","timelineScroll","on","e","newTask","target","handled","keyCode","HOME","END","DOWN","UP","focus","LEFT","altKey","hasClass","setTimeout","select","RIGHT","ENTER","stopPropagation","DELETE","preventDefault","calculatedRowHeight","calculatedCellHeight","gridContentWrap","_calculatedSize","Tree","view","isSettings","defaultView","selected","_selectedViewName","_selectView","action","_initializeView","_viewByIndex","getter","window","Error","newRange","newDate","prefix","_range","sort","toArray","_render","_tasks","_taskByUid","currentStart","startOffset","cleanUp","dragInProgress","move","Draggable","distance","filter","holdToDrag","mobileOS","ignore","currentTarget","parent","location","throttle","updateHintDate","userEvents","currentEnd","taskElementOffset","timelineOffset","originalPercentWidth","maxPercentWidth","currentPercentComplete","updateElement","siblings","initialDelta","currentWidth","min","originalHandle","startX","startY","hoveredHandle","hoveredTask","removeClass","hovered","origin","toggleHandles","toggleClass","elementOffset","tablesOffset","elementUnderCursor","currentX","currentY","fromStart","toStart","predecessorElement","successorElement","ctrlKey","document","elementFromPoint","clientX","clientY","click","selectDependency","clearSelection","taskWrapActive","selectedDependency","dependencyDestroy","kendoTouch","doubletap","currentMousePosition","tooltipOptions","mouseMoveHandler","visible","relatedTarget","currentPosition","client","_offsetTooltipTimeout","_plannedTooltipTimeout","_setPlanned","jQuery"],"mappings":"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","file":"kendo.gantt.timeline.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.dom.js'), require('kendo.touch.js'), require('kendo.draganddrop.js'), require('kendo.icons.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.dom', 'kendo.touch', 'kendo.draganddrop', 'kendo.icons'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendogantt = global.kendogantt || {}, global.kendogantt.timeline = global.kendogantt.timeline || {}, global.kendogantt.timeline.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n        id: \"gantt.timeline\",\n        name: \"Gantt Timeline\",\n        category: \"web\",\n        description: \"The Gantt Timeline\",\n        depends: [ \"dom\", \"touch\", \"draganddrop\", \"icons\" ],\n        hidden: true\n    };\n\n    (function($) {\n\n        var Widget = kendo.ui.Widget;\n        var kendoDomElement = kendo.dom.element;\n        var kendoTextElement = kendo.dom.text;\n        var kendoHtmlElement = kendo.dom.html;\n        var isPlainObject = $.isPlainObject;\n        var outerWidth = kendo._outerWidth;\n        var outerHeight = kendo._outerHeight;\n        var extend = $.extend;\n        var isRtl = false;\n        var keys = kendo.keys;\n        var Query = kendo.data.Query;\n        var STRING = \"string\";\n        var NS = \".kendoGanttTimeline\";\n        var CLICK = \"click\";\n        var DBLCLICK = \"dblclick\";\n        var MOUSEMOVE = \"mousemove\";\n        var MOUSEENTER = \"mouseenter\";\n        var MOUSELEAVE = \"mouseleave\";\n        var KEYDOWN = \"keydown\";\n        var DOT = \".\";\n        var TIME_HEADER_TEMPLATE = ({ start }) => kendo.toString(start, 't');\n        var DAY_HEADER_TEMPLATE = ({ start }) => kendo.toString(start, 'ddd M/dd');\n        var WEEK_HEADER_TEMPLATE = ({ start, end }) => `${kendo.toString(start, 'ddd M/dd')} - ${kendo.toString(kendo.date.addDays(end, -1), 'ddd M/dd')}`;\n        var MONTH_HEADER_TEMPLATE = ({ start }) => kendo.toString(start, 'MMM');\n        var YEAR_HEADER_TEMPLATE = ({ start }) => kendo.toString(start, 'yyyy');\n        var RESIZE_HINT = ({ styles }) => `<div class=\"${styles.marquee}\">` +\n                               `<div class=\"${styles.marqueeColor}\"></div>` +\n                           '</div>';\n        var RESIZE_TOOLTIP_TEMPLATE = ({ styles, messages, start, end, format }) => `<div class=\"${styles.tooltipWrapper} k-gantt-resize-hint\">` +\n                                       `<div class=\"${styles.tooltipContent}\">` +\n                                            `<div>${kendo.htmlEncode(messages.start)}: ${kendo.toString(start, format)}</div>` +\n                                            `<div>${kendo.htmlEncode(messages.end)}: ${kendo.toString(end, format)}</div>` +\n                                       '</div>' +\n                                  '</div>';\n        var PERCENT_RESIZE_TOOLTIP_TEMPLATE = ({ styles, text }) => `<div ${kendo.attr(\"style-z-index\")}=\"100002\" class=\"${styles.tooltipWrapper}\" >` +\n                                       `<div class=\"${styles.tooltipContent}\">${text}%</div>` +\n                                       `<div class=\"${styles.tooltipCallout}\" ${kendo.attr(\"style-left\")}=\"13px\"></div>` +\n                                  '</div>';\n        var TASK_TOOLTIP_TEMPLATE = ({ styles, task, messages }) => `<div class=\"${kendo.htmlEncode(styles.taskDetails)}\">` +\n                                        `<strong>${kendo.htmlEncode(task.title)}</strong>` +\n                                        `<div class=\"${styles.taskDetailsPercent}\">${kendo.toString(task.percentComplete, \"p0\")}</div>` +\n                                        `<ul class=\"${styles.reset}\">` +\n                                            `<li>${kendo.htmlEncode(messages.start)}: ${kendo.toString(task.start, \"h:mm tt ddd, MMM d\")}</li>` +\n                                            `<li>${kendo.htmlEncode(messages.end)}: ${kendo.toString(task.end, \"h:mm tt ddd, MMM d\")}</li>` +\n                                        '</ul>' +\n                                    '</div>';\n        var OFFSET_TOOLTIP_TEMPLATE = ({ offsetPrefix, offsetText }) => `<span>${offsetPrefix}: ${offsetText}</span>`;\n        var PLANNED_TOOLTIP_TEMPLATE = ({ plannedStart, plannedEnd, startDate, endDate }) => '<div class=\"k-task-content\">' +\n                `<div>${plannedStart}: ${startDate}</div>` +\n                `<div>${plannedEnd}: ${endDate}</div>` +\n            '</div>';\n        var SIZE_CALCULATION_TEMPLATE = `<table ${kendo.attr(\"style-visibility\")}=\"hidden\">` +\n            \"<tbody>\" +\n                `<tr ${kendo.attr(\"style-height\")}=\"{0}\">` +\n                    \"<td>&nbsp;</td>\" +\n                \"</tr>\" +\n            \"</tbody>\" +\n        \"</table>\";\n\n        var defaultViews = {\n            day: {\n                type: \"kendo.ui.GanttDayView\"\n            },\n            week: {\n                type: \"kendo.ui.GanttWeekView\"\n            },\n            month: {\n                type: \"kendo.ui.GanttMonthView\"\n            },\n            year: {\n                type: \"kendo.ui.GanttYearView\"\n            }\n        };\n\n        function trimOptions(options) {\n            delete options.name;\n            delete options.prefix;\n            delete options.views;\n\n            return options;\n        }\n\n        function getWorkDays(options) {\n            var workDays = [];\n            var dayIndex = options.workWeekStart;\n\n            workDays.push(dayIndex);\n\n            while (options.workWeekEnd != dayIndex) {\n                if (dayIndex > 6) {\n                    dayIndex -= 7;\n                } else {\n                    dayIndex++;\n                }\n                workDays.push(dayIndex);\n            }\n            return workDays;\n        }\n\n        function blurActiveElement() {\n            var activeElement = kendo._activeElement();\n\n            if (activeElement && activeElement.nodeName.toLowerCase() !== \"body\") {\n                $(activeElement).trigger(\"blur\");\n            }\n        }\n\n        var viewStyles = {\n            alt: \"k-alt k-table-row k-table-alt-row\",\n            reset: \"k-reset\",\n            nonWorking: \"k-nonwork-hour\",\n            header: \"k-header k-table-td\",\n            gridHeader: \"k-grid-header\",\n            gridHeaderWrap: \"k-grid-header-wrap\",\n            gridContent: \"k-grid-content\",\n            tasksWrapper: \"k-gantt-tables\",\n            rowsTable: \"k-gantt-rows\",\n            columnsTable: \"k-gantt-columns\",\n            tasksTable: \"k-gantt-tasks\",\n            dependenciesWrapper: \"k-gantt-dependencies\",\n            resource: \"k-resource\",\n            resourceAlt: \"k-resource k-alt\",\n            headerTable: \"k-grid-header-table k-table k-table-md\",\n            table: \"k-table k-table-md\",\n            tbody: \"k-table-tbody\",\n            tableRow: \"k-table-row\",\n            tableCell: \"k-table-td\",\n            task: \"k-task\",\n            taskSingle: \"k-task-single\",\n            taskMilestone: \"k-task-milestone\",\n            taskSummary: \"k-task-summary\",\n            taskWrap: \"k-task-wrap\",\n            taskMilestoneWrap: \"k-milestone-wrap\",\n            taskSummaryWrap: \"k-summary-wrap\",\n            taskPlanned: \"k-task-planned\",\n            taskPlannedMoment: \"k-task-moment\",\n            taskPlannedDuration: \"k-task-duration\",\n            taskPlannedMomentLeft: \"k-moment-left\",\n            taskAdvanced: \"k-task-advanced\",\n            taskDelayed: \"k-task-delayed\",\n            taskOffset: \"k-task-offset\",\n            taskOffsetWrap: \"k-task-offset-wrap\",\n            taskInnerWrap: \"k-task-inner-wrap\",\n            resourcesWrap: \"k-resources-wrap\",\n            taskDot: \"k-task-dot\",\n            taskDotStart: \"k-task-start\",\n            taskDotEnd: \"k-task-end\",\n            taskDragHandle: \"k-task-draghandle\",\n            taskContent: \"k-task-content\",\n            taskTemplate: \"k-task-template\",\n            taskActions: \"k-task-actions\",\n            taskDelete: \"k-task-delete\",\n            taskComplete: \"k-task-complete\",\n            taskDetails: \"k-task-details\",\n            taskDetailsPercent: \"k-task-pct\",\n            link: \"k-link\",\n            iconDelete: \"x\",\n            taskResizeHandle: \"k-resize-handle\",\n            taskResizeHandleWest: \"k-resize-w\",\n            taskResizeHandleEast: \"k-resize-e\",\n            taskSummaryProgress: \"k-task-summary-progress\",\n            taskSummaryComplete: \"k-task-summary-complete\",\n            line: \"k-gantt-line\",\n            lineHorizontal: \"k-gantt-line-h\",\n            lineVertical: \"k-gantt-line-v\",\n            arrowWest: \"k-arrow-w\",\n            arrowEast: \"k-arrow-e\",\n            dragHint: \"k-drag-hint\",\n            dependencyHint: \"k-gantt-dependency-hint\",\n            tooltipWrapper: \"k-tooltip\",\n            tooltipContent: \"k-tooltip-content\",\n            tooltipCallout: \"k-callout k-callout-s\",\n            callout: \"k-callout\",\n            marquee: \"k-marquee k-gantt-marquee\",\n            marqueeColor: \"k-marquee-color\",\n            offsetTooltipAdvanced: \"k-offset-tooltip-advanced\",\n            offsetTooltipDelay: \"k-offset-tooltip-delayed\",\n            plannedTooltip: \"k-planned-tooltip\"\n        };\n\n        var GanttView = kendo.ui.GanttView = Widget.extend({\n            init: function(element, options) {\n                Widget.fn.init.call(this, element, options);\n\n                this.title = this.options.title || this.options.name;\n\n                this.header = this.element.find(DOT + GanttView.styles.gridHeader);\n\n                this.content = this.element.find(DOT + GanttView.styles.gridContent);\n\n                this.contentWidth = this.content.width();\n\n                this._workDays = getWorkDays(this.options);\n\n                this._headerTree = options.headerTree;\n\n                this._taskTree = options.taskTree;\n\n                this._taskTemplate = options.taskTemplate ?\n                    kendo.template(options.taskTemplate, extend({}, kendo.Template, options.templateSettings)) :\n                    null;\n\n                this._dependencyTree = options.dependencyTree;\n\n                this._taskCoordinates = {};\n\n                this._currentTime();\n            },\n\n            destroy: function() {\n                Widget.fn.destroy.call(this);\n\n                clearTimeout(this._tooltipTimeout);\n\n                this.headerRow = null;\n                this.header = null;\n                this.content = null;\n\n                this._dragHint = null;\n                this._resizeHint = null;\n                this._resizeTooltip = null;\n                this._taskTooltip = null;\n                this._percentCompleteResizeTooltip = null;\n\n                this._headerTree = null;\n                this._taskTree = null;\n                this._dependencyTree = null;\n            },\n\n            options: {\n                showWorkHours: false,\n                showWorkDays: false,\n                workDayStart: new Date(1980, 1, 1, 8, 0, 0),\n                workDayEnd: new Date(1980, 1, 1, 17, 0, 0),\n                workWeekStart: 1,\n                workWeekEnd: 5,\n                hourSpan: 1,\n                slotSize: 100,\n                currentTimeMarker: {\n                    updateInterval: 10000\n                }\n            },\n\n            renderLayout: function() {\n                this._slots = this._createSlots();\n\n                this._tableWidth = this._calculateTableWidth();\n\n                this.createLayout(this._layout());\n\n                this._slotDimensions();\n\n                this._adjustHeight();\n\n                this.content.find(DOT + GanttView.styles.dependenciesWrapper).width(this._tableWidth);\n            },\n\n            _adjustHeight: function() {\n                if (this.content) {\n                    this.content.height(this.element.height() - outerHeight(this.header));\n                }\n            },\n\n            createLayout: function(rows) {\n                var headers = this._headers(rows);\n                var colgroup = this._colgroup();\n                var tree = this._headerTree;\n                var header = kendoDomElement(\"tbody\", { className: GanttView.styles.tbody }, headers);\n                var table = kendoDomElement(\"table\", { className: GanttView.styles.headerTable, style: { width: this._tableWidth + \"px\" }, role: \"presentation\" }, [colgroup, header]);\n\n                tree.render([table]);\n\n                this.headerRow = this.header.find(\"table\").first().find(\"tr\").last();\n            },\n\n            _slotDimensions: function() {\n                var headers = this.headerRow[0].children;\n                var slots = this._timeSlots();\n                var slot;\n                var header;\n\n                for (var i = 0, length = headers.length; i < length; i++) {\n                    header = headers[i];\n                    slot = slots[i];\n\n                    slot.offsetLeft = header.offsetLeft;\n                    slot.offsetWidth = header.offsetWidth;\n                }\n            },\n\n            render: function(tasks) {\n                var taskCount = tasks.length;\n                var styles = GanttView.styles;\n                var contentTable;\n                var rowsTable = this._rowsTable(taskCount);\n                var columnsTable = this._columnsTable(taskCount);\n                var tasksTable = this._tasksTable(tasks);\n                var currentTimeMarker = this.options.currentTimeMarker;\n                var calculatedSize = this.options.calculatedSize;\n                var totalHeight;\n\n                this._taskTree.render([rowsTable, columnsTable, tasksTable]);\n\n                contentTable = this.content.find(DOT + styles.rowsTable);\n\n                if (calculatedSize) {\n                    totalHeight = calculatedSize.row * tasks.length;\n                    this.content.find(DOT + styles.tasksTable).height(totalHeight);\n                    contentTable.height(totalHeight);\n                }\n\n                this._contentHeight = contentTable.height();\n                this._rowHeight = calculatedSize ? calculatedSize.row : this._contentHeight / contentTable.find(\"tr\").length;\n\n                this.content.find(DOT + styles.columnsTable).height(this._contentHeight);\n\n                if (currentTimeMarker !== false && currentTimeMarker.updateInterval !== undefined) {\n                    this._renderCurrentTime();\n                }\n            },\n\n            _rowsTable: function(rowCount) {\n                var rows = [];\n                var row;\n                var styles = GanttView.styles;\n                var attributes = [{ className: styles.tableRow }, { className: styles.alt }];\n\n                for (var i = 0; i < rowCount; i++) {\n                    row = kendoDomElement(\"tr\", attributes[i % 2], [\n                        kendoDomElement(\"td\", { className: styles.tableCell }, [\n                            kendoTextElement(\"\\u00a0\")\n                        ])\n                    ]);\n\n                    rows.push(row);\n                }\n\n                return this._createTable(1, rows, { className: styles.rowsTable + \" k-grid-table \" + styles.table });\n            },\n\n            _columnsTable: function() {\n                var cells = [];\n                var row;\n                var styles = GanttView.styles;\n                var slots = this._timeSlots();\n                var slotsCount = slots.length;\n                var slot;\n                var slotSpan;\n                var totalSpan = 0;\n                var attributes;\n\n                for (var i = 0; i < slotsCount; i++) {\n                    slot = slots[i];\n\n                    attributes = { className: styles.tableCell };\n\n                    slotSpan = slot.span;\n\n                    totalSpan += slotSpan;\n\n                    if (slotSpan !== 1) {\n                        attributes.colspan = slotSpan;\n                    }\n\n                    if (slot.isNonWorking) {\n                        attributes.className += \" \" + styles.nonWorking;\n                    }\n\n                    cells.push(kendoDomElement(\"td\", attributes, [\n                        kendoTextElement(\"\\u00a0\")\n                    ]));\n                }\n\n                row = kendoDomElement(\"tr\", { className: styles.tableRow }, cells);\n\n                return this._createTable(totalSpan, [row], { className: styles.columnsTable + \" \" + styles.table });\n            },\n\n            _tasksTable: function(tasks) {\n                var rows = [];\n                var row;\n                var cell;\n                var position;\n                var plannedPosition;\n                var task;\n                var styles = GanttView.styles;\n                var coordinates = this._taskCoordinates = {};\n                var size = this._calculateMilestoneWidth();\n                var milestoneWidth = Math.round(size.width);\n                var resourcesField = this.options.resourcesField;\n                var className = [styles.resource, styles.resourceAlt];\n                var calculatedSize = this.options.calculatedSize;\n                var resourcesPosition;\n                var resourcesMargin = this._calculateResourcesMargin();\n                var taskBorderWidth = this._calculateTaskBorderWidth();\n                var resourceStyle;\n                var showPlannedTasks = this.options.showPlannedTasks;\n                var attributes = [{ className: styles.tableRow }, { className: styles.alt }];\n                var taskElement;\n\n                var addCoordinates = function(rowIndex) {\n                    var taskLeft;\n                    var taskRight;\n\n                    taskLeft = position.left;\n                    taskRight = taskLeft + position.width;\n\n                    if (task.isMilestone()) {\n                        taskLeft -= milestoneWidth / 2;\n                        taskRight = taskLeft + milestoneWidth;\n                    }\n\n                    coordinates[task.id] = {\n                        start: taskLeft,\n                        end: taskRight,\n                        rowIndex: rowIndex\n                    };\n                };\n\n                for (var i = 0, l = tasks.length; i < l; i++) {\n                    task = tasks[i];\n\n                    position = this._taskPosition(task);\n\n                    if (showPlannedTasks) {\n                        plannedPosition = this._taskPositionPlanned(task);\n                        plannedPosition.borderWidth = taskBorderWidth;\n                    }\n                    position.borderWidth = taskBorderWidth;\n\n                    row = kendoDomElement(\"tr\", attributes[i % 2]);\n                    cell = kendoDomElement(\"td\", { className: styles.tableCell });\n\n                    if (task.start <= this.end && task.end >= this.start) {\n                        taskElement = this._renderTask(tasks[i], position, plannedPosition);\n                        if (this.options.navigatable) {\n                            taskElement.children[0].attr[\"tabIndex\"] = i ? -1 : 0;\n                        }\n                        cell.children.push(taskElement);\n\n                        if (task[resourcesField] && task[resourcesField].length) {\n                            if (isRtl) {\n                                resourcesPosition = this._tableWidth - position.left;\n                            } else {\n                                resourcesPosition = Math.max((position.width || size.clientWidth), 0) + position.left;\n                            }\n\n                            resourceStyle = {\n                                width: (this._tableWidth - (resourcesPosition + resourcesMargin)) + \"px\"\n                            };\n\n                            resourceStyle[isRtl ? \"right\" : \"left\"] = resourcesPosition + \"px\";\n\n                            if (calculatedSize) {\n                                resourceStyle.height = calculatedSize.cell + \"px\";\n                            }\n\n                            cell.children.push(kendoDomElement(\"div\",\n                                {\n                                    className: styles.resourcesWrap,\n                                    style: resourceStyle\n                                },\n                                this._renderResources(task[resourcesField], className[i % 2]))\n                            );\n                        }\n\n                        addCoordinates(i);\n                    }\n                    row.children.push(cell);\n                    rows.push(row);\n                }\n\n                return this._createTable(1, rows, { className: GanttView.styles.tasksTable + \" \" + styles.table });\n            },\n\n            _createTable: function(colspan, rows, styles) {\n                var cols = [];\n                var colgroup;\n                var tbody;\n\n                for (var i = 0; i < colspan; i++) {\n                    cols.push(kendoDomElement(\"col\"));\n                }\n\n                colgroup = kendoDomElement(\"colgroup\", null, cols);\n\n                tbody = kendoDomElement(\"tbody\", { className: GanttView.styles.tbody }, rows);\n\n                if (!styles.style) {\n                    styles.style = {};\n                }\n\n                styles.style.width = this._tableWidth + \"px\";\n                styles.role = \"presentation\";\n\n                return kendoDomElement(\"table\", styles, [colgroup, tbody]);\n            },\n\n            _calculateTableWidth: function() {\n                var slots = this._timeSlots();\n                var maxSpan = 0;\n                var totalSpan = 0;\n                var currentSpan;\n                var tableWidth;\n\n                for (var i = 0, length = slots.length; i < length; i++) {\n                    currentSpan = slots[i].span;\n\n                    totalSpan += currentSpan;\n\n                    if (currentSpan > maxSpan) {\n                        maxSpan = currentSpan;\n                    }\n                }\n\n                tableWidth = Math.round((totalSpan * this.options.slotSize) / maxSpan);\n\n                return tableWidth;\n            },\n\n            _calculateMilestoneWidth: function() {\n                var size;\n                var className = GanttView.styles.task + \" \" + GanttView.styles.taskMilestone;\n                var boundingClientRect;\n                var milestone = $(`<div class=\"${className}\">`).css({\n                    visibility: \"hidden\",\n                    position: \"absolute\"\n                });\n\n                this.content.append(milestone);\n\n                boundingClientRect = milestone[0].getBoundingClientRect();\n\n                size = {\n                    \"width\": boundingClientRect.right - boundingClientRect.left,\n                    \"clientWidth\": milestone[0].clientWidth\n                };\n\n                milestone.remove();\n\n                return size;\n            },\n\n            _calculateResourcesMargin: function() {\n                var margin;\n                var wrapper = $(`<div class=\"${GanttView.styles.resourcesWrap}\">`).css({\n                    visibility: \"hidden\",\n                    position: \"absolute\"\n                });\n\n                this.content.append(wrapper);\n\n                margin = parseInt(wrapper.css(isRtl ? \"margin-right\" : \"margin-left\"), 10);\n\n                wrapper.remove();\n\n                return margin;\n            },\n\n            _calculateTaskBorderWidth: function() {\n                var width;\n                var className = GanttView.styles.task + \" \" + GanttView.styles.taskSingle;\n                var computedStyle;\n                var task = $(`<div class=\"${className}\">`).css({\n                    visibility: \"hidden\",\n                    position: \"absolute\"\n                });\n\n                this.content.append(task);\n\n                computedStyle = kendo.getComputedStyles(task[0], [\"border-left-width\"]);\n\n                width = parseFloat(computedStyle[\"border-left-width\"], 10);\n\n                task.remove();\n\n                return width;\n            },\n\n            _renderTask: function(task, position, plannedPosition) {\n                var editable = this.options.editable;\n                var taskLeft = position.left;\n                var styles = GanttView.styles;\n                var wrapClassName = styles.taskWrap;\n                var calculatedSize = this.options.calculatedSize;\n                var dragHandleStyle = {};\n                var taskWrapAttr = {\n                    className: wrapClassName,\n                    style: { left: taskLeft + \"px\" }\n                };\n                var children = [];\n                var endTaskDotRight = 0;\n                var taskFullWidth = position.width;\n                var taskWrapper, taskElement, progressHandleOffset, plannedElement;\n                var endTaskDotLeft, taskOffsetWrap, offsetElement, offsetWidth;\n\n                if (calculatedSize) {\n                    taskWrapAttr.style.height = calculatedSize.cell + \"px\";\n                }\n\n                if (plannedPosition) {\n                    if (task.isMilestone()) {\n                        plannedElement = this._renderPlannedMilestone(position, plannedPosition);\n                    } else {\n                        plannedElement = this._renderPlannedSingleTask(position, plannedPosition, task);\n                    }\n\n                    children.push(plannedElement);\n\n                    if (isRtl && plannedPosition.left <= position.left) {\n                        taskWrapAttr.style.left = plannedPosition.left + \"px\";\n                    }\n                }\n\n                if (task.summary) {\n                    taskElement = this._renderSummary(task, position, plannedPosition);\n                    taskWrapAttr.className += \" \" + styles.taskSummaryWrap;\n                } else if (task.isMilestone()) {\n                    taskElement = this._renderMilestone(task, position);\n                    taskWrapAttr.className += \" \" + styles.taskMilestoneWrap;\n                } else {\n                    taskElement = this._renderSingleTask(task, position, plannedPosition);\n                }\n\n                if (plannedPosition && !task.isMilestone() && task.plannedStart < task.end && task.plannedEnd > task.start && task.plannedEnd < task.end) {\n                    if (isRtl) {\n                        taskFullWidth = position.left + position.width - plannedPosition.left;\n                    } else {\n                        taskFullWidth = plannedPosition.left + plannedPosition.width - position.left;\n                    }\n\n                    if (isRtl) {\n                        offsetWidth = plannedPosition.left - position.left;\n                    } else {\n                        offsetWidth = position.left + position.width - (plannedPosition.left + plannedPosition.width);\n                    }\n\n                    offsetElement = kendoDomElement(\"div\", {\n                        className: styles.taskOffset,\n                        style: { width: offsetWidth - 2 * plannedPosition.borderWidth + \"px\" }\n                    });\n\n                    if (editable && editable.resize !== false && editable.update !== false && !task.summary) {\n                        if (editable.destroy !== false) {\n                            offsetElement.children.push(kendoDomElement(\"span\", { className: styles.taskActions, \"aria-hidden\": \"true\" }, [\n                                kendoDomElement(\"a\", { className: styles.link + \" \" + styles.taskDelete, href: \"#\", \"aria-label\": \"Delete\" }, [\n                                    kendoDomElement($(kendo.ui.icon(styles.iconDelete))[0])\n                                ])\n                            ]));\n                        }\n\n                        if (isRtl) {\n                            offsetElement.children.push(kendoDomElement(\"span\", {\n                                className: styles.taskResizeHandle + \" \" + styles.taskResizeHandleWest,\n                                style: {\n                                    right: position.width - 5 + \"px\"\n                                }\n                            }));\n                        } else {\n                            offsetElement.children.push(kendoDomElement(\"span\", {\n                                className: styles.taskResizeHandle + \" \" + styles.taskResizeHandleEast\n                            }));\n                        }\n                    }\n\n                    taskOffsetWrap = kendoDomElement(\"div\", {\n                        className: styles.taskOffsetWrap + \" \" + styles.taskInnerWrap\n                    }, [ taskElement, offsetElement ]);\n\n                    children.push(taskOffsetWrap);\n                } else if (plannedPosition) {\n                    children.push(kendoDomElement(\"div\", {\n                        className: styles.taskInnerWrap\n                    }, [ taskElement ]));\n                } else {\n                    children.push(taskElement);\n                }\n\n                taskWrapper = kendoDomElement(\"div\", taskWrapAttr, children);\n\n                if (editable && editable.dependencyCreate !== false) {\n                    if (plannedPosition && task.plannedEnd > task.end) {\n                        endTaskDotRight = plannedPosition.left + plannedPosition.width - position.left - position.width - 3 + \"px\";\n                    }\n\n                    taskWrapper.children.push(kendoDomElement(\"div\", {\n                        className: styles.taskDot + \" \" + styles.taskDotStart\n                    }));\n\n                    if (isRtl) {\n                        endTaskDotRight = \"auto\";\n                        if (plannedPosition && task.plannedEnd > task.end) {\n                            endTaskDotLeft = position.left - plannedPosition.left + \"px\";\n                        }\n                    }\n\n                    taskWrapper.children.push(kendoDomElement(\"div\", {\n                        className: styles.taskDot + \" \" + styles.taskDotEnd,\n                        style: { right: endTaskDotRight, left: endTaskDotLeft }\n                    }));\n                }\n\n                if (!task.summary && !task.isMilestone() && editable && editable.dragPercentComplete !== false && editable.update !== false && this._taskTemplate === null) {\n                    progressHandleOffset = Math.round(taskFullWidth * task.percentComplete);\n\n                    dragHandleStyle[isRtl ? \"right\" : \"left\"] = progressHandleOffset + \"px\";\n                    taskWrapper.children.push(kendoDomElement(\"div\", { className: styles.taskDragHandle, style: dragHandleStyle }));\n                }\n\n                return taskWrapper;\n            },\n\n            _renderSingleTask: function(task, position, plannedPosition) {\n                var styles = GanttView.styles;\n                var progressWidth;\n                var taskChildren = [];\n                var taskContent;\n                var editable = this.options.editable;\n                var classes = styles.task + \" \" + styles.taskSingle;\n                var widthExceptDelay = position.width;\n\n                if (plannedPosition) {\n                    if (task.plannedEnd && task.plannedEnd <= task.start) {\n                        classes += \" \" + styles.taskDelayed;\n                    } else if (task.plannedEnd && task.plannedEnd > task.end) {\n                        classes += \" \" + styles.taskAdvanced;\n                    } else if (task.plannedEnd && task.plannedEnd < task.end) {\n                        if (!isRtl) {\n                            widthExceptDelay = widthExceptDelay - (position.left + position.width - plannedPosition.left - plannedPosition.width);\n                        } else {\n                            widthExceptDelay = widthExceptDelay + position.left - plannedPosition.left;\n                        }\n                    }\n                }\n\n                progressWidth = Math.round(widthExceptDelay * task.percentComplete);\n\n                if (this._taskTemplate !== null) {\n                    taskContent = kendoHtmlElement(this._taskTemplate(task));\n                } else {\n                    taskContent = kendoTextElement(task.title);\n                    taskChildren.push(kendoDomElement(\"div\", { className: styles.taskComplete, style: { width: progressWidth + \"px\" }, \"aria-hidden\": \"true\" }));\n                }\n\n                var content = kendoDomElement(\"div\", { className: styles.taskContent }, [\n                    kendoDomElement(\"div\", { className: styles.taskTemplate }, [\n                        taskContent\n                    ])\n                ]);\n\n                taskChildren.push(content);\n\n                if (editable) {\n                    if (editable.destroy !== false && (!plannedPosition || !task.plannedEnd || (task.end <= task.plannedEnd || task.start >= task.plannedEnd))) {\n                        content.children.push(kendoDomElement(\"span\", { className: styles.taskActions, \"aria-hidden\": \"true\" }, [\n                            kendoDomElement(\"a\", { className: styles.link + \" \" + styles.taskDelete, href: \"#\", \"aria-label\": \"Delete\" }, [\n                                kendoDomElement($(kendo.ui.icon(styles.iconDelete))[0])\n                            ])\n                        ]));\n                    }\n\n                    if (editable.resize !== false && editable.update !== false) {\n                        content.children.push(kendoDomElement(\"span\", {\n                            className: styles.taskResizeHandle + \" \" + styles.taskResizeHandleWest\n                        }));\n                        content.children.push(kendoDomElement(\"span\", {\n                            className: styles.taskResizeHandle + \" \" + styles.taskResizeHandleEast\n                        }));\n                    }\n                }\n\n                var element = kendoDomElement(\"div\", {\n                    className: classes, \"data-uid\": task.uid, role: \"treeitem\", style:\n                        { width: Math.max((widthExceptDelay - position.borderWidth * 2), 0) + \"px\" }\n                }, taskChildren);\n\n                return element;\n            },\n\n            _renderMilestone: function(task) {\n                var styles = GanttView.styles;\n                var classes = styles.task + \" \" + styles.taskMilestone;\n                var showPlanned = this.options.showPlannedTasks;\n\n                if (showPlanned && task.plannedEnd && task.plannedEnd < task.start) {\n                    classes += \" \" + styles.taskDelayed;\n                } else if (task.plannedStart && task.plannedStart > task.end) {\n                    classes += \" \" + styles.taskAdvanced;\n                }\n\n                return kendoDomElement(\"div\", { className: classes, \"data-uid\": task.uid, role: \"treeitem\", \"aria-label\": task.title });\n            },\n\n            _renderSummary: function(task, position, plannedPosition) {\n                var styles = GanttView.styles;\n                var widthExceptDelay = position.width;\n                var progressWidth;\n                var classes = styles.task + \" \" + styles.taskSummary;\n\n                if (plannedPosition) {\n                    if (task.plannedEnd && task.plannedEnd <= task.start) {\n                        classes += \" \" + styles.taskDelayed;\n                    } else if (task.plannedEnd && task.plannedEnd > task.end) {\n                        classes += \" \" + styles.taskAdvanced;\n                    } else if (task.plannedEnd && task.plannedEnd < task.end) {\n                        if (!isRtl) {\n                            widthExceptDelay = widthExceptDelay - (position.left + position.width - plannedPosition.left - plannedPosition.width);\n                        } else {\n                            widthExceptDelay = widthExceptDelay + position.left - plannedPosition.left;\n                        }\n                    }\n                }\n\n                progressWidth = Math.round(widthExceptDelay * task.percentComplete);\n\n                var element = kendoDomElement(\"div\", { className: classes, \"data-uid\": task.uid, role: \"treeitem\", \"aria-label\": task.title, style: { width: widthExceptDelay + \"px\" } }, [\n                    kendoDomElement(\"div\", { className: styles.taskSummaryProgress, style: { width: progressWidth + \"px\" } }, [\n                        kendoDomElement(\"div\", { className: styles.taskSummaryComplete, style: { width: position.width + \"px\" } })\n                    ])\n                ]);\n\n                return element;\n            },\n\n            _renderPlannedSingleTask: function(position, plannedPosition, task) {\n                var styles = GanttView.styles;\n                var children = [];\n                var style = {};\n\n                if (task.plannedStart && task.plannedEnd) {\n                    children.push(kendoDomElement(\"div\", { className: styles.taskPlannedMoment + \" \" + styles.taskPlannedMomentLeft }));\n                    children.push(kendoDomElement(\"div\", {\n                        className: styles.taskPlannedDuration, style:\n                            { width: Math.max((plannedPosition.width - plannedPosition.borderWidth * 2 - 16), 0) + \"px\" }\n                    }));\n                    children.push(kendoDomElement(\"div\", { className: styles.taskPlannedMoment }));\n                } else if (task.plannedStart) {\n                    children.push(kendoDomElement(\"div\", { className: styles.taskPlannedMoment + \" \" + styles.taskPlannedMomentLeft }));\n                } else if (task.plannedEnd) {\n                    children.push(kendoDomElement(\"div\", { className: styles.taskPlannedMoment, style: { \"margin-left\": Math.max(plannedPosition.width - 5, 0) + \"px\" } }));\n                }\n\n                if (isRtl) {\n                    style = {\n                        \"margin-right\": position.left - plannedPosition.left + position.width - plannedPosition.width + \"px\"\n                    };\n                } else {\n                    style = {\n                        \"margin-left\": plannedPosition.left - position.left + \"px\"\n                    };\n                }\n\n                var element = kendoDomElement(\"div\", {\n                    className: styles.taskPlanned,\n                    style: style\n                }, children);\n\n                return element;\n            },\n\n            _renderPlannedMilestone: function(position, plannedPosition) {\n                var styles = GanttView.styles;\n                var style = {};\n                var element;\n\n                if (isRtl) {\n                    style = {\n                        \"margin-right\": position.left - plannedPosition.left + \"px\"\n                    };\n                } else {\n                    style = {\n                        \"margin-left\": plannedPosition.left - position.left + \"px\"\n                    };\n                }\n\n                element = kendoDomElement(\"div\", {\n                    className: styles.taskPlanned,\n                    style: style\n                }, [\n                    kendoDomElement(\"div\", { className: styles.taskPlannedMoment })\n                ]);\n\n                return element;\n            },\n\n            _renderResources: function(resources, className) {\n                var children = [];\n                var resource;\n\n                for (var i = 0, length = resources.length; i < length; i++) {\n                    resource = resources[i];\n                    children.push(kendoDomElement(\"span\", {\n                        className: className,\n                        style: {\n                            \"color\": resource.get(\"color\")\n                        }\n                    }, [kendoTextElement(resource.get(\"name\"))]));\n                }\n\n                if (isRtl) {\n                    children.reverse();\n                }\n\n                return children;\n            },\n\n            _taskPosition: function(task) {\n                var round = Math.round;\n\n                var startLeft = round(this._offset(isRtl ? task.end : task.start));\n                var endLeft = round(this._offset(isRtl ? task.start : task.end));\n\n                return { left: startLeft, width: endLeft - startLeft };\n            },\n\n            _taskPositionPlanned: function(task) {\n                var round = Math.round;\n\n                var startLeft = round(this._offset(isRtl ? task.plannedEnd : task.plannedStart));\n                var endLeft = round(this._offset(isRtl ? task.plannedStart : task.plannedEnd));\n\n                return { left: startLeft, width: endLeft - startLeft };\n            },\n\n            _offset: function(date) {\n                var slots = this._timeSlots();\n                var slot;\n                var startOffset;\n                var slotDuration;\n                var slotOffset = 0;\n                var startIndex;\n\n                if (!slots.length) {\n                    return 0;\n                }\n\n                startIndex = this._slotIndex(\"start\", date);\n\n                slot = slots[startIndex];\n\n                if (slot.end < date) {\n                    slotOffset = slot.offsetWidth;\n                } else if (slot.start <= date) {\n                    startOffset = date - slot.start;\n                    slotDuration = slot.end - slot.start;\n                    slotOffset = (startOffset / slotDuration) * slot.offsetWidth;\n                }\n\n                if (isRtl) {\n                    slotOffset = (slot.offsetWidth + 1) - slotOffset; // Add one pixel for border\n                }\n\n                return slot.offsetLeft + slotOffset;\n            },\n\n            _slotIndex: function(field, value, reverse) {\n                var slots = this._timeSlots();\n                var startIdx = 0;\n                var endIdx = slots.length - 1;\n                var middle;\n\n                if (reverse) {\n                    slots = [].slice.call(slots).reverse();\n                }\n\n                do {\n                    middle = Math.ceil((endIdx + startIdx) / 2);\n\n                    if (slots[middle][field] < value) {\n                        startIdx = middle;\n                    } else {\n                        if (middle === endIdx) {\n                            middle--;\n                        }\n\n                        endIdx = middle;\n                    }\n                } while (startIdx !== endIdx);\n\n                if (reverse) {\n                    startIdx = (slots.length - 1) - startIdx;\n                }\n\n                return startIdx;\n            },\n\n            _timeByPosition: function(x, snap, snapToEnd) {\n                var slot = this._slotByPosition(x);\n\n                if (snap) {\n                    return snapToEnd ? slot.end : slot.start;\n                }\n\n                var offsetLeft = x - this.element.find(DOT + GanttView.styles.tasksTable).offset().left;\n                var duration = slot.end - slot.start;\n                var slotOffset = offsetLeft - slot.offsetLeft;\n\n                if (isRtl) {\n                    slotOffset = slot.offsetWidth - slotOffset;\n                }\n\n                return new Date(slot.start.getTime() + (duration * (slotOffset / slot.offsetWidth)));\n            },\n\n            _slotByPosition: function(x) {\n                var offsetLeft = x - this.element.find(DOT + GanttView.styles.tasksTable).offset().left;\n                var slotIndex = this._slotIndex(\"offsetLeft\", offsetLeft, isRtl);\n\n                return this._timeSlots()[slotIndex];\n            },\n\n            _renderDependencies: function(dependencies) {\n                var elements = [];\n                var tree = this._dependencyTree;\n\n                for (var i = 0, l = dependencies.length; i < l; i++) {\n                    elements.push.apply(elements, this._renderDependency(dependencies[i]));\n                }\n\n                tree.render(elements);\n            },\n\n            _renderDependency: function(dependency) {\n                var predecessor = this._taskCoordinates[dependency.predecessorId];\n                var successor = this._taskCoordinates[dependency.successorId];\n                var elements;\n                var method;\n\n                if (!predecessor || !successor) {\n                    return [];\n                }\n\n                method = \"_render\" + [\"FF\", \"FS\", \"SF\", \"SS\"][isRtl ? 3 - dependency.type : dependency.type];\n\n                elements = this[method](predecessor, successor);\n\n                for (var i = 0, length = elements.length; i < length; i++) {\n                    elements[i].attr[\"data-uid\"] = dependency.uid;\n                }\n\n                return elements;\n            },\n\n            _renderFF: function(from, to) {\n                var lines = this._dependencyFF(from, to, false);\n\n                lines[lines.length - 1].children[0] = this._arrow(true);\n\n                return lines;\n            },\n\n            _renderSS: function(from, to) {\n                var lines = this._dependencyFF(to, from, true);\n\n                lines[0].children[0] = this._arrow(false);\n\n                return lines.reverse();\n            },\n\n            _renderFS: function(from, to) {\n                var lines = this._dependencyFS(from, to, false);\n\n                lines[lines.length - 1].children[0] = this._arrow(false);\n\n                return lines;\n            },\n\n            _renderSF: function(from, to) {\n                var lines = this._dependencyFS(to, from, true);\n\n                lines[0].children[0] = this._arrow(true);\n\n                return lines.reverse();\n            },\n\n            _dependencyFF: function(from, to, reverse) {\n                var that = this;\n                var lines = [];\n                var left = 0;\n                var top = 0;\n                var width = 0;\n                var height = 0;\n                var dir = reverse ? \"start\" : \"end\";\n                var delta;\n                var overlap = 2;\n                var arrowOverlap = 1;\n                var rowHeight = this._rowHeight;\n                var minLineWidth = 10;\n                var fromTop = from.rowIndex * rowHeight + Math.floor(rowHeight / 2) - 1;\n                var toTop = to.rowIndex * rowHeight + Math.floor(rowHeight / 2) - 1;\n                var styles = GanttView.styles;\n\n                var addHorizontal = function() {\n                    lines.push(that._line(styles.line + \" \" + styles.lineHorizontal, { left: left + \"px\", top: top + \"px\", width: width + \"px\" }));\n                };\n                var addVertical = function() {\n                    lines.push(that._line(styles.line + \" \" + styles.lineVertical, { left: left + \"px\", top: top + \"px\", height: height + \"px\" }));\n                };\n\n                left = from[dir];\n                top = fromTop;\n                width = minLineWidth;\n\n                delta = to[dir] - from[dir];\n\n                if ((delta) > 0 !== reverse) {\n                    width = Math.abs(delta) + minLineWidth;\n                }\n\n                if (reverse) {\n                    left -= width;\n                    width -= arrowOverlap;\n                    addHorizontal();\n                } else {\n                    addHorizontal();\n                    left += width - overlap;\n                }\n\n                if (toTop < top) {\n                    height = top - toTop;\n                    height += overlap;\n                    top = toTop;\n                    addVertical();\n                } else {\n                    height = toTop - top;\n                    height += overlap;\n                    addVertical();\n                    top += (height - overlap);\n                }\n\n                width = Math.abs(left - to[dir]);\n\n                if (!reverse) {\n                    width -= arrowOverlap;\n                    left -= width;\n                }\n\n                addHorizontal();\n\n                return lines;\n            },\n\n            _dependencyFS: function(from, to, reverse) {\n                var that = this;\n                var lines = [];\n                var left = 0;\n                var top = 0;\n                var width = 0;\n                var height = 0;\n                var rowHeight = this._rowHeight;\n                var minLineHeight = Math.floor(rowHeight / 2);\n                var minLineWidth = 10;\n                var minDistance = 2 * minLineWidth;\n                var delta = to.start - from.end;\n                var overlap = 2;\n                var arrowOverlap = 1;\n                var fromTop = from.rowIndex * rowHeight + Math.floor(rowHeight / 2) - 1;\n                var toTop = to.rowIndex * rowHeight + Math.floor(rowHeight / 2) - 1;\n                var styles = GanttView.styles;\n\n                var addHorizontal = function() {\n                    lines.push(that._line(styles.line + \" \" + styles.lineHorizontal, { left: left + \"px\", top: top + \"px\", width: width + \"px\" }));\n                };\n                var addVertical = function() {\n                    lines.push(that._line(styles.line + \" \" + styles.lineVertical, { left: left + \"px\", top: top + \"px\", height: height + \"px\" }));\n                };\n\n                left = from.end;\n                top = fromTop;\n                width = minLineWidth;\n\n                if (reverse) {\n                    left += arrowOverlap;\n\n                    if (delta > minDistance) {\n                        width = delta - (minLineWidth - overlap);\n                    }\n\n                    width -= arrowOverlap;\n                }\n\n                addHorizontal();\n                left += width - overlap;\n\n                if ((delta) <= minDistance) {\n                    height = reverse ? Math.abs(toTop - fromTop) - minLineHeight : minLineHeight;\n\n                    if (toTop < fromTop) {\n                        top -= height;\n\n                        height += overlap;\n\n                        addVertical();\n                    } else {\n                        addVertical();\n                        top += height;\n                    }\n\n                    width = (from.end - to.start) + minDistance;\n\n                    if (width < minLineWidth) {\n                        width = minLineWidth;\n                    }\n\n                    left -= width - overlap;\n\n                    addHorizontal();\n                }\n\n                if (toTop < fromTop) {\n                    height = top - toTop;\n                    top = toTop;\n\n                    height += overlap;\n\n                    addVertical();\n                } else {\n                    height = toTop - top;\n                    addVertical();\n                    top += height;\n                }\n\n                width = to.start - left;\n\n                if (!reverse) {\n                    width -= arrowOverlap;\n                }\n\n                addHorizontal();\n\n                return lines;\n            },\n\n            _line: function(className, styles) {\n                return kendoDomElement(\"div\", { className: className, style: styles });\n            },\n\n            _arrow: function(direction) {\n                return kendoDomElement(\"span\", { className: direction ? GanttView.styles.arrowWest : GanttView.styles.arrowEast });\n            },\n\n            _colgroup: function() {\n                var slots = this._timeSlots();\n                var count = slots.length;\n                var cols = [];\n\n                for (var i = 0; i < count; i++) {\n                    for (var j = 0, length = slots[i].span; j < length; j++) {\n                        cols.push(kendoDomElement(\"col\"));\n                    }\n                }\n\n                return kendoDomElement(\"colgroup\", null, cols);\n            },\n\n            _createDragHint: function(element) {\n                var styles = GanttView.styles;\n                var plannedElement;\n\n                this._dragHint = element\n                    .clone()\n                    .addClass(styles.dragHint)\n                    .css({\n                        \"cursor\": \"move\"\n                    });\n\n                plannedElement = this._dragHint.find(DOT + styles.taskPlanned);\n\n                plannedElement.css({\n                    \"visibility\": \"hidden\"\n                });\n\n                if (isRtl && element.find(DOT + styles.taskAdvanced).length > 0) {\n                    plannedElement.css({\n                        \"margin-right\": \"auto\",\n                        \"width\": 0\n                    });\n\n                    this._dragHint.find(DOT + styles.taskDotEnd).css({\n                        \"left\": 0\n                    });\n                }\n\n                element\n                    .closest(\"td\")\n                    .append(this._dragHint);\n            },\n\n            _updateDragHint: function(start) {\n                var left = this._offset(start);\n                this._dragHint\n                    .css({\n                        \"left\": left\n                    });\n            },\n\n            _removeDragHint: function() {\n                this._dragHint.remove();\n                this._dragHint = null;\n            },\n\n            _createResizeHint: function(task) {\n                var styles = GanttView.styles;\n                var taskTop = this._taskCoordinates[task.id].rowIndex * this._rowHeight;\n                var tooltipHeight;\n                var tooltipTop;\n                var options = this.options;\n                var messages = options.messages;\n\n                this._resizeHint = $(RESIZE_HINT({ styles: styles })).css({\n                    \"top\": 0,\n                    \"height\": this._contentHeight\n                });\n\n                this.content.append(this._resizeHint);\n\n                this._resizeTooltip = $(RESIZE_TOOLTIP_TEMPLATE({\n                    styles: styles,\n                    start: task.start,\n                    end: task.end,\n                    messages: messages.views,\n                    format: options.resizeTooltipFormat\n                }))\n                .css({\n                    \"z-index\": \"100002\",\n                    \"top\": 0,\n                    \"left\": 0\n                });\n\n                this.content.append(this._resizeTooltip);\n\n                this._resizeTooltipWidth = outerWidth(this._resizeTooltip);\n                tooltipHeight = outerHeight(this._resizeTooltip);\n\n                tooltipTop = taskTop - tooltipHeight;\n\n                if (tooltipTop < 0) {\n                    tooltipTop = taskTop + this._rowHeight;\n                }\n\n                this._resizeTooltipTop = tooltipTop;\n            },\n\n            _updateResizeHint: function(start, end, resizeStart) {\n                var left = this._offset(isRtl ? end : start);\n                var right = this._offset(isRtl ? start : end);\n                var width = right - left;\n                var tooltipLeft = (resizeStart !== isRtl) ? left : right;\n                var tablesWidth = this._tableWidth - kendo.support.scrollbar();\n                var tooltipWidth = this._resizeTooltipWidth;\n                var options = this.options;\n                var messages = options.messages;\n                var tableOffset = this.element.find(DOT + GanttView.styles.tasksTable).offset().left - this.element.find(DOT + GanttView.styles.tasksWrapper).offset().left;\n\n                if (isRtl) {\n                    left += tableOffset;\n                }\n\n                this._resizeHint\n                    .css({\n                        \"left\": left,\n                        \"width\": width\n                    });\n\n                if (this._resizeTooltip) {\n                    this._resizeTooltip.remove();\n                }\n\n                tooltipLeft -= Math.round(tooltipWidth / 2);\n\n                if (tooltipLeft < 0) {\n                    tooltipLeft = 0;\n                } else if (tooltipLeft + tooltipWidth > tablesWidth) {\n                    tooltipLeft = tablesWidth - tooltipWidth;\n                }\n\n                if (isRtl) {\n                    tooltipLeft += tableOffset;\n                }\n\n                this._resizeTooltip = $(RESIZE_TOOLTIP_TEMPLATE({\n                    styles: GanttView.styles,\n                    start: start,\n                    end: end,\n                    messages: messages.views,\n                    format: options.resizeTooltipFormat\n                }))\n                .css({\n                    \"z-index\": \"100002\",\n                    \"top\": this._resizeTooltipTop,\n                    \"left\": tooltipLeft,\n                    \"min-width\": tooltipWidth\n                })\n                .appendTo(this.content);\n            },\n\n            _removeResizeHint: function() {\n                this._resizeHint.remove();\n                this._resizeHint = null;\n\n                this._resizeTooltip.remove();\n                this._resizeTooltip = null;\n            },\n\n            _updatePercentCompleteTooltip: function(top, left, text) {\n                this._removePercentCompleteTooltip();\n\n                var tooltip = this._percentCompleteResizeTooltip = $(PERCENT_RESIZE_TOOLTIP_TEMPLATE({ styles: GanttView.styles, text: text }));\n                kendo.applyStylesFromKendoAttributes(tooltip, [\"z-index\", \"left\"]);\n                tooltip.appendTo(this.element);\n\n                var tooltipMiddle = Math.round(outerWidth(tooltip) / 2);\n                var arrow = tooltip.find(DOT + GanttView.styles.callout);\n                var arrowHeight = Math.round(outerWidth(arrow) / 2);\n\n                tooltip.css({\n                    \"top\": top - (outerHeight(tooltip) + arrowHeight),\n                    \"left\": left - tooltipMiddle\n                });\n\n                arrow.css(\"left\", tooltipMiddle - arrowHeight);\n            },\n\n            _removePercentCompleteTooltip: function() {\n                if (this._percentCompleteResizeTooltip) {\n                    this._percentCompleteResizeTooltip.remove();\n                }\n\n                this._percentCompleteResizeTooltip = null;\n            },\n\n            _updateDependencyDragHint: function(from, to) {\n                this._removeDependencyDragHint();\n\n                this._creteDependencyDragHint(from, to);\n            },\n\n            _creteDependencyDragHint: function(from, to) {\n                var styles = GanttView.styles;\n\n                var deltaX = to.x - from.x;\n                var deltaY = to.y - from.y;\n\n                var width = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n                var angle = Math.atan(deltaY / deltaX);\n\n                if (deltaX < 0) {\n                    angle += Math.PI;\n                }\n\n                $(\"<div class='\" + styles.line + \" \" + styles.lineHorizontal + \" \" + styles.dependencyHint + \"'></div>\")\n                    .css({\n                        \"top\": from.y,\n                        \"left\": from.x,\n                        \"width\": width,\n                        \"transform-origin\": \"0% 0\",\n                        \"-ms-transform-origin\": \"0% 0\",\n                        \"-webkit-transform-origin\": \"0% 0\",\n                        \"transform\": \"rotate(\" + angle + \"rad)\",\n                        \"-ms-transform\": \"rotate(\" + angle + \"rad)\",\n                        \"-webkit-transform\": \"rotate(\" + angle + \"rad)\"\n                    })\n                    .appendTo(this.content);\n            },\n\n            _removeDependencyDragHint: function() {\n                this.content.find(DOT + GanttView.styles.dependencyHint).remove();\n            },\n\n            _createTaskTooltip: function(task, element, mouseLeft) {\n                var styles = GanttView.styles;\n                var options = this.options;\n                var content = this.content;\n                var contentOffset = content.offset();\n                var contentScrollLeft = kendo.scrollLeft(content);\n                var row = $(element).parents(\"tr\").first();\n                var rowOffset = row.offset();\n                var template = (options.tooltip && options.tooltip.template) ? kendo.template(options.tooltip.template) : TASK_TOOLTIP_TEMPLATE;\n                var left = isRtl ? mouseLeft - (contentOffset.left + contentScrollLeft + kendo.support.scrollbar())\n                    : mouseLeft - (contentOffset.left - contentScrollLeft);\n                var top = (rowOffset.top + outerHeight(row) - contentOffset.top) + content.scrollTop();\n                var tooltip = this._taskTooltip = $('<div class=\"' + styles.tooltipWrapper + '\" >' +\n                                       '<div class=\"' + styles.taskContent + '\"></div></div>');\n\n                tooltip\n                    .css({\n                        \"z-index\": \"100002\",\n                        \"left\": left,\n                        \"top\": top\n                    })\n                    .appendTo(content)\n                    .find(DOT + styles.taskContent)\n                    .append(template({\n                        styles: styles,\n                        task: task,\n                        messages: options.messages.views\n                    }));\n\n                this._adjustTooltipDimensions(tooltip, rowOffset, contentOffset, left, contentScrollLeft);\n            },\n\n            _removeTaskTooltip: function() {\n                if (this._taskTooltip) {\n                    this._taskTooltip.remove();\n                }\n\n                this._taskTooltip = null;\n            },\n\n            _createOffsetTooltip: function(task, element, mouseLeft) {\n                var styles = GanttView.styles;\n                var content = this.content;\n                var contentOffset = content.offset();\n                var contentScrollLeft = kendo.scrollLeft(content);\n                var row = element.parents(\"tr\").first();\n                var rowOffset = row.offset();\n                var left = isRtl ? mouseLeft - (contentOffset.left + contentScrollLeft + kendo.support.scrollbar())\n                    : mouseLeft - (contentOffset.left - contentScrollLeft);\n                var top = (rowOffset.top + outerHeight(row) - contentOffset.top) + content.scrollTop();\n                var tooltip = this._offsetTooltip = $('<div class=\"' + styles.tooltipWrapper + '\" ></div>');\n                var offsetValue = Math.round((task.end.getTime() - task.plannedEnd.getTime()) / 60000);\n                var plannedTasksMessages = this.options.messages.plannedTasks;\n                var minutes = offsetValue % 60;\n                var offsetText = minutes + \" \" + plannedTasksMessages.minutes;\n                var hours, days;\n\n                if (offsetValue >= 60) {\n                    hours = offsetValue = Math.floor(offsetValue / 60);\n\n                    offsetText = hours + \" \" + plannedTasksMessages.hours;\n\n                    if (minutes !== 0) {\n                        offsetText += (\" \" + minutes + \" \" + plannedTasksMessages.minutes);\n                    }\n\n                    if (offsetValue >= 24) {\n                        hours = offsetValue % 24;\n                        days = offsetValue = Math.floor(offsetValue / 24);\n\n                        offsetText = days + \" \" + plannedTasksMessages.days;\n\n                        if (hours !== 0) {\n                            offsetText += (\" \" + hours + \" \" + plannedTasksMessages.hours);\n                        }\n                    }\n                }\n\n                tooltip\n                    .css({\n                        \"z-index\": \"100002\",\n                        \"left\": left,\n                        \"top\": top\n                    })\n                    .addClass(styles.offsetTooltipDelay)\n                    .appendTo(content)\n                    .append(OFFSET_TOOLTIP_TEMPLATE({\n                        offsetPrefix: plannedTasksMessages.offsetTooltipDelay,\n                        offsetText: offsetText\n                    }));\n\n                this._adjustTooltipDimensions(tooltip, rowOffset, contentOffset, left, contentScrollLeft);\n            },\n\n            _removeOffsetTooltip: function() {\n                if (this._offsetTooltip) {\n                    this._offsetTooltip.remove();\n                }\n\n                this._offsetTooltip = null;\n            },\n\n            _createPlannedTooltip: function(task, element, mouseLeft) {\n                var styles = GanttView.styles;\n                var content = this.content;\n                var contentOffset = content.offset();\n                var contentScrollLeft = kendo.scrollLeft(content);\n                var row = element.parents(\"tr\").first();\n                var rowOffset = row.offset();\n                var left = isRtl ? mouseLeft - (contentOffset.left + contentScrollLeft + kendo.support.scrollbar())\n                    : mouseLeft - (contentOffset.left - contentScrollLeft);\n                var top = (rowOffset.top + outerHeight(row) - contentOffset.top) + content.scrollTop();\n                var tooltip = this._plannedTooltip = $('<div class=\"' + styles.tooltipWrapper + ' ' + styles.plannedTooltip + '\" ></div>');\n                var editorMessages = this.options.messages.editor;\n\n                tooltip\n                    .css({\n                        \"z-index\": \"100002\",\n                        \"left\": left,\n                        \"top\": top\n                    })\n                    .appendTo(content)\n                    .append(PLANNED_TOOLTIP_TEMPLATE({\n                        plannedStart: editorMessages.plannedStart,\n                        startDate: kendo.toString(task.plannedStart, \"H:mm tt ddd, MMM dd\"),\n                        plannedEnd: editorMessages.plannedEnd,\n                        endDate: kendo.toString(task.plannedEnd, \"H:mm tt ddd, MMM dd\")\n                    }));\n\n                this._adjustTooltipDimensions(tooltip, rowOffset, contentOffset, left, contentScrollLeft);\n            },\n\n            _removePlannedTooltip: function() {\n                if (this._plannedTooltip) {\n                    this._plannedTooltip.remove();\n                }\n\n                this._plannedTooltip = null;\n            },\n\n            _adjustTooltipDimensions: function(tooltip, rowOffset, contentOffset, left, contentScrollLeft) {\n                var content = this.content;\n                var contentWidth = content.width();\n                var tooltipWidth;\n\n                if (outerHeight(tooltip) < rowOffset.top - contentOffset.top) {\n                    tooltip.css(\"top\", ((rowOffset.top - contentOffset.top) - outerHeight(tooltip)) + content.scrollTop());\n                }\n\n                tooltipWidth = outerWidth(tooltip);\n\n                if ((tooltipWidth + left) - contentScrollLeft > contentWidth) {\n                    left -= tooltipWidth;\n\n                    if (left < contentScrollLeft) {\n                        left = (contentScrollLeft + contentWidth) - (tooltipWidth + 17);\n                    }\n\n                    tooltip.css(\"left\", left);\n                }\n            },\n\n            _scrollTo: function(element) {\n                var elementLeft = element.offset().left;\n                var elementWidth = element.width();\n                var elementRight = elementLeft + elementWidth;\n\n                var row = element.closest(\"tr\");\n                var rowTop = row.offset().top;\n                var rowHeight = row.height();\n                var rowBottom = rowTop + rowHeight;\n\n                var content = this.content;\n                var contentOffset = content.offset();\n                var contentTop = contentOffset.top;\n                var contentHeight = content.height();\n                var contentBottom = contentTop + contentHeight;\n                var contentLeft = contentOffset.left;\n                var contentWidth = content.width();\n                var contentRight = contentLeft + contentWidth;\n\n                var scrollbarWidth = kendo.support.scrollbar();\n\n                if (rowTop < contentTop) {\n                    content.scrollTop(content.scrollTop() + (rowTop - contentTop));\n                } else if (rowBottom > contentBottom) {\n                    content.scrollTop(content.scrollTop() + (rowBottom + scrollbarWidth - contentBottom));\n                }\n\n                if (elementLeft < contentLeft && elementWidth > contentWidth && elementRight < contentRight ||\n                    elementRight > contentRight && elementWidth < contentWidth) {\n                        kendo.scrollLeft(content, kendo.scrollLeft(content) + (elementRight + scrollbarWidth - contentRight));\n                } else if (elementRight > contentRight && elementWidth > contentWidth && elementLeft > contentLeft ||\n                    elementLeft < contentLeft && elementWidth < contentWidth) {\n                kendo.scrollLeft(content, kendo.scrollLeft(content) + (elementLeft - contentLeft));\n                }\n            },\n\n            _scrollToDate: function(date) {\n                var viewStart = this.start;\n                var viewEnd = this.end;\n                var offset;\n\n                if (date >= viewStart && date < viewEnd) {\n                    offset = this._offset(date);\n\n                    if (kendo.support.isRtl(this.element)) {\n                        offset = this._tableWidth - offset;\n                    }\n\n                    kendo.scrollLeft(this.content, offset);\n                }\n            },\n\n            _timeSlots: function() {\n                if (!this._slots || !this._slots.length) {\n                    return [];\n                }\n\n                return this._slots[this._slots.length - 1];\n            },\n\n            _headers: function(columnLevels) {\n                var rows = [];\n                var level;\n                var headers;\n                var column;\n                var headerText;\n                var styles = GanttView.styles;\n\n                for (var levelIndex = 0, levelCount = columnLevels.length; levelIndex < levelCount; levelIndex++) {\n                    level = columnLevels[levelIndex];\n                    headers = [];\n\n                    for (var columnIndex = 0, columnCount = level.length; columnIndex < columnCount; columnIndex++) {\n                        column = level[columnIndex];\n\n                        headerText = kendoHtmlElement(column.text);\n                        headers.push(kendoDomElement(\"td\", { colspan: column.span, className: styles.header + (column.isNonWorking ? (\" \" + styles.nonWorking) : \"\") }, [headerText]));\n                    }\n\n                    rows.push(kendoDomElement(\"tr\", { className: styles.tableRow }, headers));\n                }\n\n                return rows;\n            },\n\n            _hours: function(start, end) {\n                var slotEnd;\n                var slots = [];\n                var options = this.options;\n                var workDayStart = options.workDayStart.getHours();\n                var workDayEnd = options.workDayEnd.getHours();\n                var isWorkHour;\n                var hours;\n                var hourSpan = options.hourSpan;\n\n                start = new Date(start);\n                end = new Date(end);\n\n                if (options.showWorkHours) {\n                    start.setHours(workDayStart);\n                }\n\n                while (start < end) {\n                    slotEnd = new Date(start);\n                    hours = slotEnd.getHours();\n\n                    isWorkHour = hours >= workDayStart && hours < workDayEnd;\n\n                    slotEnd.setHours(slotEnd.getHours() + hourSpan);\n\n                    if (hours == slotEnd.getHours()) {\n                        // Chrome DTS Fix\n                        slotEnd.setHours(slotEnd.getHours() + 2 * hourSpan);\n                    }\n\n                    if (!options.showWorkHours || isWorkHour) {\n                        slots.push({\n                            start: start,\n                            end: slotEnd,\n                            isNonWorking: !isWorkHour,\n                            span: 1\n                        });\n                    }\n\n                    start = slotEnd;\n                }\n\n                return slots;\n            },\n\n            _days: function(start, end) {\n                var slotEnd;\n                var slots = [];\n                var isWorkDay;\n\n                start = new Date(start);\n                end = new Date(end);\n\n                while (start < end) {\n                    slotEnd = end < kendo.date.nextDay(start) ? end : kendo.date.nextDay(start);\n\n                    isWorkDay = this._isWorkDay(start);\n\n                    if (!this.options.showWorkDays || isWorkDay) {\n                        slots.push({\n                            start: start,\n                            end: slotEnd,\n                            isNonWorking: !isWorkDay,\n                            span: 1\n                        });\n                    }\n\n                    start = slotEnd;\n                }\n\n                return slots;\n            },\n\n            _weeks: function(start, end) {\n                var slotEnd;\n                var slots = [];\n                var firstDay = this.calendarInfo().firstDay;\n                var daySlots;\n                var span;\n\n                start = new Date(start);\n                end = new Date(end);\n\n                while (start < end) {\n                    slotEnd = kendo.date.dayOfWeek(kendo.date.addDays(start, 1), firstDay, 1);\n\n                    if (slotEnd > end) {\n                        slotEnd = end;\n                    }\n\n                    daySlots = this._days(start, slotEnd);\n                    span = daySlots.length;\n\n                    if (span > 0) {\n                        slots.push({\n                            start: daySlots[0].start,\n                            end: daySlots[span - 1].end,\n                            span: span\n                        });\n                    }\n\n                    start = slotEnd;\n                }\n\n                return slots;\n            },\n\n            _months: function(start, end) {\n                var slotEnd;\n                var endMonth;\n                var slots = [];\n                var daySlots;\n                var span;\n\n                start = new Date(start);\n                end = new Date(end);\n\n                while (start < end) {\n                    slotEnd = new Date(start);\n                    endMonth = kendo.date.firstDayOfMonth(new Date(slotEnd.setMonth(slotEnd.getMonth() + 1)));\n                    slotEnd = end < endMonth ? end : endMonth;\n\n                    daySlots = this._days(start, slotEnd);\n                    span = daySlots.length;\n\n                    if (span > 0) {\n                        slots.push({\n                            start: daySlots[0].start,\n                            end: daySlots[span - 1].end,\n                            span: span\n                        });\n                    }\n\n                    start = slotEnd;\n                }\n\n                return slots;\n            },\n\n            _years: function(start, end) {\n                var slotEnd;\n                var monthSpan;\n                var endMonth;\n                var slots = [];\n\n                start = new Date(start);\n                end = new Date(end);\n\n                while (start < end) {\n                    slotEnd = new Date(start);\n                    slotEnd = kendo.date.firstDayOfMonth(new Date(slotEnd.setMonth(12)));\n\n                    if (slotEnd >= end) {\n                        slotEnd = end;\n                    }\n\n                    endMonth = slotEnd.getMonth() || 12;\n                    monthSpan = endMonth - start.getMonth();\n\n                    slots.push({\n                        start: start,\n                        end: slotEnd,\n                        span: monthSpan\n                    });\n\n                    start = slotEnd;\n                }\n\n                return slots;\n            },\n\n            _slotHeaders: function(slots, template) {\n                var columns = [];\n                var slot;\n\n                for (var i = 0, l = slots.length; i < l; i++) {\n                    slot = slots[i];\n\n                    columns.push({\n                        text: template(slot),\n                        isNonWorking: !!slot.isNonWorking,\n                        span: slot.span\n                    });\n                }\n\n                return columns;\n            },\n\n            _isWorkDay: function(date) {\n                var day = date.getDay();\n                var workDays = this._workDays;\n\n                for (var i = 0, l = workDays.length; i < l; i++) {\n                    if (workDays[i] === day) {\n                        return true;\n                    }\n                }\n\n                return false;\n            },\n\n            calendarInfo: function() {\n                return kendo.getCulture().calendars.standard;\n            },\n\n            _renderCurrentTime: function() {\n                var currentTime = this._getCurrentTime();\n                var timeOffset = this._offset(currentTime);\n                var element = $(\"<div class='k-current-time'></div>\");\n                var viewStyles = GanttView.styles;\n                var tablesWrap = this.element.find(DOT + viewStyles.tasksWrapper);\n                var tasksTable = this.element.find(DOT + viewStyles.tasksTable);\n                var slot;\n\n                if (!this.content || !this._timeSlots().length) {\n                    return;\n                }\n\n                this.content.find(\".k-current-time\").remove();\n\n                slot = this._timeSlots()[this._slotIndex(\"start\", currentTime)];\n\n                if (currentTime < slot.start || currentTime > slot.end) {\n                    return;\n                }\n\n                if (tablesWrap.length && tasksTable.length) {\n                    timeOffset += tasksTable.offset().left - tablesWrap.offset().left;\n                }\n\n                element.css({\n                    left: timeOffset + \"px\",\n                    top: \"0px\",\n                    width: \"1px\",\n                    height: this._contentHeight + \"px\"\n                })\n                .appendTo(this.content);\n            },\n\n            _getCurrentTime: function() {\n                // Introduced for testing purposes\n                return new Date();\n            },\n\n            _currentTime: function() {\n                var markerOptions = this.options.currentTimeMarker;\n\n                if (markerOptions !== false && markerOptions.updateInterval !== undefined) {\n                    this._renderCurrentTime();\n                    this._currentTimeUpdateTimer = setInterval(this._renderCurrentTime.bind(this), markerOptions.updateInterval);\n                }\n            }\n        });\n\n        extend(true, GanttView, { styles: viewStyles });\n\n        kendo.ui.GanttDayView = GanttView.extend({\n            name: \"day\",\n\n            options: {\n                timeHeaderTemplate: TIME_HEADER_TEMPLATE,\n                dayHeaderTemplate: DAY_HEADER_TEMPLATE,\n                resizeTooltipFormat: \"h:mm tt ddd, MMM d\"\n            },\n\n            range: function(range) {\n                var optionsRange = this.options.range;\n                this.start = kendo.date.getDate(range.start);\n                this.end = kendo.date.getDate(range.end);\n\n                if (kendo.date.getMilliseconds(range.end) > 0 || this.end.getTime() === this.start.getTime()) {\n                    this.end = kendo.date.addDays(this.end, 1);\n                }\n\n                if (optionsRange && optionsRange.start) {\n                    this.start = kendo.date.getDate(optionsRange.start);\n                    this.start.setHours(optionsRange.start.getHours());\n                }\n\n                if (optionsRange && optionsRange.end) {\n                    this.end = kendo.date.getDate(optionsRange.end);\n                    this.end.setHours(optionsRange.end.getHours());\n                }\n            },\n\n            _createSlots: function() {\n                var daySlots;\n                var daySlot;\n                var hourSlots;\n                var hours;\n                var slots = [];\n\n                daySlots = this._days(this.start, this.end);\n                hourSlots = [];\n\n                for (var i = 0, l = daySlots.length; i < l; i++) {\n                    daySlot = daySlots[i];\n                    hours = this._hours(daySlot.start, daySlot.end);\n\n                    daySlot.span = hours.length;\n\n                    hourSlots.push.apply(hourSlots, hours);\n                }\n\n                slots.push(daySlots);\n                slots.push(hourSlots);\n\n                return slots;\n            },\n\n            _layout: function() {\n                var rows = [];\n                var options = this.options;\n\n                rows.push(this._slotHeaders(this._slots[0], kendo.template(options.dayHeaderTemplate)));\n                rows.push(this._slotHeaders(this._slots[1], kendo.template(options.timeHeaderTemplate)));\n\n                return rows;\n            }\n        });\n\n        kendo.ui.GanttWeekView = GanttView.extend({\n            name: \"week\",\n\n            options: {\n                dayHeaderTemplate: DAY_HEADER_TEMPLATE,\n                weekHeaderTemplate: WEEK_HEADER_TEMPLATE,\n                resizeTooltipFormat: \"h:mm tt ddd, MMM d\"\n            },\n\n            range: function(range) {\n                var optionsRange = this.options.range;\n                var calendarInfo = this.calendarInfo();\n                var firstDay = calendarInfo.firstDay;\n                var rangeEnd = range.end;\n                var endDay;\n\n                if (firstDay === rangeEnd.getDay()) {\n                    rangeEnd.setDate(rangeEnd.getDate() + 7);\n                }\n\n                this.start = kendo.date.getDate(kendo.date.dayOfWeek(range.start, firstDay, -1));\n                this.end = kendo.date.getDate(kendo.date.dayOfWeek(rangeEnd, firstDay, 1));\n\n                if (optionsRange && optionsRange.start) {\n                    this.start = kendo.date.getDate(optionsRange.start);\n                }\n\n                if (optionsRange && optionsRange.end) {\n                    endDay = new Date(optionsRange.end);\n\n                    if (kendo.date.getDate(endDay) < optionsRange.end) {\n                        this.end = kendo.date.getDate(new Date(endDay.setDate(endDay.getDate() + 1)));\n                    } else {\n                        this.end = kendo.date.getDate(endDay);\n                    }\n                }\n            },\n\n            _createSlots: function() {\n                var slots = [];\n\n                slots.push(this._weeks(this.start, this.end));\n                slots.push(this._days(this.start, this.end));\n\n                return slots;\n            },\n\n            _layout: function() {\n                var rows = [];\n                var options = this.options;\n\n                rows.push(this._slotHeaders(this._slots[0], kendo.template(options.weekHeaderTemplate)));\n                rows.push(this._slotHeaders(this._slots[1], kendo.template(options.dayHeaderTemplate)));\n\n                return rows;\n            }\n        });\n\n        kendo.ui.GanttMonthView = GanttView.extend({\n            name: \"month\",\n\n            options: {\n                weekHeaderTemplate: WEEK_HEADER_TEMPLATE,\n                monthHeaderTemplate: MONTH_HEADER_TEMPLATE,\n                resizeTooltipFormat: \"dddd, MMM d, yyyy\"\n            },\n\n            range: function(range) {\n                var optionsRange = this.options.range;\n                var endDay;\n                this.start = kendo.date.firstDayOfMonth(range.start);\n                this.end = kendo.date.addDays(kendo.date.getDate(kendo.date.lastDayOfMonth(range.end)), 1);\n\n                if (optionsRange && optionsRange.start) {\n                    this.start = kendo.date.getDate(optionsRange.start);\n                }\n\n                if (optionsRange && optionsRange.end) {\n                    endDay = new Date(optionsRange.end);\n\n                    if (kendo.date.getDate(endDay) < optionsRange.end) {\n                        this.end = kendo.date.getDate(new Date(endDay.setDate(endDay.getDate() + 1)));\n                    } else {\n                        this.end = kendo.date.getDate(endDay);\n                    }\n                }\n            },\n\n            _createSlots: function() {\n                var slots = [];\n\n                slots.push(this._months(this.start, this.end));\n                slots.push(this._weeks(this.start, this.end));\n\n                return slots;\n            },\n\n            _layout: function() {\n                var rows = [];\n                var options = this.options;\n\n                rows.push(this._slotHeaders(this._slots[0], kendo.template(options.monthHeaderTemplate)));\n                rows.push(this._slotHeaders(this._slots[1], kendo.template(options.weekHeaderTemplate)));\n\n                return rows;\n            }\n        });\n\n        kendo.ui.GanttYearView = GanttView.extend({\n            name: \"year\",\n\n            options: {\n                yearHeaderTemplate: YEAR_HEADER_TEMPLATE,\n                monthHeaderTemplate: MONTH_HEADER_TEMPLATE,\n                resizeTooltipFormat: \"dddd, MMM d, yyyy\"\n            },\n\n            range: function(range) {\n                var optionsRange = this.options.range;\n                var firstDayOfMonth;\n                this.start = kendo.date.firstDayOfMonth(new Date(range.start.setMonth(0)));\n                this.end = kendo.date.firstDayOfMonth(new Date(range.end.setMonth(12))); //set month to first month of next year\n\n                if (optionsRange && optionsRange.start) {\n                    this.start = kendo.date.firstDayOfMonth(optionsRange.start);\n                }\n\n                if (optionsRange && optionsRange.end) {\n                    firstDayOfMonth = kendo.date.firstDayOfMonth(optionsRange.end);\n\n                    this.end = kendo.date.getDate(new Date(firstDayOfMonth.setMonth(firstDayOfMonth.getMonth() + 1)));\n                }\n            },\n\n            _createSlots: function() {\n                var slots = [];\n                var monthSlots = this._months(this.start, this.end);\n\n                $(monthSlots).each(function(index, slot) {\n                    slot.span = 1;\n                });\n\n                slots.push(this._years(this.start, this.end));\n                slots.push(monthSlots);\n\n                return slots;\n            },\n\n            _layout: function() {\n                var rows = [];\n                var options = this.options;\n\n                rows.push(this._slotHeaders(this._slots[0], kendo.template(options.yearHeaderTemplate)));\n                rows.push(this._slotHeaders(this._slots[1], kendo.template(options.monthHeaderTemplate)));\n\n                return rows;\n            }\n        });\n\n        var timelineStyles = {\n            wrapper: \"k-gantt-timeline k-grid\",\n            gridHeader: \"k-grid-header\",\n            gridHeaderWrap: \"k-grid-header-wrap\",\n            gridContent: \"k-grid-content\",\n            gridContentWrap: \"k-grid-content\",\n            tasksWrapper: \"k-gantt-tables\",\n            dependenciesWrapper: \"k-gantt-dependencies\",\n            task: \"k-task\",\n            taskOffset: \"k-task-offset\",\n            taskOffsetWrap: \"k-task-offset-wrap\",\n            taskPlanned: \"k-task-planned\",\n            line: \"k-gantt-line\",\n            taskResizeHandle: \"k-resize-handle\",\n            taskResizeHandleWest: \"k-resize-w\",\n            taskDragHandle: \"k-task-draghandle\",\n            taskComplete: \"k-task-complete\",\n            taskDelete: \"k-task-delete\",\n            taskWrapActive: \"k-task-wrap-active\",\n            taskWrap: \"k-task-wrap\",\n            taskDot: \"k-task-dot\",\n            taskDotStart: \"k-task-start\",\n            taskDotEnd: \"k-task-end\",\n            hovered: \"k-hover\",\n            selected: \"k-selected\",\n            origin: \"k-origin\"\n        };\n\n        var GanttTimeline = kendo.ui.GanttTimeline = Widget.extend({\n            init: function(element, options) {\n\n                Widget.fn.init.call(this, element, options);\n\n                if (!this.options.views || !this.options.views.length) {\n                    this.options.views = [\"day\", \"week\", \"month\"];\n                }\n\n                isRtl = kendo.support.isRtl(element);\n\n                this._wrapper();\n\n                this._domTrees();\n\n                this._views();\n\n                this._selectable();\n\n                this._draggable();\n\n                this._resizable();\n\n                this._percentResizeDraggable();\n\n                this._createDependencyDraggable();\n\n                this._attachEvents();\n\n                this._navigatable();\n\n                this._tooltip();\n            },\n\n            options: {\n                name: \"GanttTimeline\",\n                messages: {\n                    views: {\n                        day: \"Day\",\n                        week: \"Week\",\n                        month: \"Month\",\n                        year: \"Year\",\n                        start: \"Start\",\n                        end: \"End\"\n                    }\n                },\n                snap: true,\n                selectable: true,\n                editable: true\n            },\n\n            destroy: function() {\n                Widget.fn.destroy.call(this);\n\n                clearTimeout(this._tooltipTimeout);\n\n                if (this._currentTimeUpdateTimer) {\n                    clearInterval(this._currentTimeUpdateTimer);\n                }\n\n                this._unbindView(this._selectedView);\n\n                if (this._moveDraggable) {\n                    this._moveDraggable.destroy();\n                }\n\n                if (this._resizeDraggable) {\n                    this._resizeDraggable.destroy();\n                }\n\n                if (this._percentDraggable) {\n                    this._percentDraggable.destroy();\n                }\n\n                if (this._dependencyDraggable) {\n                    this._dependencyDraggable.destroy();\n                }\n\n                if (this.touch) {\n                    this.touch.destroy();\n                }\n\n                this._headerTree = null;\n                this._taskTree = null;\n                this._dependencyTree = null;\n\n                this.wrapper.off(NS);\n\n                kendo.destroy(this.wrapper);\n            },\n\n            _findNext: function(row) {\n                return row.next().find(\".k-task\");\n            },\n\n            _findFirst: function(row) {\n                return row.closest(\".k-table-tbody\").find(\".k-task\").first();\n            },\n\n            _findLast: function(row) {\n                return row.closest(\".k-table-tbody\").find(\".k-task\").last();\n            },\n\n            _findPrev: function(row) {\n                return row.prev().find(\".k-task\");\n            },\n\n            _scrollTasks: function(dir) {\n                var that = this;\n                var timelineWrapper = that.wrapper;\n                var timelineScroll = kendo.scrollLeft(timelineWrapper.find(\".k-grid-content\"));\n\n                kendo.scrollLeft(timelineWrapper.find(\".k-grid-content\"), (timelineScroll + (20 * dir)));\n            },\n\n            _navigatable: function() {\n                var that = this;\n                if (!that.options.navigatable) {\n                    return;\n                }\n\n                that.wrapper.on(\"keydown\" + NS, \".k-gantt-tables .k-gantt-tasks .k-task\", function(e) {\n                    var target = $(e.target);\n                    var row = target.closest(\".k-table-row\");\n                    var handled = false;\n                    var newTask;\n\n                    if (e.keyCode == keys.HOME) {\n                        newTask = that._findFirst(row);\n                    }\n\n                    if (e.keyCode == keys.END) {\n                        newTask = that._findLast(row);\n                    }\n\n                    if (e.keyCode == keys.DOWN) {\n                        newTask = that._findNext(row);\n                    }\n\n                    if (e.keyCode == keys.UP) {\n                        newTask = that._findPrev(row);\n                    }\n\n                    if (newTask) {\n                        handled = true;\n                        if (newTask[0] !== target[0]) {\n                            target.closest(\".k-gantt-tasks\").find(\".k-task\").attr(\"tabindex\", -1);\n                            newTask.attr(\"tabindex\", 0);\n                            newTask.focus();\n                        }\n                    }\n\n                    if (e.keyCode == keys.LEFT) {\n                        if (e.altKey) {\n                            if (target.hasClass(\"k-task-summary\")) {\n                                that.trigger(\"collapse\", { uid: target.attr(\"data-uid\") });\n                                setTimeout(function() {\n                                    that.select().focus();\n                                }, 1);\n                            }\n                        } else {\n                            that._scrollTasks(-1);\n                        }\n                        handled = true;\n                    }\n\n                    if (e.keyCode == keys.RIGHT) {\n                        if (e.altKey) {\n                            if (target.hasClass(\"k-task-summary\")) {\n                                that.trigger(\"expand\", { uid: target.attr(\"data-uid\") });\n                                setTimeout(function() {\n                                    that.select().focus();\n                                }, 1);\n                            }\n                        } else {\n                            that._scrollTasks(1);\n                        }\n                        handled = true;\n                    }\n\n                    if (e.keyCode == keys.ENTER) {\n                        handled = true;\n                        if (that.options.editable.update !== false) {\n                            that.trigger(\"editTask\", { uid: target.attr(\"data-uid\") });\n                            e.stopPropagation();\n                        }\n                    }\n\n                    if (e.keyCode == keys.DELETE) {\n                        handled = true;\n                        if (that.options.editable.update !== false) {\n                            that.trigger(\"removeTask\", { uid: target.attr(\"data-uid\") });\n                            e.stopPropagation();\n                        }\n                    }\n\n                    if (handled) {\n                        e.preventDefault();\n                    }\n                })\n                .on(CLICK + NS, DOT + GanttTimeline.styles.task , function(e) {\n                    e.preventDefault();\n                    var task = $(this);\n\n                    that.wrapper.find(DOT + GanttTimeline.styles.task).attr(\"tabindex\", \"-1\");\n\n                    task.attr(\"tabindex\", \"0\").focus();\n                });\n            },\n\n\n            _wrapper: function() {\n                var styles = GanttTimeline.styles;\n                var that = this;\n                var options = this.options;\n                var calculateSize = function() {\n                    var rowHeight = typeof options.rowHeight === STRING ? options.rowHeight :\n                        options.rowHeight + \"px\";\n                    var table = $(kendo.format(SIZE_CALCULATION_TEMPLATE, rowHeight));\n                    var calculatedRowHeight;\n                    var calculatedCellHeight;\n                    var content = that.wrapper.find(DOT + styles.tasksWrapper);\n\n                    kendo.applyStylesFromKendoAttributes(table, [\"height\", \"visibility\"]);\n                    content.append(table);\n\n                    calculatedRowHeight = outerHeight(table.find(\"tr\"));\n                    calculatedCellHeight = table.find(\"td\").height();\n\n                    table.remove();\n\n                    return {\n                        \"row\": calculatedRowHeight,\n                        \"cell\": calculatedCellHeight\n                    };\n                };\n\n                this.wrapper = this.element\n                    .addClass(styles.wrapper)\n                    .append(\"<div class='\" + styles.gridHeader + \"'><div class='\" + styles.gridHeaderWrap + \"'></div></div>\")\n                    .append(\"<div role='tree' class='\" + styles.gridContentWrap + \"'><div class='\" + styles.tasksWrapper + \"'></div><div class='\" + styles.dependenciesWrapper + \"'></div></div>\");\n\n                if (options.rowHeight) {\n                    this._calculatedSize = calculateSize();\n                }\n            },\n\n            _domTrees: function() {\n                var styles = GanttTimeline.styles;\n                var tree = kendo.dom.Tree;\n                var wrapper = this.wrapper;\n\n                this._headerTree = new tree(wrapper.find(DOT + styles.gridHeaderWrap)[0]);\n\n                this._taskTree = new tree(wrapper.find(DOT + styles.tasksWrapper)[0]);\n\n                this._dependencyTree = new tree(wrapper.find(DOT + styles.dependenciesWrapper)[0]);\n            },\n\n            _views: function() {\n                var views = this.options.views;\n                var view;\n                var isSettings;\n                var name;\n                var defaultView;\n                var selected;\n\n                this.views = {};\n\n                for (var i = 0, l = views.length; i < l; i++) {\n                    view = views[i];\n\n                    isSettings = isPlainObject(view);\n\n                    if (isSettings && view.selectable === false) {\n                        continue;\n                    }\n\n                    name = isSettings ? ((typeof view.type !== \"string\") ? view.title : view.type) : view;\n\n                    defaultView = defaultViews[name];\n\n                    if (defaultView) {\n                        if (isSettings) {\n                            view.type = defaultView.type;\n                        }\n\n                        defaultView.title = this.options.messages.views[name];\n                    }\n\n                    view = extend({ title: name }, defaultView, isSettings ? view : {});\n\n                    if (name) {\n                        this.views[name] = view;\n\n                        if (!selected || view.selected) {\n                            selected = name;\n                        }\n                    }\n                }\n\n                if (selected) {\n                    this._selectedViewName = selected;\n                }\n            },\n\n            view: function(name) {\n                if (name) {\n                    this._selectView(name);\n\n                    this.trigger(\"navigate\", { view: name, action: \"changeView\" });\n                }\n\n                return this._selectedView;\n            },\n\n            _selectView: function(name) {\n                if (name && this.views[name]) {\n                    if (this._selectedView) {\n                        this._unbindView(this._selectedView);\n                    }\n\n                    this._selectedView = this._initializeView(name);\n                    this._selectedViewName = name;\n                }\n            },\n\n            _viewByIndex: function(index) {\n                var view;\n                var views = this.views;\n\n                for (view in views) {\n                    if (!index) {\n                        return view;\n                    }\n\n                    index--;\n                }\n            },\n\n            _initializeView: function(name) {\n                var view = this.views[name];\n\n                if (view) {\n                    var type = view.type;\n\n                    if (typeof type === \"string\") {\n                        type = kendo.getter(view.type)(window);\n                    }\n\n                    if (type) {\n                        var newRange = {};\n                        extend(newRange, this.options.range, view.range);\n\n                        var newDate = view.date || this.options.date;\n\n                        view = new type(this.wrapper, trimOptions(extend(true, {\n                            headerTree: this._headerTree,\n                            taskTree: this._taskTree,\n                            dependencyTree: this._dependencyTree,\n                            calculatedSize: this._calculatedSize\n                        }, view, this.options, {\n                            date: newDate,\n                            range: newRange\n                        })));\n                    } else {\n                        throw new Error(\"There is no such view\");\n                    }\n                }\n\n                return view;\n            },\n\n            _unbindView: function(view) {\n                if (view) {\n                    view.destroy();\n                }\n            },\n\n            _range: function(tasks) {\n                var startOrder = {\n                    field: \"start\",\n                    dir: \"asc\"\n                };\n                var endOrder = {\n                    field: \"end\",\n                    dir: \"desc\"\n                };\n\n                if (!tasks || !tasks.length) {\n                    return { start: new Date(), end: new Date() };\n                }\n\n                var start = new Query(tasks).sort(startOrder).toArray()[0].start || new Date();\n                var end = new Query(tasks).sort(endOrder).toArray()[0].end || new Date();\n\n                return {\n                    start: new Date(start),\n                    end: new Date(end)\n                };\n            },\n\n            _render: function(tasks) {\n                var view = this.view();\n                var range = this._range(tasks);\n                var date = view.options.date;\n\n                this._tasks = tasks;\n\n                view.range(range);\n\n                view.renderLayout();\n\n                view.render(tasks);\n\n                if (date) {\n                    view._scrollToDate(date);\n                }\n            },\n\n            _renderDependencies: function(dependencies) {\n                this.view()._renderDependencies(dependencies);\n            },\n\n            _taskByUid: function(uid) {\n                var tasks = this._tasks;\n                var length = tasks.length;\n                var task;\n\n                for (var i = 0; i < length; i++) {\n                    task = tasks[i];\n\n                    if (task.uid === uid) {\n                        return task;\n                    }\n                }\n            },\n\n            _draggable: function() {\n                var that = this;\n                var element;\n                var task;\n                var currentStart;\n                var startOffset;\n                var snap = this.options.snap;\n                var styles = GanttTimeline.styles;\n                var editable = this.options.editable;\n\n                var cleanUp = function() {\n                    that.view()._removeDragHint();\n\n                    if (element) {\n                        element.css(\"opacity\", 1);\n                    }\n\n                    element = null;\n                    task = null;\n                    that.dragInProgress = false;\n                };\n\n                if (!editable || editable.move === false || editable.update === false) {\n                    return;\n                }\n\n                this._moveDraggable = new kendo.ui.Draggable(this.wrapper, {\n                    distance: 0,\n                    filter: DOT + styles.task + \",\" + DOT + styles.taskOffset,\n                    holdToDrag: kendo.support.mobileOS,\n                    ignore: DOT + styles.taskResizeHandle\n                });\n\n                this._moveDraggable\n                    .bind(\"dragstart\", function(e) {\n                        var view = that.view();\n                        element = e.currentTarget.closest(DOT + styles.taskWrap);\n                        task = that._taskByUid(e.currentTarget.parent().find(DOT + styles.task).attr(\"data-uid\"));\n\n                        if (that.trigger(\"moveStart\", { task: task })) {\n                            e.preventDefault();\n                            return;\n                        }\n\n                        currentStart = task.start;\n                        startOffset = view._timeByPosition(e.x.location, snap) - currentStart;\n\n                        view._createDragHint(element);\n\n                        element.css(\"opacity\", 0.5);\n\n                        clearTimeout(that._tooltipTimeout);\n                        that.dragInProgress = true;\n                    })\n                    .bind(\"drag\", kendo.throttle(function(e) {\n                        if (!that.dragInProgress) {\n                            return;\n                        }\n\n                        var view = that.view();\n                        var date = new Date(view._timeByPosition(e.x.location, snap) - startOffset);\n                        var updateHintDate = date;\n\n                        if (!that.trigger(\"move\", { task: task, start: date })) {\n                            currentStart = date;\n\n                            if (isRtl) {\n                                updateHintDate = new Date(currentStart.getTime() + task.duration());\n                            }\n\n                            view._updateDragHint(updateHintDate);\n                        }\n                    }, 15))\n                    .bind(\"dragend\", function() {\n                        that.trigger(\"moveEnd\", { task: task, start: currentStart });\n\n                        cleanUp();\n                    })\n                    .bind(\"dragcancel\", function() {\n                        cleanUp();\n                    })\n                    .userEvents.bind(\"select\", function() {\n                        blurActiveElement();\n                    });\n            },\n\n            _resizable: function() {\n                var that = this;\n                var element;\n                var task;\n                var currentStart;\n                var currentEnd;\n                var resizeStart;\n                var snap = this.options.snap;\n                var styles = GanttTimeline.styles;\n                var editable = this.options.editable;\n\n                var cleanUp = function() {\n                    that.view()._removeResizeHint();\n                    element = null;\n                    task = null;\n                    that.dragInProgress = false;\n                };\n\n                if (!editable || editable.resize === false || editable.update === false) {\n                    return;\n                }\n\n                this._resizeDraggable = new kendo.ui.Draggable(this.wrapper, {\n                    distance: 0,\n                    filter: DOT + styles.taskResizeHandle,\n                    holdToDrag: false\n                });\n\n                this._resizeDraggable\n                    .bind(\"dragstart\", function(e) {\n                        resizeStart = e.currentTarget.hasClass(styles.taskResizeHandleWest);\n\n                        if (isRtl) {\n                            resizeStart = !resizeStart;\n                        }\n\n                        element = e.currentTarget.closest(DOT + styles.taskWrap).find(DOT + styles.task);\n\n                        task = that._taskByUid(element.attr(\"data-uid\"));\n\n                        if (that.trigger(\"resizeStart\", { task: task })) {\n                            e.preventDefault();\n                            return;\n                        }\n\n                        currentStart = task.start;\n                        currentEnd = task.end;\n\n                        that.view()._createResizeHint(task);\n\n                        clearTimeout(that._tooltipTimeout);\n                        that.dragInProgress = true;\n                    })\n                    .bind(\"drag\", kendo.throttle(function(e) {\n                        if (!that.dragInProgress) {\n                            return;\n                        }\n\n                        var view = that.view();\n                        var date = view._timeByPosition(e.x.location, snap, !resizeStart);\n\n                        if (resizeStart) {\n                            if (date < currentEnd) {\n                                currentStart = date;\n                            } else {\n                                currentStart = currentEnd;\n                            }\n                        } else {\n                            if (date > currentStart) {\n                                currentEnd = date;\n                            } else {\n                                currentEnd = currentStart;\n                            }\n                        }\n\n                        if (!that.trigger(\"resize\", { task: task, start: currentStart, end: currentEnd })) {\n                            view._updateResizeHint(currentStart, currentEnd, resizeStart);\n                        }\n                    }, 15))\n                    .bind(\"dragend\", function() {\n                        that.trigger(\"resizeEnd\", { task: task, resizeStart: resizeStart, start: currentStart, end: currentEnd });\n\n                        cleanUp();\n                    })\n                    .bind(\"dragcancel\", function() {\n                        cleanUp();\n                    })\n                    .userEvents.bind(\"select\", function() {\n                        blurActiveElement();\n                    });\n            },\n\n            _percentResizeDraggable: function() {\n                var that = this;\n                var task;\n                var taskElement;\n                var taskElementOffset;\n                var timelineOffset;\n                var originalPercentWidth;\n                var maxPercentWidth;\n                var currentPercentComplete;\n                var tooltipTop;\n                var tooltipLeft;\n                var styles = GanttTimeline.styles;\n                var delta;\n                var editable = this.options.editable;\n\n                var cleanUp = function() {\n                    that.view()._removePercentCompleteTooltip();\n                    taskElement = null;\n                    task = null;\n                    that.dragInProgress = false;\n                };\n\n                var updateElement = function(width) {\n                    var taskDragHandle = taskElement.siblings(DOT + styles.taskDragHandle);\n\n                    if (!taskDragHandle.length) {\n                        taskDragHandle = taskElement.closest(DOT + styles.taskWrap).find(DOT + styles.taskDragHandle);\n                    }\n\n                    taskDragHandle.css(isRtl ? \"right\" : \"left\", width);\n\n                    taskElement\n                        .find(DOT + styles.taskComplete)\n                        .width(width);\n                };\n\n                if (!editable || editable.dragPercentComplete === false || editable.update === false) {\n                    return;\n                }\n\n                this._percentDraggable = new kendo.ui.Draggable(this.wrapper, {\n                    distance: 0,\n                    filter: DOT + styles.taskDragHandle,\n                    holdToDrag: false\n                });\n\n                this._percentDraggable\n                    .bind(\"dragstart\", function(e) {\n                        if (that.trigger(\"percentResizeStart\")) {\n                            e.preventDefault();\n                            return;\n                        }\n\n                        taskElement = e.currentTarget.siblings(DOT + styles.task);\n\n                        if (!taskElement.length) {\n                            taskElement = e.currentTarget.closest(DOT + styles.taskWrap).find(DOT + styles.task);\n                        }\n\n                        task = that._taskByUid(taskElement.attr(\"data-uid\"));\n\n                        currentPercentComplete = task.percentComplete;\n\n                        taskElementOffset = taskElement.offset();\n                        timelineOffset = this.element.offset();\n\n                        originalPercentWidth = taskElement.find(DOT + styles.taskComplete).width();\n                        maxPercentWidth = outerWidth(taskElement);\n\n                        clearTimeout(that._tooltipTimeout);\n                        that.dragInProgress = true;\n                    })\n                    .bind(\"drag\", kendo.throttle(function(e) {\n                        if (!that.dragInProgress) {\n                            return;\n                        }\n\n                        delta = isRtl ? -e.x.initialDelta : e.x.initialDelta;\n\n                        var currentWidth = Math.max(0, Math.min(maxPercentWidth, originalPercentWidth + delta));\n\n                        currentPercentComplete = Math.round((currentWidth / maxPercentWidth) * 100);\n\n                        updateElement(currentWidth);\n\n                        tooltipTop = taskElementOffset.top - timelineOffset.top;\n                        tooltipLeft = taskElementOffset.left + currentWidth - timelineOffset.left;\n\n                        if (isRtl) {\n                            tooltipLeft += (maxPercentWidth - 2 * currentWidth);\n                        }\n\n                        that.view()._updatePercentCompleteTooltip(tooltipTop, tooltipLeft, currentPercentComplete);\n                    }, 15))\n                    .bind(\"dragend\", function() {\n                        that.trigger(\"percentResizeEnd\", { task: task, percentComplete: currentPercentComplete / 100 });\n\n                        cleanUp();\n                    })\n                    .bind(\"dragcancel\", function() {\n                        updateElement(originalPercentWidth);\n\n                        cleanUp();\n                    })\n                    .userEvents.bind(\"select\", function() {\n                        blurActiveElement();\n                    });\n            },\n\n            _createDependencyDraggable: function() {\n                var that = this;\n                var originalHandle;\n                var hoveredHandle = $();\n                var hoveredTask = $();\n                var startX;\n                var startY;\n                var styles = GanttTimeline.styles;\n                var editable = this.options.editable;\n\n                var cleanUp = function() {\n                    originalHandle\n                        .css(\"display\", \"\")\n                        .removeClass(styles.hovered);\n\n                    originalHandle.parent().removeClass(styles.origin);\n                    originalHandle = null;\n\n                    toggleHandles(false);\n\n                    hoveredTask = $();\n                    hoveredHandle = $();\n\n                    that.view()._removeDependencyDragHint();\n\n                    that.dragInProgress = false;\n                };\n\n                var toggleHandles = function(value) {\n                    if (!hoveredTask.hasClass(styles.origin)) {\n                        hoveredTask.find(DOT + styles.taskDot).css(\"display\", value ? \"block\" : \"\");\n                        hoveredHandle.toggleClass(styles.hovered, value);\n                    }\n                };\n\n                if (!editable || editable.dependencyCreate === false) {\n                    return;\n                }\n\n                this._dependencyDraggable = new kendo.ui.Draggable(this.wrapper, {\n                    distance: 0,\n                    filter: DOT + styles.taskDot,\n                    holdToDrag: false\n                });\n\n                this._dependencyDraggable\n                    .bind(\"dragstart\", function(e) {\n                        if (that.trigger(\"dependencyDragStart\")) {\n                            e.preventDefault();\n                            return;\n                        }\n\n                        originalHandle = e.currentTarget\n                            .css(\"display\", \"block\")\n                            .addClass(styles.hovered);\n\n                        originalHandle.parent().addClass(styles.origin);\n\n                        var elementOffset = originalHandle.offset();\n                        var tablesOffset = that.wrapper.find(DOT + styles.tasksWrapper).offset();\n\n                        startX = Math.round(elementOffset.left - tablesOffset.left + (outerHeight(originalHandle) / 2));\n                        startY = Math.round(elementOffset.top - tablesOffset.top + (outerWidth(originalHandle) / 2));\n\n                        clearTimeout(that._tooltipTimeout);\n                        that.dragInProgress = true;\n                    })\n                    .bind(\"drag\", kendo.throttle(function(e) {\n                        if (!that.dragInProgress) {\n                            return;\n                        }\n\n                        that.view()._removeDependencyDragHint();\n\n                        var target = $(kendo.elementUnderCursor(e));\n                        var tablesOffset = that.wrapper.find(DOT + styles.tasksWrapper).offset();\n                        var currentX = e.x.location - tablesOffset.left;\n                        var currentY = e.y.location - tablesOffset.top;\n\n                        that.view()._updateDependencyDragHint({ x: startX, y: startY }, { x: currentX, y: currentY });\n\n                        toggleHandles(false);\n\n                        hoveredHandle = (target.hasClass(styles.taskDot)) ? target : $();\n                        hoveredTask = target.closest(DOT + styles.taskWrap);\n\n                        toggleHandles(true);\n                    }, 15))\n                    .bind(\"dragend\", function() {\n                        if (hoveredHandle.length) {\n                            var fromStart = originalHandle.hasClass(styles.taskDotStart);\n                            var toStart = hoveredHandle.hasClass(styles.taskDotStart);\n\n                            var type = fromStart ? (toStart ? 3 : 2) : (toStart ? 1 : 0);\n\n                            var predecessorElement = originalHandle.siblings(DOT + styles.task);\n                            if (!predecessorElement.length) {\n                                predecessorElement = originalHandle.closest(DOT + styles.taskWrap).find(DOT + styles.task);\n                            }\n                            var predecessor = that._taskByUid(predecessorElement.attr(\"data-uid\"));\n\n                            var successorElement = hoveredHandle.siblings(DOT + styles.task);\n                            if (!successorElement.length) {\n                                successorElement = hoveredHandle.closest(DOT + styles.taskWrap).find(DOT + styles.task);\n                            }\n                            var successor = that._taskByUid(successorElement.attr(\"data-uid\"));\n\n                            if (predecessor !== successor) {\n                                that.trigger(\"dependencyDragEnd\", { type: type, predecessor: predecessor, successor: successor });\n                            }\n                        }\n\n                        cleanUp();\n                    })\n                    .bind(\"dragcancel\", function() {\n                        cleanUp();\n                    })\n                    .userEvents.bind(\"select\", function() {\n                        blurActiveElement();\n                    });\n            },\n\n            _selectable: function() {\n                var that = this;\n                var styles = GanttTimeline.styles;\n\n                if (this.options.selectable) {\n                    this.wrapper\n                        .on(CLICK + NS, DOT + styles.task + \",\" + DOT + styles.taskOffset, function(e) {\n                            e.stopPropagation();\n\n                            var uid = $(this).attr(\"data-uid\");\n\n                            if (!uid) {\n                                uid = $(this).closest(DOT + styles.taskWrap).find(DOT + styles.task).data(\"uid\");\n                            }\n\n                            if (!e.ctrlKey) {\n                                that.trigger(\"select\", { uid: uid });\n                            } else {\n                                that.trigger(\"clear\");\n                            }\n                        })\n                        .on(CLICK + NS, DOT + styles.taskWrap, function(e) {\n                            e.stopPropagation();\n\n                            // Decrease z-index of wrap so the we can get to the\n                            // dependency line underneath, if there is any\n                            $(this).css(\"z-index\", \"0\");\n\n                            var target = $(document.elementFromPoint(e.clientX, e.clientY));\n\n                            if (target.hasClass(styles.line)) {\n                                target.click();\n                            }\n\n                            $(this).css(\"z-index\", \"\");\n                        })\n                        .on(CLICK + NS, DOT + styles.tasksWrapper, function() {\n                            if (that.selectDependency().length > 0) {\n                                that.clearSelection();\n                            } else {\n                                that.trigger(\"clear\");\n                            }\n                        })\n                        .on(CLICK + NS, DOT + styles.line, function(e) {\n                            e.stopPropagation();\n\n                            that.selectDependency(this);\n                        });\n                }\n            },\n\n            select: function(value) {\n                var element = this.wrapper.find(value);\n                var styles = GanttTimeline.styles;\n\n                if (element.length) {\n                    this.clearSelection();\n\n                    element.addClass(styles.selected);\n\n                    if (kendo.support.mobileOS) {\n                        element.parent().addClass(styles.taskWrapActive);\n                    }\n\n                    return;\n                }\n\n                return this.wrapper.find(DOT + styles.task + DOT + styles.selected);\n            },\n\n            selectDependency: function(value) {\n                var element = this.wrapper.find(value);\n                var uid;\n                var styles = GanttTimeline.styles;\n\n                if (element.length) {\n                    this.clearSelection();\n                    this.trigger(\"clear\");\n\n                    uid = $(element).attr(\"data-uid\");\n\n                    this.wrapper.find(DOT + styles.line + \"[data-uid='\" + uid + \"']\").addClass(styles.selected);\n\n                    return;\n                }\n\n                return this.wrapper.find(DOT + styles.line + DOT + styles.selected);\n            },\n\n            clearSelection: function() {\n                var styles = GanttTimeline.styles;\n\n                this.wrapper\n                    .find(DOT + styles.selected)\n                    .removeClass(styles.selected);\n\n                if (kendo.support.mobileOS) {\n                    this.wrapper\n                        .find(DOT + styles.taskWrapActive)\n                        .removeClass(styles.taskWrapActive);\n                }\n            },\n\n            _attachEvents: function() {\n                var that = this;\n                var styles = GanttTimeline.styles;\n                var editable = this.options.editable;\n\n                if (editable) {\n\n                    this.wrapper\n                        .on(CLICK + NS, DOT + styles.taskDelete, function(e) {\n                            that.trigger(\"removeTask\", { uid: $(this).closest(DOT + styles.taskWrap).find(DOT + styles.task).attr(\"data-uid\") });\n                            e.stopPropagation();\n                            e.preventDefault();\n                        })\n                        .on(KEYDOWN + NS, function(e) {\n                            var selectedDependency;\n                            var editable = that.options.editable;\n\n                            if (e.keyCode === keys.DELETE && editable && editable.dependencyDestroy !== false) {\n                                selectedDependency = that.selectDependency();\n\n                                if (selectedDependency.length) {\n                                    that.trigger(\"removeDependency\", { uid: selectedDependency.attr(\"data-uid\") });\n                                    that.clearSelection();\n                                }\n                            }\n                        });\n\n                    if (!kendo.support.mobileOS) {\n                        this.wrapper\n                            .on(DBLCLICK + NS, DOT + styles.task + \",\" + DOT + styles.taskOffset, function(e) {\n                                if (that.options.editable.update !== false) {\n                                    that.trigger(\"editTask\", { uid: $(this).closest(DOT + styles.taskWrap).find(DOT + styles.task).attr(\"data-uid\") });\n\n                                    e.stopPropagation();\n                                    e.preventDefault();\n                                }\n                            });\n                    } else {\n                        this.touch = this.wrapper\n                            .kendoTouch({\n                                filter: DOT + styles.task + \",\" + DOT + styles.taskOffset,\n                                doubletap: function(e) {\n                                    if (that.options.editable.update !== false) {\n                                        that.trigger(\"editTask\", { uid: $(e.touch.currentTarget).closest(DOT + styles.taskWrap).find(DOT + styles.task).attr(\"data-uid\") });\n                                    }\n                                }\n                            }).data(\"kendoTouch\");\n                    }\n                }\n            },\n\n            _tooltip: function() {\n                var that = this;\n                var tooltipOptions = this.options.tooltip;\n                var styles = GanttTimeline.styles;\n                var currentMousePosition;\n                var mouseMoveHandler = function(e) {\n                    currentMousePosition = e.clientX;\n                };\n\n                if (tooltipOptions && tooltipOptions.visible === false) {\n                    return;\n                }\n\n                if (!kendo.support.mobileOS) {\n                    this.wrapper\n                            .on(MOUSEENTER + NS, DOT + styles.task, function() {\n                                var element = this;\n                                var task = that._taskByUid($(this).attr(\"data-uid\"));\n\n                                if (that.dragInProgress) {\n                                    return;\n                                }\n\n                                that._tooltipTimeout = setTimeout(function() {\n                                    that.view()._createTaskTooltip(task, element, currentMousePosition);\n                                }, 800);\n\n                                $(this).on(MOUSEMOVE, mouseMoveHandler);\n                            })\n                            .on(MOUSELEAVE + NS, DOT + styles.task, function() {\n                                clearTimeout(that._tooltipTimeout);\n\n                                that.view()._removeTaskTooltip();\n\n                                $(this).off(MOUSEMOVE, mouseMoveHandler);\n                            })\n                            .on(MOUSEENTER + NS, DOT + styles.taskOffset, function() {\n                                var taskElement = $(this).closest(DOT + styles.taskWrap).find(DOT + styles.task);\n                                var task = that._taskByUid(taskElement.attr(\"data-uid\"));\n\n                                if (that.dragInProgress) {\n                                    return;\n                                }\n\n                                that._offsetTooltipTimeout = setTimeout(function() {\n                                    that.view()._createOffsetTooltip(task, taskElement, currentMousePosition);\n                                }, 800);\n\n                                $(this).on(MOUSEMOVE, mouseMoveHandler);\n                            })\n                            .on(MOUSELEAVE + NS, DOT + styles.taskOffset, function() {\n                                clearTimeout(that._offsetTooltipTimeout);\n\n                                that.view()._removeOffsetTooltip();\n\n                                $(this).off(MOUSEMOVE, mouseMoveHandler);\n                            })\n                            .on(MOUSEENTER + NS, DOT + styles.taskPlanned, function() {\n                                var taskElement = $(this).closest(DOT + styles.taskWrap).find(DOT + styles.task);\n                                var task = that._taskByUid(taskElement.attr(\"data-uid\"));\n\n                                that._plannedTooltipTimeout = setTimeout(function() {\n                                    that.view()._createPlannedTooltip(task, taskElement, currentMousePosition);\n                                }, 800);\n\n                                $(this).on(MOUSEMOVE, mouseMoveHandler);\n                            })\n                            .on(MOUSELEAVE + NS, DOT + styles.taskPlanned, function() {\n                                clearTimeout(that._plannedTooltipTimeout);\n\n                                that.view()._removePlannedTooltip();\n\n                                $(this).off(MOUSEMOVE, mouseMoveHandler);\n                            });\n                } else {\n                    this.wrapper\n                        .on(CLICK + NS, DOT + styles.taskDelete, function(e) {\n                            e.stopPropagation();\n                            that.view()._removeTaskTooltip();\n                        })\n                        .on(MOUSELEAVE + NS, DOT + styles.task, function(e) {\n                            var parents = $(e.relatedTarget).parents(DOT + styles.taskWrap, DOT + styles.task);\n\n                            if (parents.length === 0) {\n                                that.view()._removeTaskTooltip();\n                            }\n                        })\n                        .on(MOUSELEAVE + NS, DOT + styles.taskOffset, function(e) {\n                            var parents = $(e.relatedTarget).parents(DOT + styles.taskWrap, DOT + styles.task);\n\n                            if (parents.length === 0) {\n                                that.view()._removeOffsetTooltip();\n                            }\n                        })\n                        .on(MOUSELEAVE + NS, DOT + styles.taskPlanned, function(e) {\n                            var parents = $(e.relatedTarget).parents(DOT + styles.taskWrap, DOT + styles.task);\n\n                            if (parents.length === 0) {\n                                that.view()._removePlannedTooltip();\n                            }\n                        });\n\n                    if (this.touch) {\n                        this.touch\n                            .bind(\"tap\", function(e) {\n                                var element = $(e.touch.target);\n                                var currentPosition = e.touch.x.client;\n                                var task;\n\n                                if (!element.hasClass(styles.task)) {\n                                    task = that._taskByUid(element.closest(DOT + styles.taskWrap).find(DOT + styles.task).attr(\"data-uid\"));\n                                    if (that.view()._offsetTooltip) {\n                                        that.view()._removeOffsetTooltip();\n                                    }\n\n                                    that.view()._createOffsetTooltip(task, element, currentPosition);\n                                } else {\n                                    task = that._taskByUid(element.attr(\"data-uid\"));\n                                    if (that.view()._taskTooltip) {\n                                        that.view()._removeTaskTooltip();\n                                    }\n\n                                    that.view()._createTaskTooltip(task, element, currentPosition);\n                                }\n                            })\n                            .bind(\"doubletap\", function() {\n                                that.view()._removeTaskTooltip();\n                                that.view()._removeOffsetTooltip();\n                            });\n                    }\n                }\n            },\n            _setPlanned: function(value) {\n                this.options.showPlannedTasks = value;\n                this.view().options.showPlannedTasks = value;\n            }\n        });\n\n        extend(true, GanttTimeline, { styles: timelineStyles });\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}