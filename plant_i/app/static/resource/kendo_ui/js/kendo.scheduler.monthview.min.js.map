{"version":3,"sources":["raw-js/kendo.scheduler.monthview.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendoscheduler","monthview","js","this","$","kendo","window","ui","SchedulerView","NS","extend","encode","htmlEncode","getDate","date","MS_PER_DAY","INVERSE_COLOR_CLASS","DAY_TEMPLATE","template","toString","EVENT_WRAPPER_STRING","task","ns","uid","ariaLabel","resources","attr","color","tail","middle","icon","isException","isRecurring","showDelete","messages","destroy","head","resizable","EVENT_TEMPLATE","title","replace","MORE_BUTTON_TEMPLATE","iconClass","MonthGroupedView","Class","init","view","_view","_verticalRowCountForLevel","level","_rowCountForLevel","_horizontalGroupCountForLevel","_columnCountForLevel","_getCalendarRowsLength","cellsPerRow","cellCount","_createRows","start","startIdx","horizontalGroupCount","verticalGroupIndex","isVerticallyGrouped","_isVerticallyGrouped","html","groupIdx","_createRow","_adjustStartDate","addDays","_getContent","content","startDate","_getTimeSlotByPosition","x","y","groupIndex","groups","daySlotByPosition","_nextSlotStartDate","nextDay","_createRowsLayout","rows","groupHeaderTemplate","_createVerticalColumnsLayout","columns","_createColumnsLayout","_verticalGroupCount","_horizontalGroupCount","_columnOffsetForResource","_positionMobileEvent","event","group","range","rangeCount","end","rangeIndex","endDate","occurrence","clone","Date","_createEventElement","_positionEvent","_addDaySlotCollections","groupCount","tableRows","rowMultiplier","rowIndex","collection","addDaySlotCollection","cells","children","cellMultiplier","cellIndex","cell","addDaySlot","_changePeriodGroupIndex","reverse","length","_createResizeHint","left","startSlot","offsetLeft","top","offsetTop","width","innerWidth","height","clientHeight","hint","fn","call","_appendResizeHint","_createMoveHint","endSlot","css","firstChildHeight","options","eventHeight","index","addClass","inverseColor","_appendMoveHint","MonthGroupedByDateView","dateIdx","verticalStart","_groupCount","isLastRow","NUMBER_OF_COLUMNS","cellIdx","_createDateLayout","resource","configuration","data","dataSource","dataIndex","value","getter","dataValueField","obj","text","dataTextField","dataColorField","field","name","className","slice","push","subColumns","startIndex","endIndex","i","currentSlot","_slots","dateRange","daySlotRanges","dateIndex","currentGroupIndex","_daySlotCollections","vertical","selectionGroupIndex","offsetWidth","offsetHeight","slotIdx","slot","isInDateRange","min","max","msValue","scheduler","MonthView","element","that","eventsPerDay","moreButtonHeight","adaptiveSlotHeight","_groupedView","_getGroupedView","isGroupedByDate","_isGroupedByDate","Error","_templates","_editable","_renderLayout","_groups","_updateDirection","selection","ranges","multiple","isSameSlot","isSameCollection","collectionIndex","backward","_changeDate","previous","collections","_getCollections","daySlotCollectionCount","_getNextHorizontalRange","method","horizontalRange","isVertical","_getNextVerticalRange","verticalRange","_changeViewPeriod","newStart","newEnd","pad","_isInRange","events","_continuousSlot","continuousSlot","_changeGroupContinuously","lastGroupIndex","_normalizeHorizontalSelection","_normalizeVerticalSelection","settings","Template","templateSettings","eventTemplate","dayTemplate","dateForTitle","format","selectedDateFormat","_firstDayOfMonth","_lastDayOfMonth","shortDateForTitle","selectedShortDateFormat","mobileDateForTitle","selectedMobileDateFormat","nextDate","previousDate","previousDay","_startDate","_endDate","firstDayOfMonth","lastDayOfMonth","calendarInfo","firstDay","firstVisibleDay","getFullYear","getMonth","getHours","getMinutes","getSeconds","getMilliseconds","getDay","setTime","firstVisibleMonthDay","createLayout","_layout","_content","_initSlotHeight","_initTimesHeight","refreshLayout","_isVirtualized","_tryRenderContent","on","e","offset","currentTarget","_slotByPosition","preventDefault","trigger","_footer","editable","_isMobile","_touchEditable","_mouseEditable","closest","create","resourceInfo","_resourceBySlot","eventInfo","isAllDay","update","threshold","support","mobileOS","android","_addUserEvents","UserEvents","useClickAsTap","browser","edge","filter","tap","_scrolling","target","selectionByElement","columnLevel","columnLevels","rowLevel","rowLevels","verticalGroupCount","groupedView","groupedResources","verticalGroupIdx","_createCalendar","_cachedGroupIndex","find","_virtualContent","append","_calcSlotHeight","dateHeader","eventSpacing","firstCell","firstChild","Math","round","rowHeight","isMobile","table","_adjustSlotHeight","_canAdjustSlotHeight","weeks","forEach","week","_events","eventIndex","slots","firstSlot","weekOffsetTop","weekHeight","eventMeta","actualEventCount","slotIndex","meta","adjSlot","adjMeta","indexOf","dirty","sort","first","second","order","slotHeight","firstChildTop","style","more","parentNode","times","isSetHeight","_isSchedulerHeightSet","contentDiv","weekStartDates","_slotIndices","calendarRowsLength","rowIdx","_weekStartDates","classes","isToday","getTime","names","array","idx","concat","shiftArray","days","namesShort","map","inner","resize","eventResources","_formatEventAriaLabel","applyStylesFromKendoAttributes","_isInDateSlot","slotStart","slotEnd","lastSlot","startTime","toUtcTime","endTime","_slotIndex","slotRange","tableEl","contentEl","collidingEvents","createRows","at","container","_isRtl","clientWidth","scrollWidth","appendChild","addEvent","_continuousEvents","eventCount","rightOffset","rowEvents","eventTop","j","eventLength","parseInt","appendTo","_inverseEventColor","_collectionIndex","_startSlotIndex","_startSlot","outerHeight","scrollTop","scrollLeft","ceil","_resizeHint","add","_updateResizeHint","_removeResizeHint","timezone","toLocalDate","last","_updateMoveHint","distance","duration","_removeMoveHint","_moveHint","getElementsByTagName","_addResourceView","MS_PER_HOUR","render","remove","_cachedEvents","Query","dir","toArray","bind","_renderGroups","_renderEvents","_ongoingEvents","slotRanges","rangeStart","rangeEnd","setDate","parentValue","item","itemParentValue","dataParentValueField","itemIdx","_resourceValue","tmp","operator","groupEqFilter","removeClass","off","ongoingEvents","cssClass","enabled","updateInterval","jQuery"],"mappings":"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","file":"kendo.scheduler.monthview.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.scheduler.view.js'), require('kendo.icons.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.scheduler.view', 'kendo.icons'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendoscheduler = global.kendoscheduler || {}, global.kendoscheduler.monthview = global.kendoscheduler.monthview || {}, global.kendoscheduler.monthview.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n        id: \"scheduler.monthview\",\n        name: \"Scheduler Month View\",\n        category: \"web\",\n        description: \"The Scheduler Month View\",\n        depends: [ \"scheduler.view\", \"icons\" ],\n        hidden: true\n    };\n\n    (function($) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            SchedulerView = ui.SchedulerView,\n            NS = \".kendoMonthView\",\n            extend = $.extend,\n            encode = kendo.htmlEncode,\n            getDate = kendo.date.getDate,\n            MS_PER_DAY = kendo.date.MS_PER_DAY,\n            NUMBER_OF_ROWS = 6,\n            NUMBER_OF_COLUMNS = 7,\n            INVERSE_COLOR_CLASS = \"k-event-inverse\",\n            DAY_TEMPLATE = kendo.template(({ date }) => `<span class=\"k-link k-nav-day\">${encode(kendo.toString(date, \"dd\"))}</span>`),\n            EVENT_WRAPPER_STRING = (task) =>\n                `<div role=\"button\" data-${task.ns}uid=\"${task.uid}\" aria-label=\"${encode(task.ariaLabel)}\" ` +\n                (task.resources[0] ? `${kendo.attr(\"style-background-color\")}=\"${task.resources[0].color}\" ${kendo.attr(\"style-border-color\")}=\"${task.resources[0].color}\" class=\"k-event\">` : 'class=\"k-event\">') +\n                    '<span class=\"k-event-actions\">' +\n                        `${task.tail || task.middle ? kendo.ui.icon(\"caret-alt-left\") : ''}` +\n                        `${task.isException() ? kendo.ui.icon(\"arrows-no-repeat\") :\n                        (task.isRecurring() ? kendo.ui.icon(\"arrow-rotate-cw\") : '')}` +\n                    '</span>' +\n                    `${kendo.template(task.template)(task)}` +\n                    '<span class=\"k-event-actions\">' +\n                        `${task.showDelete ? `<a href=\"#\" class=\"k-link k-event-delete\" title=\"${task.messages.destroy}\" aria-label=\"${task.messages.destroy}\">${kendo.ui.icon(\"x\")}</a>` : ''}` +\n                        `${task.head || task.middle ? kendo.ui.icon(\"caret-alt-right\") : ''}` +\n                    '</span>' +\n                    (task.resizable && !task.tail && !task.middle ? '<span class=\"k-resize-handle k-resize-w\"></span>' : '') +\n                    (task.resizable && !task.head && !task.middle ? '<span class=\"k-resize-handle k-resize-e\"></span>' : '') +\n                '</div>',\n            EVENT_TEMPLATE = kendo.template(({ title }) => `<div title=\"${title.replace(/\"/g,\"&#34;\")}\">` +\n                        `<div class=\"k-event-template\">${encode(title)}</div>` +\n                    '</div>');\n\n        var CELL_INNER_SPACING = 2;\n\n        var MORE_BUTTON_TEMPLATE = kendo.template(() =>\n            `<div role=\"button\" aria-label=\"Show all events in Day view.\" class=\"k-more-events k-button k-button-md k-rounded-md k-button-solid k-button-solid-base\">${kendo.ui.icon({ icon: \"more-horizontal\", iconClass: \"k-button-icon\" })}</div>`\n        );\n\n        var MonthGroupedView = kendo.Class.extend({\n            init: function(view) {\n                this._view = view;\n            },\n\n            _verticalRowCountForLevel: function(level) {\n                var view = this._view;\n\n                return view._rowCountForLevel(level);\n            },\n\n            _horizontalGroupCountForLevel: function(level) {\n                var view = this._view;\n\n                return view._columnCountForLevel(level);\n            },\n\n            _getCalendarRowsLength: function(cellsPerRow, cellCount) {\n                return cellCount / cellsPerRow;\n            },\n\n            _createRows: function(start, startIdx, horizontalGroupCount, verticalGroupIndex) {\n                var view = this._view;\n                var cellsPerRow = NUMBER_OF_COLUMNS;\n                var isVerticallyGrouped = view._isVerticallyGrouped();\n                var html = \"\";\n\n                for (var groupIdx = 0; groupIdx < horizontalGroupCount; groupIdx++) {\n                    html += view._createRow(start, startIdx, cellsPerRow, isVerticallyGrouped ? verticalGroupIndex : groupIdx);\n                }\n\n                return html;\n            },\n\n            _adjustStartDate: function(start) {\n                return kendo.date.addDays(start, NUMBER_OF_COLUMNS);\n            },\n\n            _getContent: function(content, startDate, resources) {\n                return content({ date: startDate, resources: resources });\n            },\n\n            _getTimeSlotByPosition: function(x, y, groupIndex) {\n                var group = this._view.groups[groupIndex];\n\n                return group.daySlotByPosition(x, y);\n            },\n\n            _nextSlotStartDate: function(startDate) {\n                return kendo.date.nextDay(startDate);\n            },\n\n            _createRowsLayout: function(resources, rows, groupHeaderTemplate) {\n                var view = this._view;\n\n                return view._createRowsLayout(resources, rows, groupHeaderTemplate);\n            },\n\n            _createVerticalColumnsLayout: function(resources, rows, groupHeaderTemplate, columns) {\n\n                return columns;\n            },\n\n            _createColumnsLayout: function(resources, columns, groupHeaderTemplate) {\n                var view = this._view;\n\n                return view._createColumnsLayout(resources, columns, groupHeaderTemplate);\n            },\n\n            _verticalGroupCount: function(level) {\n                var view = this._view;\n\n                return view._rowCountForLevel(level);\n            },\n\n            _horizontalGroupCount: function(level) {\n                var view = this._view;\n\n                return view._columnCountForLevel(level) / view._columnOffsetForResource(level);\n            },\n\n            _positionMobileEvent: function(event, group, range, rangeCount, start, end, rangeIndex) {\n                var view = this._view;\n\n                if (rangeCount > 1) {\n                    if (rangeIndex === 0) {\n                        end = range.end.endDate();\n                    } else if (rangeIndex == rangeCount - 1) {\n                        start = range.start.startDate();\n                    } else {\n                        start = range.start.startDate();\n                        end = range.end.endDate();\n                    }\n                }\n\n                var occurrence = event.clone({ start: new Date(start), end: new Date(end), head: range.head, tail: range.tail });\n\n                view._positionMobileEvent(range, view._createEventElement(occurrence), group);\n            },\n\n            _positionEvent: function(event, group, range, rangeCount, start, end, rangeIndex) {\n                var view = this._view;\n\n                if (rangeCount > 1) {\n                    if (rangeIndex === 0) {\n                        end = range.end.endDate();\n                    } else if (rangeIndex == rangeCount - 1) {\n                        start = range.start.startDate();\n                    } else {\n                        start = range.start.startDate();\n                        end = range.end.endDate();\n                    }\n                }\n\n                var occurrence = event.clone({ start: start, end: end, head: range.head, tail: range.tail });\n\n                view._positionEvent(range, view._createEventElement(occurrence), group);\n            },\n\n            _addDaySlotCollections: function(groupCount, tableRows, startDate) {\n                var view = this._view;\n                var columnCount = NUMBER_OF_COLUMNS;\n                var rowCount = NUMBER_OF_ROWS;\n\n                for (var groupIndex = 0; groupIndex < groupCount; groupIndex++) {\n                    var cellCount = 0;\n                    var rowMultiplier = 0;\n\n                    if (view._isVerticallyGrouped()) {\n                        rowMultiplier = groupIndex;\n                    }\n\n                    for (var rowIndex = rowMultiplier * rowCount; rowIndex < (rowMultiplier + 1) * rowCount; rowIndex++) {\n                        var group = view.groups[groupIndex];\n                        var collection = group.addDaySlotCollection(kendo.date.addDays(startDate, cellCount), kendo.date.addDays(startDate, cellCount + columnCount));\n\n                        var tableRow = tableRows[rowIndex];\n                        var cells = tableRow.children;\n                        var cellMultiplier = 0;\n\n                        if (!view._isVerticallyGrouped()) {\n                            cellMultiplier = groupIndex;\n                        }\n\n                        for (var cellIndex = cellMultiplier * columnCount; cellIndex < (cellMultiplier + 1) * columnCount; cellIndex++) {\n                            var cell = cells[cellIndex];\n\n                            view.addDaySlot(collection, cell, startDate, cellCount);\n                            cellCount++;\n                        }\n                    }\n                }\n            },\n\n            _changePeriodGroupIndex: function(reverse) {\n                var view = this._view;\n\n                return reverse ? view.groups.length - 1 : 0;\n            },\n\n            _createResizeHint: function(range) {\n                var view = this._view;\n                var left = range.startSlot().offsetLeft;\n                var top = range.start.offsetTop;\n                var width = range.innerWidth();\n                var height = range.start.clientHeight - 2;\n                var hint = SchedulerView.fn._createResizeHint.call(view, left, top, width, height);\n\n                view._appendResizeHint(hint);\n            },\n\n            _createMoveHint: function(range, event) {\n                var view = this._view;\n                var startSlot = range.startSlot();\n                var endSlot = range.endSlot();\n                var hint = view._createEventElement(event.clone({ head: range.head, tail: range.tail }));\n\n                hint.css({\n                    left: startSlot.offsetLeft + 2,\n                    top: startSlot.offsetTop + startSlot.firstChildHeight,\n                    height: (view.options.eventHeight === \"auto\") ? 25 : view.options.eventHeight,\n                    width: range.innerWidth() - (startSlot.index !== endSlot.index ? 3 : 2)\n                });\n\n                hint.addClass(\"k-event-drag-hint\");\n\n                if (event.inverseColor) {\n                    hint.addClass(INVERSE_COLOR_CLASS);\n                }\n\n                view._appendMoveHint(hint);\n            }\n        });\n\n        var MonthGroupedByDateView = kendo.Class.extend({\n            init: function(view) {\n                this._view = view;\n            },\n\n            _verticalRowCountForLevel: function() {\n                return 1;\n            },\n\n            _horizontalGroupCountForLevel: function(level) {\n                var view = this._view;\n\n                return view._columnCountForLevel(level + 1) / NUMBER_OF_COLUMNS;\n            },\n\n            _createRows: function(start, startIdx, horizontalGroupCount) {\n                var view = this._view;\n                var cellsPerRow = NUMBER_OF_COLUMNS;\n                var isVerticallyGrouped = view._isVerticallyGrouped();\n                var html = \"\";\n                var dateIdx = 0;\n\n                if (isVerticallyGrouped) {\n                    var verticalStart = new Date(start);\n                    var groupCount = view._groupCount();\n                    for (dateIdx; dateIdx < NUMBER_OF_ROWS; dateIdx++) {\n                        html += view._createRow(verticalStart, startIdx, groupCount, dateIdx);\n\n                        verticalStart = kendo.date.addDays(verticalStart, cellsPerRow);\n                    }\n                    start = kendo.date.nextDay(start);\n                } else {\n                    for (dateIdx; dateIdx < cellsPerRow; dateIdx++) {\n                        html += view._createRow(start, startIdx, horizontalGroupCount, dateIdx);\n                        start = kendo.date.nextDay(start);\n                    }\n                    start = kendo.date.addDays(start, cellsPerRow);\n                }\n\n                return html;\n            },\n\n            _adjustStartDate: function(start, isLastRow) {\n                var view = this._view;\n                var isVerticallyGrouped = view._isVerticallyGrouped();\n\n                if (isVerticallyGrouped) {\n                    if (isLastRow) {\n                        return kendo.date.addDays(start, NUMBER_OF_COLUMNS * (NUMBER_OF_ROWS - 1) + 1);\n                    } else {\n                        return kendo.date.nextDay(start);\n                    }\n                }\n\n                return kendo.date.addDays(start, NUMBER_OF_COLUMNS);\n            },\n\n            _getContent: function(content, startDate, resources, cellIdx) {\n                if (cellIdx === 0) {\n                    return content({ date: startDate, resources: resources });\n                }\n                return \"\";\n            },\n\n            _getTimeSlotByPosition: function(x, y, groupIndex) {\n                var group = this._view.groups[groupIndex];\n\n                return group.daySlotByPosition(x, y, true);\n            },\n\n            _nextSlotStartDate: function(startDate) {\n                return startDate;\n            },\n\n            _getCalendarRowsLength: function() {\n                var view = this._view;\n                var isVerticallyGrouped = view._isVerticallyGrouped();\n\n                return isVerticallyGrouped ? NUMBER_OF_COLUMNS : NUMBER_OF_ROWS;\n            },\n\n            _createRowsLayout: function(resources, rows, groupHeaderTemplate, columns) {\n                var view = this._view;\n\n                return view._createDateLayout(columns, null, false);\n            },\n\n            _createVerticalColumnsLayout: function(resources, rows, groupHeaderTemplate) {\n                var view = this._view;\n                var resource = resources[0];\n                var configuration = [];\n                var data = resource.dataSource.view();\n\n                for (var dataIndex = 0; dataIndex < data.length * NUMBER_OF_ROWS; dataIndex++) {\n                    var value = kendo.getter(resource.dataValueField)(data[dataIndex % data.length]);\n                    var obj = {\n                        text: groupHeaderTemplate({\n                            text: kendo.htmlEncode(kendo.getter(resource.dataTextField)(data[dataIndex % data.length])),\n                            color: kendo.getter(resource.dataColorField)(data[dataIndex % data.length]),\n                            field: resource.field,\n                            title: resource.title,\n                            name: resource.name,\n                            value: value\n                        }),\n                        className: \"k-slot-cell\",\n                        value: value\n                    };\n\n                    obj.columns = view._createColumnsLayout(resources.slice(1), null, groupHeaderTemplate, null, null, value);\n\n                    configuration.push(obj);\n                }\n\n                return configuration;\n            },\n\n            _createColumnsLayout: function(resources, columns, groupHeaderTemplate, subColumns) {\n                var view = this._view;\n\n                return view._createColumnsLayout(resources, columns, groupHeaderTemplate, subColumns, true);\n            },\n\n            _verticalGroupCount: function(level) {\n                var view = this._view;\n\n                return view._columnCountForLevel(level) / NUMBER_OF_ROWS;\n            },\n\n            _horizontalGroupCount: function(level) {\n                var view = this._view;\n                return view._columnCountForLevel(level) / NUMBER_OF_COLUMNS;\n            },\n\n            _positionMobileEvent: function(event, group, range, rangeCount, start, end) {\n                var view = this._view;\n                var startIndex = range.start.index;\n                var endIndex = range.end.index;\n\n                for (var i = range.start.index; i <= range.end.index; i++) {\n                    var currentSlot = range.collection._slots[i];\n                    var dateRange = group.daySlotRanges(currentSlot.start, currentSlot.start, true)[0];\n\n                    var occurrence = event.clone({\n                        start: i === startIndex ? start : currentSlot.startDate(),\n                        end: i === endIndex ? end : currentSlot.endDate(),\n                        head: i !== endIndex || range.head,\n                        tail: i !== startIndex || range.tail });\n\n                    view._positionMobileEvent(dateRange, view._createEventElement(occurrence), group);\n                }\n            },\n\n            _positionEvent: function(event, group, range, rangeCount, start, end) {\n                var view = this._view;\n                var startIndex = range.start.index;\n                var endIndex = range.end.index;\n\n                for (var i = range.start.index; i <= range.end.index; i++) {\n                    var currentSlot = range.collection._slots[i];\n                    var dateRange = group.daySlotRanges(currentSlot.start, currentSlot.start, true)[0];\n\n                    var occurrence = event.clone({\n                        start: i === startIndex ? start : currentSlot.startDate(),\n                        end: i === endIndex ? end : currentSlot.endDate(),\n                        head: i !== endIndex || range.head,\n                        tail: i !== startIndex || range.tail });\n\n                    view._positionEvent(dateRange, view._createEventElement(occurrence), group);\n                }\n            },\n\n            _addDaySlotCollections: function(groupCount, tableRows, startDate) {\n                var view = this._view;\n                var columnCount = NUMBER_OF_COLUMNS;\n                var rowCount = NUMBER_OF_ROWS;\n                var isVerticallyGrouped = view._isVerticallyGrouped();\n\n                for (var dateIndex = 0; dateIndex < columnCount; dateIndex++) {\n                    for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n                        var groupIndex = 0;\n                        var currentTableIndex = isVerticallyGrouped ? dateIndex : rowIndex;\n                        var tableRow = tableRows[currentTableIndex];\n                        var cells = tableRow.children;\n                        var cellMultiplier = 0;\n\n                        if (!view._isVerticallyGrouped()) {\n                            cellMultiplier = dateIndex;\n                        }\n\n                        for (var cellIndex = cellMultiplier * groupCount; cellIndex < (cellMultiplier + 1) * groupCount; cellIndex++) {\n                            var cellCount = (rowIndex * columnCount) + dateIndex;\n                            var currentCellIndex = isVerticallyGrouped ? cellIndex + (rowIndex * groupCount) : cellIndex;\n                            var cell = cells[currentCellIndex];\n                            var currentGroupIndex = isVerticallyGrouped ? cellIndex : groupIndex;\n                            var group = view.groups[currentGroupIndex];\n                            var collection;\n                            if (dateIndex === 0) {\n                                collection = group.addDaySlotCollection(kendo.date.addDays(startDate, cellCount), kendo.date.addDays(startDate, cellCount + columnCount));\n                            } else {\n                                collection = group._daySlotCollections[rowIndex];\n                            }\n\n                            view.addDaySlot(collection, cell, startDate, cellCount);\n                            groupIndex++;\n                        }\n                    }\n                }\n            },\n\n            _changePeriodGroupIndex: function(reverse, vertical, selectionGroupIndex) {\n                var view = this._view;\n\n                if (vertical && view._isVerticallyGrouped()) {\n                    return reverse ? view.groups.length - 1 : 0;\n                }\n\n                return selectionGroupIndex;\n            },\n\n            _createResizeHint: function(range) {\n                var view = this._view;\n                var left, top, width, height, hint;\n\n                if (view._isVerticallyGrouped()) {\n                left = range.startSlot().offsetLeft;\n                top = range.start.offsetTop;\n                width = range.startSlot().offsetWidth;\n                height = range.endSlot().offsetTop + range.startSlot().offsetHeight - range.startSlot().offsetTop - 2;\n                hint = SchedulerView.fn._createResizeHint.call(view, left, top, width, height);\n\n                view._appendResizeHint(hint);\n                } else {\n                    for (var slotIdx = range.startSlot().index; slotIdx <= range.endSlot().index; slotIdx++) {\n                        var slot = range.collection._slots[slotIdx];\n                        left = slot.offsetLeft;\n                        top = slot.offsetTop;\n                        width = slot.offsetWidth;\n                        height = slot.offsetHeight - 2;\n                        hint = SchedulerView.fn._createResizeHint.call(view, left, top, width, height);\n\n                        view._appendResizeHint(hint);\n                    }\n                }\n            },\n\n            _createMoveHint: function(range, event) {\n                var view = this._view;\n                var startSlot = range.startSlot();\n                var endSlot = range.endSlot();\n\n                for (var slotIdx = startSlot.index; slotIdx <= endSlot.index; slotIdx++) {\n                    var slot = range.collection._slots[slotIdx];\n                    var hint = view._createEventElement(event.clone({ head: range.head, tail: range.tail }));\n\n                    hint.css({\n                        left: slot.offsetLeft,\n                        top: slot.offsetTop + slot.firstChildHeight,\n                        height: (view.options.eventHeight === \"auto\") ? 25 : view.options.eventHeight,\n                        width: slot.offsetWidth - 2\n                    });\n\n                    hint.addClass(\"k-event-drag-hint\");\n\n                    if (event.inverseColor) {\n                        hint.addClass(INVERSE_COLOR_CLASS);\n                    }\n\n                    view._appendMoveHint(hint);\n                }\n            }\n        });\n\n        kendo.ui.scheduler.MonthGroupedView = MonthGroupedView;\n        kendo.ui.scheduler.MonthGroupedByDateView = MonthGroupedByDateView;\n\n        ui.MonthView = SchedulerView.extend({\n            init: function(element, options) {\n                var that = this;\n\n                // Do not allow less than one event\n                if (options.eventsPerDay === 0) {\n                    options.eventsPerDay = 1;\n                }\n\n                // Do not allow 0 height events\n                if (options.eventHeight === 0) {\n                    options.eventHeight = 1;\n                }\n\n                // Do not allow 0 height more-button\n                if (options.moreButtonHeight === 0) {\n                    options.moreButtonHeight = 1;\n                }\n\n                // Do not allow string values other than auto\n                if (typeof options.eventHeight === \"string\" && options.eventHeight !== \"auto\") {\n                    options.eventHeight = 25;\n                }\n\n                // Set adaptiveSlotHeight to true if eventHeight is auto\n                if (options.eventHeight === \"auto\") {\n                    options.adaptiveSlotHeight = true;\n                }\n\n                SchedulerView.fn.init.call(that, element, options);\n                that._groupedView = that._getGroupedView();\n\n                // Exception handling for invalid combinations\n                var isGroupedByDate = this._isGroupedByDate();\n                var adaptiveSlotHeight = this.options.adaptiveSlotHeight;\n                var eventHeight = this.options.eventHeight;\n\n                if (isGroupedByDate === true && adaptiveSlotHeight === true) {\n                    throw new Error(\"Incompatible options: adaptive slot height and date grouping!\");\n                }\n\n                if (isGroupedByDate === true && eventHeight === \"auto\") {\n                    throw new Error(\"Incompatible options: auto event height and date grouping!\");\n                }\n\n                that.title = that.options.title;\n\n                that._templates();\n\n                that._editable();\n\n                that._renderLayout(that.options.date);\n\n                that._groups();\n            },\n\n            name: \"month\",\n\n            _getGroupedView: function() {\n                if (this._isGroupedByDate()) {\n                    return new kendo.ui.scheduler.MonthGroupedByDateView(this);\n                } else {\n                    return new kendo.ui.scheduler.MonthGroupedView(this);\n                }\n            },\n\n            _updateDirection: function(selection, ranges, multiple, reverse, vertical) {\n                if (multiple) {\n                    var startSlot = ranges[0].start;\n                    var endSlot = ranges[ranges.length - 1].end;\n                    var isSameSlot = startSlot.index === endSlot.index;\n                    var isSameCollection = startSlot.collectionIndex === endSlot.collectionIndex;\n                    var updateDirection;\n\n                    if (vertical) {\n                        updateDirection = (isSameSlot && isSameCollection) || isSameCollection;\n                    } else {\n                        updateDirection = isSameSlot && isSameCollection;\n                    }\n\n                    if (updateDirection) {\n                        selection.backward = reverse;\n                    }\n                }\n            },\n\n            _changeDate: function(selection, slot, previous) {\n                var group = this.groups[selection.groupIndex];\n                var collections, index;\n\n                if (previous) {\n                    collections = group._getCollections(group.daySlotCollectionCount());\n                    index = slot.collectionIndex - 1;\n\n                    if (index >= 0) {\n                        return collections[index]._slots[collections[index]._slots.length - 1];\n                    }\n                } else {\n                    collections = group._getCollections(group.daySlotCollectionCount());\n                    index = slot.collectionIndex + 1;\n                    var slotIndex = 0;\n\n                    if (collections[index] && collections[index]._slots[slotIndex]) {\n                        return collections[index]._slots[slotIndex];\n                    }\n                }\n            },\n\n            _getNextHorizontalRange: function(group, method, horizontalRange) {\n                var isVertical = this._isVerticallyGrouped();\n\n                horizontalRange.startSlot = group[method](horizontalRange.startSlot, isVertical);\n                horizontalRange.endSlot = group[method](horizontalRange.endSlot, isVertical);\n\n                return horizontalRange;\n            },\n\n            _getNextVerticalRange: function(group, method, verticalRange, multiple) {\n                var isVertical = this._isVerticallyGrouped() && this._isGroupedByDate();\n\n                verticalRange.startSlot = group[method](verticalRange.startSlot, multiple, isVertical);\n                verticalRange.endSlot = group[method](verticalRange.endSlot, multiple, isVertical);\n\n                return verticalRange;\n            },\n\n            _changeViewPeriod: function(selection, reverse, vertical) {\n                var pad = vertical ? 7 : 1;\n                var newStart, newEnd;\n\n                if (reverse) {\n                    pad *= -1;\n                }\n\n                newStart = kendo.date.addDays(selection.start, pad);\n                newEnd = kendo.date.addDays(selection.end, pad);\n\n                if (this._isInRange(newStart, newEnd)) {\n                    return false;\n                }\n\n                selection.start = newStart;\n                selection.end = newEnd;\n\n                if (!vertical || (vertical && this._isVerticallyGrouped())) {\n                    selection.groupIndex = this._groupedView._changePeriodGroupIndex(reverse, vertical, selection.groupIndex);\n                }\n\n                selection.events = [];\n\n                return true;\n            },\n\n            _continuousSlot: function(selection, ranges, reverse) {\n                var index = selection.backward ? 0 : ranges.length - 1;\n                var group = this.groups[selection.groupIndex];\n\n                return group.continuousSlot(ranges[index].start, reverse);\n            },\n\n            _changeGroupContinuously: function(selection, continuousSlot, multiple, reverse) {\n                if (!multiple) {\n                    var groupIndex = selection.groupIndex;\n                    var lastGroupIndex = this.groups.length - 1;\n                    var vertical = this._isVerticallyGrouped();\n                    var group = this.groups[groupIndex];\n\n                    if (!continuousSlot && vertical) {\n\n                        continuousSlot = group[reverse ? \"lastSlot\" : \"firstSlot\"]();\n\n                        groupIndex += (reverse ? -1 : 1);\n\n                    } else if (continuousSlot && !vertical) {\n                        groupIndex = reverse ? lastGroupIndex : 0;\n                    }\n\n                    if (groupIndex < 0 || groupIndex > lastGroupIndex) {\n                        groupIndex = reverse ? lastGroupIndex : 0;\n                        continuousSlot = null;\n                    }\n\n                    selection.groupIndex = groupIndex;\n                }\n\n                return continuousSlot;\n            },\n\n            _normalizeHorizontalSelection: function(selection, ranges, reverse) {\n                var slot;\n\n                if (reverse) {\n                    slot = ranges[0].start;\n                } else {\n                    slot = ranges[ranges.length - 1].end;\n                }\n\n                return slot;\n            },\n\n            _normalizeVerticalSelection: function(selection, ranges) {\n                var slot;\n\n                if (selection.backward) {\n                    slot = ranges[0].start;\n                } else {\n                    slot = ranges[ranges.length - 1].end;\n                }\n\n                return slot;\n            },\n\n            _templates: function() {\n                var options = this.options,\n                    settings = extend({}, kendo.Template, options.templateSettings);\n\n                this.eventTemplate = kendo.template(EVENT_WRAPPER_STRING);\n                this.dayTemplate = kendo.template(options.dayTemplate, settings);\n                this.groupHeaderTemplate = kendo.template(options.groupHeaderTemplate, settings);\n            },\n\n            dateForTitle: function() {\n                return kendo.format(this.options.selectedDateFormat, this._firstDayOfMonth, this._lastDayOfMonth);\n            },\n\n            shortDateForTitle: function() {\n                return kendo.format(this.options.selectedShortDateFormat, this._firstDayOfMonth, this._lastDayOfMonth);\n            },\n\n            mobileDateForTitle: function() {\n                return kendo.format(this.options.selectedMobileDateFormat, this._firstDayOfMonth, this._lastDayOfMonth);\n            },\n\n            nextDate: function() {\n                return kendo.date.nextDay(this._lastDayOfMonth);\n            },\n\n            previousDate: function() {\n                return kendo.date.previousDay(this._firstDayOfMonth);\n            },\n\n            startDate: function() {\n                return this._startDate;\n            },\n\n            endDate: function() {\n                return this._endDate;\n            },\n\n            _renderLayout: function(date) {\n                var that = this;\n\n                this._firstDayOfMonth = kendo.date.firstDayOfMonth(date);\n\n                this._lastDayOfMonth = kendo.date.lastDayOfMonth(date);\n\n                this._startDate = firstVisibleMonthDay(date, this.calendarInfo());\n\n                this.createLayout(this._layout());\n\n                this._content();\n\n                this._initSlotHeight();\n\n                this._initTimesHeight();\n\n                this.refreshLayout();\n\n                if (this._isVirtualized()) {\n                    this._tryRenderContent();\n                }\n\n                this.content.on(\"click\" + NS, \".k-nav-day,.k-more-events\", function(e) {\n                    var offset = $(e.currentTarget).offset();\n                    var slot = that._slotByPosition(offset.left, offset.top);\n\n                    e.preventDefault();\n                    that.trigger(\"navigate\", { view: \"day\", date: slot.startDate() });\n                });\n\n                this._footer();\n            },\n\n            _editable: function() {\n                if (this.options.editable) {\n                    if (this._isMobile()) {\n                        this._touchEditable();\n                    } else {\n                        this._mouseEditable();\n                    }\n\n                }\n            },\n\n            _mouseEditable: function() {\n                var that = this;\n                that.element.on(\"click\" + NS, \".k-scheduler-monthview .k-event a:has(.k-i-x),.k-scheduler-monthview .k-event a:has(.k-svg-i-x)\", function(e) {\n                    that.trigger(\"remove\", { uid: $(this).closest(\".k-event\").attr(kendo.attr(\"uid\")) });\n                    e.preventDefault();\n                });\n\n                if (that.options.editable.create !== false) {\n                    that.element.on(\"dblclick\" + NS, \".k-scheduler-monthview .k-scheduler-content td\", function(e) {\n                        var offset = $(e.currentTarget).offset();\n                        var slot = that._slotByPosition(offset.left, offset.top);\n\n                        if (slot) {\n                            var resourceInfo = that._resourceBySlot(slot);\n                            that.trigger(\"add\", { eventInfo: extend({ isAllDay: true, start: slot.startDate(), end: slot.startDate() }, resourceInfo ) });\n                        }\n\n                        e.preventDefault();\n                    });\n                }\n\n                if (that.options.editable.update !== false) {\n                    that.element.on(\"dblclick\" + NS, \".k-scheduler-monthview .k-event\", function(e) {\n                        that.trigger(\"edit\", { uid: $(this).closest(\".k-event\").attr(kendo.attr(\"uid\")) });\n                        e.preventDefault();\n                    });\n                }\n            },\n\n            _touchEditable: function() {\n                var that = this;\n                var threshold = 0;\n\n                if (kendo.support.mobileOS.android) {\n                    threshold = 5;\n                }\n\n                if (that.options.editable.create !== false) {\n                    that._addUserEvents = new kendo.UserEvents(that.element, {\n                        threshold: threshold,\n                        useClickAsTap: !kendo.support.browser.edge,\n                        filter: \".k-scheduler-monthview .k-scheduler-content td\",\n                        tap: function(e) {\n                            if (that._scrolling) {\n                                return;\n                            }\n                            var offset = $(e.target).offset();\n                            var slot = that._slotByPosition(offset.left, offset.top);\n\n                            if (slot) {\n                                var resourceInfo = that._resourceBySlot(slot);\n                                that.trigger(\"add\", { eventInfo: extend({ isAllDay: true, start: slot.startDate(), end: slot.startDate() }, resourceInfo ) });\n                            }\n\n                            e.preventDefault();\n                        }\n                    });\n                }\n            },\n\n            selectionByElement: function(cell) {\n                var offset = $(cell).offset();\n                return this._slotByPosition(offset.left, offset.top);\n            },\n\n            _columnCountForLevel: function(level) {\n                var columnLevel = this.columnLevels[level];\n                return columnLevel ? columnLevel.length : 0;\n            },\n\n            _rowCountForLevel: function(level) {\n                var rowLevel = this.rowLevels[level];\n                return rowLevel ? rowLevel.length : 0;\n            },\n\n            _content: function() {\n                var html = '<tbody>';\n                var verticalGroupCount = 1;\n                var groupedView = this._groupedView;\n                var resources = this.groupedResources;\n\n                if (resources.length) {\n                    if (this._isVerticallyGrouped()) {\n                        verticalGroupCount = groupedView._verticalRowCountForLevel(resources.length - 1);\n                    }\n                }\n\n                for (var verticalGroupIdx = 0; verticalGroupIdx < verticalGroupCount; verticalGroupIdx++) {\n                    html += this._createCalendar(verticalGroupIdx);\n                    this._cachedGroupIndex = verticalGroupIdx;\n                }\n\n                html += \"</tbody>\";\n\n                this.content.find(\"table\").html(html);\n            },\n\n            _virtualContent: function() {\n                var that = this;\n                var html = '';\n\n                html += this._createCalendar(++this._cachedGroupIndex);\n\n                that.content.find(\"table tbody\").append(html);\n\n                that._initSlotHeight();\n            },\n\n            _calcSlotHeight: function(eventsPerDay) {\n                var options = this.options;\n                var eventHeight = options.eventHeight;\n                var eventSpacing = options.eventSpacing;\n                var moreButtonHeight = options.moreButtonHeight;\n                var firstCell = this.content.find(\"table tr td\")[0];\n                var dateHeader;\n\n                if (eventHeight === \"auto\" || !firstCell) {\n                    return undefined;\n                }\n\n                dateHeader = firstCell.firstChild;\n\n                return Math.round(\n                    // border of cell\n                    ( firstCell.offsetHeight - firstCell.clientHeight ) +\n\n                    // top padding\n                    dateHeader.offsetTop +\n\n                    // height of date header\n                    dateHeader.offsetHeight +\n\n                    // cell inner spacing\n                    CELL_INNER_SPACING +\n\n                    // all visible events and spacing\n                    ( eventsPerDay * eventHeight ) + ( ( eventsPerDay - 1 ) * eventSpacing ) +\n\n                    // leading space, more button\n                    ( CELL_INNER_SPACING + moreButtonHeight ) +\n\n                    // traling spacing\n                    CELL_INNER_SPACING\n                );\n            },\n\n            _initSlotHeight: function() {\n                var options = this.options;\n                var eventsPerDay = options.eventsPerDay;\n                var eventHeight = options.eventHeight;\n                var isMobile = this._isMobile();\n                var table = this.content.find(\"table\");\n                var rowHeight;\n\n                if (isMobile) {\n                    return;\n                }\n\n                if (typeof eventHeight === \"number\") {\n                    rowHeight = this._calcSlotHeight(eventsPerDay);\n\n                    table.find(\"tr\").height( rowHeight );\n\n                    table.addClass(\"k-scheduler-table-auto\");\n                }\n            },\n\n            _adjustSlotHeight: function(group) {\n                var options = this.options;\n                var eventHeight = options.eventHeight;\n                var eventSpacing = options.eventSpacing;\n                var moreButtonHeight = options.moreButtonHeight;\n\n                if (this._canAdjustSlotHeight !== true) {\n                    return;\n                }\n\n                var weeks = group._daySlotCollections;\n\n                this.content.find(\"table\").addClass(\"k-scheduler-table-auto\");\n\n                weeks.forEach(function(week) {\n                    var events = week._events;\n                    var eventIndex = 0;\n                    var slots = week._slots;\n                    var firstSlot = slots[0];\n                    var weekOffsetTop = firstSlot.element.offsetTop;\n                    var weekHeight = 0;\n\n                    // Ensure event meta exists in each slot\n                    slots.forEach(function(slot) {\n                        if (!slot.eventMeta) {\n                            slot.eventMeta = [];\n                            slot.actualEventCount = 0;\n                        } else {\n                            slot.actualEventCount = slot.eventMeta.length;\n                        }\n                    });\n\n                    // Ensure spanning event meta is present in all related slots\n                    slots.forEach(function(slot, slotIndex) {\n\n                        slot.eventMeta.forEach(function(meta, eventIndex) {\n\n                            // Skip events not starting in this slot\n                            if (meta.startIndex !== slotIndex) {\n                                return;\n                            }\n\n                            // Skip non-spanning events\n                            if (meta.startIndex === meta.endIndex) {\n                                return;\n                            }\n\n                            // Copy spanning event meta in all related slots\n                            slots.slice(slotIndex, meta.endIndex + 1).forEach(function(adjSlot) {\n\n                                var adjMeta = adjSlot.eventMeta;\n\n                                if (adjMeta.indexOf(meta) > -1) {\n                                    return;\n                                }\n\n                                // adjMeta.push(meta);\n                                adjMeta[adjMeta.length] = slot.eventMeta[eventIndex];\n                                adjSlot.actualEventCount = adjMeta.length;\n                                adjSlot.dirty = true;\n                            });\n\n                        });\n\n                        // Set correct order\n                        if (slot.dirty === true) {\n                            slot.eventMeta.sort(function(first, second) {\n                                return first.order - second.order;\n                            });\n                            delete slot.dirty;\n                        }\n\n                    });\n\n                    if (eventHeight === \"auto\") {\n                        slots.forEach(function(slot, slotIndex) {\n                            var slotHeight = slot.firstChildTop + slot.firstChildHeight + CELL_INNER_SPACING;\n\n                            slot.eventMeta.forEach(function(meta, eventIndex) {\n                                meta.top = Math.max(meta.top, weekOffsetTop + slotHeight);\n                                slotHeight = (meta.top - weekOffsetTop) + eventSpacing + meta.height;\n                            });\n                        });\n                    }\n\n                    // Position events\n                    slots.forEach(function(slot, slotIndex) {\n                        var slotHeight = slot.firstChildTop + slot.firstChildHeight + CELL_INNER_SPACING;\n\n                        slot.eventMeta.forEach(function(meta) {\n                            meta.top = Math.max(meta.top, weekOffsetTop + slotHeight);\n                            slotHeight = (meta.top - weekOffsetTop) + eventSpacing + meta.height;\n\n                            if (meta.startIndex === slotIndex) {\n                                events[eventIndex].element[0].style.top = meta.top + \"px\";\n                                eventIndex++;\n                            }\n                        });\n\n                        if (slot.eventMeta.length > 0) {\n                            slotHeight -= eventSpacing;\n                            slotHeight += CELL_INNER_SPACING;\n                        } else {\n                            slotHeight += (eventHeight === \"auto\" ? 25 : eventHeight);\n                        }\n\n                        if (slot.more) {\n                            slot.more[0].style.top = weekOffsetTop + slotHeight + \"px\";\n                            slotHeight += CELL_INNER_SPACING + moreButtonHeight;\n                        }\n\n                        weekHeight = Math.max(weekHeight, slotHeight + 1);\n\n                    });\n\n                    // Update slot size and meta\n                    firstSlot.element.parentNode.style.height = weekHeight + \"px\";\n                    slots.forEach(function(slot) {\n                        slot.offsetTop = weekOffsetTop;\n                        slot.offsetHeight = weekHeight;\n                        slot.clientHeight = weekHeight - 1;\n                    });\n\n                });\n            },\n\n            _initTimesHeight: function() {\n                var that = this;\n                var times = that.times;\n                var isSetHeight = that._isSchedulerHeightSet();\n                var contentDiv = that.content[0];\n\n                if (times && !isSetHeight) {\n                    times.height(contentDiv.clientHeight);\n                }\n            },\n\n            _createCalendar: function(verticalGroupIndex) {\n                var start = this.startDate();\n                var cellCount = NUMBER_OF_COLUMNS * NUMBER_OF_ROWS;\n                var cellsPerRow = NUMBER_OF_COLUMNS;\n                var weekStartDates = [start];\n                var html = '';\n                var horizontalGroupCount = 1;\n                var isVerticallyGrouped = this._isVerticallyGrouped();\n                var groupedView = this._groupedView;\n\n                var resources = this.groupedResources;\n\n                if (resources.length) {\n                    if (!isVerticallyGrouped) {\n                        horizontalGroupCount = groupedView._horizontalGroupCountForLevel(resources.length - 1);\n                    }\n                }\n\n                this._slotIndices = {};\n\n                var calendarRowsLength = groupedView._getCalendarRowsLength(cellsPerRow, cellCount);\n\n                for (var rowIdx = 0; rowIdx < calendarRowsLength; rowIdx++) {\n                    html += \"<tr>\";\n\n                    weekStartDates.push(start);\n\n                    var startIdx = rowIdx * cellsPerRow;\n\n                    html += groupedView._createRows(start, startIdx, horizontalGroupCount, verticalGroupIndex);\n                    start = groupedView._adjustStartDate(start, rowIdx === calendarRowsLength - 1);\n\n                    html += \"</tr>\";\n                }\n\n                this._weekStartDates = weekStartDates;\n                this._endDate = kendo.date.previousDay(start);\n\n                return html;\n            },\n\n            _createRow: function(startDate, startIdx, cellsPerRow, groupIndex) {\n                var that = this;\n                var min = that._firstDayOfMonth;\n                var max = that._lastDayOfMonth;\n                var content = that.dayTemplate;\n                var classes = \"\";\n                var html = \"\";\n                var groupedView = this._groupedView;\n\n                var resources = function() {\n                    return that._resourceBySlot({ groupIndex: groupIndex });\n                };\n\n                for (var cellIdx = 0; cellIdx < cellsPerRow; cellIdx++) {\n                    classes = \"\";\n\n                    if (kendo.date.isToday(startDate)) {\n                        classes += \"k-today\";\n                    }\n\n                    if (!kendo.date.isInDateRange(startDate, min, max)) {\n                        classes += \" k-other-month\";\n                    }\n\n                    html += \"<td \";\n\n                    if (classes !== \"\") {\n                        html += 'class=\"' + classes + '\"';\n                    }\n\n                    html += \">\";\n                    html += groupedView._getContent(content, startDate, resources, cellIdx);\n                    html += \"</td>\";\n\n                    that._slotIndices[getDate(startDate).getTime()] = startIdx + cellIdx;\n\n                    startDate = groupedView._nextSlotStartDate(startDate);\n                }\n\n                return html;\n            },\n\n            _layout: function() {\n                var calendarInfo = this.calendarInfo();\n\n                var weekDayNames = this._isMobile() ? calendarInfo.days.namesShort.map(function(name) {\n                    return name[0];\n                }) : calendarInfo.days.names;\n\n                var names = shiftArray(weekDayNames, calendarInfo.firstDay);\n                var columns = $.map(names, function(value) { return { text: value }; });\n                var resources = this.groupedResources;\n                var rows;\n                var groupedView = this._groupedView;\n\n                if (resources.length) {\n                    if (this._isVerticallyGrouped()) {\n                        var inner = []; //add hidden cells in order to sync the content rows\n                        for (var idx = 0; idx < 6; idx++) {\n                            inner.push({ text: \"<div>&nbsp;</div>\", className: \"k-hidden k-slot-cell\" });\n                        }\n                        rows = groupedView._createRowsLayout(resources, inner, this.groupHeaderTemplate, columns);\n                        columns = groupedView._createVerticalColumnsLayout(resources, inner, this.groupHeaderTemplate, columns);\n\n                    } else {\n                        columns = groupedView._createColumnsLayout(resources, columns, this.groupHeaderTemplate, columns);\n                    }\n                }\n\n                return {\n                    columns: columns,\n                    rows: rows\n                };\n            },\n\n            _createEventElement: function(event) {\n                var options = this.options;\n                var editable = options.editable;\n\n                var isMobile = this._isMobile();\n\n                event.showDelete = editable && editable.destroy !== false && !isMobile;\n                event.resizable = editable && editable.resize !== false && !isMobile;\n                event.ns = kendo.ns;\n                event.resources = this.eventResources(event);\n                event.inverseColor = false;\n                event.messages = options.messages || { destroy: \"Delete\" };\n\n                var element = $(this.eventTemplate($.extend({}, event, {\n                    ariaLabel: this._formatEventAriaLabel(event.title, event.start, event.end, event.isAllDay),\n                    template: this.options.eventTemplate\n                })));\n\n                kendo.applyStylesFromKendoAttributes(element, [\"background-color\", \"border-color\"]);\n\n                return element;\n            },\n\n            _isInDateSlot: function(event) {\n                if (!this.groups || this.groups.length === 0) {\n                    return false;\n                }\n\n                var groups = this.groups[0];\n                var slotStart = groups.firstSlot().start;\n                var slotEnd = groups.lastSlot().end - 1;\n\n                var startTime = kendo.date.toUtcTime(event.start);\n                var endTime = kendo.date.toUtcTime(event.end);\n\n                return (isInDateRange(startTime, slotStart, slotEnd) ||\n                    isInDateRange(endTime, slotStart, slotEnd) ||\n                    isInDateRange(slotStart, startTime, endTime) ||\n                    isInDateRange(slotEnd, startTime, endTime)) &&\n                    (!isInDateRange(endTime, slotStart, slotStart) || isInDateRange(endTime, startTime, startTime) || event.isAllDay );\n            },\n\n            _slotIndex: function(date) {\n                return this._slotIndices[getDate(date).getTime()];\n            },\n\n            _positionMobileEvent: function(slotRange, element, group) {\n                var startSlot = slotRange.start,\n                    tableEl = this.table.find(\".k-scheduler-content .k-scheduler-table\")[0],\n                    contentEl = this.table.find(\".k-scheduler-content\")[0],\n                    offsetLeft;\n\n                if (slotRange.start.offsetLeft > slotRange.end.offsetLeft) {\n                   startSlot = slotRange.end;\n                }\n\n                var startIndex = slotRange.start.index;\n                var endIndex = startIndex;\n\n                var eventCount = 3;\n                var events = SchedulerView.collidingEvents(slotRange.events(), startIndex, endIndex);\n\n                events.push({ element: element, start: startIndex, end: endIndex });\n\n                var rows = SchedulerView.createRows(events);\n\n                var slot = slotRange.collection.at(startIndex);\n\n                var container = slot.container;\n\n                if (!container) {\n                    if (this._isRtl && contentEl.clientWidth < contentEl.scrollWidth) {\n                        // RTL mobile rendering with horizontal scroll\n                        offsetLeft = startSlot.offsetLeft - (tableEl.clientWidth - contentEl.clientWidth) + \"px\";\n                    } else {\n                        offsetLeft = startSlot.offsetLeft + \"px\";\n                    }\n\n                    container = $('<div class=\"k-events-container\"></div>').css({\n                        top: startSlot.offsetTop + startSlot.firstChildTop + startSlot.firstChildHeight + \"px\",\n                        left: offsetLeft,\n                        width: startSlot.offsetWidth + \"px\"\n                    });\n\n                    slot.container = container;\n\n                    this.content[0].appendChild(container[0]);\n                }\n\n                if (rows.length <= eventCount) {\n                    slotRange.addEvent({ element: element, start: startIndex, end: endIndex, groupIndex: startSlot.groupIndex });\n\n                    group._continuousEvents.push({\n                        element: element,\n                        uid: element.attr(kendo.attr(\"uid\")),\n                        start: slotRange.start,\n                        end: slotRange.end\n                    });\n\n                    container[0].appendChild(element[0]);\n                }\n            },\n\n            _positionEvent: function(slotRange, element, group) {\n                var eventHeight = this.options.eventHeight;\n                var eventSpacing = this.options.eventSpacing;\n                var startSlot = slotRange.start;\n\n                if (slotRange.start.offsetLeft > slotRange.end.offsetLeft) {\n                    startSlot = slotRange.end;\n                }\n\n                var startIndex = slotRange.start.index;\n                var endIndex = slotRange.end.index;\n                var eventCount = startSlot.eventCount;\n                var events = SchedulerView.collidingEvents(slotRange.events(), startIndex, endIndex);\n                var rightOffset = startIndex !== endIndex ? 3 : 2;\n\n                events.push({ element: element, start: startIndex, end: endIndex });\n\n                var rows = SchedulerView.createRows(events);\n\n                for (var idx = 0, length = Math.min(rows.length, eventCount); idx < length; idx++) {\n                    var rowEvents = rows[idx].events;\n                    var eventTop = (eventHeight === \"auto\")\n                        ? \"\"\n                        : (\n                            startSlot.offsetTop +\n                            startSlot.firstChildTop +\n                            startSlot.firstChildHeight +\n                            CELL_INNER_SPACING +\n                            idx * (eventHeight + eventSpacing) +\n                            \"px\"\n                        );\n\n                    for (var j = 0, eventLength = rowEvents.length; j < eventLength; j++) {\n                        rowEvents[j].element[0].style.top = eventTop;\n                        rowEvents[j].element.attr(kendo.attr(\"order\"), idx);\n                    }\n                }\n\n                if (rows.length > eventCount) {\n                    for (var slotIndex = startIndex; slotIndex <= endIndex; slotIndex++) {\n                        var collection = slotRange.collection;\n\n                        var slot = collection.at(slotIndex);\n\n                        if (slot.more) {\n                            continue;\n                        }\n\n                        slot.more = $(MORE_BUTTON_TEMPLATE()).css({\n                            width: slot.clientWidth - 2,\n                            left: slot.offsetLeft + 2,\n                            top: (eventHeight === \"auto\")\n                                ? \"\"\n                                : (\n                                    slot.offsetTop +\n                                    slot.firstChildTop +\n                                    slot.firstChildHeight +\n                                    CELL_INNER_SPACING +\n                                    (eventCount * eventHeight) +\n                                    ( (eventCount - 1) * eventSpacing) +\n                                    CELL_INNER_SPACING\n                                )\n                        });\n\n                        this.content[0].appendChild(slot.more[0]);\n                    }\n                } else {\n                    slotRange.addEvent({ element: element, start: startIndex, end: endIndex, groupIndex: startSlot.groupIndex });\n\n                    element[0].style.width = slotRange.innerWidth() - rightOffset + \"px\";\n                    element[0].style.left = startSlot.offsetLeft + 2 + \"px\";\n                    element[0].style.height = (eventHeight === \"auto\") ? \"\" : eventHeight + \"px\";\n\n                    group._continuousEvents.push({\n                        element: element,\n                        uid: element.attr(kendo.attr(\"uid\")),\n                        start: slotRange.start,\n                        end: slotRange.end,\n                        order: parseInt(element.attr(kendo.attr(\"order\")), 10)\n                    });\n\n                    element.appendTo(this.content);\n\n                    this._inverseEventColor(element);\n\n                    // Add event meta to slot\n                    var _collectionIndex = slotRange.start.collectionIndex;\n                    var _startSlotIndex = slotRange.start.index;\n                    var _startSlot = group._daySlotCollections[_collectionIndex]._slots[_startSlotIndex];\n\n                    if (!_startSlot.eventMeta) {\n                        _startSlot.eventMeta = [];\n                    }\n\n                    _startSlot.eventMeta.push({\n                        height: (eventHeight === \"auto\") ? element.outerHeight() : eventHeight,\n                        top: 0,\n                        startIndex: _startSlotIndex,\n                        endIndex: slotRange.end.index,\n                        uid: element.attr(kendo.attr(\"uid\")),\n                        order: parseInt(element.attr(kendo.attr(\"order\")), 10)\n                    });\n                }\n            },\n\n            _slotByPosition: function(x, y) {\n                var offset = this.content.offset();\n\n                x -= offset.left;\n                y -= offset.top;\n                y += this.content[0].scrollTop;\n                x += this.content[0].scrollLeft;\n\n                x = Math.ceil(x);\n                y = Math.ceil(y);\n\n                for (var groupIndex = 0; groupIndex < this.groups.length; groupIndex++) {\n                    var slot = this._groupedView._getTimeSlotByPosition(x, y, groupIndex);\n\n                    if (slot) {\n                        return slot;\n                    }\n                }\n\n                return null;\n            },\n\n            _appendResizeHint: function(hint) {\n                hint.appendTo(this.content);\n\n                this._resizeHint = this._resizeHint.add(hint);\n            },\n\n            _updateResizeHint: function(event, groupIndex, startTime, endTime) {\n                this._removeResizeHint();\n\n                var group = this.groups[groupIndex];\n\n                var ranges = group.ranges(startTime, endTime, true, event.isAllDay);\n\n                for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {\n                    this._groupedView._createResizeHint(ranges[rangeIndex]);\n                }\n\n                this._resizeHint.find(\".k-label-top,.k-label-bottom\").text(\"\");\n\n                this._resizeHint.first().addClass(\"k-first\").find(\".k-label-top\").text(kendo.toString(kendo.timezone.toLocalDate(startTime), \"M/dd\"));\n\n                this._resizeHint.last().addClass(\"k-last\").find(\".k-label-bottom\").text(kendo.toString(kendo.timezone.toLocalDate(endTime), \"M/dd\"));\n            },\n\n            _updateMoveHint: function(event, groupIndex, distance) {\n                var start = kendo.date.toUtcTime(event.start) + distance;\n\n                var end = start + event.duration();\n\n                var group = this.groups[groupIndex];\n\n                var ranges = group.ranges(start, end, true, event.isAllDay);\n\n                this._removeMoveHint(event.uid);\n\n                for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {\n                    this._groupedView._createMoveHint(ranges[rangeIndex], event);\n                }\n            },\n\n            _appendMoveHint: function(hint) {\n                hint.appendTo(this.content);\n\n                this._moveHint = this._moveHint.add(hint);\n            },\n\n            _groups: function() {\n                var groupCount = this._groupCount();\n                var tableRows = this.content[0].getElementsByTagName(\"tr\");\n                var startDate = this.startDate();\n                this.groups = [];\n\n                for (var idx = 0; idx < groupCount; idx++) {\n                    this._addResourceView(idx);\n                }\n\n                this._groupedView._addDaySlotCollections(groupCount, tableRows, startDate);\n            },\n\n\n            addDaySlot: function(collection, cell, startDate, cellCount) {\n                var start = kendo.date.addDays(startDate, cellCount);\n                var end = kendo.date.MS_PER_DAY;\n                var eventsPerDay = this.options.eventsPerDay;\n\n                if (startDate.getHours() !== start.getHours()) {\n                    end += (startDate.getHours() - start.getHours()) * kendo.date.MS_PER_HOUR;\n                }\n\n                start = kendo.date.toUtcTime(start);\n                end += start;\n\n                collection.addDaySlot(cell, start, end, eventsPerDay);\n            },\n\n            render: function(events) {\n                this.content.children(\".k-event,.k-more-events,.k-events-container\").remove();\n\n                this._cachedEvents = events;\n\n                this._groups();\n\n                events = new kendo.data.Query(events)\n                    .sort([{ field: \"start\", dir: \"asc\" },{ field: \"end\", dir: \"desc\" }])\n                    .toArray()\n                    .filter(function(event) {\n                        return this._isInDateSlot(event);\n                    }.bind(this));\n\n                var resources = this.groupedResources;\n                var isMobile = this._isMobile();\n                var isGroupedByDate = this._isGroupedByDate();\n                var adaptiveSlotHeight = this.options.adaptiveSlotHeight;\n\n                this._canAdjustSlotHeight = isMobile !== true && isGroupedByDate !== true && resources.length === 0 && adaptiveSlotHeight === true;\n\n                if (resources.length) {\n                    this._renderGroups(events, resources, 0, 1);\n                } else {\n                    this._renderEvents(events, 0);\n                }\n\n                this.refreshLayout();\n                this._ongoingEvents(events);\n\n                this.trigger(\"activate\");\n            },\n\n            _renderEvents: function(events, groupIndex) {\n                var group = this.groups[groupIndex];\n                var view = this._groupedView._view;\n                var isMobile = view._isMobile();\n\n                if (!group) {\n                    return;\n                }\n\n                if (!group._continuousEvents) {\n                    group._continuousEvents = [];\n                }\n\n                if (isMobile) {\n\n                    events.forEach(function(event) {\n                        var ranges = group.slotRanges(event, true);\n                        var range = ranges[0];\n                        var start = range.start.start;\n                        var end = range.end.end;\n                        var rangeStart = new Date(range.start.start);\n                        var rangeEnd = ranges[ranges.length - 1].end.end;\n                        var newStart = new Date(rangeStart);\n                        var newEnd = new Date(end);\n\n                        while (rangeStart.getTime() <= rangeEnd &&\n                            event.end >= kendo.timezone.toLocalDate(rangeStart) &&\n                            event.start <= kendo.timezone.toLocalDate(rangeEnd)) {\n                            var dateRange = group.daySlotRanges(newStart.getTime(), newEnd.getTime(), true)[0];\n                            newEnd.setDate(newEnd.getDate() + 1);\n                            newStart.setDate(newStart.getDate() + 1);\n\n                            if (dateRange) {\n                                dateRange.head = null;\n                                dateRange.middle = null;\n                                dateRange.tail = null;\n                                this._groupedView._positionMobileEvent(event, group, dateRange, 1, start, end, 0);\n                            }\n\n                            rangeStart = kendo.date.addDays(rangeStart, 1);\n                        }\n\n                    }.bind(this));\n\n                } else {\n\n                    events.forEach(function(event) {\n                        var range;\n                        var start = event.start;\n                        var end = event.end;\n                        var ranges = group.slotRanges(event, true);\n                        var rangeCount = ranges.length;\n\n                        for (var rangeIndex = 0; rangeIndex < rangeCount; rangeIndex++) {\n                            range = ranges[rangeIndex];\n\n                            this._groupedView._positionEvent(event, group, range, rangeCount, start, end, rangeIndex);\n                        }\n\n                    }.bind(this));\n\n                    if (this._canAdjustSlotHeight === true) {\n                        this._adjustSlotHeight(group);\n                    }\n\n                }\n            },\n\n            _renderGroups: function(events, resources, offset, columnLevel, parentValue) {\n                var resource = resources[0];\n\n                if (resource) {\n                    var view = resource.dataSource.view();\n\n                    view = view.filter(function(item) {\n                        var itemParentValue = kendo.getter(resource.dataParentValueField)(item);\n\n                        return itemParentValue === null || itemParentValue === undefined || itemParentValue === parentValue;\n                    });\n\n                    for (var itemIdx = 0; itemIdx < view.length; itemIdx++) {\n                        var value = this._resourceValue(resource, view[itemIdx]);\n\n                        var tmp = new kendo.data.Query(events).filter({ field: resource.field, operator: SchedulerView.groupEqFilter(value) }).toArray();\n\n                        if (resources.length > 1) {\n                            offset = this._renderGroups(tmp, resources.slice(1), offset++, columnLevel + 1, value);\n                        } else {\n                            this._renderEvents(tmp, offset++);\n                        }\n                    }\n                }\n                return offset;\n            },\n\n            _groupCount: function() {\n                var resources = this.groupedResources;\n                var groupedView = this._groupedView;\n\n                if (resources.length) {\n                    if (this._isVerticallyGrouped()) {\n                        return groupedView._verticalGroupCount(resources.length - 1);\n                    } else {\n                        return groupedView._horizontalGroupCount(resources.length);\n                    }\n                }\n                return 1;\n            },\n\n            _columnOffsetForResource: function(index) {\n                return this._columnCountForLevel(index) / this._columnCountForLevel(index - 1);\n            },\n\n            destroy: function() {\n                if (this.table) {\n                    this.table.removeClass(\"k-scheduler-monthview\");\n                }\n\n                if (this.content) {\n                    this.content.off(NS);\n                }\n\n                if (this.element) {\n                    this.element.off(NS);\n                }\n\n                SchedulerView.fn.destroy.call(this);\n\n                if (this._isMobile() && this.options.editable) {\n                    if (this.options.editable.create !== false) {\n                        this._addUserEvents.destroy();\n                    }\n                }\n            },\n\n            events: [\"remove\", \"add\", \"edit\", \"navigate\"],\n\n            options: {\n                title: \"Month\",\n                name: \"month\",\n                eventHeight: 25,\n                moreButtonHeight: 13,\n                editable: true,\n                selectedDateFormat: \"{0:y}\",\n                selectedShortDateFormat: \"{0:y}\",\n                selectedMobileDateFormat: \"{0:MMMM}\",\n                groupHeaderTemplate: ({ text }) => text,\n                dayTemplate: DAY_TEMPLATE,\n                eventTemplate: EVENT_TEMPLATE,\n                eventsPerDay: 2,\n                adaptiveSlotHeight: false,\n                eventSpacing: 3,\n                ongoingEvents: {\n                    cssClass: null,\n                    enabled: true,\n                    updateInterval: 60000\n                }\n            }\n        });\n\n\n        function shiftArray(array, idx) {\n            return array.slice(idx).concat(array.slice(0, idx));\n        }\n\n        function firstVisibleMonthDay(date, calendarInfo) {\n            var firstDay = calendarInfo.firstDay,\n                firstVisibleDay = new Date(date.getFullYear(), date.getMonth(), 0, date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n\n            while (firstVisibleDay.getDay() != firstDay) {\n                kendo.date.setTime(firstVisibleDay, -1 * MS_PER_DAY);\n            }\n\n            return firstVisibleDay;\n        }\n\n        function isInDateRange(value, min, max) {\n            var msMin = min,\n                msMax = max,\n                msValue;\n\n            msValue = value;\n\n            return msValue >= msMin && msValue <= msMax;\n        }\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}