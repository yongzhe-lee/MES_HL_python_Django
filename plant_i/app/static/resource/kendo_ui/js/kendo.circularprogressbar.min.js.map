{"version":3,"sources":["raw-js/kendo.circularprogressbar.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendocircularprogressbar","js","this","$","undefined$1","window","kendo","dataviz","interpolateValue","drawing","ui","Widget","Surface","geometry","Animation","Arc","limitValue","round","DrawingGroup","Group","PointerAnimation","extend","init","element","options","fn","call","animationOptions","color","endColor","startColor","duration","Math","abs","newAngle","oldAngle","Color","step","pos","that","angle","setEndAngle","r","g","b","stroke","toHex","CircularProgressBar","userOptions","theme","themes","themeName","lowerName","toLowerCase","SASS_THEMES","indexOf","autoTheme","gauge","themeOptions","_value","value","addClass","redraw","_centerTemplate","_aria","name","ariaRole","centerTemplate","colors","transitions","pointerWidth","indeterminate","label","labelId","events","_restrictValue","_centerSvgElements","_pointerChange","_updateProgress","_initSurface","_buildVisual","_draw","resize","destroy","announce","remove","wrapper","attr","role","appendTo","text","center","_getCenter","circle","_geometry","x","y","arc","geometryChange","position","template","centerElement","_getCenterElement","html","_getColor","_centerTemplatePosition","width","height","css","_centerElement","append","oldValue","newValue","_slotAngle","play","surface","clear","draw","_visuals","find","innerHTML","format","visuals","pointer","radius","min","circleGeometry","Circle","fill","scale","rangePlaceholderColor","_createArc","currentValue","isNumber","idx","length","range","rangeColor","from","to","endAngle","rangeRadius","rangeSize","rangeGeom","radiusX","radiusY","startAngle","opacity","right","bottom","size","_getSize","left","top","max","Point","defaultSize","offsetWidth","offsetHeight","_surfaceElement","surfaceElement","document","createElement","appendChild","elementSize","create","type","renderAs","plugin","jQuery"],"mappings":"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","file":"kendo.circularprogressbar.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.dataviz.themes.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.dataviz.themes'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendocircularprogressbar = global.kendocircularprogressbar || {}, global.kendocircularprogressbar.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n        id: \"circularprogressBar\",\n        name: \"CircularProgressBar\",\n        category: \"web\",\n        description: \"The Circular ProgressBar component represents an SVG loader\",\n        depends: [ \"core\", \"dataviz.themes\" ]\n    };\n\n    (function($, undefined$1) {\n\n        window.kendo.dataviz = window.kendo.dataviz || {};\n        var dataviz = kendo.dataviz;\n        var interpolateValue = dataviz.interpolateValue;\n        var drawing = kendo.drawing;\n        var ui = kendo.ui;\n        var Widget = ui.Widget;\n        var Surface = drawing.Surface;\n        var geometry = kendo.geometry;\n        var Animation = drawing.Animation;\n        var Arc = drawing.Arc;\n        var limitValue = dataviz.limitValue;\n        var round = dataviz.round;\n        var DrawingGroup = drawing.Group;\n        var DEFAULT_HEIGHT = 200;\n        var GEO_ARC_ADJUST_ANGLE = 180;\n        var MINVALUE = 0;\n        var MAXVALUE = 100;\n        var DEFAULT_MARGIN = 5;\n        var ANGULAR_SPEED = 150;\n        var DEFAULT_WIDTH = 200;\n        var MAX_DURATION = 800;\n        var announceElement = '<span aria-live=\"polite\" class=\"k-sr-only k-progress-announce\"></span>';\n\n        var PointerAnimation = Animation.extend({\n            init: function(element, options) {\n                Animation.fn.init.call(this, element, options);\n\n                var animationOptions = this.options;\n                var color = options.endColor;\n                var startColor = options.startColor;\n                var duration = (Math.abs(animationOptions.newAngle - animationOptions.oldAngle) / animationOptions.duration) * 1000;\n                animationOptions.duration = limitValue(duration, ANGULAR_SPEED, MAX_DURATION);\n\n                this.element = element;\n\n                if (startColor !== color) {\n                    this.startColor = new kendo.Color(startColor);\n                    this.color = new kendo.Color(color);\n                }\n            },\n\n            step: function(pos) {\n                var that = this;\n                var options = that.options;\n                var startColor = that.startColor;\n                var color = that.color;\n                var angle = interpolateValue(options.oldAngle, options.newAngle, pos);\n\n                this.element.geometry().setEndAngle(angle);\n\n                if (color) {\n                    var r = round(interpolateValue(startColor.r, color.r, pos));\n                    var g = round(interpolateValue(startColor.g, color.g, pos));\n                    var b = round(interpolateValue(startColor.b, color.b, pos));\n\n                    this.element.stroke(new kendo.Color(r, g, b).toHex());\n                }\n            },\n        });\n\n        var CircularProgressBar = Widget.extend({\n            init: function(element, userOptions) {\n\n                var that = this;\n                Widget.fn.init.call(that, element, userOptions);\n                this.theme = themeOptions(this.options);\n                this._value = this.options.value;\n                this.element.addClass(\"k-gauge\");\n\n                this.redraw();\n                this._centerTemplate();\n                this._aria();\n            },\n\n            options: {\n                name: \"CircularProgressBar\",\n                ariaRole: false,\n                theme: \"sass\",\n                centerTemplate: '',\n                color: \"\",\n                colors: [],\n                transitions: true,\n                pointerWidth: 5,\n                indeterminate: false,\n                label: null,\n                labelId: null\n            },\n\n            events: [ ],\n\n            value: function(value) {\n                var that = this;\n\n                if (value === undefined$1) {\n                    return that._value;\n                }\n\n                value = that._restrictValue(value);\n\n                that._centerSvgElements();\n                that._pointerChange(that._value, value);\n                that._value = value;\n                that._centerTemplate();\n                that._updateProgress();\n            },\n\n            redraw: function() {\n                this._initSurface();\n                this._buildVisual();\n                this._draw();\n            },\n\n            resize: function() {\n                var transitions = this.options.transitions;\n\n                this.options.transitions = false;\n                this._initSurface();\n                this._buildVisual();\n                this._draw();\n                this._centerTemplate();\n                this.options.transitions = transitions;\n            },\n\n            destroy: function() {\n                var that = this;\n\n                if (that.announce) {\n                    that.announce.remove();\n                }\n\n                Widget.fn.destroy.call(that);\n            },\n\n            _aria: function() {\n                var that = this,\n                    options = that.options,\n                    value = that.value() || 0,\n                    wrapper = that.element;\n\n                if (!options.ariaRole) {\n                    return;\n                }\n\n                wrapper.attr({\n                    \"role\": \"progressbar\"\n                });\n\n                if (!options.indeterminate) {\n                    wrapper.attr({\n                        \"aria-valuemin\": 0,\n                        \"aria-valuemax\": 100\n                    });\n                }\n\n                if (!!options.labelId) {\n                    wrapper.attr(\"aria-labelledby\", options.labelId);\n                } else if (!!options.label) {\n                    wrapper.attr(\"aria-label\", options.label);\n                }\n\n                that.announce = $(announceElement);\n                that.announce.appendTo($(\"body\"));\n\n                if (!options.indeterminate) {\n                    wrapper.attr(\"aria-valuenow\", value);\n\n                    that.announce.text(value + \"%\");\n                } else {\n                    that.announce.text(\"Loading...\");\n                }\n            },\n\n            _restrictValue: function(value) {\n\n                if (value < MINVALUE) {\n                    return MINVALUE;\n                }\n\n                if (value > MAXVALUE) {\n                    return MAXVALUE;\n                }\n\n                return value;\n            },\n\n            _updateProgress: function() {\n                var that = this;\n                var options = that.options;\n                var value = that.value() || 0;\n\n                if (options.ariaRole && !options.indeterminate) {\n                    that.element.attr(\"aria-valuenow\", value);\n\n                    if (that.announce) {\n                        that.announce.text(value + \"%\");\n                    }\n                }\n            },\n\n            _centerSvgElements: function() {\n                var center = this._getCenter();\n\n                if (this.circle._geometry.center.x !== center.x ||\n                    this.circle._geometry.center.y !== center.y) {\n\n                        this.circle._geometry.center.x = center.x;\n                        this.circle._geometry.center.y = center.y;\n                        this.arc._geometry.center.x = center.x;\n                        this.arc._geometry.center.y = center.y;\n                        this.circle.geometryChange();\n                        this.arc.geometryChange();\n                }\n            },\n\n            _centerTemplate: function() {\n                var position;\n                var template;\n                var centerElement;\n\n                if (this.options.centerTemplate) {\n                    template = kendo.template(this.options.centerTemplate);\n\n                    centerElement = this._getCenterElement();\n\n                    centerElement.html(template({ color: this._getColor(this.value()), value: this.value() }));\n\n                    position = this._centerTemplatePosition(centerElement.width(), centerElement.height());\n\n                    centerElement.css(position);\n                } else if (this._centerElement) {\n                    this._centerElement.remove();\n                    this._centerElement = null;\n                }\n            },\n\n            _getCenterElement: function() {\n                var centerElement = this._centerElement;\n                if (!centerElement) {\n                    centerElement = this._centerElement = $('<div></div>').addClass('k-arcgauge-label');\n                    this.element.append(centerElement);\n                }\n\n                return centerElement;\n            },\n\n            _pointerChange: function(oldValue, newValue) {\n                var animation;\n\n                if (this.options.transitions) {\n                    animation = new PointerAnimation(this.arc, {\n                        oldAngle: this._slotAngle(oldValue),\n                        startColor: this._getColor(oldValue),\n                        newAngle: this._slotAngle(newValue),\n                        endColor: this._getColor(newValue)\n                    });\n                    animation.play();\n                } else {\n                    this.arc.stroke(this._getColor(newValue));\n                    this.arc.geometry().setEndAngle(this._slotAngle(newValue));\n                }\n            },\n\n            _draw: function() {\n                var arc;\n                var center;\n                var animation;\n                var surface = this.surface;\n\n                surface.clear();\n                surface.draw(this._visuals);\n\n                if (this.options.indeterminate) {\n                    arc = surface.element.find(\"path\");\n                    center = this._getCenter();\n                    arc[0].innerHTML = kendo.format('<animateTransform attributeName=\"transform\" type=\"rotate\" from=\"0 {0} {1}\" to=\"360 {0} {1}\" dur=\"1s\" repeatCount=\"indefinite\" />', center.x, center.y);\n                } else if (this.options.transitions) {\n                    animation = new PointerAnimation(this.arc, {\n                        oldAngle: this._slotAngle(0),\n                        startColor: this._getColor(0),\n                        newAngle: this._slotAngle(this.value()),\n                        endColor: this._getColor(this.value()),\n                    });\n                    animation.play();\n                }\n            },\n\n\n            _buildVisual: function() {\n                var visuals = this._visuals = new DrawingGroup();\n                var center = this._getCenter();\n                var color = this._getColor(this.value()) || this.theme.pointer.color;\n                var radius = Math.min(center.x, center.y) - DEFAULT_MARGIN - this.options.pointerWidth;\n\n                var circleGeometry = new geometry.Circle([center.x, center.y], radius + (this.options.pointerWidth / 2));\n                var circle = this.circle = new drawing.Circle(circleGeometry, {\n                    fill: { color: \"none\" },\n                    stroke: { color: this.theme.scale.rangePlaceholderColor, width: this.options.pointerWidth }\n                });\n\n                visuals.append(circle);\n\n                if (this.options.indeterminate) {\n                    this.arc = this._createArc(360, radius, center, color);\n                } else {\n                    this.arc = this._createArc(this._slotAngle(this.value()), radius, center, color);\n                }\n\n                visuals.append(this.arc);\n            },\n\n            _slotAngle: function(value) {\n                var result;\n\n                result = ((value - MINVALUE) / (MAXVALUE) * 360) + 90;\n\n                return result + GEO_ARC_ADJUST_ANGLE;\n            },\n\n            _getColor: function(value) {\n                var options = this.options;\n                var colors = options.colors;\n                var color = options.color;\n                var currentValue = dataviz.isNumber(value) ? value : 0;\n\n                if (colors) {\n                    for (var idx = 0; idx < colors.length; idx++) {\n                        var range = colors[idx];\n                        var rangeColor = range.color;\n                        var from = range.from; if (from === void 0) { from = 0; }\n                        var to = range.to; if (to === void 0) { to = 100; }\n\n                        if (from <= currentValue && currentValue <= to) {\n                            return rangeColor;\n                        }\n                    }\n                }\n\n                return color;\n            },\n\n            _createArc: function(endAngle, rangeRadius, center, color) {\n                var rangeSize = this.options.pointerWidth;\n                var rangeGeom = new geometry.Arc([center.x, center.y], {\n                    radiusX: rangeRadius + (rangeSize / 2),\n                    radiusY: rangeRadius + (rangeSize / 2),\n                    startAngle: 270,\n                    endAngle: endAngle\n                });\n\n                return new Arc(rangeGeom, {\n                    stroke: {\n                        width: rangeSize,\n                        color: this.options.color || color,\n                        opacity: this.options.opacity\n                    }\n                });\n            },\n\n            _centerTemplatePosition: function(width, height) {\n                var size = this._getSize();\n                var center = this._getCenter();\n\n                var left = center.x - width / 2;\n                var top = center.y - height / 2;\n                var right;\n                var bottom;\n\n                if (width < size.width) {\n                    right = left + width;\n\n                    left = Math.max(left, 0);\n\n                    if (right > size.width) {\n                        left -= right - size.width;\n                    }\n                }\n\n                if (height < size.height) {\n                    bottom = top + height;\n\n                    if (bottom > size.height) {\n                        top -= bottom - size.height;\n                    }\n                }\n\n                return {\n                    left: left,\n                    top: top\n                };\n            },\n\n            _getCenter: function() {\n                var size = this._getSize();\n                return new dataviz.Point(size.width / 2, size.height / 2);\n            },\n\n            _getSize: function() {\n                var element = this.element;\n                var defaultSize = {\n                    width: DEFAULT_WIDTH,\n                    height: DEFAULT_HEIGHT\n                };\n                var width = element[0].offsetWidth;\n                var height = element[0].offsetHeight;\n\n                if (!width) {\n                    width = defaultSize.width;\n                }\n\n                if (!height) {\n                    height = defaultSize.height;\n                }\n\n                return { width: width, height: height };\n            },\n\n            _surfaceElement: function() {\n                if (!this.surfaceElement) {\n                    this.surfaceElement = document.createElement('div');\n                    this.element[0].appendChild(this.surfaceElement);\n                }\n\n                return this.surfaceElement;\n            },\n\n            _initSurface: function() {\n                var that = this;\n                var options = that.options;\n                var surface = that.surface;\n                var element = this._surfaceElement();\n                var size = this._getSize();\n\n                dataviz.elementSize(element, size);\n\n                if (!surface) {\n                    this.surface = Surface.create(element, {\n                        type: options.renderAs\n                    });\n                } else {\n                    this.surface.clear();\n                    this.surface.resize();\n                }\n            }\n\n        });\n\n        function themeOptions(options) {\n            var themes = dataviz.ui.themes || {};\n            var themeName = options.theme || \"\";\n            var lowerName = themeName.toLowerCase();\n\n            if (dataviz.SASS_THEMES.indexOf(lowerName) != -1) {\n                return dataviz.autoTheme().gauge;\n            }\n\n            return (themes[themeName] || themes[lowerName] || {}).gauge;\n        }\n\n        ui.plugin(CircularProgressBar);\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}