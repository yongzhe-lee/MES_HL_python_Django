{"version":3,"sources":["raw-js/kendo.pivot.common.js"],"names":["factory","define","amd","window","kendo","pivotgrid","common","exports","filterFunctionFormats","contains","doesnotcontain","endswith","eq","neq","startswith","operators","in","serializeExpression","expression","command","value","String","field","operator","str","values","_i","arguments","length","forEach","index","replace","RegExp","formatString","serializeMembers","members","measures","sort","memberName","parsed","found","expanded","child","root","idx","member","name_1","name","push","hierarchyName","baseHierarchyPath","j","l","indexOf","expand","concat","parseDescriptors","rootNames","some","n","getRootNames","crossJoinCommands","names","crossJoinCommand","mapNames","expandMemberDescriptor","join","measureNames","measure","result","undefined","rootLength","slice","name_2","rootName","tmp","crossJoin","sortDescriptor","length_1","sortDescriptorForMember","dir","parts","split","pop","shift","createRequestBody","options","_a","columnAxes","_b","rowAxes","_c","measureAxes","_d","_e","filter","measuresRowAxis","measuresAxis","filters","cube","current","serializeFilters","connection","catalog","__assign","Object","assign","t","s","i","p","prototype","hasOwnProperty","call","apply","this","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","__spreadArrays","il","r","Array","k","a","jl","parseResponse","response","xmlDoc","DOMParser","parseFromString","axes","from","querySelectorAll","cells","map","cell","fmtValue","getPropertyValue","ordinal","parseInt","getAttribute","columns","tuples","rows","data","axis","tuple","lNum","hasChildren","caption","children","hierarchy","levelName","levelNum","parentName","translateAxis","indexedData","fill","c","counter","rowTuple","colTuple","columnTuple","node","querySelector","textContent","discoverCommands","schemaCatalogs","schemaCubes","schemaDimensions","schemaHierarchies","schemaKPIs","schemaLevels","schemaMeasures","schemaMembers","createDiscoverBody","properties","serializeOptions","restrictions","Catalog","parentTagName","capitalize","key","toUpperCase","discoverParser","row","description","type","defaultHierarchy","uniqueName","dimensionUniqueName","displayFolder","origin","defaultMember","goal","status","trend","statusGraphic","trendGraphic","groupName","orderingProperty","hierarchyUniqueName","aggregator","defaultFormat","levelUniqueName","childrenCardinality","getMaxNesting","set","Set","add","size","getMaxExpansion","generateNormalizedPath","parent","normalizedPath","Boolean","toMatrix","rowIndex","colIndex","maxDepth","maxBreadth","matrix","leafs","branchDepth","branchBreadth","depth","breadth","matrixResult","leafsResult","findIndex","level","inject","total","path","splice","collOffset","newMatrix","newLeafs","childBreadth","withTotal","alt","childIndex","childHierarchy","copy","obj","JSON","parse","stringify","kpiMeasure","kpi","buildKPIMeasures","HEADERS_ACTION","compareAxisWithField","b","compareAxes","filterField","out","_loop_2","startsWith","duplicatedAxisIndex","ax","insertAxis","toInsert","state","dropTarget","dropDirection","offset","PIVOT_CONFIGURATOR_ACTION","findPath","matchFn","matched","match","h","headersReducer","action","toggle","existing","find","payload","collapse","existing_1","nextState","filtered_1","tree","configuratorReducer","newRows","newColumns","newMeasures","newSort","newFilter","newDragitem","newDropZone","newDropDirection","newDropTarget","toggleSelection","isArray","payload_1","removeMeasureAxis","addMeasureAxis","every","m","removeMeasureAxes","addMeasureAxes","removeColumnAxis","removeRowAxis","addColumnAxis","addRowAxis","addColumnAxes","removeColumnAxes","addRowAxes","removeRowAxes","remove","setDragItem","setDropZone","setDropTarget","setDropDirection","drop","dragItem","dropZone","currentColumn","currentRow","currentMeasure","setSort","setFilter","addFilter","changeFilter","removeFilter","minAggregate","init","min","Number","POSITIVE_INFINITY","merge","src","dest","Math","accumulate","acc","isFinite","NaN","format","toFixed","maxAggregate","max","NEGATIVE_INFINITY","isPresent","isBlank","isFunction","isString","isNotNullOrEmptyString","trim","isNullOrEmptyString","isDate","getTime","ifElse","predicate","right","left","compose","args","reduceRight","curr","getterCache","FIELD_REGEX","what","getter","safe","fields","indexAccessor","pairwise","empty","isNotEmptyArray","formatDescriptors","accessor","formatter","sanitizeDateLiterals","removeAfterDot","directionFormatter","take","aggregates","group","formatSort","formatGroup","formatAggregates","aggregate","formatDateValue","date","Date","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","skip","floor","transformSort","filterFormatter","x","ignoreCase","target","convert","mapper","keys","reduce","bind","translateAggregate","source","toLowerCase","translateAggregates","valueOrDefault","defaultValue","translateGroup","hasSubgroups","items","Aggregates","Member","HasSubgroups","Items","Key","logic","or","fn","identity","and","operatorsMap","doesnotendwith","doesnotstartwith","lastIndexOf","gt","gte","isempty","isnotempty","isnotnull","isnull","lt","lte","dateRegExp","typedGetter","prop","exec","isNaN","parseFloat","isNumeric","transformFilter","itemProp","convertValue","transformCompositeFilter","combiner","forEachDesc","desc","callbackfn","filterFields","callback","initializeFiltering","descriptor","compositeFilter","fieldValues","hasFilter","filteringAxes","filteringFields_1","subNode","initialNode","childNode","get","Map","splitKeyValue","keyValue","separatorIndex","substring","calculateColumnData","dataField","childData_1","parentData_1","mergeTrees","srcChild","destChild","calculateColumns","columnsData","srcColumns","destColumns","createPath","caption_1","membersNode","axisSettings","cache","cacheData","has","currentLevel","currentLevelNode","levelField_1","_loop_1","d","item","newDest","currentPath","readData","dataTree","rowTuples","columnTuples","columnSettings","rowSettings","rowsCache","rowNode","rowColumnsNode","col","measuresMember_1","colNode","mergeData","exclude","rootFields","definitions","createTuples","axesSettings","sortDescriptors","excludeFields","parentFields","flatMembers","topTuple","allTuple","topField","getTopMembersTuple","currDef","axe","keysToAdd","currDefMembers","element","delete","nodeData","curLevel_1","childrenByKeys","order","sortableA","sortValue","sortableB","sortFunc","leafValue","leafTuple","axisCaption","curCaption","addMeasure","measureMember","tupleCopy","addMultipleMeasures","tupleWithMeasure","addKPI","averageAggregate","sumA","count","cloneDataTree","createAxisDescriptors","expandTree","descriptors","createDataState","createDataTree","leafNodes","dataItem","filteringDataItem_1","displayValue","dataKey","node_1","eachAxis","leaf","createFlatSchemaDimensions","dimensions","dim","createLocalDataState","fetchData","fetchOptions","headers","method","fetch","url","text","fetchDiscover","stringResponse","sumAggregate","sum","toColumns","rowSpan","colSpan","toData","hash","membersNames","columnsIndexes","rowsIndexes","colMembers","rowMembers","toRows","rotateMatrix","toTree","tupleIndex","memberIndex","parent_1","parentKey","intruderIndex","defineProperty"],"mappings":"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","file":"kendo.pivot.common.min.js","sourcesContent":["(function (factory) {\n    typeof define === 'function' && define.amd ? define(['kendo.core'], factory) :\n    factory();\n})((function () {\n    (function () {\n\n    window.kendo.pivotgrid = window.kendo.pivotgrid || {};\n    window.kendo.pivotgrid.common = (function (exports) {\n        \n\n        var filterFunctionFormats = {\n            contains: \", InStr({0}.CurrentMember.MEMBER_CAPTION,\\\"{1}\\\") > 0\",\n            doesnotcontain: \", InStr({0}.CurrentMember.MEMBER_CAPTION,\\\"{1}\\\")\",\n            endswith: \", Right({0}.CurrentMember.MEMBER_CAPTION,Len(\\\"{1}\\\"))=\\\"{1}\\\"\",\n            eq: \", {0}.CurrentMember.MEMBER_CAPTION = \\\"{1}\\\"\",\n            neq: \", {0}.CurrentMember.MEMBER_CAPTION = \\\"{1}\\\"\",\n            startswith: \", Left({0}.CurrentMember.MEMBER_CAPTION,Len(\\\"{1}\\\"))=\\\"{1}\\\"\"\n        };\n        var operators = {\n            doesnotcontain: 'doesnotcontain',\n            in: 'in',\n            neq: \"neq\"\n        };\n        /**\n         * @hidden\n         */\n        function serializeFilters(filters, cube) {\n            var command = \"\";\n            var current = \"\";\n            for (var idx = filters.length - 1; idx >= 0; idx--) {\n                current = \"SELECT (\";\n                current += serializeExpression(filters[idx]);\n                current += \") ON 0\";\n                if (idx === filters.length - 1) {\n                    current += \" FROM [\" + cube + \"]\";\n                    command = current;\n                }\n                else {\n                    command = current + \" FROM ( \" + command + \" )\";\n                }\n            }\n            return command;\n        }\n        function serializeExpression(expression) {\n            var command = '';\n            var value = String(expression.value);\n            var field = expression.field;\n            var operator = expression.operator;\n            if (operator === operators.in) {\n                command += \"{\";\n                command += value;\n                command += \"}\";\n            }\n            else {\n                command += operator === operators.neq || operator === operators.doesnotcontain ? '-' : '';\n                command += \"Filter(\";\n                command += field + \".MEMBERS\";\n                command += formatString(filterFunctionFormats[operator], field, value);\n                command += \")\";\n            }\n            return command;\n        }\n        function formatString(str) {\n            var values = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                values[_i - 1] = arguments[_i];\n            }\n            values.forEach(function (value, index) {\n                str = str.replace(new RegExp(\"\\\\{\" + index + \"\\\\}\", 'g'), value);\n            });\n            return str;\n        }\n\n        /**\n         * @hidden\n         */\n        function serializeMembers(members, measures, sort) {\n            var command = \"\";\n            members = members || [];\n            var parsed = parseDescriptors(members);\n            var expanded = parsed.expanded;\n            var rootNames = getRootNames(parsed.root);\n            var crossJoinCommands = [];\n            var length = expanded.length;\n            var idx = 0;\n            var memberName;\n            var names = [];\n            if (rootNames.length > 1 || measures.length > 1) {\n                crossJoinCommands.push(crossJoinCommand(rootNames, measures));\n                for (; idx < length; idx++) {\n                    memberName = expandMemberDescriptor(expanded[idx].name, sort);\n                    names = mapNames(memberName, rootNames);\n                    crossJoinCommands.push(crossJoinCommand(names, measures));\n                }\n                command += crossJoinCommands.join(\",\");\n            }\n            else {\n                for (; idx < length; idx++) {\n                    memberName = expandMemberDescriptor(expanded[idx].name, sort);\n                    names.push(memberName[0]);\n                }\n                command += rootNames.concat(names).join(\",\");\n            }\n            return command;\n        }\n        /**\n         * @hidden\n         */\n        function measureNames(measures) {\n            var length = measures.length;\n            var result = [];\n            var measure;\n            for (var idx = 0; idx < length; idx++) {\n                measure = measures[idx];\n                result.push(measure.name !== undefined ? measure.name : measure);\n            }\n            return result;\n        }\n        function getRootNames(members) {\n            var root = [];\n            members.forEach(function (member) {\n                var name = member.name[0];\n                var hierarchyName = baseHierarchyPath(name);\n                if (!root.some(function (n) { return n.indexOf(hierarchyName) === 0; })) {\n                    root.push(name);\n                }\n            });\n            return root;\n        }\n        function parseDescriptors(members) {\n            var expanded = [];\n            var child = [];\n            var root = [];\n            var idx = 0;\n            var found;\n            for (; idx < members.length; idx++) {\n                var member = members[idx];\n                var name_1 = member.name;\n                found = false;\n                if (name_1.length > 1) {\n                    child.push(member);\n                }\n                else {\n                    var hierarchyName = baseHierarchyPath(name_1[0]);\n                    for (var j = 0, l = root.length; j < l; j++) {\n                        if (root[j].name[0].indexOf(hierarchyName) === 0) {\n                            found = true;\n                            break;\n                        }\n                    }\n                    if (!found) {\n                        root.push(member);\n                    }\n                    if (member.expand) {\n                        expanded.push(member);\n                    }\n                }\n            }\n            expanded = expanded.concat(child);\n            return {\n                expanded: expanded,\n                root: root\n            };\n        }\n        function mapNames(names, rootNames) {\n            var rootLength = rootNames.length;\n            rootNames = rootNames.slice(0);\n            for (var idx = 0; idx < names.length; idx++) {\n                var name_2 = names[idx];\n                for (var j = 0; j < rootLength; j++) {\n                    var rootName = baseHierarchyPath(rootNames[j]);\n                    if (name_2.indexOf(rootName) !== -1) {\n                        rootNames[j] = name_2;\n                        break;\n                    }\n                }\n            }\n            return rootNames;\n        }\n        function crossJoinCommand(members, measures) {\n            var tmp = members.slice(0);\n            if (measures.length > 1) {\n                tmp.push(\"{\" + measureNames(measures).join(\",\") + \"}\");\n            }\n            return crossJoin(tmp);\n        }\n        function expandMemberDescriptor(names, sort) {\n            var idx = names.length - 1;\n            var name = names[idx];\n            var sortDescriptor = sortDescriptorForMember(sort, name);\n            if (sortDescriptor && sortDescriptor.dir) {\n                name = \"ORDER(\" + name + \".Children,\" + sortDescriptor.field + \".CurrentMember.MEMBER_CAPTION,\" + sortDescriptor.dir + \")\";\n            }\n            else {\n                name += \".Children\";\n            }\n            names[idx] = name;\n            return names;\n        }\n        function sortDescriptorForMember(sort, member) {\n            for (var idx = 0, length_1 = sort.length; idx < length_1; idx++) {\n                if (member.indexOf(sort[idx].field) === 0) {\n                    return sort[idx];\n                }\n            }\n            return null;\n        }\n        function baseHierarchyPath(memberName) {\n            var parts = memberName.split(\".\");\n            if (parts.length > 2) {\n                return parts[0] + \".\" + parts[1];\n            }\n            return memberName;\n        }\n        function crossJoin(names) {\n            var result = \"CROSSJOIN({\";\n            var name;\n            if (names.length > 2) {\n                name = names.pop();\n                result += crossJoin(names);\n            }\n            else {\n                result += names.shift();\n                name = names.pop();\n            }\n            result += \"},{\";\n            result += name;\n            result += \"})\";\n            return result;\n        }\n\n        /**\n         * @hidden\n         */\n        function createRequestBody(options) {\n            var command = '<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\"><Header/><Body><Execute xmlns=\"urn:schemas-microsoft-com:xml-analysis\"><Command><Statement>';\n            var _a = options.columnAxes, columnAxes = _a === void 0 ? [] : _a, _b = options.rowAxes, rowAxes = _b === void 0 ? [] : _b;\n            var _c = options.measureAxes, measureAxes = _c === void 0 ? [] : _c, _d = options.sort, sort = _d === void 0 ? [] : _d, _e = options.filter, filter = _e === void 0 ? [] : _e;\n            var measuresRowAxis = options.measuresAxis === \"rows\";\n            command += \"SELECT NON EMPTY {\";\n            if (!columnAxes.length && rowAxes.length && (!measureAxes.length || (measureAxes.length && measuresRowAxis))) {\n                columnAxes = rowAxes;\n                rowAxes = [];\n                measuresRowAxis = false;\n            }\n            if (!columnAxes.length && !rowAxes.length) {\n                measuresRowAxis = false;\n            }\n            if (columnAxes.length) {\n                command += serializeMembers(columnAxes, !measuresRowAxis ? measureAxes : [], sort);\n            }\n            else if (measureAxes.length && !measuresRowAxis) {\n                command += measureNames(measureAxes).join(\",\");\n            }\n            command += \"} DIMENSION PROPERTIES CHILDREN_CARDINALITY, PARENT_UNIQUE_NAME ON COLUMNS\";\n            if (rowAxes.length || (measuresRowAxis && measureAxes.length > 1)) {\n                command += \", NON EMPTY {\";\n                if (rowAxes.length) {\n                    command += serializeMembers(rowAxes, measuresRowAxis ? measureAxes : [], sort);\n                }\n                else {\n                    command += measureNames(measureAxes).join(\",\");\n                }\n                command += \"} DIMENSION PROPERTIES CHILDREN_CARDINALITY, PARENT_UNIQUE_NAME ON ROWS\";\n            }\n            if (filter.length) {\n                command += \" FROM \";\n                command += \"(\";\n                command += serializeFilters(filter, options.connection.cube);\n                command += \")\";\n            }\n            else {\n                command += \" FROM [\" + options.connection.cube + \"]\";\n            }\n            if (measureAxes.length === 1 && columnAxes.length) {\n                command += \" WHERE (\" + measureNames(measureAxes).join(\",\") + \")\";\n            }\n            command += '</Statement></Command><Properties><PropertyList><Catalog>' + options.connection.catalog + '</Catalog><Format>Multidimensional</Format></PropertyList></Properties></Execute></Body></Envelope>';\n            return command.replace(/&/g, \"&amp;\");\n        }\n\n        /******************************************************************************\n        Copyright (c) Microsoft Corporation.\n\n        Permission to use, copy, modify, and/or distribute this software for any\n        purpose with or without fee is hereby granted.\n\n        THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n        REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n        AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n        INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n        LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n        OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n        PERFORMANCE OF THIS SOFTWARE.\n        ***************************************************************************** */\n\n        var __assign = function() {\n            __assign = Object.assign || function __assign(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n\n        function __awaiter(thisArg, _arguments, P, generator) {\n            function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n            return new (P || (P = Promise))(function (resolve, reject) {\n                function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n                function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n                function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n                step((generator = generator.apply(thisArg, _arguments || [])).next());\n            });\n        }\n\n        function __generator(thisArg, body) {\n            var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n            return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n            function verb(n) { return function (v) { return step([n, v]); }; }\n            function step(op) {\n                if (f) throw new TypeError(\"Generator is already executing.\");\n                while (_) try {\n                    if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n                    if (y = 0, t) op = [op[0] & 2, t.value];\n                    switch (op[0]) {\n                        case 0: case 1: t = op; break;\n                        case 4: _.label++; return { value: op[1], done: false };\n                        case 5: _.label++; y = op[1]; op = [0]; continue;\n                        case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                        default:\n                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                            if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                            if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                            if (t[2]) _.ops.pop();\n                            _.trys.pop(); continue;\n                    }\n                    op = body.call(thisArg, _);\n                } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n                if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n            }\n        }\n\n        /** @deprecated */\n        function __spreadArrays() {\n            for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n            for (var r = Array(s), k = 0, i = 0; i < il; i++)\n                for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n                    r[k] = a[j];\n            return r;\n        }\n\n        /**\n         * @hidden\n         */\n        function parseResponse(response) {\n            var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n            var axes = Array.from(xmlDoc.querySelectorAll(\"Axis\"));\n            var cells = Array.from(xmlDoc.querySelectorAll(\"CellData > Cell\"))\n                .map(function (cell) { return ({\n                fmtValue: getPropertyValue(cell, \"FmtValue\"),\n                ordinal: parseInt(cell.getAttribute(\"CellOrdinal\"), 10),\n                value: getPropertyValue(cell, \"Value\")\n            }); });\n            var columns = { tuples: [] };\n            var rows = { tuples: [] };\n            var data = [];\n            axes.forEach(function (axis) {\n                if (axis.getAttribute('name') !== \"SlicerAxis\") {\n                    var tuples = columns.tuples.length === 0 ? columns.tuples : rows.tuples;\n                    Array.prototype.push.apply(tuples, translateAxis(axis));\n                }\n            });\n            var indexedData = new Array(rows.tuples.length * columns.tuples.length).fill(null);\n            cells.forEach(function (c) { indexedData[c.ordinal] = c; });\n            var counter = 0;\n            rows.tuples.forEach(function (rowTuple) {\n                columns.tuples.forEach(function (colTuple) {\n                    data.push({\n                        columnTuple: colTuple,\n                        data: indexedData[counter],\n                        rowTuple: rowTuple\n                    });\n                    counter++;\n                });\n            });\n            return { columns: columns, data: data, rows: rows };\n        }\n        /**\n         * @hidden\n         */\n        function getPropertyValue(member, name) {\n            var node = member.querySelector(name);\n            return node ? node.textContent : \"\";\n        }\n        function translateAxis(axis) {\n            var tuples = Array.from(axis.querySelectorAll(\"Tuple\"));\n            return tuples.map(function (tuple) {\n                var memberElements = Array.from(tuple.querySelectorAll(\"Member\"));\n                var members = memberElements.map(function (member) {\n                    var lNum = parseInt(getPropertyValue(member, \"LNum\") || \"0\", 10);\n                    var hasChildren = parseInt(getPropertyValue(member, \"CHILDREN_CARDINALITY\") || \"0\", 10) > 0;\n                    return {\n                        caption: getPropertyValue(member, \"Caption\"),\n                        children: [],\n                        hasChildren: hasChildren,\n                        hierarchy: member.getAttribute('Hierarchy'),\n                        levelName: getPropertyValue(member, \"LName\"),\n                        levelNum: lNum,\n                        name: getPropertyValue(member, \"UName\"),\n                        parentName: getPropertyValue(member, \"PARENT_UNIQUE_NAME\")\n                    };\n                });\n                return { members: members };\n            });\n        }\n\n        /**\n         * @hidden\n         */\n        var discoverCommands = {\n            schemaCatalogs: \"DBSCHEMA_CATALOGS\",\n            schemaCubes: \"MDSCHEMA_CUBES\",\n            schemaDimensions: \"MDSCHEMA_DIMENSIONS\",\n            schemaHierarchies: \"MDSCHEMA_HIERARCHIES\",\n            schemaKPIs: \"MDSCHEMA_KPIS\",\n            schemaLevels: \"MDSCHEMA_LEVELS\",\n            schemaMeasures: \"MDSCHEMA_MEASURES\",\n            schemaMembers: \"MDSCHEMA_MEMBERS\"\n        };\n        /**\n         * @hidden\n         */\n        function createDiscoverBody(options) {\n            var properties = {};\n            var command = '<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\"><Header/><Body><Discover xmlns=\"urn:schemas-microsoft-com:xml-analysis\">';\n            command += \"<RequestType>\" + (discoverCommands[options.command] || options.command) + \"</RequestType>\";\n            command += \"<Restrictions>\" + serializeOptions(\"RestrictionList\", options.restrictions, true) + \"</Restrictions>\";\n            if (options.connection && options.connection.catalog) {\n                properties.Catalog = options.connection.catalog;\n            }\n            command += \"<Properties>\" + serializeOptions(\"PropertyList\", properties, false) + \"</Properties>\";\n            command += '</Discover></Body></Envelope>';\n            return command;\n        }\n        function serializeOptions(parentTagName, options, capitalize) {\n            var result = \"\";\n            if (options) {\n                result += \"<\" + parentTagName + \">\";\n                var value = void 0;\n                for (var key in options) {\n                    if (options[key]) {\n                        value = options[key];\n                        if (capitalize) {\n                            key = key.replace(/([A-Z]+(?=$|[A-Z][a-z])|[A-Z]?[a-z]+)/g, \"$1_\").toUpperCase().replace(/_$/, \"\");\n                        }\n                        result += \"<\" + key + \">\" + value + \"</\" + key + \">\";\n                    }\n                }\n                result += \"</\" + parentTagName + \">\";\n            }\n            else {\n                result += \"<\" + parentTagName + \"/>\";\n            }\n            return result;\n        }\n\n        /**\n         * @hidden\n         */\n        function parseCubes(response) {\n            var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n            var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n                .map(function (row) { return ({\n                name: getPropertyValue(row, \"CUBE_NAME\"),\n                caption: getPropertyValue(row, \"CUBE_CAPTION\"),\n                description: getPropertyValue(row, \"DESCRIPTION\"),\n                type: getPropertyValue(row, \"CUBE_TYPE\")\n            }); });\n            return rows;\n        }\n        /**\n         * @hidden\n         */\n        function parseCatalogs(response) {\n            var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n            var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n                .map(function (row) { return ({\n                name: getPropertyValue(row, \"CATALOG_NAME\"),\n                description: getPropertyValue(row, \"DESCRIPTION\")\n            }); });\n            return rows;\n        }\n        /**\n         * @hidden\n         */\n        function parseMeasures(response) {\n            var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n            var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n                .map(function (row) { return ({\n                name: getPropertyValue(row, \"MEASURE_NAME\"),\n                caption: getPropertyValue(row, \"MEASURE_CAPTION\"),\n                uniqueName: getPropertyValue(row, \"MEASURE_UNIQUE_NAME\"),\n                description: getPropertyValue(row, \"DESCRIPTION\"),\n                aggregator: getPropertyValue(row, \"MEASURE_AGGREGATOR\"),\n                groupName: getPropertyValue(row, \"MEASUREGROUP_NAME\"),\n                displayFolder: getPropertyValue(row, \"MEASURE_DISPLAY_FOLDER\"),\n                defaultFormat: getPropertyValue(row, \"DEFAULT_FORMAT_STRING\")\n            }); });\n            return rows;\n        }\n        /**\n         * @hidden\n         */\n        function parseKPIs(response) {\n            var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n            var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n                .map(function (row) { return ({\n                name: getPropertyValue(row, \"KPI_NAME\"),\n                uniqueName: getPropertyValue(row, \"KPI_NAME\"),\n                caption: getPropertyValue(row, \"KPI_CAPTION\"),\n                value: getPropertyValue(row, \"KPI_VALUE\"),\n                goal: getPropertyValue(row, \"KPI_GOAL\"),\n                status: getPropertyValue(row, \"KPI_STATUS\"),\n                trend: getPropertyValue(row, \"KPI_TREND\"),\n                statusGraphic: getPropertyValue(row, \"KPI_STATUS_GRAPHIC\"),\n                trendGraphic: getPropertyValue(row, \"KPI_TREND_GRAPHIC\"),\n                description: getPropertyValue(row, \"KPI_DESCRIPTION\"),\n                groupName: getPropertyValue(row, \"MEASUREGROUP_NAME\"),\n                type: \"kpi\"\n            }); });\n            return rows;\n        }\n        /**\n         * @hidden\n         */\n        function parseDimensions(response) {\n            var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n            var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n                .map(function (row) { return ({\n                caption: getPropertyValue(row, \"DIMENSION_CAPTION\"),\n                defaultHierarchy: getPropertyValue(row, \"DEFAULT_HIERARCHY\"),\n                description: getPropertyValue(row, \"DESCRIPTION\"),\n                name: getPropertyValue(row, \"DIMENSION_NAME\"),\n                type: parseInt(getPropertyValue(row, \"DIMENSION_TYPE\"), 10),\n                uniqueName: getPropertyValue(row, \"DIMENSION_UNIQUE_NAME\")\n            }); });\n            return rows;\n        }\n        /**\n         * @hidden\n         */\n        function parseHierarchies(response) {\n            var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n            var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n                .map(function (row) { return ({\n                name: getPropertyValue(row, \"HIERARCHY_NAME\"),\n                caption: getPropertyValue(row, \"HIERARCHY_CAPTION\"),\n                description: getPropertyValue(row, \"DESCRIPTION\"),\n                uniqueName: getPropertyValue(row, \"HIERARCHY_UNIQUE_NAME\"),\n                dimensionUniqueName: getPropertyValue(row, \"DIMENSION_UNIQUE_NAME\"),\n                displayFolder: getPropertyValue(row, \"HIERARCHY_DISPLAY_FOLDER\"),\n                origin: getPropertyValue(row, \"HIERARCHY_ORIGIN\"),\n                defaultMember: getPropertyValue(row, \"DEFAULT_MEMBER\")\n            }); });\n            return rows;\n        }\n        /**\n         * @hidden\n         */\n        function parseLevels(response) {\n            var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n            var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n                .map(function (row) { return ({\n                name: getPropertyValue(row, \"LEVEL_NAME\"),\n                caption: getPropertyValue(row, \"LEVEL_CAPTION\"),\n                description: getPropertyValue(row, \"DESCRIPTION\"),\n                uniqueName: getPropertyValue(row, \"LEVEL_UNIQUE_NAME\"),\n                dimensionUniqueName: getPropertyValue(row, \"DIMENSION_UNIQUE_NAME\"),\n                displayFolder: getPropertyValue(row, \"LEVEL_DISPLAY_FOLDER\"),\n                orderingProperty: getPropertyValue(row, \"LEVEL_ORDERING_PROPERTY\"),\n                origin: getPropertyValue(row, \"LEVEL_ORIGIN\"),\n                hierarchyUniqueName: getPropertyValue(row, \"HIERARCHY_UNIQUE_NAME\")\n            }); });\n            return rows;\n        }\n        /**\n         * @hidden\n         */\n        function parseMembers(response) {\n            var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n            var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n                .map(function (row) { return ({\n                name: getPropertyValue(row, \"MEMBER_NAME\"),\n                caption: getPropertyValue(row, \"MEMBER_CAPTION\"),\n                uniqueName: getPropertyValue(row, \"MEMBER_UNIQUE_NAME\"),\n                dimensionUniqueName: getPropertyValue(row, \"DIMENSION_UNIQUE_NAME\"),\n                hierarchyUniqueName: getPropertyValue(row, \"HIERARCHY_UNIQUE_NAME\"),\n                levelUniqueName: getPropertyValue(row, \"LEVEL_UNIQUE_NAME\"),\n                childrenCardinality: getPropertyValue(row, \"CHILDREN_CARDINALITY\")\n            }); });\n            return rows;\n        }\n\n        var discoverParser = {\n            schemaCatalogs: parseCatalogs,\n            schemaCubes: parseCubes,\n            schemaDimensions: parseDimensions,\n            schemaHierarchies: parseHierarchies,\n            schemaKPIs: parseKPIs,\n            schemaLevels: parseLevels,\n            schemaMeasures: parseMeasures,\n            schemaMembers: parseMembers\n        };\n        /**\n         * Fetches the data.\n         *\n         * @param options RequestOptions\n         * @returns Promise<ResponseData>\n         *\n         * @example\n         * const options: RequestOptions = { ... };\n         *\n         * fetchData(options).then(createDataState).then((dataState: DataState) => {\n         *  // Update the UI\n         * });\n         */\n        /**\n         * @hidden\n         */\n        var fetchData = function (fetchOptions, options) { return __awaiter(void 0, void 0, void 0, function () {\n            var init, response, stringResponse;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        init = __assign({ body: createRequestBody(options), headers: { 'Content-Type': 'text/xml' }, method: 'POST' }, fetchOptions.init);\n                        return [4 /*yield*/, fetch(fetchOptions.url, init)];\n                    case 1:\n                        response = _a.sent();\n                        return [4 /*yield*/, response.text()];\n                    case 2:\n                        stringResponse = _a.sent();\n                        return [2 /*return*/, parseResponse(stringResponse)];\n                }\n            });\n        }); };\n        /**\n         * @hidden\n         */\n        var fetchDiscover = function (fetchOptions, options) { return __awaiter(void 0, void 0, void 0, function () {\n            var init, response, stringResponse;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        init = __assign({ body: createDiscoverBody(options), headers: { 'Content-Type': 'text/xml' }, method: 'POST' }, fetchOptions.init);\n                        return [4 /*yield*/, fetch(fetchOptions.url, init)];\n                    case 1:\n                        response = _a.sent();\n                        return [4 /*yield*/, response.text()];\n                    case 2:\n                        stringResponse = _a.sent();\n                        return [2 /*return*/, discoverParser[options.command](stringResponse)];\n                }\n            });\n        }); };\n\n        /**\n         * Creates the state object. See `fetchData`.\n         *\n         * @param response - ResponseData\n         * @returns DataState\n         */\n        /**\n         * @hidden\n         */\n        var createDataState = function (response) {\n            var state = {\n                columns: response.columns.tuples,\n                data: response.data,\n                rows: response.rows.tuples\n            };\n            return state;\n        };\n\n        /**\n         * Creates a collection of AxisDescriptor base on the expandTree.\n         * @param expandTree - { [key: string]: boolean }\n         * @returns AxisDescriptor[]\n         *\n         * @example\n         * See `setRowExpand` or `setColumnExpand` functions.\n         */\n        /**\n         * @hidden\n         */\n        function createAxisDescriptors(expandTree) {\n            var descriptors = [];\n            for (var _i = 0, _a = Object.keys(expandTree); _i < _a.length; _i++) {\n                var key = _a[_i];\n                descriptors.push({ name: JSON.parse(key), expand: expandTree[key] });\n            }\n            return descriptors;\n        }\n\n        /**\n         * Sets sort descriptors to request options.\n         *\n         * @param options - RequestOptions\n         * @param sort - SortDescriptor[]\n         *\n         * @example\n         * const options: RequestOptions = { ... };\n         * const sort: SortDescriptor[] = [{ ... }, { ... }];\n         * setSort(options, sort);\n         * // skip the sort parameter to clear current filter - setSort(options);\n         *\n         * fetchData(options).then(createDataState).then((dataState: DataState) => {\n         *  // Update the UI\n         * });\n         */\n        /**\n         * @hidden\n         */\n        var setSort = function (options, sort) {\n            if (sort === void 0) { sort = []; }\n            options.sort = sort;\n        };\n\n        /**\n         * Sets filter descriptors to request options.\n         *\n         * @param options - RequestOptions\n         * @param filter - FilterDescriptor[]\n         *\n         * @example\n         * const options: RequestOptions = { ... };\n         * const filter: FilterDescriptor[] = [{ ... }, { ... }];\n         * setFilter(options, filter);\n         * // skip the filter parameter to clear current filter - setFilter(options);\n         *\n         * fetchData(options).then(createDataState).then((dataState: DataState) => {\n         *  // Update the UI\n         * });\n         */\n        /**\n         * @hidden\n         */\n        var setFilter = function (options, filter) {\n            if (filter === void 0) { filter = []; }\n            options.filter = filter;\n        };\n\n        // A typical tree depth count won't work for the Pivot,\n        // as each branch can have lower number of nodes than the total number of levels\n        /**\n         * @hidden\n         */\n        var getMaxNesting = function (node, set) {\n            if (set === void 0) { set = new Set(); }\n            (node.children || []).forEach(function (child) {\n                set.add(child.levelName);\n                getMaxNesting(child, set);\n            });\n            return set.size;\n        };\n        /**\n         * @hidden\n         */\n        var getMaxExpansion = function (node) {\n            var expanded = 0;\n            (node.children || []).forEach(function (child) {\n                expanded += (getMaxExpansion(child) || 1);\n            });\n            return expanded;\n        };\n        /**\n         * @hidden\n         */\n        var generateNormalizedPath = function (node, parent) {\n            return (parent && (parent.hierarchy === node.hierarchy)\n                ? __spreadArrays((parent.normalizedPath || []).slice(0, -1), [node.name || null]) : __spreadArrays(((parent && parent.normalizedPath) ? parent.normalizedPath : []), [node.name])).filter(Boolean);\n        };\n        /**\n         * @hidden\n         */\n        var generatePath = function (node, parent) {\n            return (parent && (parent.hierarchy === node.hierarchy)\n                ? __spreadArrays((parent.path || []).slice(0, -1), [((node.levelNum === 0 ? node.hierarchy : node.name) || null)]) : __spreadArrays(((parent && parent.path) ? parent.path : []), [node.levelNum === 0 ? node.hierarchy : node.name])).filter(Boolean);\n        };\n        /**\n         * @hidden\n         */\n        var toMatrix = function (node, rowIndex, colIndex, maxDepth, maxBreadth, matrix, leafs, parent) {\n            if (rowIndex === void 0) { rowIndex = -1; }\n            if (colIndex === void 0) { colIndex = 0; }\n            if (maxDepth === void 0) { maxDepth = undefined; }\n            if (maxBreadth === void 0) { maxBreadth = undefined; }\n            if (matrix === void 0) { matrix = undefined; }\n            if (leafs === void 0) { leafs = undefined; }\n            if (parent === void 0) { parent = undefined; }\n            var branchDepth = getMaxNesting(node);\n            var branchBreadth = getMaxExpansion(node);\n            var depth = maxDepth || branchDepth;\n            var breadth = maxBreadth || branchBreadth;\n            var matrixResult = matrix ? matrix.slice() : [];\n            var leafsResult = leafs ? leafs.slice() : new Array(breadth);\n            var index = matrixResult.findIndex(function (l) { return l && l.name === node.levelName && l.level === node.levelNum; });\n            var level = matrixResult[index];\n            var row = {\n                name: node.levelName,\n                level: node.levelNum,\n                index: rowIndex,\n                cells: new Array(breadth).fill(null)\n            };\n            var inject = rowIndex !== -1 && colIndex !== -1;\n            var cell = {\n                caption: node.caption,\n                name: node.name,\n                levelName: node.levelName,\n                levelNum: node.levelNum,\n                hasChildren: node.hasChildren,\n                parentName: node.parentName,\n                hierarchy: node.hierarchy,\n                total: (node.total !== undefined ? node.total : false) || (parent && parent.children.length <= 1 && parent.total),\n                parent: parent,\n                rowIndex: rowIndex,\n                colIndex: colIndex,\n                depth: 1,\n                breadth: 1,\n                path: node.path || [],\n                normalizedPath: node.normalizedPath || [],\n                children: node.children.filter(function (c) { return c.hierarchy === node.hierarchy; })\n            };\n            if (inject) {\n                if (level) {\n                    level.cells[colIndex] = cell;\n                    if (level.index >= rowIndex) {\n                        rowIndex = level.index;\n                    }\n                }\n                else {\n                    if (matrixResult[rowIndex] && matrixResult[rowIndex].cells.length) {\n                        for (var idx = rowIndex; idx < matrixResult.length; idx++) {\n                            var shiftedRow = matrixResult[idx];\n                            shiftedRow.index++;\n                        }\n                        matrixResult.splice(rowIndex, 0, row);\n                        matrixResult[rowIndex].cells[colIndex] = cell;\n                    }\n                    else {\n                        matrixResult[rowIndex] = row;\n                        matrixResult[rowIndex].cells[colIndex] = cell;\n                    }\n                }\n            }\n            var collOffset = 0;\n            if (node.children && node.children.length) {\n                node.children.forEach(function (child) {\n                    var _a = toMatrix(child, rowIndex + 1, colIndex + collOffset, depth, breadth, matrixResult, leafsResult, cell), newMatrix = _a[0], newLeafs = _a[1], childBreadth = _a[3];\n                    collOffset += (childBreadth || 1);\n                    matrixResult = newMatrix.slice();\n                    leafsResult = newLeafs.slice();\n                });\n            }\n            else if (node.normalizedPath) {\n                leafsResult[colIndex] = { total: cell.total, path: node.normalizedPath };\n            }\n            cell.depth = branchDepth;\n            cell.breadth = branchBreadth;\n            return [\n                matrixResult,\n                leafsResult,\n                branchDepth,\n                branchBreadth\n            ];\n        };\n        var withTotal = function (root, parent, index) {\n            if (parent === void 0) { parent = null; }\n            if (index === void 0) { index = 0; }\n            var hierarchy;\n            var alt = __assign(__assign({}, root), { total: true, hasChildren: false, children: [] });\n            for (var childIndex = 0; childIndex < root.children.length; childIndex++) {\n                var child = withTotal(root.children[childIndex], root, childIndex);\n                hierarchy = hierarchy || child.hierarchy;\n                if (child.hierarchy !== hierarchy\n                    && parent\n                    && !parent.children.some(function (c) { return c.total && c.name === alt.name; })\n                    && !root.total) {\n                    alt.children.push(child);\n                    root.children.splice(childIndex, 1);\n                    childIndex--;\n                }\n            }\n            if (root.children.filter(function (c) { return !c.total; }).length >= 1\n                && parent\n                && !parent.children.some(function (c) { return c.total && c.name === alt.name; })\n                && !root.total) {\n                var childHierarchy = root.children[0].hierarchy;\n                if (root.hierarchy === childHierarchy) {\n                    parent.children.splice(index + 1, 0, alt);\n                }\n            }\n            return root;\n        };\n        /**\n         * @hidden\n         */\n        var toTree = function (tuples) {\n            var root = { children: [] };\n            var map = {};\n            for (var tupleIndex = 0; tupleIndex < tuples.length; tupleIndex++) {\n                var tuple = copy(tuples[tupleIndex]);\n                var key = \"\";\n                var _loop_1 = function (memberIndex) {\n                    var member = tuple.members[memberIndex];\n                    var parent_1;\n                    if (root.children && root.children.length === 0) {\n                        parent_1 = root;\n                    }\n                    else if (map[key] && !map[key + member.name] && member.levelNum === 0) {\n                        parent_1 = map[key];\n                    }\n                    else if (map[key + member.parentName] && member.levelNum > 0 && !map[key + member.parentName + member.name]) {\n                        parent_1 = map[key + member.parentName];\n                    }\n                    else if (!map[key + member.parentName] && member.levelNum > 0 && !map[key + member.parentName + member.name]) {\n                        var parentKey = Object.keys(map).find(function (e) { return member.parentName === map[e].name; });\n                        if (parentKey) {\n                            parent_1 = map[parentKey];\n                        }\n                    }\n                    if (parent_1) {\n                        member.path = generatePath(member, parent_1);\n                        member.normalizedPath = generateNormalizedPath(member, parent_1);\n                        var intruderIndex = parent_1.children.findIndex(function (c) { return c.hierarchy !== parent_1.hierarchy; });\n                        if (intruderIndex !== -1) {\n                            parent_1.children.splice(intruderIndex, 0, member);\n                        }\n                        else {\n                            parent_1.children.push(member);\n                        }\n                    }\n                    member.parentName += member.name;\n                    key += member.parentName;\n                    if (!map[key]) {\n                        map[key] = member;\n                    }\n                };\n                for (var memberIndex = 0; memberIndex < tuple.members.length; memberIndex++) {\n                    _loop_1(memberIndex);\n                }\n            }\n            return copy(withTotal(root));\n        };\n        /**\n         * @hidden\n         */\n        var toData = function (data, columns, rows, breadth, depth) {\n            var result = Array.from(new Array(depth), function () { return ({ cells: Array.from(new Array(breadth), function () { return null; }) }); });\n            var hash = function (names) { return names.join('|'); };\n            var membersNames = function (tuple) { return tuple.members.map(function (m) { return m.name; }); };\n            var columnsIndexes = new Map();\n            var rowsIndexes = new Map();\n            columns.forEach(function (colMembers, idx) { columnsIndexes.set(hash(colMembers.path), idx); });\n            rows.forEach(function (rowMembers, idx) { rowsIndexes.set(hash(rowMembers.path), idx); });\n            data.forEach(function (item) {\n                var colIndex = columnsIndexes.get(hash(membersNames(item.columnTuple)));\n                var rowIndex = rowsIndexes.get(hash(membersNames(item.rowTuple)));\n                if (colIndex !== undefined && rowIndex !== undefined) {\n                    if (!result[rowIndex].cells[colIndex]) {\n                        result[rowIndex].row = rows[rowIndex].path;\n                        result[rowIndex].cells[colIndex] = item;\n                    }\n                }\n            });\n            return result;\n        };\n        var rotateMatrix = function (matrix, leafs, depth, breadth) {\n            var result = new Array(breadth);\n            for (var colIndex = 0; colIndex < breadth; colIndex++) {\n                for (var rowIndex = 0; rowIndex < depth; rowIndex++) {\n                    if (matrix[rowIndex] && matrix[rowIndex].cells[colIndex]) {\n                        var cell = matrix[rowIndex].cells[colIndex];\n                        if (!result[colIndex]) {\n                            result[colIndex] = {\n                                cells: new Array(depth).fill(null)\n                            };\n                        }\n                        result[colIndex].cells[rowIndex] = __assign(__assign({}, cell), { rowSpan: cell.colSpan, colSpan: cell.rowSpan });\n                    }\n                }\n            }\n            return [result, leafs, breadth, depth];\n        };\n        /**\n         * @hidden\n         */\n        var toColumns = function (root) {\n            var _a = toMatrix(root), matrix = _a[0], leafs = _a[1], depth = _a[2], breadth = _a[3];\n            for (var colIndex = 0; colIndex < breadth; colIndex++) {\n                var cell = null;\n                for (var rowIndex = 0; rowIndex < depth; rowIndex++) {\n                    if (matrix[rowIndex]) {\n                        var next = matrix[rowIndex].cells[colIndex];\n                        if (!next && cell) {\n                            cell.rowSpan = (cell.rowSpan || 1) + 1;\n                        }\n                        if (cell) {\n                            cell.colSpan = cell.breadth || 1;\n                        }\n                        if (next) {\n                            cell = next;\n                        }\n                    }\n                }\n            }\n            return [matrix, leafs, depth, breadth];\n        };\n        /**\n         * @hidden\n         */\n        var toRows = function (root) {\n            var _a = toMatrix(root), matrix = _a[0], leafs = _a[1], depth = _a[2], breadth = _a[3];\n            for (var colIndex = 0; colIndex < breadth; colIndex++) {\n                var cell = null;\n                for (var rowIndex = 0; rowIndex < depth; rowIndex++) {\n                    if (matrix[rowIndex]) {\n                        var next = matrix[rowIndex].cells[colIndex];\n                        if (!next && cell) {\n                            cell.rowSpan = (cell.rowSpan || 1) + 1;\n                        }\n                        if (cell) {\n                            cell.colSpan = cell.breadth;\n                        }\n                        if (next) {\n                            cell = next;\n                        }\n                    }\n                }\n            }\n            return rotateMatrix(matrix, leafs, depth, breadth);\n        };\n        /**\n         * @hidden\n         */\n        function copy(obj) {\n            return JSON.parse(JSON.stringify(obj));\n        }\n        var kpiMeasure = function (name, measure, type) {\n            return {\n                hierarchyUniqueName: name,\n                uniqueName: measure,\n                caption: measure,\n                measure: measure,\n                name: measure,\n                type: type,\n                kpi: true\n            };\n        };\n        /**\n         * @hidden\n         */\n        function buildKPIMeasures(node) {\n            var name = node.name;\n            return [\n                kpiMeasure(name, node.value, \"value\"),\n                kpiMeasure(name, node.goal, \"goal\"),\n                kpiMeasure(name, node.status, \"status\"),\n                kpiMeasure(name, node.trend, \"trend\")\n            ];\n        }\n        /**\n         * @hidden\n         */\n        var addKPI = function (data) {\n            var found;\n            var idx = 0;\n            for (; idx < data.length; idx++) {\n                if (data[idx].type === 2) {\n                    found = true;\n                    break;\n                }\n            }\n            if (found) {\n                data.splice(idx + 1, 0, {\n                    caption: \"KPIs\",\n                    defaultHierarchy: \"[KPIs]\",\n                    name: \"KPIs\",\n                    uniqueName: \"[KPIs]\"\n                });\n            }\n        };\n        /**\n         * @hidden\n         */\n        var compareAxisWithField = function (a, b) { return String(a.name) === String([(b.defaultHierarchy\n                ? b.defaultHierarchy\n                : b.uniqueName)]); };\n        /**\n         * @hidden\n         */\n        var compareAxes = function (a, b) { return String(a.name) === String(b.name); };\n        /**\n         * @hidden\n         */\n        var filterField = function (axes, out) {\n            var _loop_2 = function (i) {\n                var axis = axes[i];\n                var index = axis.name.findIndex(function (name) { return compareAxisWithField({ name: [name] }, out) || String(name).startsWith(out.uniqueName); });\n                if (index !== -1) {\n                    if (index === axis.name.length - 1 || axis.name.length === 1) {\n                        axes.splice(i, 1);\n                    }\n                    else {\n                        axis.name.splice(index, 1);\n                        var duplicatedAxisIndex = axes.findIndex(function (ax) { return ax !== axis && String(ax.name) === String(axis.name); });\n                        if (duplicatedAxisIndex !== -1) {\n                            axes[duplicatedAxisIndex] = __assign(__assign(__assign({}, axes[duplicatedAxisIndex]), axis), ((axes[duplicatedAxisIndex].expand || axis.expand) ? { expand: true } : {}));\n                            axes.splice(i, 1);\n                        }\n                    }\n                }\n            };\n            for (var i = axes.length - 1; i >= 0; i--) {\n                _loop_2(i);\n            }\n        };\n        /**\n         * @hidden\n         */\n        var insertAxis = function (axes, toInsert, state) {\n            var index = -1;\n            if (state.dropTarget && state.dropDirection) {\n                var offset = state.dropDirection\n                    ? (state.dropDirection === 'before'\n                        ? 0\n                        : 1)\n                    : 0;\n                index = axes.findIndex(function (c) { return compareAxes(c, state.dropTarget); }) + offset;\n            }\n            if (index !== -1) {\n                axes.forEach(function (axis) {\n                    var _a;\n                    if (axis.expand && axis.name.length > 1 && axis.name.length > index) {\n                        (_a = axis.name).splice.apply(_a, __spreadArrays([index, 0], toInsert.name));\n                    }\n                });\n                axes.splice(index, 0, toInsert);\n            }\n            else {\n                axes.push(toInsert);\n            }\n        };\n\n        /**\n         * @hidden\n         */\n        exports.HEADERS_ACTION = void 0;\n        (function (HEADERS_ACTION) {\n            HEADERS_ACTION[\"toggle\"] = \"HEADERS_ACTION_TOGGLE\";\n            HEADERS_ACTION[\"expand\"] = \"HEADERS_ACTION_EXPAND\";\n            HEADERS_ACTION[\"collapse\"] = \"HEADERS_ACTION_COLLAPSE\";\n        })(exports.HEADERS_ACTION || (exports.HEADERS_ACTION = {}));\n        var findPath = function (node, matchFn, matched) {\n            var result = new Set();\n            node.children.forEach(function (child) {\n                var match = matchFn(child);\n                if (matched) {\n                    result.add(String(child.path));\n                }\n                findPath(child, matchFn, (matched || match)).map(function (h) {\n                    result.add(h);\n                });\n            });\n            return Array.from(result.values());\n        };\n        /**\n         * @hidden\n         */\n        var headersReducer = function (state, action) {\n            switch (action.type) {\n                case exports.HEADERS_ACTION.toggle: {\n                    var existing = state.find((function (s) { return String(s.name) === String(action.payload); }));\n                    return headersReducer(state, __assign(__assign({}, action), { type: existing && (existing.expand)\n                            ? exports.HEADERS_ACTION.collapse\n                            : exports.HEADERS_ACTION.expand }));\n                }\n                case exports.HEADERS_ACTION.expand: {\n                    var existing_1 = state.find((function (s) { return String(s.name) === String(action.payload); }));\n                    if (existing_1 && existing_1.expand === true) {\n                        return state;\n                    }\n                    else if (existing_1 && (existing_1.expand === false || existing_1.expand === undefined)) {\n                        return state.map(function (s) { return s === existing_1 ? (__assign(__assign({}, existing_1), { expand: true })) : s; });\n                    }\n                    else {\n                        var nextState = state.slice();\n                        nextState.push({ name: action.payload, expand: true });\n                        return nextState;\n                    }\n                }\n                case exports.HEADERS_ACTION.collapse: {\n                    var filtered_1 = findPath(action.tree, function (node) { return !node.total && String(node.path) === String(action.payload); });\n                    var newState = state.slice()\n                        .filter(function (h) { return !filtered_1.some(function (f) { return f === String(h.name); }); })\n                        .map(function (h) { return (__assign(__assign({}, h), { expand: Boolean(h.expand) })); })\n                        .map(function (h) { return (String(h.name) === String(action.payload))\n                        ? action.payload.length > 1 ? undefined : { name: action.payload, expand: false }\n                        : h; })\n                        .filter(Boolean);\n                    return newState;\n                }\n                default: {\n                    return state;\n                }\n            }\n        };\n\n        /**\n         * @hidden\n         */\n        exports.PIVOT_CONFIGURATOR_ACTION = void 0;\n        (function (PIVOT_CONFIGURATOR_ACTION) {\n            // Selection\n            PIVOT_CONFIGURATOR_ACTION[\"toggleSelection\"] = \"PIVOT_CONFIGURATOR_ACTION_TOGGLE_SELECTION\";\n            PIVOT_CONFIGURATOR_ACTION[\"addColumnAxis\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_COLUMN_AXIS\";\n            PIVOT_CONFIGURATOR_ACTION[\"addColumnAxes\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_COLUMN_AXES\";\n            PIVOT_CONFIGURATOR_ACTION[\"removeColumnAxis\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_COLUMN_AXIS\";\n            PIVOT_CONFIGURATOR_ACTION[\"removeColumnAxes\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_COLUMN_AXES\";\n            PIVOT_CONFIGURATOR_ACTION[\"addRowAxis\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_ROW_AXIS\";\n            PIVOT_CONFIGURATOR_ACTION[\"addRowAxes\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_ROW_AXES\";\n            PIVOT_CONFIGURATOR_ACTION[\"removeRowAxis\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_ROW_AXIS\";\n            PIVOT_CONFIGURATOR_ACTION[\"removeRowAxes\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_ROW_AXES\";\n            PIVOT_CONFIGURATOR_ACTION[\"addMeasureAxis\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_MEASURE_AXIS\";\n            PIVOT_CONFIGURATOR_ACTION[\"addMeasureAxes\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_MEASURE_AXES\";\n            PIVOT_CONFIGURATOR_ACTION[\"removeMeasureAxis\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_MEASURE_AXIS\";\n            PIVOT_CONFIGURATOR_ACTION[\"removeMeasureAxes\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_MEASURE_AXES\";\n            // Removal\n            PIVOT_CONFIGURATOR_ACTION[\"remove\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE\";\n            // Sort\n            PIVOT_CONFIGURATOR_ACTION[\"setSort\"] = \"PIVOT_CONFIGURATOR_ACTION_SET_SORT\";\n            // Filter\n            PIVOT_CONFIGURATOR_ACTION[\"setFilter\"] = \"PIVOT_CONFIGURATOR_ACTION_SET_FILTER\";\n            PIVOT_CONFIGURATOR_ACTION[\"addFilter\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_FILTER\";\n            PIVOT_CONFIGURATOR_ACTION[\"changeFilter\"] = \"PIVOT_CONFIGURATOR_ACTION_CHANGE_FILTER\";\n            PIVOT_CONFIGURATOR_ACTION[\"removeFilter\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_FILTER\";\n            // Drag\n            PIVOT_CONFIGURATOR_ACTION[\"setDragItem\"] = \"PIVOT_CONFIGURATOR_ACTION_SET_DRAGITEM\";\n            PIVOT_CONFIGURATOR_ACTION[\"drop\"] = \"PIVOT_CONFIGURATOR_ACTION_DROP\";\n            PIVOT_CONFIGURATOR_ACTION[\"setDropZone\"] = \"PIVOT_CONFIGURATOR_ACTION_SET_DROP_ZONE\";\n            PIVOT_CONFIGURATOR_ACTION[\"setDropTarget\"] = \"PIVOT_CONFIGURATOR_ACTION_SET_DROP_TARGET\";\n            PIVOT_CONFIGURATOR_ACTION[\"setDropDirection\"] = \"PIVOT_CONFIGURATOR_ACTION_SET_DROP_DIRECTION\";\n        })(exports.PIVOT_CONFIGURATOR_ACTION || (exports.PIVOT_CONFIGURATOR_ACTION = {}));\n        /**\n         * @hidden\n         */\n        var configuratorReducer = function (state, action) {\n            var newRows;\n            var newColumns;\n            var newMeasures;\n            var newSort;\n            var newFilter;\n            var newDragitem;\n            var newDropZone;\n            var newDropDirection;\n            var newDropTarget;\n            switch (action.type) {\n                case exports.PIVOT_CONFIGURATOR_ACTION.toggleSelection: {\n                    if (Array.isArray(action.payload)) ;\n                    else {\n                        var payload_1 = action.payload;\n                        if (payload_1.type === 2 || 'aggregator' in payload_1) {\n                            if (state.measureAxes.some(function (s) { return compareAxisWithField(s, payload_1); })) {\n                                return configuratorReducer(state, __assign(__assign({}, action), { type: exports.PIVOT_CONFIGURATOR_ACTION.removeMeasureAxis }));\n                            }\n                            else {\n                                return configuratorReducer(state, __assign(__assign({}, action), { type: exports.PIVOT_CONFIGURATOR_ACTION.addMeasureAxis }));\n                            }\n                        }\n                        else if (payload_1.type === 'kpi') {\n                            var measures = buildKPIMeasures(payload_1);\n                            if (measures.every(function (m) { return state.measureAxes.some(function (s) { return compareAxisWithField(s, m); }); })) {\n                                return configuratorReducer(state, __assign(__assign({}, action), { type: exports.PIVOT_CONFIGURATOR_ACTION.removeMeasureAxes, payload: measures }));\n                            }\n                            else {\n                                return configuratorReducer(state, __assign(__assign({}, action), { type: exports.PIVOT_CONFIGURATOR_ACTION.addMeasureAxes, payload: measures.filter(function (m) { return !state.measureAxes.some(function (s) { return compareAxisWithField(s, m); }); }) }));\n                            }\n                        }\n                        else if (action.payload.kpi) {\n                            if (state.measureAxes.some(function (s) { return compareAxisWithField(s, payload_1); })) {\n                                return configuratorReducer(state, __assign(__assign({}, action), { type: exports.PIVOT_CONFIGURATOR_ACTION.removeMeasureAxis }));\n                            }\n                            else {\n                                return configuratorReducer(state, __assign(__assign({}, action), { type: exports.PIVOT_CONFIGURATOR_ACTION.addMeasureAxis }));\n                            }\n                        }\n                        else {\n                            if (state.columnAxes.some(function (s) { return compareAxisWithField(s, payload_1); })) {\n                                return configuratorReducer(state, __assign(__assign({}, action), { type: exports.PIVOT_CONFIGURATOR_ACTION.removeColumnAxis }));\n                            }\n                            else if (state.rowAxes.some(function (s) { return compareAxisWithField(s, payload_1); })) {\n                                return configuratorReducer(state, __assign(__assign({}, action), { type: exports.PIVOT_CONFIGURATOR_ACTION.removeRowAxis }));\n                            }\n                            else if ((state.columnAxes && state.columnAxes.length) && (!state.rowAxes || !state.rowAxes.length)) {\n                                return configuratorReducer(state, __assign(__assign({}, action), { type: exports.PIVOT_CONFIGURATOR_ACTION.addRowAxis }));\n                            }\n                            else {\n                                return configuratorReducer(state, __assign(__assign({}, action), { type: exports.PIVOT_CONFIGURATOR_ACTION.addColumnAxis }));\n                            }\n                        }\n                    }\n                    break;\n                }\n                case exports.PIVOT_CONFIGURATOR_ACTION.addColumnAxis: {\n                    newColumns = __spreadArrays((state.columnAxes || []), [\n                        { name: [action.payload.defaultHierarchy || action.payload.uniqueName] }\n                    ]);\n                    break;\n                }\n                case exports.PIVOT_CONFIGURATOR_ACTION.addColumnAxes: {\n                    // TODO;\n                    break;\n                }\n                case exports.PIVOT_CONFIGURATOR_ACTION.removeColumnAxis: {\n                    newColumns = __spreadArrays((state.columnAxes || []).filter(function (s) { return !compareAxisWithField(s, action.payload); }));\n                    filterField(newColumns, action.payload);\n                    break;\n                }\n                case exports.PIVOT_CONFIGURATOR_ACTION.removeColumnAxes: {\n                    // TODO;\n                    break;\n                }\n                case exports.PIVOT_CONFIGURATOR_ACTION.addRowAxis: {\n                    newRows = __spreadArrays((state.rowAxes || []), [\n                        { name: [action.payload.defaultHierarchy || action.payload.uniqueName] }\n                    ]);\n                    break;\n                }\n                case exports.PIVOT_CONFIGURATOR_ACTION.addRowAxes: {\n                    // TODO;\n                    break;\n                }\n                case exports.PIVOT_CONFIGURATOR_ACTION.removeRowAxis: {\n                    newRows = __spreadArrays((state.rowAxes || []).filter(function (s) { return !compareAxisWithField(s, action.payload); }));\n                    filterField(newRows, action.payload);\n                    break;\n                }\n                case exports.PIVOT_CONFIGURATOR_ACTION.removeRowAxes: {\n                    // TODO;\n                    break;\n                }\n                case exports.PIVOT_CONFIGURATOR_ACTION.addMeasureAxis: {\n                    newMeasures = __spreadArrays((state.measureAxes || []), [\n                        { name: [action.payload.defaultHierarchy || action.payload.uniqueName] }\n                    ]);\n                    break;\n                }\n                case exports.PIVOT_CONFIGURATOR_ACTION.removeMeasureAxis: {\n                    newMeasures = __spreadArrays((state.measureAxes || []).filter(function (s) { return !compareAxisWithField(s, action.payload); }));\n                    break;\n                }\n                case exports.PIVOT_CONFIGURATOR_ACTION.addMeasureAxes: {\n                    newMeasures = __spreadArrays((state.measureAxes || []), (action.payload || []).map(function (p) { return ({ name: [p.defaultHierarchy || p.uniqueName] }); }));\n                    break;\n                }\n                case exports.PIVOT_CONFIGURATOR_ACTION.removeMeasureAxes: {\n                    newMeasures = __spreadArrays((state.measureAxes || []).filter(function (s) { return !action.payload.some(function (p) { return compareAxisWithField(s, p); }); }));\n                    break;\n                }\n                case exports.PIVOT_CONFIGURATOR_ACTION.remove: {\n                    if (state.columnAxes.some(function (s) { return compareAxes(s, action.payload); })) {\n                        newColumns = __spreadArrays(state.columnAxes.filter(function (s) { return !compareAxes(s, action.payload); }));\n                        filterField(newColumns, { uniqueName: action.payload.name });\n                    }\n                    if (state.rowAxes.some(function (s) { return compareAxes(s, action.payload); })) {\n                        newRows = __spreadArrays(state.rowAxes.filter(function (s) { return !compareAxes(s, action.payload); }));\n                        filterField(newRows, { uniqueName: action.payload.name });\n                    }\n                    if (state.measureAxes.some(function (s) { return compareAxes(s, action.payload); })) {\n                        newMeasures = __spreadArrays(state.measureAxes.filter(function (s) { return !compareAxes(s, action.payload); }));\n                    }\n                    break;\n                }\n                case exports.PIVOT_CONFIGURATOR_ACTION.setDragItem:\n                    newDragitem = action.payload;\n                    break;\n                case exports.PIVOT_CONFIGURATOR_ACTION.setDropZone:\n                    newDropZone = action.payload;\n                    break;\n                case exports.PIVOT_CONFIGURATOR_ACTION.setDropTarget:\n                    newDropTarget = action.payload;\n                    break;\n                case exports.PIVOT_CONFIGURATOR_ACTION.setDropDirection:\n                    newDropDirection = action.payload;\n                    break;\n                case exports.PIVOT_CONFIGURATOR_ACTION.drop:\n                    if (state.dragItem && state.dropZone) {\n                        var currentColumn = state.columnAxes.find(function (s) { return compareAxes(s, action.payload); });\n                        var currentRow = state.rowAxes.find(function (s) { return compareAxes(s, action.payload); });\n                        var currentMeasure = state.measureAxes.find(function (s) { return compareAxes(s, action.payload); });\n                        var current = void 0;\n                        if (currentColumn) {\n                            current = currentColumn;\n                            newColumns = __spreadArrays(state.columnAxes.filter(function (s) { return !compareAxes(s, action.payload); }));\n                            filterField(newColumns, { uniqueName: action.payload.name });\n                        }\n                        if (currentRow) {\n                            current = currentRow;\n                            newRows = __spreadArrays(state.rowAxes.filter(function (s) { return !compareAxes(s, action.payload); }));\n                            filterField(newRows, { uniqueName: action.payload.name });\n                        }\n                        if (currentMeasure) {\n                            current = currentMeasure;\n                            newMeasures = __spreadArrays(state.measureAxes.filter(function (s) { return !compareAxes(s, action.payload); }));\n                        }\n                        switch (state.dropZone) {\n                            case 'columnAxes': {\n                                newColumns = newColumns || state.columnAxes.slice();\n                                insertAxis(newColumns, current, state);\n                                break;\n                            }\n                            case 'rowAxes': {\n                                newRows = newRows || state.rowAxes.slice();\n                                insertAxis(newRows, current, state);\n                                break;\n                            }\n                            case 'measureAxes': {\n                                newMeasures = newMeasures || state.measureAxes.slice();\n                                insertAxis(newMeasures, current, state);\n                                break;\n                            }\n                        }\n                    }\n                    newDragitem = null;\n                    newDropZone = null;\n                    newDropTarget = null;\n                    break;\n                case exports.PIVOT_CONFIGURATOR_ACTION.setSort:\n                    newSort = action.payload;\n                    break;\n                case exports.PIVOT_CONFIGURATOR_ACTION.setFilter:\n                    if (Array.isArray(action.payload)) {\n                        newFilter = action.payload;\n                    }\n                    else {\n                        newFilter = [action.payload];\n                    }\n                    break;\n                case exports.PIVOT_CONFIGURATOR_ACTION.addFilter:\n                    newFilter = (state.filter || []).slice();\n                    if (Array.isArray(action.payload)) {\n                        newFilter.push.apply(newFilter, action.payload);\n                    }\n                    else {\n                        newFilter.push(action.payload);\n                    }\n                    break;\n                case exports.PIVOT_CONFIGURATOR_ACTION.changeFilter:\n                    newFilter = (Array.isArray(action.payload)\n                        ? (state.filter || []).map(function (f) { return action.payload.some(function (a) { return a.field === f.field; })\n                            ? action.payload.find(function (a) { return a.field === f.field; })\n                            : f; })\n                        : (state.filter || []).map(function (f) { return f.field === action.payload.field\n                            ? action.payload\n                            : f; }));\n                    break;\n                case exports.PIVOT_CONFIGURATOR_ACTION.removeFilter:\n                    newFilter = (state.filter || []).slice();\n                    if (Array.isArray(action.payload)) {\n                        newFilter = newFilter.filter(function (f) { return !action.payload.some(function (p) { return p.field === f.field &&\n                            p.operator === f.operator; }); });\n                    }\n                    else {\n                        newFilter = newFilter.filter(function (f) { return !(f.field === action.payload.field\n                            && f.operator === action.payload.operator); });\n                    }\n                    break;\n            }\n            return {\n                dragItem: newDragitem,\n                dropTarget: newDropTarget,\n                dropDirection: newDropDirection,\n                dropZone: newDropZone,\n                columnAxes: newColumns,\n                rowAxes: newRows,\n                measureAxes: newMeasures,\n                filter: newFilter,\n                sort: newSort\n            };\n        };\n\n        // tslint:disable:object-literal-sort-keys\n        /**\n         * Represents the aggregate object which calculates the total value. Applicable for local data binding.\n         */\n        var sumAggregate = {\n            init: function (data) {\n                if (('sum' in data) === false) {\n                    data.sum = 0;\n                }\n            },\n            merge: function (src, dest) {\n                dest.sum += src.sum;\n            },\n            accumulate: function (acc, value) {\n                acc.sum += value;\n            },\n            result: function (data) { return data.sum; },\n            format: function (value) { return value.toFixed(2); }\n        };\n        /**\n         * Represents the aggregate object which calculates the minimum value. Applicable for local data binding.\n         */\n        var minAggregate = {\n            init: function (data) {\n                if (('min' in data) === false) {\n                    data.min = Number.POSITIVE_INFINITY;\n                }\n            },\n            merge: function (src, dest) {\n                dest.min = Math.min(src.min, dest.min);\n            },\n            accumulate: function (acc, value) {\n                acc.min = Math.min(value, acc.min);\n            },\n            result: function (data) { return Number.isFinite(data.min) ? data.min : NaN; },\n            format: function (value) { return value.toFixed(2); }\n        };\n        /**\n         * Represents the aggregate object which calculates the maximum value. Applicable for local data binding.\n         */\n        var maxAggregate = {\n            init: function (data) {\n                if (('max' in data) === false) {\n                    data.max = Number.NEGATIVE_INFINITY;\n                }\n            },\n            merge: function (src, dest) {\n                dest.max = Math.max(src.max, dest.max);\n            },\n            accumulate: function (acc, value) {\n                acc.max = Math.max(value, acc.max);\n            },\n            result: function (data) { return Number.isFinite(data.max) ? data.max : NaN; },\n            format: function (value) { return value.toFixed(2); }\n        };\n        /**\n         * Represents the aggregate object which calculates the average value. Applicable for local data binding.\n         */\n        var averageAggregate = {\n            init: function (data) {\n                if (('count' in data) === false) {\n                    data.sumA = 0;\n                    data.count = 0;\n                }\n            },\n            merge: function (src, dest) {\n                dest.sumA += src.sumA;\n                dest.count += src.count;\n            },\n            accumulate: function (acc, value) {\n                acc.sumA += value;\n                acc.count += 1;\n            },\n            result: function (data) { return data.sumA / data.count; },\n            format: function (value) { return value.toFixed(2); }\n        };\n\n        /**\n         * @hidden\n         */\n        var isPresent = function (value) { return value !== null && value !== undefined; };\n        /**\n         * @hidden\n         */\n        var isBlank = function (value) { return value === null || value === undefined; };\n        /**\n         * @hidden\n         */\n        var isArray = function (value) { return Array.isArray(value); };\n        /**\n         * @hidden\n         */\n        var isFunction = function (value) { return typeof value === 'function'; };\n        /**\n         * @hidden\n         */\n        var isString = function (value) { return typeof value === 'string'; };\n        /**\n         * @hidden\n         */\n        var isNullOrEmptyString = function (value) { return isBlank(value) || value.trim().length === 0; };\n        /**\n         * @hidden\n         */\n        var isNotNullOrEmptyString = function (value) { return !isNullOrEmptyString(value); };\n        /**\n         * @hidden\n         */\n        var isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };\n        /**\n         * @hidden\n         */\n        var isDate = function (value) { return value && value.getTime; };\n\n        // tslint:enable:max-line-length\n        /**\n         * @hidden\n         * Type guard for `CompositeFilterDescriptor`.\n         */\n        var isCompositeFilterDescriptor = function (source) {\n            return isPresent(source.filters);\n        };\n\n        /**\n         * @hidden\n         */\n        var ifElse = function (predicate, right, left) { return function (value) { return predicate(value) ? right(value) : left(value); }; };\n        /**\n         * @hidden\n         * Performs the right-to-left function composition. Functions should have a unary.\n         */\n        var compose = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return function (data) { return args.reduceRight(function (acc, curr) { return curr(acc); }, data); };\n        };\n\n        /**\n         * @hidden\n         */\n        var toUTC = function (date) {\n            return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        };\n        /**\n         * @hidden\n         */\n        var isDateValue = function (x) { return isDate(x.value); };\n\n        var getterCache = {};\n        var FIELD_REGEX = /\\[(?:(\\d+)|['\"](.*?)['\"])\\]|((?:(?!\\[.*?\\]|\\.).)+)/g;\n        // tslint:disable-next-line:no-string-literal\n        getterCache['undefined'] = function (obj) { return obj; };\n        /**\n         * @hidden\n         */\n        var getter = function (field, safe) {\n            var key = field + safe;\n            if (getterCache[key]) {\n                return getterCache[key];\n            }\n            var fields = [];\n            field.replace(FIELD_REGEX, function (_, index, indexAccessor, field) {\n                fields.push(isPresent(index) ? index : (indexAccessor || field));\n                return undefined;\n            });\n            getterCache[key] = function (obj) {\n                var result = obj;\n                for (var idx = 0; idx < fields.length; idx++) {\n                    result = result[fields[idx]];\n                    if (!isPresent(result) && safe) {\n                        return result;\n                    }\n                }\n                return result;\n            };\n            return getterCache[key];\n        };\n\n        var pairwise = function (key) { return function (value) { return [key, value]; }; };\n        var empty = function () { return null; };\n        var isNotEmptyArray = function (value) { return isPresent(value) && isArray(value) && value.length > 0; };\n        var isNotEmpty = function (accessor) { return function (value) { return isNotEmptyArray(accessor(value)); }; };\n        var runOrEmpty = function (predicate, fn) { return ifElse(predicate, fn, empty); };\n        var calcPage = function (_a) {\n            var skip = _a.skip, take = _a.take;\n            return Math.floor((skip || 0) / take) + 1;\n        };\n        var formatDescriptors = function (accessor, formatter) { return function (state) { return (accessor(state).map(formatter).join(\"~\")); }; };\n        var removeAfter = function (what) { return function (str) { return str.slice(0, str.indexOf(what)); }; };\n        var replace = function (patterns) {\n            return compose.apply(void 0, patterns.map(function (_a) {\n                var left = _a[0], right = _a[1];\n                return function (s) { return s.replace(new RegExp(left, \"g\"), right); };\n            }));\n        };\n        var sanitizeDateLiterals = replace([[\"\\\"\", \"\"], [\":\", \"-\"]]);\n        var removeAfterDot = removeAfter(\".\");\n        var directionFormatter = function (_a) {\n            var field = _a.field, _b = _a.dir, dir = _b === void 0 ? \"asc\" : _b;\n            return field + \"-\" + dir;\n        };\n        var aggregateFormatter = function (_a) {\n            var field = _a.field, aggregate = _a.aggregate;\n            return field + \"-\" + aggregate;\n        };\n        var take = getter(\"take\");\n        var aggregates = getter(\"aggregates\");\n        getter(\"skip\");\n        var group = getter(\"group\");\n        var sort = getter(\"sort\", true);\n        var formatSort = formatDescriptors(sort, directionFormatter);\n        var formatGroup = formatDescriptors(group, directionFormatter);\n        var formatAggregates = formatDescriptors(aggregates, aggregateFormatter);\n        var prefixDateValue = function (value) { return \"datetime'\" + value + \"'\"; };\n        var formatDateValue = compose(prefixDateValue, removeAfterDot, sanitizeDateLiterals, JSON.stringify, toUTC);\n        var formatDate = function (_a) {\n            var field = _a.field, value = _a.value, ignoreCase = _a.ignoreCase, operator = _a.operator;\n            return ({\n                value: formatDateValue(value),\n                field: field,\n                ignoreCase: ignoreCase,\n                operator: operator\n            });\n        };\n        var normalizeSort = function (state) { return Object.assign({}, state, {\n            sort: (sort(state) || []).filter(function (_a) {\n                var dir = _a.dir;\n                return isNotNullOrEmptyString(dir);\n            })\n        }); };\n        compose(pairwise('page'), calcPage);\n        compose(pairwise('pageSize'), take);\n        compose(pairwise('group'), formatGroup);\n        var transformSort = compose(pairwise('sort'), formatSort);\n        compose(pairwise('aggregate'), formatAggregates);\n        compose(runOrEmpty(isNotEmpty(sort), transformSort), normalizeSort);\n        var filterFormatter = function (_a) {\n            var field = _a.field, operator = _a.operator, value = _a.value;\n            return field + \"~\" + operator + \"~\" + value;\n        };\n        ifElse(isDateValue, compose(filterFormatter, formatDate), filterFormatter);\n\n        // tslint:enable:max-line-length\n        var set = function (field, target, value) {\n            target[field] = value;\n            return target;\n        };\n        var convert = function (mapper) { return function (values) { return Object.keys(values).reduce(mapper.bind(null, values), {}); }; };\n        var translateAggregate = convert(function (source, acc, field) { return set(field.toLowerCase(), acc, source[field]); });\n        var translateAggregates = convert(function (source, acc, field) { return set(field, acc, translateAggregate(source[field])); });\n        var valueOrDefault = function (value, defaultValue) { return isPresent(value) ? value : defaultValue; };\n        var normalizeGroup = function (group) { return ({\n            aggregates: group.Aggregates || group.aggregates,\n            field: group.Member || group.member || group.field,\n            hasSubgroups: group.HasSubgroups || group.hasSubgroups || false,\n            items: group.Items || group.items,\n            value: valueOrDefault(group.Key, valueOrDefault(group.key, group.value))\n        }); };\n        var translateGroup = compose(function (_a) {\n            var field = _a.field, hasSubgroups = _a.hasSubgroups, value = _a.value, aggregates = _a.aggregates, items = _a.items;\n            return ({\n                aggregates: translateAggregates(aggregates),\n                field: field,\n                items: hasSubgroups ? items.map(translateGroup) : items,\n                value: value\n            });\n        }, normalizeGroup);\n\n        var logic = {\n            \"or\": {\n                concat: function (acc, fn) { return function (a) { return acc(a) || fn(a); }; },\n                identity: function () { return false; }\n            },\n            \"and\": {\n                concat: function (acc, fn) { return function (a) { return acc(a) && fn(a); }; },\n                identity: function () { return true; }\n            }\n        };\n        var operatorsMap = {\n            contains: function (a, b) { return (a || \"\").indexOf(b) >= 0; },\n            doesnotcontain: function (a, b) { return (a || \"\").indexOf(b) === -1; },\n            doesnotendwith: function (a, b) { return (a || \"\").indexOf(b, (a || \"\").length - (b || \"\").length) < 0; },\n            doesnotstartwith: function (a, b) { return (a || \"\").lastIndexOf(b, 0) === -1; },\n            endswith: function (a, b) { return (a || \"\").indexOf(b, (a || \"\").length - (b || \"\").length) >= 0; },\n            eq: function (a, b) { return a === b; },\n            gt: function (a, b) { return a > b; },\n            gte: function (a, b) { return a >= b; },\n            isempty: function (a) { return a === ''; },\n            isnotempty: function (a) { return a !== ''; },\n            isnotnull: function (a) { return isPresent(a); },\n            isnull: function (a) { return isBlank(a); },\n            lt: function (a, b) { return a < b; },\n            lte: function (a, b) { return a <= b; },\n            neq: function (a, b) { return a != b; },\n            startswith: function (a, b) { return (a || \"\").lastIndexOf(b, 0) === 0; }\n        };\n        var dateRegExp = /^\\/Date\\((.*?)\\)\\/$/;\n        var convertValue = function (value, ignoreCase) {\n            if (value != null && isString(value)) {\n                var date = dateRegExp.exec(value);\n                if (date) {\n                    return new Date(+date[1]).getTime();\n                }\n                else if (ignoreCase) {\n                    return value.toLowerCase();\n                }\n            }\n            else if (value != null && isDate(value)) {\n                return value.getTime();\n            }\n            return value;\n        };\n        var typedGetter = function (prop, value, ignoreCase) {\n            if (!isPresent(value)) {\n                return prop;\n            }\n            var acc = prop;\n            if (isString(value)) {\n                var date = dateRegExp.exec(value);\n                if (date) {\n                    value = new Date(+date[1]);\n                }\n                else {\n                    acc = function (a) {\n                        var x = prop(a);\n                        if (typeof x === 'string' && ignoreCase) {\n                            return x.toLowerCase();\n                        }\n                        else {\n                            return isNumeric(x) ? x + \"\" : x;\n                        }\n                    };\n                }\n            }\n            if (isDate(value)) {\n                return function (a) {\n                    var x = acc(a);\n                    return isDate(x) ? x.getTime() : x;\n                };\n            }\n            return acc;\n        };\n        var transformFilter = function (_a) {\n            var field = _a.field, ignoreCase = _a.ignoreCase, value = _a.value, operator = _a.operator;\n            field = !isPresent(field) ? function (a) { return a; } : field;\n            ignoreCase = isPresent(ignoreCase) ? ignoreCase : true;\n            var itemProp = typedGetter(isFunction(field) ? field : getter(field, true), value, ignoreCase);\n            value = convertValue(value, ignoreCase);\n            var op = isFunction(operator) ? operator : operatorsMap[operator];\n            return function (a) { return op(itemProp(a), value, ignoreCase); };\n        };\n        /**\n         * @hidden\n         */\n        var transformCompositeFilter = function (filter) {\n            var combiner = logic[filter.logic];\n            return filter.filters\n                .filter(isPresent)\n                .map(function (x) { return isCompositeFilterDescriptor(x) ? transformCompositeFilter(x) : transformFilter(x); })\n                .reduce(combiner.concat, combiner.identity);\n        };\n\n        // tslint:disable:max-line-length\n        /**\n         * Creates a [Predicate]({% slug api_kendo-data-query_predicate %}) function for the specified [CompositeFilterDescriptor]({% slug api_kendo-data-query_compositefilterdescriptor %}).\n         *\n         * @param {CompositeFilterDescriptor} descriptor - The descriptor for which the predicate is created.\n         * @returns {Predicate} - The created function instance.\n         *\n         * @example\n         * ```ts\n         * import { compileFilter } from '@progress/kendo-data-query';\n         *\n         * const data = [{ name: \"Pork\" }, { name: \"Pepper\" }, { name: \"Beef\" } ];\n         * const predicate = compileFilter({ logic: \"and\", filters: [{ field: \"name\", operator: \"startswith\", value: \"P\" }] });\n         * const result = data.filter(predicate);\n         *\n         * ```\n         */\n        // tslint:enable:max-line-length\n        var compileFilter = function (descriptor) {\n            if (!descriptor || descriptor.filters.length === 0) {\n                return function () { return true; };\n            }\n            return transformCompositeFilter(descriptor);\n        };\n\n        function forEachDesc(desc, callbackfn) {\n            if ('filters' in desc) {\n                desc.filters.map(function (child) { return forEachDesc(child, callbackfn); });\n            }\n            else {\n                callbackfn(desc);\n            }\n        }\n        var filterFields = function (filter, callback) {\n            var descriptors = Array.isArray(filter) ? filter : filter.filters;\n            descriptors.forEach(function (desc) { return forEachDesc(desc, callback); });\n        };\n        /** @hidden */\n        var initializeFiltering = function (rows, columns, filter) {\n            var compositeFilter = filter ?\n                (Array.isArray(filter) ? { logic: 'and', filters: filter } : filter) : undefined;\n            var predicate = compositeFilter ? compileFilter(compositeFilter) : function () { return true; };\n            var axes = rows.concat(columns);\n            var fieldValues = [];\n            filterFields(filter || [], function (desc) {\n                if ('field' in desc && desc.field) {\n                    fieldValues.push(desc.field);\n                }\n            });\n            var result = { hasFilter: false, predicate: predicate, filteringAxes: [] };\n            if (fieldValues.some(function (f) { return typeof f === 'function'; })) {\n                result.filteringAxes = axes.slice();\n            }\n            else if (fieldValues.length > 0) {\n                var filteringFields_1 = Array.from(new Set(fieldValues).values());\n                var filteringAxes = axes.filter(function (a) { return filteringFields_1.indexOf(a.key) >= 0; });\n                result.filteringAxes = filteringAxes;\n            }\n            result.hasFilter = result.filteringAxes.length > 0;\n            return result;\n        };\n\n        /** @hidden */\n        var subNode = function (node, field, initialNode) {\n            var childNode = node.get(field);\n            if (!childNode) {\n                childNode = initialNode || new Map();\n                node.set(field, childNode);\n            }\n            return childNode;\n        };\n        var separator = '&';\n        /** @hidden */\n        var createKey = function (key, value) { return key + separator + value; };\n        /** @hidden */\n        var splitKeyValue = function (keyValue) {\n            var separatorIndex = keyValue.indexOf(separator);\n            if (separatorIndex !== -1) {\n                var key = keyValue.substring(0, separatorIndex);\n                var value = keyValue.substring(separatorIndex + 1);\n                return [key, value];\n            }\n            else {\n                return [keyValue, undefined];\n            }\n        };\n\n        var calculateColumnData = function (node, measures, dataField) {\n            node.forEach(function (childNode, k) {\n                if (k !== dataField) {\n                    if (childNode.size > 0) {\n                        calculateColumnData(childNode, measures, dataField);\n                    }\n                    var childData_1 = childNode.get(dataField);\n                    var parentData_1 = subNode(node, dataField, {});\n                    measures.forEach(function (m) {\n                        m.aggregate.init(parentData_1);\n                        m.aggregate.merge(childData_1, parentData_1);\n                    });\n                }\n            });\n        };\n        /** @hidden */\n        var mergeTrees = function (src, dest, measures, dataField) {\n            src.forEach(function (srcChild, k) {\n                var destChild;\n                if (k !== dataField) {\n                    destChild = subNode(dest, k);\n                    mergeTrees(srcChild, destChild, measures, dataField);\n                }\n                else {\n                    destChild = subNode(dest, k, {});\n                    measures.forEach(function (m) {\n                        m.aggregate.init(destChild);\n                        m.aggregate.merge(srcChild, destChild);\n                    });\n                }\n            });\n        };\n        var calculateColumns = function (node, measures, columnsData, dataField) {\n            node.forEach(function (childNode, k) {\n                if (k !== columnsData) {\n                    if (childNode.size > 0) {\n                        calculateColumns(childNode, measures, columnsData, dataField);\n                    }\n                    var srcColumns = subNode(childNode, columnsData);\n                    var destColumns = subNode(node, columnsData);\n                    mergeTrees(srcColumns, destColumns, measures, dataField);\n                }\n            });\n        };\n        /** @hidden */\n        var createDataTree = function (data, rows, columns, measures, fields, filter) {\n            var result = new Map();\n            var cache = new Map();\n            var axes = rows.concat(columns);\n            var leafNodes = new Set();\n            var dataField = fields.dataField, columnsData = fields.columnsData;\n            var _a = initializeFiltering(rows, columns, filter), hasFilter = _a.hasFilter, predicate = _a.predicate, filteringAxes = _a.filteringAxes;\n            var empty = '';\n            data.forEach(function (dataItem) {\n                if (hasFilter) {\n                    var filteringDataItem_1 = {};\n                    filteringAxes.forEach(function (axis) { filteringDataItem_1[axis.key] = axis.displayValue(dataItem); });\n                    if (!predicate(filteringDataItem_1)) {\n                        return;\n                    }\n                }\n                var values = axes.map(function (a) { return a.displayValue(dataItem); });\n                var dataKey = empty.concat.apply(empty, values);\n                var nodeData = cache.get(dataKey);\n                if (!nodeData) {\n                    var node_1 = result;\n                    var eachAxis = function (axis) {\n                        node_1 = subNode(node_1, createKey(axis.key, axis.displayValue(dataItem)));\n                    };\n                    rows.forEach(eachAxis);\n                    node_1 = subNode(node_1, columnsData);\n                    leafNodes.add(node_1);\n                    columns.forEach(eachAxis);\n                    nodeData = {};\n                    node_1.set(dataField, nodeData);\n                    cache.set(dataKey, nodeData);\n                    measures.forEach(function (m) {\n                        m.aggregate.init(nodeData);\n                    });\n                }\n                measures.forEach(function (m) {\n                    m.aggregate.accumulate(nodeData, m.value(dataItem));\n                });\n            });\n            leafNodes.forEach(function (leaf) { return calculateColumnData(leaf, measures, dataField); });\n            calculateColumns(result, measures, columnsData, dataField);\n            return result;\n        };\n        /** @hidden */\n        var cloneDataTree = function (dataTree, dataField, measures) {\n            var result = new Map();\n            mergeTrees(dataTree, result, measures, dataField);\n            return result;\n        };\n\n        var createPath = function (name, axes, path) {\n            var _a = splitKeyValue(name), key = _a[0], value = _a[1];\n            var result = path.slice();\n            if (key && value) {\n                var axis = axes.find(function (a) { return a.key === key; });\n                var caption_1 = axis ? axis.caption : '';\n                return result.map(function (p) { return p === caption_1 ? name : p; });\n            }\n            return result;\n        };\n        var membersNode = function (tree, members, field, axisSettings, measures, dataField, cache) {\n            var cacheData = cache || new Map();\n            var path = axisSettings.map(function (a) { return a.caption; });\n            while (members.length > 1 && axisSettings.some(function (a) { return a.caption === members[members.length - 1].caption; })) {\n                members.pop();\n                path.pop();\n            }\n            var node = tree;\n            members.forEach(function (m, i) {\n                path = createPath(m.name, axisSettings, path);\n                if (node && !axisSettings.some(function (a) { return a.caption === m.name; })) {\n                    if (!node.has(m.name) && !cacheData.has(path.slice(0, path.indexOf(m.name) + 1).join('-'))) {\n                        var currentLevel = Array.from(node).find(function (n) { return n[0] !== field; });\n                        var currentLevelNode = currentLevel && currentLevel[0];\n                        var levelField_1 = currentLevelNode && splitKeyValue(currentLevelNode)[0];\n                        var depth = levelField_1 ? i - axisSettings.findIndex(function (a) { return a.key === levelField_1; }) : 0;\n                        var _loop_1 = function (t) {\n                            var data = [];\n                            node.forEach(function (value, key) {\n                                if (key !== field) {\n                                    data.push.apply(data, Array.from(value).filter(function (d) { return d[0] !== field; }));\n                                }\n                            });\n                            var next = new Map();\n                            data.forEach(function (item) {\n                                if (next.has(item[0])) {\n                                    var dest = next.get(item[0]);\n                                    var src = item[1];\n                                    var newDest = new Map();\n                                    mergeTrees(dest, newDest, measures, dataField);\n                                    mergeTrees(src, newDest, measures, dataField);\n                                    next.set(item[0], newDest);\n                                }\n                                else {\n                                    next.set(item[0], new Map(item[1]));\n                                }\n                            });\n                            var currentPath = path.slice(0, path.indexOf(m.name));\n                            next.forEach(function (value, key) {\n                                cacheData.set(createPath(key, axisSettings, currentPath.concat([key])).join('-'), value);\n                            });\n                            next.set(field, node.get(field));\n                            node = next;\n                        };\n                        for (var t = 0; t < depth; t++) {\n                            _loop_1(t);\n                        }\n                    }\n                    node = node.get(m.name) || cacheData.get(path.slice(0, path.indexOf(m.name) + 1).join('-'));\n                }\n            });\n            return node;\n        };\n        /** @hidden */\n        var readData = function (dataTree, rowTuples, columnTuples, fields, columnSettings, rowSettings, measures) {\n            var data = [];\n            var dataField = fields.dataField, columnsData = fields.columnsData;\n            var rowsCache = new Map();\n            rowTuples.forEach(function (row) {\n                var rowNode = membersNode(dataTree, row.members.slice(), columnsData, rowSettings, measures, dataField, rowsCache);\n                var rowColumnsNode = rowNode && rowNode.get(columnsData);\n                columnTuples.forEach(function (col) {\n                    var members = col.members.slice();\n                    var measure = measures[0];\n                    if (members[members.length - 1].levelName === \"[Measures].[MeasuresLevel]\") {\n                        var measuresMember_1 = members.pop();\n                        measure = measures.find(function (m) { return String(m.name) === measuresMember_1.caption; }) || measure;\n                    }\n                    var colNode = rowColumnsNode && membersNode(rowColumnsNode, members, dataField, columnSettings, measures, dataField);\n                    var value = '', fmtValue = '', ordinal = 0;\n                    if (colNode && measure) {\n                        var result = measure.aggregate.result(colNode.get(dataField));\n                        value = String(result);\n                        fmtValue = measure.aggregate.format(result);\n                    }\n                    data.push({\n                        columnTuple: col,\n                        data: { fmtValue: fmtValue, ordinal: ordinal, value: value },\n                        rowTuple: row\n                    });\n                });\n            });\n            return data;\n        };\n\n        var getTopMembersTuple = function (parentFields, axesSettings) {\n            var allTuple = { members: [] };\n            parentFields.forEach(function (topField) {\n                var axis = axesSettings.find(function (a) { return a.key === topField; });\n                var caption = axis ? axis.caption : \"\";\n                var member = {\n                    caption: caption,\n                    children: [],\n                    hasChildren: true,\n                    parentName: \"\",\n                    levelNum: 0,\n                    levelName: caption,\n                    hierarchy: topField,\n                    name: caption\n                };\n                allTuple.members.push(member);\n            });\n            return allTuple;\n        };\n        var sortFunc = function (descriptor, axe) {\n            return function (a, b) {\n                var order = descriptor.dir;\n                var sortableA = axe.sortValue(splitKeyValue(a[0])[1]);\n                var sortableB = axe.sortValue(splitKeyValue(b[0])[1]);\n                if (sortableA < sortableB) {\n                    return order === \"asc\" ? -1 : 1;\n                }\n                if (sortableA > sortableB) {\n                    return order === \"asc\" ? 1 : -1;\n                }\n                return 0;\n            };\n        };\n        var mergeData = function (src, dest, exclude) {\n            src.forEach(function (srcChild, k) {\n                if (!exclude[k]) {\n                    var destChild = subNode(dest, k);\n                    mergeData(srcChild, destChild, exclude);\n                }\n            });\n        };\n        var childrenByKeys = function (dataTree, keys, exclude) {\n            var result = [];\n            var nodeData = function (node) { return Array.from(node).filter(function (n) { return !exclude[n[0]]; }); };\n            var element = new Map(dataTree);\n            var next;\n            var _loop_1 = function (i) {\n                next = element.get(keys[i]);\n                if (next) {\n                    element = new Map(next);\n                }\n                else if (i < keys.length - 1 && Array.from(element).some(function (e) { return splitKeyValue(e[0])[0] === keys[i]; })) {\n                    var curLevel_1 = [];\n                    element.forEach(function (child, key) {\n                        if (!exclude[key]) {\n                            curLevel_1.push.apply(curLevel_1, nodeData(new Map(child)));\n                        }\n                    });\n                    element = new Map();\n                    curLevel_1.forEach(function (item) {\n                        if (element.has(item[0])) {\n                            var dest = element.get(item[0]);\n                            var src = item[1];\n                            var newDest = new Map();\n                            mergeData(dest, newDest, exclude);\n                            mergeData(src, newDest, exclude);\n                            element.set(item[0], newDest);\n                        }\n                        else {\n                            element.set(item[0], new Map(item[1]));\n                        }\n                    });\n                }\n                else if (i === 0 || i === keys.length - 1) {\n                    if (Array.from(element).some(function (e) { return splitKeyValue(e[0])[0] === keys[i]; })) {\n                        result.push.apply(result, nodeData(element));\n                    }\n                }\n            };\n            for (var i = 0; i < keys.length; i++) {\n                _loop_1(i);\n            }\n            return result;\n        };\n        /** @hidden */\n        var rootFields = function (definitions) {\n            var fields = new Set();\n            definitions.forEach(function (item) {\n                if (item.name.length === 1 && !splitKeyValue(item.name[0])[1]) {\n                    fields.add(item.name[0]);\n                }\n            });\n            return fields;\n        };\n        /** @hidden */\n        var createTuples = function (axesSettings, definitions, dataTree, sortDescriptors, excludeFields) {\n            var parentFields = rootFields(definitions);\n            var flatMembers = [];\n            var topTuple = getTopMembersTuple(parentFields, axesSettings);\n            flatMembers.push(topTuple);\n            var _loop_2 = function (i) {\n                var currDef = definitions[i];\n                if (currDef.name.length === 1 && !currDef.expand && parentFields.has(currDef.name[0])) {\n                    return \"continue\";\n                }\n                var keysToAdd = new Set(parentFields.keys());\n                var currDefMembers = [];\n                var keys = [];\n                var tuples = [];\n                var axe;\n                currDef.name.forEach(function (element, index) {\n                    var _a;\n                    var _b = splitKeyValue(element), field = _b[0], value = _b[1];\n                    axe = axesSettings.find(function (a) { return a.key === field; });\n                    if (value) {\n                        keysToAdd.delete(field);\n                        keys.push(element);\n                        var member = {\n                            children: [],\n                            caption: value,\n                            hierarchy: field,\n                            levelNum: 1,\n                            levelName: field + \" \" + field,\n                            name: element,\n                            parentName: axe ? axe.caption : \"\"\n                        };\n                        currDefMembers.push(member);\n                    }\n                    else if (currDef.expand && currDef.name.length - 1 === index) {\n                        keysToAdd.delete(element);\n                        keys.push(element);\n                        var children = childrenByKeys(dataTree, keys, excludeFields);\n                        var descriptor = sortDescriptors.find(function (desc) { return desc.field === field; });\n                        if (descriptor && descriptor.dir) {\n                            children.sort(sortFunc(descriptor, axe));\n                        }\n                        for (var c = 0; c < children.length; c++) {\n                            var leafValue = children[c][0];\n                            var leafTuple = { members: [] };\n                            tuples.push(leafTuple);\n                            var caption = splitKeyValue(leafValue)[1];\n                            axe = axesSettings.find(function (a) { return a.key === element; });\n                            var member = {\n                                caption: caption,\n                                children: [],\n                                levelName: element + \" \" + element,\n                                levelNum: 1,\n                                parentName: axe ? axe.caption : \"\",\n                                hierarchy: element,\n                                name: leafValue\n                            };\n                            (_a = leafTuple.members).push.apply(_a, currDefMembers);\n                            leafTuple.members.push(member);\n                        }\n                    }\n                    else if (currDef.expand) {\n                        axe = axesSettings.find(function (a) { return a.key === element; });\n                        var axisCaption = axe ? axe.caption : \"\";\n                        keysToAdd.delete(element);\n                        keys.push(element);\n                        var member = {\n                            children: [],\n                            caption: axisCaption,\n                            hierarchy: element,\n                            levelName: axisCaption,\n                            levelNum: 0,\n                            name: axisCaption,\n                            parentName: \"\"\n                        };\n                        currDefMembers.push(member);\n                    }\n                    keysToAdd.forEach(function (key) {\n                        tuples.forEach(function (tuple) {\n                            axe = axesSettings.find(function (a) { return a.key === key; });\n                            var curCaption = axe ? axe.caption : \"\";\n                            var member = {\n                                children: [],\n                                hasChildren: true,\n                                caption: curCaption,\n                                hierarchy: key,\n                                levelName: curCaption,\n                                levelNum: 0,\n                                name: curCaption,\n                                parentName: \"\"\n                            };\n                            tuple.members.push(member);\n                        });\n                    });\n                    flatMembers.push.apply(flatMembers, tuples);\n                });\n            };\n            for (var i = 0; i < definitions.length; i++) {\n                _loop_2(i);\n            }\n            return flatMembers;\n        };\n        var addMeasure = function (tuple, measure) {\n            var measureMember = {\n                caption: String(measure.name),\n                children: [],\n                hasChildren: false,\n                hierarchy: \"[Measures]\",\n                levelName: \"[Measures].[MeasuresLevel]\",\n                levelNum: 0,\n                name: \"[Measures].[\" + measure.name + \"]\",\n                parentName: \"\"\n            };\n            var tupleCopy = copy(tuple);\n            tupleCopy.members.push(measureMember);\n            return tupleCopy;\n        };\n        /** @hidden */\n        var addMultipleMeasures = function (tuples, measures) {\n            if (measures.length < 2) {\n                return tuples;\n            }\n            var result = tuples.slice();\n            for (var i = result.length - 1; i >= 0; i--) {\n                var tuple = result[i];\n                result[i] = addMeasure(result[i], measures[0]);\n                for (var m = 1; m < measures.length; m++) {\n                    var tupleWithMeasure = addMeasure(tuple, measures[m]);\n                    result.splice(i + 1, 0, tupleWithMeasure);\n                }\n            }\n            return result;\n        };\n        /** @hidden */\n        var createLocalDataState = function (args) {\n            var _a;\n            var dataTree = args.dataTree, rowSettings = args.rowSettings, columnSettings = args.columnSettings, rowAxes = args.rowAxes, columnAxes = args.columnAxes, measures = args.measures, sort = args.sort, fields = args.fields;\n            var exclude = (_a = {}, _a[fields.columnsData] = fields.columnsData, _a[fields.dataField] = fields.dataField, _a);\n            var columnTuples = addMultipleMeasures(createTuples(columnSettings, columnAxes, dataTree.get(fields.columnsData), sort, exclude), measures);\n            var rowTuples = createTuples(rowSettings, rowAxes, dataTree, sort, exclude);\n            var resultData = readData(dataTree, rowTuples, columnTuples, fields, columnSettings, rowSettings, measures);\n            return {\n                columns: columnTuples,\n                data: resultData,\n                rows: rowTuples\n            };\n        };\n\n        /** @hidden */\n        var createFlatSchemaDimensions = function (dimensions, measures) {\n            var result = Object.keys(dimensions).map(function (dim) { return ({\n                caption: dim,\n                defaultHierarchy: dim,\n                description: '',\n                name: dim,\n                uniqueName: dim,\n                hierarchyUniqueName: dim,\n                measure: true,\n                type: 1 // https://github.com/telerik/kendo-pivotgrid-common/blob/develop/src/models/responseDiscover.ts#L12-L14\n            }); });\n            if (measures.length) {\n                result.push({\n                    caption: 'Measures',\n                    children: measures.map(function (m) { return ({\n                        aggregator: '1',\n                        caption: String(m.name),\n                        defaultFormat: '',\n                        description: '',\n                        displayFolder: '',\n                        groupName: String(m.name),\n                        name: String(m.name),\n                        uniqueName: String(m.name)\n                    }); }),\n                    type: 2,\n                    description: '',\n                    name: 'Measures',\n                    uniqueName: '[Measures]'\n                });\n            }\n            return result;\n        };\n\n        exports.addKPI = addKPI;\n        exports.addMultipleMeasures = addMultipleMeasures;\n        exports.averageAggregate = averageAggregate;\n        exports.buildKPIMeasures = buildKPIMeasures;\n        exports.cloneDataTree = cloneDataTree;\n        exports.compareAxes = compareAxes;\n        exports.configuratorReducer = configuratorReducer;\n        exports.createAxisDescriptors = createAxisDescriptors;\n        exports.createDataState = createDataState;\n        exports.createDataTree = createDataTree;\n        exports.createDiscoverBody = createDiscoverBody;\n        exports.createFlatSchemaDimensions = createFlatSchemaDimensions;\n        exports.createLocalDataState = createLocalDataState;\n        exports.createRequestBody = createRequestBody;\n        exports.createTuples = createTuples;\n        exports.discoverCommands = discoverCommands;\n        exports.fetchData = fetchData;\n        exports.fetchDiscover = fetchDiscover;\n        exports.headersReducer = headersReducer;\n        exports.maxAggregate = maxAggregate;\n        exports.mergeTrees = mergeTrees;\n        exports.minAggregate = minAggregate;\n        exports.parseResponse = parseResponse;\n        exports.readData = readData;\n        exports.rootFields = rootFields;\n        exports.setFilter = setFilter;\n        exports.setSort = setSort;\n        exports.sumAggregate = sumAggregate;\n        exports.toColumns = toColumns;\n        exports.toData = toData;\n        exports.toRows = toRows;\n        exports.toTree = toTree;\n\n        Object.defineProperty(exports, '__esModule', { value: true });\n\n        return exports;\n\n    })({});\n\n    })();\n\n    var __meta__ = {\n            id: \"pivot.common\",\n            name: \"PivotCommon\",\n            category: \"web\",\n            description: \"Common JS for PivotGrid\",\n            depends: [ \"core\" ]\n        };\n\n}));\n"]}