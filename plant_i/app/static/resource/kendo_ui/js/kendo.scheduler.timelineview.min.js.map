{"version":3,"sources":["raw-js/kendo.scheduler.timelineview.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendoscheduler","timelineview","js","this","$","undefined$1","kendo","window","ui","setTime","date","SchedulerView","outerWidth","_outerWidth","outerHeight","_outerHeight","extend","encode","htmlEncode","getDate","getMilliseconds","MS_PER_DAY","MS_PER_MINUTE","CURRENT_TIME_MARKER_CLASS","CURRENT_TIME_MARKER_ARROW_CLASS","SCHEDULER_HEADER_WRAP_CLASS","INVERSE_COLOR_CLASS","BORDER_SIZE_COEFF","DOT","NS","EVENT_TEMPLATE","template","title","start","end","format","DATA_HEADER_TEMPLATE","EVENT_WRAPPER_TEMPLATE","task","ariaLabel","ns","uid","resources","attr","color","tail","icon","isException","isRecurring","showDelete","messages","destroy","head","resizable","toInvariantTime","staticDate","Date","setColspan","columnLevel","count","columns","i","length","colspan","TimelineGroupedView","Class","init","view","_view","_getTimeSlotByPosition","x","y","groupIndex","groups","timeSlotByPosition","_hideHeaders","timesHeader","find","last","hide","datesHeader","_setColspan","timeColumn","_createRowsLayout","rows","groupHeaderTemplate","_createVerticalColumnsLayout","_createColumnsLayout","_getRowCount","_groupCount","_getGroupsCount","_addContent","dates","columnCount","groupsCount","rowCount","slotTemplate","isVerticalGrouped","html","options","appendRow","tmplDate","content","classes","isToday","idx","workDayStart","workDayEnd","_isWorkDay","rowIdx","groupIdx","_resourceBySlot","_forTimeRange","_addTimeSlotsCollections","groupCount","datesCount","tableRows","interval","isVerticallyGrouped","Math","floor","time","rowMultiplier","group","cellMultiplier","cells","children","cellsPerGroup","cellsPerDay","dateIndex","cellOffset","startTime","cellIndex","_addTimeSlotToCollection","_getVerticalGroupCount","_getVerticalRowCount","eventGroups","maxRowCount","_isVerticallyGrouped","_renderEvent","eventGroup","event","adjustedEvent","range","container","element","_createEventElement","occurrence","appendTo","css","top","height","eventHeight","eventObject","_startTime","_endTime","slotRange","rowIndex","offsetTop","events","_inverseEventColor","addContinuousEvent","isAllDay","_arrangeRows","_verticalCountForLevel","level","_rowCountForLevel","_horizontalCountForLevel","_columnCountForLevel","_updateCurrentVerticalTimeMarker","ranges","currentTime","elementHtml","headerWrap","left","round","innerRect","getTime","timesTableMarker","prependTo","addClass","_adjustLeftPosition","prev","position","width","scrollHeight","_changeGroup","_prevGroupSlot","slot","isDay","_collection","_nextGroupSlot","first","_verticalSlots","selection","reverse","_verticalMethod","_normalizeVerticalSelection","_horizontalSlots","method","startSlot","endSlot","multiple","result","_isHorizontallyGrouped","_changeVerticalViewPeriod","_changeHorizontalViewPeriod","slots","shift","_changeViewPeriod","_updateDirection","_createMoveHint","hint","rect","snap","right","offsetHeight","inverseColor","_appendMoveHint","_isRtl","scrollWidth","clientWidth","TimelineGroupedByDateView","times","eq","_createDateLayout","subColumns","isMajorTickColumn","isMiddleColumn","isLastSlotColumn","minorTickColumns","workDateIndex","tempStart","minorTickCount","msInterval","majorTick","_dates","startIndex","endIndex","eventObjects","index","currentSlot","_timeSlotCollections","_slots","dateRange","timeSlotRanges","push","firstTimesCell","lastTimesCell","markerTopPosition","timesTableMarkerCss","previous","_changeDate","collections","_getCollections","tempSlot","startEnd","slotIdx","collection","offsetLeft","offsetWidth","scheduler","TimelineView","that","zeroWidthEvent","document","body","fn","call","_zeroWidthEventOffset","remove","_groupedView","_getGroupedView","name","_workDays","workDays","dayIndex","workWeekStart","workWeekEnd","abs","getWorkDays","_templates","_editable","calculateDateRange","_groups","_currentTime","_isVirtualized","_isGroupedByDate","_getNextEventIndexBySlot","sortedEvents","tempIndex","startDate","_getSelectedSlot","pad","_getSortedEvents","uniqueAllEvents","sort","second","isDaySlot","_currentTimeMarkerUpdater","_updateCurrentTimeMarker","_scrollTo","elementOffset","elementOffsetDir","containerScroll","scrollLeft","containerOffsetDir","rightDistance","_isInDateSlot","currentTimeMarker","useLocalTimezone","timezone","dataSource","schema","timezoneOffset","offset","convert","getTimezoneOffset","orientation","currentGroup","utcCurrentTime","toUtcTime","slotByStartDate","setUpdateTimer","markerOptions","updateInterval","_currentTimeUpdateTimer","setInterval","bind","editable","_isMobile","_touchEditable","_mouseEditable","on","e","trigger","closest","preventDefault","create","_slotByPosition","pageX","pageY","resourceInfo","eventInfo","endDate","update","threshold","support","mobileOS","android","_addUserEvents","UserEvents","useClickAsTap","browser","edge","filter","tap","_scrolling","location","_editUserEvents","eventElement","target","touch","initialTouch","is","hasClass","mozilla","webkit","version","msie","scrollTop","ceil","selectedDateFormat","selectedShortDateFormat","selectedMobileDateFormat","today","endTime","showWorkHours","eventMinWidth","columnWidth","text","majorTimeHeaderTemplate","toString","eventTemplate","dateHeaderTemplate","footer","command","ongoingEvents","cssClass","enabled","defaultRowText","showFullDay","showWorkDay","settings","Template","templateSettings","_render","_startDate","_endDate","_calculateSlotRanges","createLayout","_layout","_content","_footer","_setContentWidth","refreshLayout","th","currentTarget","contentWidth","contentTable","minWidth","calculatedWidth","add","slotStartTime","slotEndTime","slotRanges","rangeStart","rangeEnd","_slotRanges","min","max","action","verticalByDate","msMin","msMax","msMajorInterval","majorTickDivider","timeColumns","groupedView","minorTickSlots","minorTickIndex","className","minorTicks","middleColumn","lastSlotColumn","minorSlotsCount","slice","groupedResources","_groupOrientation","_footerItems","items","_defaultTools","todayMobile","fulldayMobile","fulldayDesktop","toggleFullDay","isWorkDay","columnLevels","rowLevel","rowLevels","day","getDay","append","_addResourceView","addTimeSlotCollection","addDays","_timeSlotGroups","_timeSlotInterval","cell","getTimeSlotCollection","currentDate","UTC","getFullYear","getMonth","addTimeSlot","visibleEndDate","nextDate","nextDay","previousDate","previousDay","render","_headerColumnCount","data","Query","field","dir","toArray","eventsByResource","_eventsByResource","_renderEvents","_setRowsHeight","_positionEvents","_ongoingEvents","eventsForGroup","eventUid","Array","isArray","eventIndex","_positionEvent","eventBottomOffset","_getBottomRowOffset","verticalGroupCount","rowsCount","rowHeight","timesRow","row","_refreshSlots","minOffset","maxOffset","slotsCollection","lastSlot","offsetRight","refresh","parentValue","resource","item","itemParentValue","getter","dataParentValueField","itemIdx","value","_resourceValue","eventsFilteredByResource","operator","groupEqFilter","_isInTimeSlot","slotIndex","_adjustEvent","eventStartTime","_time","eventEndTime","adjustedStartDate","adjustedEndDate","clone","isMultiDayEvent","duration","_continuousEvents","isMobile","resize","eventStartDate","eventEndDate","eventResources","apply","singleDay","_formatEventAriaLabel","applyStylesFromKendoAttributes","rectRight","collidingEvents","addEvent","slotIndexEnd","zeroWidthEventOffset","rectLeft","createRows","rowEvents","j","eventLength","_updateEventForSelection","_eventOptionsForMove","_updateEventForResize","set","_updateMoveHint","distance","clonedEvent","eventDuraton","_removeMoveHint","rangeIndex","_moveHint","_updateResizeHint","_removeResizeHint","startRect","_createResizeHint","_resizeHint","toLocalDate","selectionByElement","vertical","collectionIndex","backward","prevGroupSlot","nextGroupSlot","newStart","newEnd","_isInRange","move","key","handled","keys","DOWN","UP","LEFT","RIGHT","off","clearInterval","groupOptions","passedChildren","numberOfChildren","resourceIndex","levels","groupLevel","groupLevelMember","_setResourceValue","TimelineWeekView","selectedDate","dayOfWeek","calendarInfo","firstDay","TimelineWorkWeekView","weekStart","map","indexOf","TimelineMonthView","firstDayOfMonth","lastDayOfMonth","jQuery"],"mappings":"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","file":"kendo.scheduler.timelineview.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.scheduler.view.js'), require('kendo.icons.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.scheduler.view', 'kendo.icons'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendoscheduler = global.kendoscheduler || {}, global.kendoscheduler.timelineview = global.kendoscheduler.timelineview || {}, global.kendoscheduler.timelineview.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n        id: \"scheduler.timelineview\",\n        name: \"Scheduler Timeline View\",\n        category: \"web\",\n        description: \"The Scheduler Timeline View\",\n        depends: [ \"scheduler.view\", \"icons\" ],\n        hidden: true\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            setTime = kendo.date.setTime,\n            SchedulerView = ui.SchedulerView,\n            outerWidth = kendo._outerWidth,\n            outerHeight = kendo._outerHeight,\n            extend = $.extend,\n            encode = kendo.htmlEncode,\n            getDate = kendo.date.getDate,\n            getMilliseconds = kendo.date.getMilliseconds,\n            MS_PER_DAY = kendo.date.MS_PER_DAY,\n            MS_PER_MINUTE = kendo.date.MS_PER_MINUTE,\n            CURRENT_TIME_MARKER_CLASS = \"k-current-time\",\n            CURRENT_TIME_MARKER_ARROW_CLASS = \"k-current-time-arrow\",\n            SCHEDULER_HEADER_WRAP_CLASS = \"k-scheduler-header-wrap\",\n            INVERSE_COLOR_CLASS = \"k-event-inverse\",\n            BORDER_SIZE_COEFF = 0.8666,\n            DOT = \".\",\n            NS = \".kendoTimelineView\";\n\n        var EVENT_TEMPLATE = kendo.template(({ title, start, end }) =>'<div>' +\n            `<div class=\"k-event-template k-event-time\">${encode(kendo.format(\"{0:t} - {1:t}\", start, end))}</div>` +\n            `<div class=\"k-event-template\">${title}</div></div>`),\n            DATA_HEADER_TEMPLATE = kendo.template(({ date }) => `<span class='k-link k-nav-day'>${kendo.format('{0:m}', date)}</span>`),\n            EVENT_WRAPPER_TEMPLATE = (task) =>\n                `<div role=\"button\" aria-label=\"${encode(task.ariaLabel)}\" data-${task.ns}uid=\"${task.uid}\" ` +\n                `${task.resources[0] ? `${kendo.attr(\"style-background-color\")}=\"${task.resources[0].color}\" ${kendo.attr(\"style-border-color\")}=\"${task.resources[0].color}\" class=\"k-event\">` : 'class=\"k-event\">'}` +\n                    '<span class=\"k-event-actions\">' +\n                        `${task.tail ? kendo.ui.icon(\"caret-alt-left\") : ''}` +\n                        `${task.isException() ? kendo.ui.icon(\"arrows-no-repeat\") :\n                        (task.isRecurring() ? kendo.ui.icon(\"arrow-rotate-cw\") : '')}` +\n                    '</span>' +\n                    `${kendo.template(task.template)(task)}` +\n                    '<span class=\"k-event-actions\">' +\n                        `${task.showDelete ? `<a href=\"#\" class=\"k-link k-event-delete\" title=\"${task.messages.destroy}\" aria-label=\"${task.messages.destroy}\">${kendo.ui.icon(\"x\")}</a>` : ''}` +\n                        `${task.head ? kendo.ui.icon(\"caret-alt-right\") : ''}` +\n                    '</span>' +\n                    `${task.resizable && !task.tail ? '<span class=\"k-resize-handle k-resize-w\"></span>' : ''}` +\n                    `${task.resizable && !task.head ? '<span class=\"k-resize-handle k-resize-e\"></span>' : ''}` +\n                '</div>';\n\n        function toInvariantTime(date) {\n            var staticDate = new Date(1980, 1, 1, 0, 0, 0);\n            setTime(staticDate, getMilliseconds(date));\n            return staticDate;\n        }\n\n        function createZeroWidthEvent() {\n            return $(\"<div class='k-event'></div>\").appendTo(document.body);\n        }\n\n        function getWorkDays(options) {\n            if (options.workDays && options.workDays.length) {\n                return options.workDays;\n            }\n\n            var workDays = [];\n            var dayIndex = options.workWeekStart % 7;\n            var workWeekEnd = Math.abs(options.workWeekEnd % 7);\n\n            workDays.push(dayIndex);\n\n            while (workWeekEnd != dayIndex) {\n                if (dayIndex > 6 ) {\n                    dayIndex -= 7;\n                } else {\n                    dayIndex++;\n                }\n                workDays.push(dayIndex);\n            }\n            return workDays;\n        }\n\n        function setColspan(columnLevel) {\n            var count = 0;\n            if (columnLevel.columns) {\n                for (var i = 0; i < columnLevel.columns.length; i++) {\n                    count += setColspan(columnLevel.columns[i]);\n                }\n                columnLevel.colspan = count;\n                return count;\n            } else {\n                columnLevel.colspan = 1;\n                return 1;\n            }\n        }\n\n        var TimelineGroupedView = kendo.Class.extend({\n            init: function(view) {\n                this._view = view;\n            },\n\n            _getTimeSlotByPosition: function(x, y, groupIndex) {\n                var group = this._view.groups[groupIndex];\n\n                return group.timeSlotByPosition(x, y);\n            },\n\n            _hideHeaders: function() {\n                var view = this._view;\n\n                view.timesHeader.find(\"table tr\").last().hide(); /*Chrome fix, use CSS selector*/\n                view.datesHeader.find(\"table tr\").last().hide();\n            },\n\n            _setColspan: function(timeColumn) {\n                setColspan(timeColumn);\n            },\n\n            _createRowsLayout: function(resources, rows, groupHeaderTemplate) {\n                var view = this._view;\n\n                return view._createRowsLayout(resources, rows, groupHeaderTemplate);\n            },\n\n            _createVerticalColumnsLayout: function(resources, rows, groupHeaderTemplate, columns) {\n\n                return columns;\n            },\n\n            _createColumnsLayout: function(resources, columns, groupHeaderTemplate) {\n                var view = this._view;\n\n                return view._createColumnsLayout(resources, columns, groupHeaderTemplate);\n            },\n\n            _getRowCount: function() {\n                var view = this._view;\n\n                return view._groupCount();\n            },\n\n            _getGroupsCount: function() {\n                return 1;\n            },\n\n            _addContent: function(dates, columnCount, groupsCount, rowCount, start, end, slotTemplate, isVerticalGrouped) {\n                var view = this._view;\n                var html = '';\n                var options = view.options;\n\n                var appendRow = function(date) {\n                    var content = \"\";\n                    var classes = \"\";\n                    var tmplDate;\n\n                    var resources = function(groupIndex) {\n                        return function() {\n                            return view._resourceBySlot({ groupIndex: groupIndex });\n                        };\n                    };\n\n                    if (kendo.date.isToday(dates[idx])) {\n                        classes += \"k-today\";\n                    }\n\n                    if (kendo.date.getMilliseconds(date) < kendo.date.getMilliseconds(options.workDayStart) ||\n                        kendo.date.getMilliseconds(date) >= kendo.date.getMilliseconds(options.workDayEnd) ||\n                        !view._isWorkDay(dates[idx])) {\n                        classes += \" k-nonwork-hour\";\n                    }\n\n                    content += '<td' + (classes !== \"\" ? ' class=\"' + classes + '\"' : \"\") + \">\";\n                    tmplDate = kendo.date.getDate(dates[idx]);\n                    kendo.date.setTime(tmplDate, kendo.date.getMilliseconds(date));\n\n                    content += slotTemplate({ date: tmplDate, resources: resources(isVerticalGrouped ? rowIdx : groupIdx) });\n                    content += \"</td>\";\n\n                    return content;\n                };\n\n                for (var rowIdx = 0; rowIdx < rowCount; rowIdx++) {\n                    html += '<tr>';\n                    for (var groupIdx = 0; groupIdx < groupsCount; groupIdx++) {\n                        for (var idx = 0, length = columnCount; idx < length; idx++) {\n                            html += view._forTimeRange(start, end, appendRow);\n                        }\n                    }\n                    html += \"</tr>\";\n                }\n                return html;\n            },\n\n            _addTimeSlotsCollections: function(groupCount, datesCount, tableRows, interval, isVerticallyGrouped) {\n                var view = this._view;\n                var rowCount = tableRows.length;\n\n                if (isVerticallyGrouped) {\n                    rowCount = Math.floor(rowCount / groupCount);\n                }\n\n                for (var groupIndex = 0; groupIndex < groupCount; groupIndex++) {\n                    var rowMultiplier = 0;\n                    var group = view.groups[groupIndex];\n                    var time;\n\n                    if (isVerticallyGrouped) {\n                        rowMultiplier = groupIndex;\n                    }\n\n                    var rowIndex = rowMultiplier * rowCount;\n                    var cellMultiplier = 0;\n\n                    if (!isVerticallyGrouped) {\n                        cellMultiplier = groupIndex;\n                    }\n\n                    var cells = tableRows[rowIndex].children;\n                    var cellsPerGroup = cells.length / (!isVerticallyGrouped ? groupCount : 1);\n                    var cellsPerDay = cellsPerGroup / datesCount;\n\n                    for (var dateIndex = 0; dateIndex < datesCount; dateIndex++) {\n                        var cellOffset = dateIndex * cellsPerDay + (cellsPerGroup * cellMultiplier);\n                        time = getMilliseconds(new Date(+view.startTime()));\n\n                        for (var cellIndex = 0; cellIndex < cellsPerDay; cellIndex++) {\n\n                            view._addTimeSlotToCollection(group, cells, cellIndex, cellOffset, dateIndex, time, interval);\n                            time += interval;\n                        }\n                    }\n                }\n            },\n\n            _getVerticalGroupCount: function(groupsCount) {\n\n                return groupsCount;\n            },\n\n            _getVerticalRowCount: function(eventGroups, groupIndex, maxRowCount) {\n                var view = this._view;\n\n                return view._isVerticallyGrouped() ? eventGroups[groupIndex].maxRowCount : maxRowCount;\n            },\n\n            _renderEvent: function(eventGroup, event, adjustedEvent, group, range, container) {\n                var view = this._view;\n                var element;\n\n                element = view._createEventElement(adjustedEvent.occurrence, event, range.head || adjustedEvent.head, range.tail || adjustedEvent.tail);\n                element.appendTo(container).css({ top: 0, height: view.options.eventHeight });\n\n                var eventObject = {\n                    start: adjustedEvent.occurrence._startTime || adjustedEvent.occurrence.start,\n                    end: adjustedEvent.occurrence._endTime || adjustedEvent.occurrence.end,\n                    element: element,\n                    uid: event.uid,\n                    slotRange: range,\n                    rowIndex: 0,\n                    offsetTop: 0\n                };\n\n                eventGroup.events[event.uid] = eventObject;\n\n                view._inverseEventColor(element);\n                view.addContinuousEvent(group, range, element, event.isAllDay);\n                view._arrangeRows(eventObject, range, eventGroup);\n            },\n\n            _verticalCountForLevel: function(level) {\n                var view = this._view;\n\n                return view._rowCountForLevel(level);\n            },\n\n            _horizontalCountForLevel: function(level) {\n                var view = this._view;\n\n                return view._columnCountForLevel(level);\n            },\n\n            _updateCurrentVerticalTimeMarker: function(ranges, currentTime) {\n                var view = this._view;\n                var elementHtml = \"<div class='\" + CURRENT_TIME_MARKER_CLASS + \"'></div>\";\n                var headerWrap = view.datesHeader.find(DOT + SCHEDULER_HEADER_WRAP_CLASS);\n                var left = Math.round(ranges[0].innerRect(currentTime, new Date(currentTime.getTime() + 1), false).left);\n                var timesTableMarker = $(elementHtml)\n                        .prependTo(headerWrap)\n                        .addClass(CURRENT_TIME_MARKER_ARROW_CLASS + \"-down\");\n\n                timesTableMarker.css({\n                    left: view._adjustLeftPosition(left - (outerWidth(timesTableMarker) * BORDER_SIZE_COEFF / 2)),\n                    top: headerWrap.find(\"tr\").last().prev().position().top\n                });\n\n                $(elementHtml).prependTo(view.content).css({\n                    left: view._adjustLeftPosition(left),\n                    width: \"1px\",\n                    height: view.content[0].scrollHeight - 1,\n                    top: 0\n                });\n            },\n\n            _changeGroup: function() {\n                return undefined$1;\n            },\n\n            _prevGroupSlot: function(slot, group, isDay) {\n                var view = this._view;\n\n                if (view._isVerticallyGrouped()) {\n                    return slot;\n                } else {\n                    var collection = group._collection(0, isDay);\n                    return collection.last();\n                }\n            },\n\n            _nextGroupSlot: function(slot, group, isDay) {\n                var view = this._view;\n\n                if (view._isVerticallyGrouped()) {\n                    return slot;\n                } else {\n                    var collection = group._collection(0, isDay);\n                    return collection.first();\n                }\n            },\n\n            _verticalSlots: function(selection, reverse) {\n                 var view = this._view;\n\n                 return view._changeGroup(selection, reverse);\n            },\n\n             _verticalMethod: function(reverse) {\n\n                  return reverse ? \"leftSlot\" : \"rightSlot\";\n             },\n\n             _normalizeVerticalSelection: function() {\n                 return undefined$1;\n             },\n\n             _horizontalSlots: function(selection, group, method, startSlot, endSlot, multiple, reverse) {\n                var view = this._view;\n                var result = {};\n\n                result.startSlot = group[method](startSlot);\n                result.endSlot = group[method](endSlot);\n\n                if (!multiple && view._isHorizontallyGrouped() && (!result.startSlot || !result.endSlot)) {\n                    result.startSlot = result.endSlot = view._changeGroup(selection, reverse);\n                }\n\n                return result;\n            },\n\n            _changeVerticalViewPeriod: function() {\n                return false;\n            },\n\n            _changeHorizontalViewPeriod: function(slots, shift, selection, reverse) {\n                var view = this._view;\n\n                if ((!slots.startSlot || !slots.endSlot ) && !shift && view._changeViewPeriod(selection, reverse, false)) {\n                    return true;\n                }\n                return false;\n            },\n\n            _updateDirection: function(selection, ranges, shift, reverse) {\n                var view = this._view;\n\n                view._updateDirection(selection, ranges, shift, reverse, true);\n            },\n\n             _createMoveHint: function(range, adjustedEvent) {\n                    var view = this._view;\n                    var startSlot = range.start;\n\n                    var hint = view._createEventElement(adjustedEvent.occurrence ,adjustedEvent.occurrence, false, false);\n\n                    hint.addClass(\"k-event-drag-hint\");\n\n                    var rect = range.innerRect(adjustedEvent.occurrence.start, adjustedEvent.occurrence.end, view.options.snap);\n                    var width = rect.right - rect.left;\n\n                    if (width < 0) {\n                        width = 0;\n                    }\n\n                    var left = view._adjustLeftPosition(rect.left);\n\n                    var css = {\n                        left: left,\n                        top: startSlot.offsetTop,\n                        height: startSlot.offsetHeight,\n                        width: width\n                    };\n\n                    hint.css(css);\n\n                    if (adjustedEvent.occurrence.inverseColor) {\n                        hint.addClass(INVERSE_COLOR_CLASS);\n                    }\n\n                    view._appendMoveHint(hint);\n             },\n\n             _adjustLeftPosition: function(left) {\n                var view = this._view;\n\n                if (view._isRtl) {\n                    left -= (view.content[0].scrollWidth - view.content[0].clientWidth);\n                }\n\n                return left;\n             }\n        });\n\n        var TimelineGroupedByDateView = kendo.Class.extend({\n            init: function(view) {\n                this._view = view;\n            },\n\n            _getTimeSlotByPosition: function(x, y, groupIndex) {\n                var group = this._view.groups[groupIndex];\n\n                return group.timeSlotByPosition(x, y, true);\n            },\n\n            _hideHeaders: function() {\n                var view = this._view;\n\n                if (!view._isVerticallyGrouped()) {\n                    view.timesHeader.find(\"table tr\").eq(2).hide();\n                    view.datesHeader.find(\"table tr\").eq(2).hide();\n                } else {\n                            view.times.find(\".k-last\").hide();\n                }\n            },\n            _setColspan: function() {},\n\n            _createRowsLayout: function(resources, rows, groupHeaderTemplate, columns) {\n                var view = this._view;\n\n                return view._createDateLayout(columns, null, true);\n            },\n\n            _createVerticalColumnsLayout: function(resources, rows, groupHeaderTemplate) {\n                var view = this._view;\n\n                return view._createColumnsLayout(resources, null, groupHeaderTemplate);\n            },\n\n            _createColumnsLayout: function(resources, columns, groupHeaderTemplate, subColumns) {\n                var view = this._view;\n\n                return view._createColumnsLayout(resources, columns, groupHeaderTemplate, subColumns, true);\n            },\n\n            _getRowCount: function(level) {\n                var view = this._view;\n\n                return view._rowCountForLevel(level);\n            },\n\n            _getGroupsCount: function() {\n                var view = this._view;\n\n                return view._groupCount();\n            },\n\n            _addContent: function(dates, columnCount, groupsCount, rowCount, start, end, slotTemplate, isVerticalGrouped) {\n                var view = this._view;\n                var html = '';\n                var options = view.options;\n\n                var appendRow = function(date, isMajorTickColumn, isMiddleColumn, isLastSlotColumn, minorTickColumns, groupIdx) {\n                    var content = \"\";\n                    var classes = \"\";\n                    var tmplDate;\n                    var workDateIndex = view._isVerticallyGrouped() ? dateIndex : idx;\n\n                    var resources = function(groupIndex) {\n                        return function() {\n                            return view._resourceBySlot({ groupIndex: groupIndex });\n                        };\n                    };\n\n                    if (kendo.date.isToday(dates[idx])) {\n                        classes += \"k-today\";\n                    }\n\n                    if (kendo.date.getMilliseconds(date) < kendo.date.getMilliseconds(options.workDayStart) ||\n                        kendo.date.getMilliseconds(date) >= kendo.date.getMilliseconds(options.workDayEnd) ||\n                        !view._isWorkDay(dates[workDateIndex])) {\n                        classes += \" k-nonwork-hour\";\n                    }\n\n                    content += '<td' + (classes !== \"\" ? ' class=\"' + classes + '\"' : \"\") + \">\";\n                    tmplDate = kendo.date.getDate(dates[idx]);\n                    kendo.date.setTime(tmplDate, kendo.date.getMilliseconds(date));\n\n                    content += slotTemplate({ date: tmplDate, resources: resources(groupIdx) });\n                    content += \"</td>\";\n\n                    return content;\n                };\n\n                var tempStart = new Date(start),\n                    minorTickCount = view.options.minorTickCount,\n                    msMajorInterval = view.options.majorTick * MS_PER_MINUTE,\n                    msInterval = msMajorInterval / minorTickCount || 1,\n                    dateIndex;\n\n                for (var rowIdx = 0; rowIdx < rowCount; rowIdx++) {\n                    html += '<tr>';\n\n                     if ((rowIdx % (rowCount / view._dates.length)) === 0) {\n                       dateIndex = (rowIdx / (rowCount / view._dates.length));\n                       tempStart = new Date(view._dates[dateIndex]);\n                       kendo.date.setTime(tempStart, kendo.date.getMilliseconds(start));\n                      }\n\n                    for (var idx = 0, length = columnCount; idx < length; idx++) {\n\n                        html += view._forTimeRange(tempStart, end, appendRow, isVerticalGrouped, groupsCount);\n\n                        if (isVerticalGrouped) {\n                        setTime(tempStart, msInterval, false);\n                            break;\n                        }\n                    }\n                   html += \"</tr>\";\n                }\n\n                return html;\n            },\n\n            _addTimeSlotsCollections: function(groupCount, datesCount, tableRows, interval, isVerticallyGrouped) {\n                var view = this._view;\n                var rowCount = tableRows.length;\n\n                 if (isVerticallyGrouped) {\n                    rowCount = rowCount / datesCount;\n                 }\n\n                for (var dateIndex = 0; dateIndex < datesCount; dateIndex++) {\n                    var rowMultiplier = 0;\n                    var time;\n\n                    if (isVerticallyGrouped) {\n                        rowMultiplier = dateIndex;\n                    }\n\n                    var rowIndex = rowMultiplier * rowCount;\n                    var cellMultiplier = 0;\n                    var cells = tableRows[rowIndex].children;\n                    var cellsPerGroup = isVerticallyGrouped ? rowCount : cells.length / (datesCount * groupCount);\n                    var cellsPerDay = cells.length / datesCount;\n                    var cellOffset;\n\n                    time = getMilliseconds(new Date(+view.startTime()));\n\n                    for (var cellIndex = 0; cellIndex < cellsPerGroup; cellIndex++) {\n                        if (!isVerticallyGrouped) {\n                            cellOffset = (dateIndex * cellsPerDay) + (groupCount * cellIndex);\n                            cellMultiplier++;\n                        } else {\n                            cellOffset = 0;\n                            cells = tableRows[cellIndex + (cellsPerGroup * dateIndex)].children;\n                        }\n\n                        for (var groupIndex = 0; groupIndex < groupCount; groupIndex++) {\n                            var group = view.groups[groupIndex];\n\n                            view._addTimeSlotToCollection(group, cells, groupIndex, cellOffset, dateIndex, time, interval);\n                        }\n                        time += interval;\n                    }\n                 }\n            },\n\n            _getVerticalGroupCount: function() {\n                var view = this._view;\n\n                return view.content.find(\"tr\").length;\n            },\n\n            _getVerticalRowCount: function(eventGroups, groupIndex, maxRowCount) {\n\n                return maxRowCount;\n            },\n\n            _renderEvent: function(eventGroup, event, adjustedEvent, group, range, container, startIndex, endIndex) {\n                var view = this._view;\n                var element;\n                var eventObjects = [];\n\n                for (var i = range.start.index; i <= range.end.index; i++) {\n                    element = view._createEventElement(adjustedEvent.occurrence, event, i !== endIndex, i !== startIndex);\n                    element.appendTo(container).css({ top: 0, height: view.options.eventHeight });\n                    var currentSlot = group._timeSlotCollections[0]._slots[i];\n                    var dateRange = group.timeSlotRanges(currentSlot.start, currentSlot.end, false)[0];\n\n                        var eventObject = {\n                        start: i === startIndex ? adjustedEvent.occurrence._startTime || adjustedEvent.occurrence.start : currentSlot.start,\n                        end: i === endIndex ? adjustedEvent.occurrence._endTime || adjustedEvent.occurrence.end : currentSlot.end,\n                        element: element,\n                        uid: event.uid,\n                        slotRange: dateRange,\n                        rowIndex: 0,\n                        offsetTop: 0\n                    };\n\n                    eventGroup.events[event.uid] = eventObject;\n                    eventObjects.push(eventObject);\n\n                    view.addContinuousEvent(group, dateRange, element, event.isAllDay);\n                    view._arrangeRows(eventObject, dateRange, eventGroup);\n                }\n                eventGroup.events[event.uid] = eventObjects;\n            },\n\n            _verticalCountForLevel: function(level) {\n                var view = this._view;\n\n                return view._columnCountForLevel(level);\n            },\n\n            _horizontalCountForLevel: function(level, columnLevel) {\n                var view = this._view;\n\n                return view._columnCountForLevel(columnLevel) / view._columnCountForLevel(2);\n            },\n\n            _updateCurrentVerticalTimeMarker: function(ranges,currentTime) {\n                var view = this._view;\n                var firstTimesCell = view.times.find(\"tr\").first().find(\"th\").first();\n                var lastTimesCell = view.times.find(\"tr\").first().find(\"th\").last();\n                var elementHtml = \"<div class='\" + CURRENT_TIME_MARKER_CLASS + \"'></div>\";\n                var timesTableMarker = $(elementHtml).prependTo(view.times);\n                var markerTopPosition = Math.round(ranges[0].innerRect(currentTime, new Date(currentTime.getTime() + 1), false).top);\n                var timesTableMarkerCss = {};\n\n                if (this._isRtl) {\n                    timesTableMarkerCss.right = firstTimesCell.position().left + outerHeight(firstTimesCell) - outerHeight(lastTimesCell);\n                    timesTableMarker.addClass(CURRENT_TIME_MARKER_ARROW_CLASS + \"-left\");\n                } else {\n                    timesTableMarkerCss.left = lastTimesCell.position().left;\n                    timesTableMarker.addClass(CURRENT_TIME_MARKER_ARROW_CLASS + \"-right\");\n                }\n\n                timesTableMarkerCss.top = markerTopPosition - (outerWidth(timesTableMarker) * BORDER_SIZE_COEFF / 2);\n\n                timesTableMarker.css(timesTableMarkerCss);\n\n                $(elementHtml).prependTo(view.content).css({\n                    top: markerTopPosition,\n                    height: \"1px\",\n                    right: \"1px\",\n                    width: view.content[0].scrollWidth,\n                    left: 0\n                });\n            },\n\n            _changeGroup: function(selection, previous, slot) {\n                 var view = this._view;\n\n                 if (!slot) {\n                    selection.groupIndex = previous ? view.groups.length - 1 : 0;\n                 }\n            },\n\n             _prevGroupSlot: function(slot) {\n                  return slot;\n            },\n\n            _nextGroupSlot: function(slot) {\n                  return slot;\n            },\n\n            _changeDate: function(selection, reverse, slot) {\n                var view = this._view;\n                var group = view.groups[selection.groupIndex];\n                var collections, index;\n\n                if (reverse) {\n                      collections = group._getCollections(false);\n                      index = slot.index - 1;\n\n                      if (index >= 0) {\n                          return collections[0]._slots[index];\n                      }\n                  } else {\n                      collections = group._getCollections(false);\n                      index = slot.index + 1;\n\n                      if (collections[0] && collections[0]._slots[index]) {\n                          return collections[0]._slots[index];\n                      }\n                   }\n            },\n\n            _verticalSlots: function(selection, reverse, slot) {\n                return this._changeDate(selection, reverse, slot);\n            },\n\n            _verticalMethod: function(reverse, multiple) {\n                if (multiple) {\n                   return reverse ? \"upSlot\" : \"downSlot\";\n                } else {\n                   return reverse ? \"leftSlot\" : \"rightSlot\";\n                }\n            },\n\n            _normalizeVerticalSelection: function(selection, ranges, reverse, multiple) {\n                var view = this._view;\n\n                if (!multiple) {\n                    return view._normalizeVerticalSelection(selection, ranges, reverse);\n                }\n\n                return undefined$1;\n            },\n\n            _horizontalSlots: function(selection, group, method, startSlot, endSlot, multiple, reverse) {\n                 var view = this._view;\n                 var tempSlot = view._changeGroup(selection, reverse);\n                 var result = {};\n\n                if (!tempSlot) {\n                    if (!view._isVerticallyGrouped()) {\n                        result.startSlot = group[method](startSlot);\n                        result.endSlot = group[method](endSlot);\n                    }\n\n                } else {\n                    result.startSlot = result.endSlot = tempSlot;\n                }\n\n                return result;\n            },\n\n            _changeVerticalViewPeriod: function(slots, shift, selection, reverse) {\n                var view = this._view;\n\n                if ((!slots.startSlot || !slots.endSlot) && !shift &&\n                    view._changeViewPeriod(selection, reverse, view._isVerticallyGrouped())) {\n                    return true;\n                }\n                return false;\n            },\n\n            _changeHorizontalViewPeriod: function(slots, shift, selection, reverse) {\n               var view = this._view;\n\n               if ( view._isVerticallyGrouped()) {\n                   return false;\n               }\n\n               if ((!slots.startSlot || !slots.endSlot ) && !shift && view._changeViewPeriod(selection, reverse, false)) {\n                    return true;\n                }\n                return false;\n            },\n\n            _updateDirection: function(selection, ranges, shift, reverse) {\n                var view = this._view;\n\n                view._updateDirection(selection, ranges, shift, reverse, !view._isVerticallyGrouped());\n            },\n\n             _createMoveHint: function(range, adjustedEvent) {\n                    var view = this._view;\n                    var startSlot = range.start;\n                    var startEnd = range.end;\n\n                    for (var slotIdx = startSlot.index; slotIdx <= startEnd.index; slotIdx++) {\n                        var slot = range.collection._slots[slotIdx];\n                        var hint = view._createEventElement(adjustedEvent.occurrence ,adjustedEvent.occurrence, false, false);\n\n                        hint.addClass(\"k-event-drag-hint\");\n\n                        var css = {\n                            left: slot.offsetLeft + 2,\n                            top: slot.offsetTop,\n                            height: view.options.eventHeight,\n                            width: slot.offsetWidth\n                        };\n\n                        hint.css(css);\n\n                        if (adjustedEvent.occurrence.inverseColor) {\n                            hint.addClass(INVERSE_COLOR_CLASS);\n                        }\n\n                        view._appendMoveHint(hint);\n                    }\n             },\n\n             _adjustLeftPosition: function(left) {\n                 var view = this._view;\n\n                if (view._isRtl && !view._isVerticallyGrouped()) {\n                    left -= (view.content[0].scrollWidth - view.content[0].offsetWidth);\n                }\n\n                return left;\n             }\n     });\n\n        kendo.ui.scheduler.TimelineGroupedView = TimelineGroupedView;\n        kendo.ui.scheduler.TimelineGroupedByDateView = TimelineGroupedByDateView;\n\n        var TimelineView = SchedulerView.extend({\n            init: function(element, options) {\n                var that = this,\n                zeroWidthEvent = createZeroWidthEvent();\n\n                SchedulerView.fn.init.call(that, element, options);\n\n                that._zeroWidthEventOffset = zeroWidthEvent.outerWidth();\n                zeroWidthEvent.remove();\n\n                that._groupedView = that._getGroupedView();\n\n                that.title = that.options.title || that.options.name;\n\n                that._workDays = getWorkDays(that.options);\n\n                that._templates();\n\n                that._editable();\n\n                that.calculateDateRange();\n\n                that._groups();\n\n                that._currentTime(true);\n            },\n            name: \"timeline\",\n\n            _isVirtualized: function() {\n                return false;\n            },\n\n            _getGroupedView: function() {\n\n                if (this._isGroupedByDate()) {\n                       return new kendo.ui.scheduler.TimelineGroupedByDateView(this);\n                } else {\n                       return new kendo.ui.scheduler.TimelineGroupedView(this);\n                }\n            },\n\n            _getNextEventIndexBySlot: function(slot, sortedEvents, groupIndex) {\n               if (this._isVerticallyGrouped()) {\n                   return kendo.ui.SchedulerView.fn._getNextEventIndexBySlot.call(this, slot, sortedEvents, groupIndex);\n               }\n\n                var tempIndex = 0;\n\n                for (var i = 0; i < sortedEvents.length; i++) {\n                    if (slot.startDate() > sortedEvents[i].start.startDate()) {\n                        tempIndex++;\n                        continue;\n                    }\n\n                    if (slot.startDate().getTime() === sortedEvents[i].start.startDate().getTime() &&\n                     groupIndex > sortedEvents[i].start.groupIndex) {\n                          tempIndex++;\n                          continue;\n                    }\n\n                     break;\n\n                }\n                return tempIndex;\n            },\n\n            _getSelectedSlot: function(slot, sortedEvents, event, idx, pad, prev) {\n                if (this._isVerticallyGrouped()) {\n                   return kendo.ui.SchedulerView.fn._getSelectedSlot.call(this, slot, sortedEvents, event, idx, pad, prev);\n                }\n\n                return slot;\n            },\n\n            _getSortedEvents: function(uniqueAllEvents) {\n                if (this._isVerticallyGrouped()) {\n                   return kendo.ui.SchedulerView.fn._getSortedEvents.call(this, uniqueAllEvents);\n                }\n\n                return uniqueAllEvents.sort(function(first, second) {\n                    var result = first.start.startDate().getTime() - second.start.startDate().getTime();\n\n                    if (result === 0) {\n                        if (first.start.isDaySlot && !second.start.isDaySlot) {\n                                result = -1;\n                        }\n\n                        if (!first.start.isDaySlot && second.start.isDaySlot) {\n                                result = 1;\n                        }\n                    }\n\n                    if (result === 0) {\n                        result = first.start.groupIndex - second.start.groupIndex;\n                    }\n\n                    if (result === 0) {\n                        result = $(first.element).index() - $(second.element).index();\n                    }\n\n                    return result;\n                });\n            },\n\n            _currentTimeMarkerUpdater: function() {\n                this._updateCurrentTimeMarker(new Date());\n            },\n\n            _scrollTo: function(element, container) {\n                SchedulerView.fn._scrollTo.call(this, element, container);\n\n                var elementOffset = element.offsetLeft,\n                    elementOffsetDir = element.offsetWidth,\n                    containerScroll = container.scrollLeft,\n                    containerOffsetDir = container.clientWidth,\n                    rightDistance = elementOffset + elementOffsetDir,\n                    result = 0;\n\n                    if (containerScroll > elementOffset) {\n                        result = elementOffset;\n                    } else if (rightDistance > (containerScroll + containerOffsetDir)) {\n                        if (elementOffsetDir <= containerOffsetDir) {\n                            result = (rightDistance - containerOffsetDir);\n                        } else {\n                            result = elementOffset;\n                        }\n                    } else {\n                        result = containerScroll;\n                    }\n                    container.scrollLeft = result;\n            },\n\n            _updateCurrentTimeMarker: function(currentTime) {\n                var options = this.options;\n\n                this.datesHeader.find(DOT + CURRENT_TIME_MARKER_CLASS).remove();\n                this.times.find(DOT + CURRENT_TIME_MARKER_CLASS).remove();\n                this.content.find(DOT + CURRENT_TIME_MARKER_CLASS).remove();\n\n                if (!this._isInDateSlot({ start: currentTime, end: currentTime })) {\n                    return;\n                }\n\n                if (options.currentTimeMarker.useLocalTimezone === false) {\n                    var timezone = options.dataSource.options.schema.timezone;\n\n                    if (options.dataSource && timezone) {\n                        var timezoneOffset = kendo.timezone.offset(currentTime, timezone);\n                        currentTime = kendo.timezone.convert(currentTime, currentTime.getTimezoneOffset(), timezoneOffset);\n                    }\n                }\n\n                var groupsCount = !options.group || options.group.orientation == \"vertical\" ? 1 : this.groups.length;\n\n                for (var groupIndex = 0; groupIndex < groupsCount; groupIndex++) {\n                    var currentGroup = this.groups[groupIndex];\n\n                    if (!currentGroup) {\n                        return;\n                    }\n\n                    var utcCurrentTime = kendo.date.toUtcTime(currentTime);\n                    var ranges = currentGroup.timeSlotRanges(utcCurrentTime, utcCurrentTime + 1);\n\n                    if (ranges.length === 0) {\n                        return;\n                    }\n\n                    var collection = ranges[0].collection;\n                    var slotElement = collection.slotByStartDate(currentTime);\n\n                    if (slotElement) {\n\n                        if (this._isVerticallyGrouped()) {\n                            this._groupedView._updateCurrentVerticalTimeMarker(ranges,currentTime);\n                        } else {\n                            var elementHtml = \"<div class='\" + CURRENT_TIME_MARKER_CLASS + \"'></div>\";\n                            var headerWrap = this.datesHeader.find(DOT + SCHEDULER_HEADER_WRAP_CLASS);\n                            var left = Math.round(ranges[0].innerRect(currentTime, new Date(currentTime.getTime() + 1), false).left);\n                            var timesTableMarker = $(elementHtml)\n                                    .prependTo(headerWrap)\n                                    .addClass(CURRENT_TIME_MARKER_ARROW_CLASS + \"-down\");\n\n                            timesTableMarker.css({\n                                left: this._adjustLeftPosition(left - (outerWidth(timesTableMarker) * BORDER_SIZE_COEFF / 2)),\n                                top: headerWrap.find(\"tr\").last().prev().position().top\n                            });\n\n                            $(elementHtml).prependTo(this.content).css({\n                                left: this._adjustLeftPosition(left),\n                                width: \"1px\",\n                                height: this.content[0].scrollHeight - 1,\n                                top: 0\n                            });\n                        }\n                    }\n                }\n            },\n\n            _adjustLeftPosition: function(left) {\n                return this._groupedView._adjustLeftPosition(left);\n            },\n\n            _currentTime: function(setUpdateTimer) {\n                var that = this;\n                var markerOptions = that.options.currentTimeMarker;\n\n                if (markerOptions !== false && markerOptions.updateInterval !== undefined$1) {\n                    that._currentTimeMarkerUpdater();\n\n                    if (setUpdateTimer) {\n                        that._currentTimeUpdateTimer = setInterval(this._currentTimeMarkerUpdater.bind(that), markerOptions.updateInterval);\n                    }\n                }\n            },\n\n            _editable: function() {\n                if (this.options.editable) {\n                    if (this._isMobile()) {\n                        this._touchEditable();\n                    } else {\n                        this._mouseEditable();\n                    }\n                }\n            },\n\n            _mouseEditable: function() {\n                var that = this;\n                that.element.on(\"click\" + NS, \".k-event a:has(.k-i-x),.k-event a:has(.k-svg-i-x)\", function(e) {\n                    that.trigger(\"remove\", { uid: $(this).closest(\".k-event\").attr(kendo.attr(\"uid\")) });\n                    e.preventDefault();\n                });\n\n                if (that.options.editable.create !== false) {\n                    that.element.on(\"dblclick\" + NS, \".k-scheduler-content td\", function(e) {\n                        var slot = that._slotByPosition(e.pageX, e.pageY);\n\n                        if (slot) {\n                            var resourceInfo = that._resourceBySlot(slot);\n                            that.trigger(\"add\", { eventInfo: extend({ start: slot.startDate(), end: slot.endDate() }, resourceInfo) });\n                        }\n\n                        e.preventDefault();\n                    });\n                }\n\n                if (that.options.editable.update !== false) {\n                    that.element.on(\"dblclick\" + NS, \".k-event\", function(e) {\n                        that.trigger(\"edit\", { uid: $(this).closest(\".k-event\").attr(kendo.attr(\"uid\")) });\n                        e.preventDefault();\n                    });\n                }\n            },\n\n            _touchEditable: function() {\n                var that = this;\n                var threshold = 0;\n\n                if (kendo.support.mobileOS.android) {\n                    threshold = 5;\n                }\n\n                if (that.options.editable.create !== false) {\n                    that._addUserEvents = new kendo.UserEvents(that.element, {\n                        threshold: threshold,\n                        useClickAsTap: !kendo.support.browser.edge,\n                        filter: \".k-scheduler-content td\",\n                        tap: function(e) {\n                            if (that._scrolling) {\n                                return;\n                            }\n                            var x = e.x.location !== undefined$1 ? e.x.location : e.x;\n                            var y = e.y.location !== undefined$1 ? e.y.location : e.y;\n                            var slot = that._slotByPosition(x, y);\n\n                            if (slot) {\n                                var resourceInfo = that._resourceBySlot(slot);\n                                that.trigger(\"add\", { eventInfo: extend({ start: slot.startDate(), end: slot.endDate() }, resourceInfo) });\n                            }\n\n                            e.preventDefault();\n                        }\n                    });\n                }\n\n                if (that.options.editable.update !== false) {\n                    that._editUserEvents = new kendo.UserEvents(that.element, {\n                        threshold: threshold,\n                        useClickAsTap: !kendo.support.browser.edge,\n                        filter: \".k-event\",\n                        tap: function(e) {\n                            if (that._scrolling) {\n                                return;\n                            }\n                            var eventElement = $(e.target).closest(\".k-event\");\n                            var touchElement = $(e.touch.initialTouch);\n\n                            if (touchElement.is(\".k-i-x,.k-svg-i-x\")) {\n                                that.trigger(\"remove\", { uid: eventElement.attr(kendo.attr(\"uid\")) });\n                            } else if (!eventElement.hasClass(\"k-event-active\")) {\n                                that.trigger(\"edit\", { uid: eventElement.attr(kendo.attr(\"uid\")) });\n                            }\n\n                            e.preventDefault();\n                        }\n                    });\n                }\n            },\n\n            _slotByPosition: function(x, y) {\n                var slot;\n                var content = this.content;\n                var offset = content.offset();\n                var groupIndex;\n\n                x -= offset.left;\n                y -= offset.top;\n\n                if (this._isRtl) {\n                    var browser = kendo.support.browser;\n\n                    if (browser.mozilla || (browser.webkit && browser.version >= 85)) {\n                         x += (content[0].scrollWidth - content[0].offsetWidth);\n                         x += content[0].scrollLeft;\n                    } else if (browser.msie) {\n                         x -= kendo.scrollLeft(content);\n                         x += content[0].scrollWidth - content[0].offsetWidth;\n                    } else if (browser.webkit) {\n                         x += content[0].scrollLeft;\n                    }\n                } else {\n                    x += content[0].scrollLeft;\n                }\n\n                y += content[0].scrollTop;\n\n                x = Math.ceil(x);\n                y = Math.ceil(y);\n\n                for (groupIndex = 0; groupIndex < this.groups.length; groupIndex++) {\n\n                     slot = this._groupedView._getTimeSlotByPosition(x, y, groupIndex);\n\n                     if (slot) {\n                         return slot;\n                     }\n                }\n\n                return null;\n            },\n\n            options: {\n                name: \"TimelineView\",\n                title: \"Timeline\",\n                selectedDateFormat: \"{0:D}\",\n                selectedShortDateFormat: \"{0:d}\",\n                selectedMobileDateFormat: \"{0:MMM dd}\",\n                date: kendo.date.today(),\n                startTime: kendo.date.today(),\n                endTime: kendo.date.today(),\n                showWorkHours: false,\n                minorTickCount: 2,\n                editable: true,\n                workDayStart: new Date(1980, 1, 1, 8, 0, 0),\n                workDayEnd: new Date(1980, 1, 1, 17, 0, 0),\n                workWeekStart: 1,\n                workWeekEnd: 5,\n                majorTick: 60,\n                eventHeight: 25,\n                eventMinWidth: 0,\n                columnWidth: 100,\n                groupHeaderTemplate: ({ text }) => text,\n                majorTimeHeaderTemplate: ({ date }) => kendo.toString(date, 't'),\n                slotTemplate: () => \"&nbsp;\",\n                eventTemplate: EVENT_TEMPLATE,\n                dateHeaderTemplate: DATA_HEADER_TEMPLATE,\n                footer: {\n                    command: \"workDay\"\n                },\n                currentTimeMarker: {\n                    updateInterval: 10000,\n                    useLocalTimezone: true\n                },\n                ongoingEvents: {\n                    cssClass: null,\n                    enabled: true,\n                    updateInterval: 60000\n                },\n                messages: {\n                    defaultRowText: \"All events\",\n                    showFullDay: \"Show full day\",\n                    showWorkDay: \"Show business hours\"\n                }\n            },\n\n            events: [\"remove\", \"add\", \"edit\"],\n\n            _templates: function() {\n                var options = this.options,\n                    settings = extend({}, kendo.Template, options.templateSettings);\n\n                this.eventTemplate = kendo.template(EVENT_WRAPPER_TEMPLATE);\n                this.majorTimeHeaderTemplate = kendo.template(options.majorTimeHeaderTemplate, settings);\n                this.dateHeaderTemplate = kendo.template(options.dateHeaderTemplate, settings);\n                this.slotTemplate = kendo.template(options.slotTemplate, settings);\n                this.groupHeaderTemplate = kendo.template(options.groupHeaderTemplate, settings);\n            },\n\n            _render: function(dates) {\n                var that = this;\n\n                dates = dates || [];\n\n                that._dates = dates;\n\n                that._startDate = dates[0];\n\n                that._endDate = dates[(dates.length - 1) || 0];\n\n                that._calculateSlotRanges();\n\n                that.createLayout(that._layout(dates));\n\n                that._content(dates);\n\n                that._footer();\n\n                that._setContentWidth();\n\n                that.refreshLayout();\n\n                that.datesHeader.on(\"click\" + NS, \".k-nav-day\", function(e) {\n                    var th = $(e.currentTarget).closest(\"th\");\n\n                    var slot = that._slotByPosition(th.offset().left, that.content.offset().top);\n\n                    that.trigger(\"navigate\", { view: \"timeline\", date: slot.startDate() });\n                });\n\n                that._groupedView._hideHeaders();\n            },\n\n            _setContentWidth: function() {\n                var content = this.content;\n                var contentWidth = content.width();\n                var contentTable = this.content.find(\"table\");\n                var columnCount = contentTable.find(\"tr\").first().children().length;\n\n                var minWidth = 100;\n                var calculatedWidth = columnCount * this.options.columnWidth;\n\n                if (contentWidth < calculatedWidth) {\n                    minWidth = Math.ceil((calculatedWidth / contentWidth) * 100);\n                }\n\n                contentTable.add(this.datesHeader.find(\"table\"))\n                    .css(\"width\", minWidth + \"%\");\n            },\n\n            _calculateSlotRanges: function() {\n                var dates = this._dates;\n                var slotStartTime = this.startTime();\n                var slotEndTime = this.endTime();\n\n                slotEndTime = getMilliseconds(slotEndTime);\n                slotStartTime = getMilliseconds(slotStartTime);\n\n                if (slotEndTime === slotStartTime) {\n                    slotEndTime += MS_PER_DAY - 1;\n                } else if (slotEndTime < slotStartTime) {\n                    slotEndTime += MS_PER_DAY;\n                }\n\n                var slotRanges = [];\n                for (var i = 0; i < dates.length; i++) {\n                    var rangeStart = getDate(dates[i]);\n                    setTime(rangeStart, slotStartTime);\n\n                    var rangeEnd = getDate(dates[i]);\n                    setTime(rangeEnd, slotEndTime);\n\n                    slotRanges.push({\n                        start: kendo.date.toUtcTime(rangeStart),\n                        end: kendo.date.toUtcTime(rangeEnd)\n                    });\n                }\n\n                this._slotRanges = slotRanges;\n            },\n\n            _forTimeRange: function(min, max, action, verticalByDate, groupsCount) {\n                min = toInvariantTime(min); //convert the date to 1/2/1980 and sets the time\n                max = toInvariantTime(max);\n\n                var that = this,\n                    msMin = getMilliseconds(min),\n                    msMax = getMilliseconds(max),\n                    minorTickCount = that.options.minorTickCount,\n                    msMajorInterval = that.options.majorTick * MS_PER_MINUTE,\n                    msInterval = msMajorInterval / minorTickCount || 1,\n                    start = new Date(+min),\n                    idx = 0, length,\n                    html = \"\";\n\n                length = MS_PER_DAY / msInterval;\n\n                if (msMin != msMax) {\n                    if (msMin > msMax) {\n                        msMax += MS_PER_DAY;\n                    }\n\n                    length = ((msMax - msMin) / msInterval);\n                }\n\n                length = verticalByDate ? 1 : Math.round(length);\n\n                if (groupsCount) {\n                    length = length * groupsCount;\n                }\n\n                for (; idx < length; idx++) {\n                    var majorTickDivider = idx % (msMajorInterval / msInterval);\n                    var isMajorTickColumn = majorTickDivider === 0;\n                    var isMiddleColumn = majorTickDivider < minorTickCount - 1;\n                    var isLastSlotColumn = majorTickDivider === minorTickCount - 1;\n                    var minorTickColumns = minorTickCount;\n\n                    if (length % minorTickCount !== 0) {\n                        var isLastMajorSlot = (length - (idx + 1)) < minorTickCount;\n                        if (isMajorTickColumn && isLastMajorSlot) {\n                            minorTickColumns = length % minorTickCount;\n                        }\n                    }\n\n                    html += action(start, isMajorTickColumn, isMiddleColumn, isLastSlotColumn, minorTickColumns, idx % groupsCount);\n\n                    if (!verticalByDate) {\n                        if (groupsCount) {\n                            if ((idx % groupsCount) === groupsCount - 1) {\n                                setTime(start, msInterval, false);\n                            }\n                        } else {\n                            setTime(start, msInterval, false);\n                        }\n                    }\n                }\n\n                return html;\n            },\n\n            _layout: function(dates) {\n                var timeColumns = [];\n                var columns = [];\n                var that = this;\n                var rows = [{ text: that.options.messages.defaultRowText }];\n                var groupedView = that._groupedView;\n\n                var minorTickSlots = [];\n                for (var minorTickIndex = 0; minorTickIndex < that.options.minorTickCount; minorTickIndex++) {\n                    minorTickSlots.push({\n                        text: \"&#8203;\",\n                        className: \"k-last\",\n                        minorTicks: true\n                    });\n                }\n\n                this._forTimeRange(that.startTime(), that.endTime(), function(date, majorTick, middleColumn, lastSlotColumn, minorSlotsCount) {\n                    var template = that.majorTimeHeaderTemplate;\n\n                    if (majorTick) {\n                        var timeColumn = {\n                            text: template({ date: date }),\n                            className: lastSlotColumn ? \"k-slot-cell\" : \"\",\n                            columns: minorTickSlots.slice(0, minorSlotsCount)\n                        };\n\n                        groupedView._setColspan(timeColumn);\n\n                        timeColumns.push(timeColumn);\n                    }\n                });\n\n                for (var idx = 0; idx < dates.length; idx++) {\n                    columns.push({\n                        text: that.dateHeaderTemplate({ date: dates[idx] }),\n                        className: \"k-slot-cell\",\n                        columns: timeColumns.slice(0)\n                    });\n                }\n\n                var resources = this.groupedResources;\n                if (resources.length) {\n                    if (this._groupOrientation() === \"vertical\") {\n                        rows = groupedView._createRowsLayout(resources, null, this.groupHeaderTemplate, columns);\n                        columns = groupedView._createVerticalColumnsLayout(resources, null, this.groupHeaderTemplate, columns);\n\n                    } else {\n                        columns = groupedView._createColumnsLayout(resources, columns, this.groupHeaderTemplate, columns);\n                    }\n                }\n\n                return {\n                    columns: columns,\n                    rows: rows\n                };\n            },\n\n            _footerItems: function() {\n                var that = this,\n                    items = [],\n                    options = this.options,\n                    command = options.footer.command;\n\n                if (that._isMobile()) {\n                    items.push(that._defaultTools.todayMobile);\n                }\n\n                if (command && command === \"workDay\") {\n                    if (that._isMobile()) {\n                        items.push(that._defaultTools.fulldayMobile);\n                    } else {\n                        items.push(that._defaultTools.fulldayDesktop);\n                    }\n                }\n\n                return items;\n            },\n\n            toggleFullDay: function() {\n                var options = this.options;\n\n                this.trigger(\"navigate\", { view: this.name || options.name, date: options.date, isWorkDay: !options.showWorkHours });\n            },\n\n            _columnCountForLevel: function(level) {\n                var columnLevel = this.columnLevels[level];\n                return columnLevel ? columnLevel.length : 0;\n            },\n\n            _rowCountForLevel: function(level) {\n                var rowLevel = this.rowLevels[level];\n                return rowLevel ? rowLevel.length : 0;\n            },\n\n            _isWorkDay: function(date) {\n                var day = date.getDay();\n                var workDays = this._workDays;\n\n                for (var i = 0; i < workDays.length; i++) {\n                    if (workDays[i] === day) {\n                        return true;\n                    }\n                }\n                return false;\n            },\n\n            _content: function(dates) {\n                var that = this;\n                var start = that.startTime();\n                var end = this.endTime();\n                var groupsCount = 1;\n                var rowCount = 1;\n                var columnCount = dates.length;\n                var html = '';\n                var resources = this.groupedResources;\n                var slotTemplate = this.slotTemplate;\n                var isVerticalGrouped = false;\n\n                if (resources.length) {\n                    isVerticalGrouped = that._groupOrientation() === \"vertical\";\n\n                    if (isVerticalGrouped) {\n                        rowCount = that._groupedView._getRowCount(this.rowLevels.length - 1);\n                        groupsCount = that._groupedView._getGroupsCount();\n                    } else {\n                        groupsCount = that._groupCount();\n                    }\n                }\n\n                html += '<tbody>';\n                html += that._groupedView._addContent(dates, columnCount, groupsCount, rowCount, start, end, slotTemplate, isVerticalGrouped);\n                html += '</tbody>';\n\n                this.content.find(\"table\").append(html);\n            },\n\n            _groups: function() {\n                var groupCount = this._groupCount();\n                var dates = this._dates;\n                var columnCount = dates.length;\n\n                this.groups = [];\n\n                for (var idx = 0; idx < groupCount; idx++) {\n                    var view = this._addResourceView(idx);\n\n                    var start = dates[0];\n                    var end = dates[(dates.length - 1) || 0];\n\n                    var startTime = getMilliseconds(this.startTime());\n                    var endTime = getMilliseconds(this.endTime());\n\n                    if (startTime !== 0 && endTime <= startTime) {\n                        start = getDate(start);\n                        setTime(start, startTime);\n\n                        end = getDate(end);\n                        setTime(end, endTime);\n                    }\n\n                    view.addTimeSlotCollection(start, kendo.date.addDays(end, 1));\n                }\n\n                this._timeSlotGroups(groupCount, columnCount);\n            },\n\n            _isHorizontallyGrouped: function() {\n                return this.groupedResources.length && this._groupOrientation() === \"horizontal\";\n            },\n\n            _timeSlotGroups: function(groupCount, datesCount) {\n                var interval = this._timeSlotInterval();\n                var isVerticallyGrouped = this._isVerticallyGrouped();\n                var tableRows = this.content.find(\"tr\");\n\n                this._groupedView._addTimeSlotsCollections(groupCount, datesCount, tableRows, interval, isVerticallyGrouped);\n\n            },\n\n            _addTimeSlotToCollection: function(group, cells, cellIndex, cellOffset, dateIndex, time, interval) {\n                  var cell = cells[cellIndex + cellOffset];\n                  var collection = group.getTimeSlotCollection(0);\n                  var currentDate = this._dates[dateIndex];\n                  var currentTime = Date.UTC(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());\n                  var start = currentTime + time;\n                  var end = start + interval;\n\n                  collection.addTimeSlot(cell, start, end, true);\n            },\n\n            startDate: function() {\n                return this._startDate;\n            },\n\n            endDate: function() {\n                return this._endDate;\n            },\n\n            visibleEndDate: function() {\n                var startTime = getMilliseconds(this.startTime());\n                var endTime = getMilliseconds(this.endTime());\n                var endDate = this.endDate();\n\n                if (startTime !== 0 && endTime <= startTime) {\n                    endDate = kendo.date.addDays(endDate, 1);\n                }\n\n                return endDate;\n            },\n\n            startTime: function() {\n                var options = this.options;\n                return options.showWorkHours ? options.workDayStart : options.startTime;\n            },\n\n            endTime: function() {\n                var options = this.options;\n                return options.showWorkHours ? options.workDayEnd : options.endTime;\n            },\n\n            _timeSlotInterval: function() {\n                var options = this.options;\n                return (options.majorTick / options.minorTickCount) * MS_PER_MINUTE;\n            },\n\n            nextDate: function() {\n                return kendo.date.nextDay(this.endDate());\n            },\n\n            previousDate: function() {\n                return kendo.date.previousDay(this.startDate());\n            },\n\n            calculateDateRange: function() {\n                this._render([this.options.date]);\n            },\n\n            render: function(events) {\n                this._headerColumnCount = 0;\n\n                this._groups();\n\n                this.element.find(\".k-event\").remove();\n\n                events = new kendo.data.Query(events)\n                    .sort([{ field: \"start\", dir: \"asc\" },{ field: \"end\", dir: \"desc\" }])\n                    .toArray();\n\n                var eventsByResource = [];\n\n                this._eventsByResource(events, this.groupedResources, eventsByResource);\n\n                var eventGroups = [];\n                var maxRowCount = 0;\n\n                for (var groupIndex = 0; groupIndex < eventsByResource.length; groupIndex++) {\n                    var eventGroup = {\n                        groupIndex: groupIndex,\n                        maxRowCount: 0,\n                        events: {}\n                    };\n\n                    eventGroups.push(eventGroup);\n\n                    this._renderEvents(eventsByResource[groupIndex], groupIndex, eventGroup);\n\n                    if (maxRowCount < eventGroup.maxRowCount) {\n                        maxRowCount = eventGroup.maxRowCount;\n                    }\n                }\n\n                this._setRowsHeight(eventGroups, eventsByResource.length, maxRowCount);\n\n                this._positionEvents(eventGroups, eventsByResource.length);\n\n                this._currentTime(false);\n                this._ongoingEvents(events);\n\n                this.trigger(\"activate\");\n            },\n\n            _positionEvents: function(eventGroups, groupsCount) {\n                for (var groupIndex = 0; groupIndex < groupsCount; groupIndex++) {\n                    var eventsForGroup = eventGroups[groupIndex].events;\n                    for (var eventUid in eventsForGroup) {\n                        var eventObject = eventsForGroup[eventUid];\n                        if (Array.isArray(eventObject)) {\n                            for (var eventIndex = 0; eventIndex < eventObject.length; eventIndex++) {\n                                this._positionEvent(eventObject[eventIndex]);\n                            }\n                        } else {\n                            this._positionEvent(eventObject);\n                        }\n                    }\n                }\n            },\n\n            _setRowsHeight: function(eventGroups, groupsCount, maxRowCount) {\n                var eventHeight = this.options.eventHeight;\n                var eventBottomOffset = this._getBottomRowOffset();\n                var groupedView = this._groupedView;\n                var verticalGroupCount = groupedView._getVerticalGroupCount(groupsCount);\n\n                groupsCount = this._isVerticallyGrouped() ? verticalGroupCount : 1;\n\n                for (var groupIndex = 0; groupIndex < groupsCount; groupIndex++) {\n                    var rowsCount = groupedView._getVerticalRowCount(eventGroups, groupIndex, maxRowCount);\n\n                    rowsCount = rowsCount ? rowsCount : 1;\n\n                    var rowHeight = ((eventHeight + 2) * rowsCount) + eventBottomOffset;\n                    var timesRow = $(this.times.find(\"tr\")[groupIndex]);\n                    var row = $(this.content.find(\"tr\")[groupIndex]);\n\n                    timesRow.height(rowHeight);\n                    row.height(rowHeight);\n                }\n\n                this._setContentWidth();\n                this.refreshLayout();\n                this._refreshSlots();\n            },\n\n            _getBottomRowOffset: function() {\n                var eventBottomOffset = this.options.eventHeight * 0.50;\n                var isMobile = this._isMobile();\n                var minOffset;\n                var maxOffset;\n\n                if (isMobile) {\n                    minOffset = 30;\n                    maxOffset = 60;\n                } else {\n                    minOffset = 15;\n                    maxOffset = 30;\n                }\n\n                if (eventBottomOffset > maxOffset) {\n                    eventBottomOffset = maxOffset;\n                } else if (eventBottomOffset < minOffset) {\n                    eventBottomOffset = minOffset;\n                }\n\n                return eventBottomOffset;\n            },\n\n            _positionEvent: function(eventObject) {\n                var eventHeight = this.options.eventHeight;\n                var eventOffset = 2;\n                var rect = eventObject.slotRange.innerRect(eventObject.start, eventObject.end, false);\n                var left = this._adjustLeftPosition(rect.left);\n                var width = rect.right - rect.left;\n\n                if (width < 0) {\n                    width = 0;\n                }\n\n                if (width < this.options.eventMinWidth) {\n                    var slotsCollection = eventObject.slotRange.collection;\n                    var lastSlot = slotsCollection._slots[slotsCollection._slots.length - 1];\n                    var offsetRight = lastSlot.offsetLeft + lastSlot.offsetWidth;\n\n                    width = this.options.eventMinWidth;\n\n                    if (offsetRight < left + width) {\n                        width = offsetRight - rect.left;\n                    }\n                }\n\n                eventObject.element.css({\n                    top: eventObject.slotRange.start.offsetTop + eventObject.rowIndex * (eventHeight + eventOffset) + \"px\",\n                    left: left,\n                    width: width\n                });\n            },\n\n            _refreshSlots: function() {\n                for (var groupIndex = 0; groupIndex < this.groups.length; groupIndex++) {\n                    this.groups[groupIndex].refresh();\n                }\n            },\n\n            _eventsByResource: function(events, resources, result, parentValue) {\n                var resource = resources[0];\n\n                if (resource) {\n                    var view = resource.dataSource.view();\n\n                    view = view.filter(function(item) {\n                        var itemParentValue = kendo.getter(resource.dataParentValueField)(item);\n\n                        return itemParentValue === null || itemParentValue === undefined$1 || itemParentValue === parentValue;\n                    });\n\n                    for (var itemIdx = 0; itemIdx < view.length; itemIdx++) {\n                        var value = this._resourceValue(resource, view[itemIdx]);\n\n                        var eventsFilteredByResource = new kendo.data.Query(events).filter({ field: resource.field, operator: SchedulerView.groupEqFilter(value) }).toArray();\n\n                        if (resources.length > 1) {\n                            this._eventsByResource(eventsFilteredByResource, resources.slice(1), result, value);\n                        } else {\n                            result.push(eventsFilteredByResource);\n                        }\n                    }\n                } else {\n                    result.push(events);\n                }\n            },\n\n            _isInDateSlot: function(event) {\n                var startTime = event.start;\n                var endTime = event.end;\n                var rangeStart = getDate(this._startDate);\n                var rangeEnd = kendo.date.addDays(getDate(this.visibleEndDate()), 1);\n\n                if (startTime < rangeEnd && rangeStart <= endTime) {\n                    return true;\n                }\n                return false;\n            },\n\n            _isInTimeSlot: function(event) {\n                var startTime = event._startTime || kendo.date.toUtcTime(event.start);\n                var endTime = event._endTime || kendo.date.toUtcTime(event.end);\n\n                var slotRanges = this._slotRanges;\n\n                if (startTime === endTime) {\n                    endTime = endTime + 1;\n                }\n\n                for (var slotIndex = 0; slotIndex < slotRanges.length; slotIndex++) {\n                    if (startTime < slotRanges[slotIndex].end && slotRanges[slotIndex].start < endTime) {\n                        return true;\n                    }\n                }\n                return false;\n            },\n\n            _adjustEvent: function(event) {\n                var start = event.start;\n                var end = event.end;\n                var eventStartTime = event._time(\"start\");\n                var eventEndTime = event._time(\"end\");\n                var startTime = getMilliseconds(this.startTime());\n                var endTime = getMilliseconds(this.endTime());\n                var adjustedStartDate = null;\n                var adjustedEndDate = null;\n                var occurrence;\n                var head = false;\n                var tail = false;\n\n                if (event.isAllDay) {\n                    start = getDate(start);\n                    eventStartTime = 0;\n\n                    end = getDate(end);\n                    eventEndTime = MS_PER_DAY;\n                    adjustedEndDate = kendo.date.addDays(end, 1);\n                }\n\n                if (endTime === 0) {\n                    endTime = MS_PER_DAY;\n                }\n\n                if (endTime <= startTime) {\n                    if (eventStartTime < startTime && eventStartTime >= endTime) {\n                        adjustedStartDate = getDate(start);\n                        setTime(adjustedStartDate, startTime);\n                        tail = true;\n                    }\n\n                    if (eventEndTime > endTime && eventEndTime <= startTime) {\n                        adjustedEndDate = getDate(end);\n                        setTime(adjustedEndDate, endTime);\n                        head = true;\n                    }\n                } else {\n                    if (startTime > eventStartTime) {\n                        adjustedStartDate = getDate(start);\n                        setTime(adjustedStartDate, startTime);\n                        tail = true;\n                    } else if (endTime <= eventStartTime) {\n                        adjustedStartDate = getDate(start);\n                        adjustedStartDate = kendo.date.addDays(adjustedStartDate, 1);\n                        setTime(adjustedStartDate, startTime);\n                        tail = true;\n                    }\n\n                    if (endTime < eventEndTime) {\n                        adjustedEndDate = getDate(end);\n                        setTime(adjustedEndDate, endTime);\n                        head = true;\n                    } else if (startTime > eventEndTime) {\n                        adjustedEndDate = getDate(end);\n                        adjustedEndDate = kendo.date.addDays(adjustedEndDate,-1);\n                        setTime(adjustedEndDate, endTime);\n                        head = true;\n                    }\n                }\n\n                occurrence = event.clone({\n                    start: adjustedStartDate ? adjustedStartDate : start,\n                    end: adjustedEndDate ? adjustedEndDate : end,\n                    _startTime: adjustedStartDate ? kendo.date.toUtcTime(adjustedStartDate) : event._startTime,\n                    _endTime: adjustedEndDate ? kendo.date.toUtcTime(adjustedEndDate) : event._endTime,\n                    isAllDay: false\n                });\n\n                return {\n                    occurrence: occurrence,\n                    head: head,\n                    tail: tail\n                };\n            },\n\n            _renderEvents: function(events, groupIndex, eventGroup) {\n                var event;\n                var idx;\n                var length;\n\n                for (idx = 0, length = events.length; idx < length; idx++) {\n                    event = events[idx];\n\n                    if (this._isInDateSlot(event)) {\n                        var isMultiDayEvent = event.isAllDay || event.duration() >= MS_PER_DAY;\n                        var container = this.content;\n\n                        if (isMultiDayEvent || this._isInTimeSlot(event)) {\n                            var adjustedEvent = this._adjustEvent(event);\n                            var group = this.groups[groupIndex];\n\n                            if (!group._continuousEvents) {\n                                group._continuousEvents = [];\n                            }\n\n                            if (this._isInTimeSlot(adjustedEvent.occurrence)) {\n                                var ranges = group.slotRanges(adjustedEvent.occurrence, false);\n                                var range = ranges[0];\n                                var startIndex = range.start.index;\n                                var endIndex = range.end.index;\n\n                                this._groupedView._renderEvent(eventGroup, event, adjustedEvent, group, range, container, startIndex, endIndex);\n                            }\n                        }\n                    }\n                }\n            },\n\n            addContinuousEvent: function(group, range, element, isAllDay) {\n                var events = group._continuousEvents;\n\n                events.push({\n                    element: element,\n                    isAllDay: isAllDay,\n                    uid: element.attr(kendo.attr(\"uid\")),\n                    start: range.start,\n                    end: range.end\n                });\n            },\n\n            _createEventElement: function(occurrence, event, head, tail) {\n                var template = this.eventTemplate;\n                var editable = this.options.editable;\n                var isMobile = this._isMobile();\n                var showDelete = editable && editable.destroy !== false && !isMobile;\n                var resizable = editable && editable.resize !== false;\n                var eventStartTime = event._time(\"start\");\n                var eventEndTime = event._time(\"end\");\n                var eventStartDate = event.start;\n                var eventEndDate = event.end;\n\n                var resources = this.eventResources(event);\n\n                if (event._startTime && eventStartTime !== kendo.date.getMilliseconds(event.start)) {\n                    eventStartDate = new Date(eventStartTime);\n                    eventStartDate = kendo.timezone.apply(eventStartDate, \"Etc/UTC\");\n                }\n\n                if (event._endTime && eventEndTime !== kendo.date.getMilliseconds(event.end)) {\n                    eventEndDate = new Date(eventEndTime);\n                    eventEndDate = kendo.timezone.apply(eventEndDate, \"Etc/UTC\");\n                }\n\n                var data = extend({}, {\n                    ns: kendo.ns,\n                    resizable: resizable,\n                    showDelete: showDelete,\n                    head: head,\n                    tail: tail,\n                    singleDay: this._dates.length == 1,\n                    resources: resources,\n                    inverseColor: false,\n                    messages: this.options.messages,\n                    ariaLabel: this._formatEventAriaLabel(event.title, eventStartDate, eventEndDate, event.isAllDay),\n                    template: this.options.eventTemplate\n                }, event, {\n                    start: eventStartDate,\n                    end: eventEndDate\n                });\n\n                var element = $(template(data));\n                kendo.applyStylesFromKendoAttributes(element, [\"background-color\", \"border-color\"]);\n\n                return element;\n            },\n\n            _arrangeRows: function(eventObject, slotRange, eventGroup) {\n                var that = this;\n                var startIndex = slotRange.start.index;\n                var endIndex = slotRange.end.index;\n\n                var rect = eventObject.slotRange.innerRect(eventObject.start, eventObject.end, false);\n                var rectRight = rect.right + this.options.eventMinWidth;\n\n                var events = SchedulerView.collidingEvents(slotRange.events(), rect.left, rectRight);\n\n                slotRange.addEvent({\n                    slotIndex: startIndex,\n                    slotIndexEnd: endIndex,\n                    start: rect.left,\n                    end: rectRight,\n                    zeroWidthEventOffset: that._zeroWidthEventOffset,\n                    rectLeft: rect.left,\n                    rectRight: rectRight,\n                    element: eventObject.element,\n                    uid: eventObject.uid\n                });\n\n                events.push({\n                    slotIndex: startIndex,\n                    slotIndexEnd: endIndex,\n                    start: rect.left,\n                    end: rectRight,\n                    zeroWidthEventOffset: that._zeroWidthEventOffset,\n                    uid: eventObject.uid\n                });\n\n                var rows = SchedulerView.createRows(events);\n\n                if (eventGroup.maxRowCount < rows.length) {\n                    eventGroup.maxRowCount = rows.length;\n                }\n\n                for (var idx = 0, length = rows.length; idx < length; idx++) {\n                    var rowEvents = rows[idx].events;\n                    for (var j = 0, eventLength = rowEvents.length; j < eventLength; j++) {\n                        eventGroup.events[rowEvents[j].uid].rowIndex = idx;\n                    }\n                }\n            },\n\n            _groupCount: function() {\n                var resources = this.groupedResources;\n                var groupedView = this._groupedView;\n\n                if (resources.length) {\n                    if (this._groupOrientation() === \"vertical\") {\n                        return groupedView._verticalCountForLevel(resources.length - 1);\n                    } else {\n                        return groupedView._horizontalCountForLevel(resources.length - 1, this.columnLevels.length - 1);\n                    }\n                }\n                return 1;\n            },\n\n            _updateEventForSelection: function(event) {\n                var adjustedEvent = this._adjustEvent(event.clone());\n                return adjustedEvent.occurrence;\n            },\n\n            _eventOptionsForMove: function(event) {\n                if (event.isAllDay) {\n                    return { isAllDay: false };\n                }\n\n                return {};\n            },\n\n            _updateEventForResize: function(event) {\n                if (event.isAllDay) {\n                    event.set(\"isAllDay\", false);\n                }\n            },\n\n            _updateMoveHint: function(event, groupIndex, distance) {\n                var group = this.groups[groupIndex];\n\n                var clonedEvent = event.clone({ start: event.start, end: event.end });\n\n                var eventDuraton = clonedEvent.duration();\n                clonedEvent.start = new Date(clonedEvent.start.getTime() + distance);\n                clonedEvent.end = new Date(+clonedEvent.start + eventDuraton);\n\n                this._removeMoveHint(event.uid);\n\n                if (this._isInDateSlot(clonedEvent)) {\n                    if (clonedEvent.isAllDay || clonedEvent.duration() >= MS_PER_DAY || this._isInTimeSlot(clonedEvent)) {\n                        var adjustedEvent = this._adjustEvent(clonedEvent);\n                        var ranges = group.slotRanges(adjustedEvent.occurrence, false);\n\n                        for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {\n                            this._groupedView._createMoveHint(ranges[rangeIndex], adjustedEvent);\n                        }\n                    }\n                }\n            },\n\n           _appendMoveHint: function(hint) {\n                hint.appendTo(this.content);\n\n                this._moveHint = this._moveHint.add(hint);\n           },\n\n            _updateResizeHint: function(event, groupIndex, startTime, endTime) {\n                var group = this.groups[groupIndex];\n                var ranges = group.ranges(startTime, endTime, false, false);\n\n                this._removeResizeHint();\n\n                for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {\n                    var range = ranges[rangeIndex];\n                    var start = range.startSlot();\n\n                    var startRect = range.innerRect(startTime, endTime, false);\n                    startRect.top = start.offsetTop;\n\n                    var width = startRect.right - startRect.left;\n\n                    if (width < 0) {\n                        for (var i = 0; i < range.events().length; i++) {\n                            if (range.events()[i].uid === event.uid) {\n                                width = range.events()[i].rectRight - startRect.left;\n                                break;\n                            }\n                        }\n                    }\n\n                    var height = range.endSlot().offsetTop + start.offsetHeight - startRect.top;\n\n                    var left = this._adjustLeftPosition(startRect.left);\n\n                    var hint = SchedulerView.fn._createResizeHint.call(this,\n                        left,\n                        startRect.top,\n                        width,\n                        height\n                    );\n\n                    this._resizeHint = this._resizeHint.add(hint);\n                }\n\n                var format = \"t\";\n                var container = this.content;\n\n                this._resizeHint.appendTo(container);\n\n                this._resizeHint.find(\".k-label-top,.k-label-bottom\").text(\"\");\n\n                this._resizeHint.first().addClass(\"k-first\").find(\".k-label-top\").text(kendo.toString(kendo.timezone.toLocalDate(startTime), format));\n\n                this._resizeHint.last().addClass(\"k-last\").find(\".k-label-bottom\").text(kendo.toString(kendo.timezone.toLocalDate(endTime), format));\n            },\n\n            selectionByElement: function(cell) {\n                var offset = cell.offset();\n                return this._slotByPosition(offset.left, offset.top);\n            },\n\n            _updateDirection: function(selection, ranges, multiple, reverse, vertical) {\n\n                var startSlot = ranges[0].start;\n                var endSlot = ranges[ranges.length - 1].end;\n                if (multiple && !vertical) {\n                    if (startSlot.index === endSlot.index &&\n                        startSlot.collectionIndex === endSlot.collectionIndex) {\n                        selection.backward = reverse;\n                    }\n                }\n            },\n\n            _changeGroup: function(selection, previous) {\n                var method = previous ? \"prevGroupSlot\" : \"nextGroupSlot\";\n\n                var slot = this[method](selection.start, selection.groupIndex, false);\n\n                if (slot) {\n                    selection.groupIndex += previous ? -1 : 1;\n                }\n\n                this._groupedView._changeGroup(selection, previous, slot);\n                return slot;\n            },\n\n            prevGroupSlot: function(date, groupIndex, isDay) {\n                var group = this.groups[groupIndex];\n                var slot = group.ranges(date, date, isDay, false)[0].start;\n\n                if (groupIndex <= 0) {\n                    return;\n                }\n\n                return this._groupedView._prevGroupSlot(slot, group, isDay);\n            },\n\n            nextGroupSlot: function(date, groupIndex, isDay) {\n                var group = this.groups[groupIndex];\n                var slot = group.ranges(date, date, isDay, false)[0].start;\n\n                if (groupIndex >= this.groups.length - 1) {\n                    return;\n                }\n\n                return this._groupedView._nextGroupSlot(slot, group, isDay);\n            },\n\n            _verticalSlots: function(selection, ranges, multiple, reverse) {\n                var groupedView = this._groupedView;\n                var method = groupedView._verticalMethod(reverse, multiple);\n                var startSlot = ranges[0].start;\n                var endSlot = ranges[ranges.length - 1].end;\n                var group = this.groups[selection.groupIndex];\n                var slot = groupedView._normalizeVerticalSelection(selection, ranges, reverse, multiple);\n\n                if (slot) {\n                    startSlot = endSlot = slot;\n                }\n\n                startSlot = group[method](startSlot);\n                endSlot = group[method](endSlot);\n\n                if (!multiple && this._isVerticallyGrouped() && (!startSlot || !endSlot)) {\n                    startSlot = endSlot = groupedView._verticalSlots(selection, reverse, slot);\n                }\n\n                return {\n                    startSlot: startSlot,\n                    endSlot: endSlot\n                };\n            },\n\n            _horizontalSlots: function(selection, ranges, multiple, reverse) {\n                var method = reverse ? \"upSlot\" : \"downSlot\";\n                var startSlot = ranges[0].start;\n                var endSlot = ranges[ranges.length - 1].end;\n                var group = this.groups[selection.groupIndex];\n                var result = {};\n\n                if (!multiple) {\n                    result = this._groupedView._horizontalSlots(selection, group, method, startSlot, endSlot, multiple, reverse);\n                } else {\n                    result.startSlot = group[method](startSlot);\n                    result.endSlot = group[method](endSlot);\n\n                    if (!multiple && this._isHorizontallyGrouped() && (!startSlot || !endSlot)) {\n                        result.startSlot = result.endSlot = this._changeGroup(selection, reverse);\n                    }\n                }\n\n                return result;\n            },\n\n            _changeViewPeriod: function(selection, reverse) {\n                var date = reverse ? this.previousDate() : this.nextDate();\n                var start = selection.start;\n                var end = selection.end;\n                var newStart, newEnd;\n\n                newStart = new Date(date);\n                newEnd = new Date(date);\n\n                if (this._isInRange(newStart, newEnd)) {\n                    return false;\n                }\n                selection.start = newStart;\n                selection.end = newEnd;\n\n                if (this._isHorizontallyGrouped()) {\n                   selection.groupIndex = reverse ? this.groups.length - 1 : 0;\n                }\n\n                var duration = end - start;\n\n                if (reverse) {\n                    end = getMilliseconds(this.endTime());\n                    end = end === 0 ? MS_PER_DAY : end;\n\n                    setTime(selection.start, end - duration);\n                    setTime(selection.end, end);\n                } else {\n                    start = getMilliseconds(this.startTime());\n\n                    setTime(selection.start, start);\n                    setTime(selection.end, start + duration);\n                }\n\n                selection.events = [];\n\n                return true;\n            },\n\n            move: function(selection, key, shift) {\n                var handled = false;\n                var group = this.groups[selection.groupIndex];\n                var keys = kendo.keys;\n                var groupedView = this._groupedView;\n                var ranges = group.ranges(selection.start, selection.end, false, false);\n                var startSlot, endSlot, reverse, slots;\n\n                if (key === keys.DOWN || key === keys.UP) {\n                    handled = true;\n                    reverse = key === keys.UP;\n\n                    groupedView._updateDirection(selection, ranges, shift, reverse);\n\n                    slots = this._verticalSlots(selection, ranges, shift, reverse);\n\n                    if (groupedView._changeVerticalViewPeriod(slots, shift, selection, reverse)) {\n                        return handled;\n                    }\n                } else if (key === keys.LEFT || key === keys.RIGHT) {\n                    handled = true;\n                    reverse = key === keys.LEFT;\n\n                    this._updateDirection(selection, ranges, shift, reverse, false);\n\n                    slots = this._horizontalSlots(selection, ranges, shift, reverse);\n\n                    if (groupedView._changeHorizontalViewPeriod(slots, shift, selection, reverse)) {\n                         return handled;\n                    }\n                }\n\n               if (handled) {\n                   startSlot = slots.startSlot;\n                   endSlot = slots.endSlot;\n\n                   if (shift) {\n                       var backward = selection.backward;\n\n                       if (backward && startSlot) {\n                           selection.start = startSlot.startDate();\n                       } else if (!backward && endSlot) {\n                           selection.end = endSlot.endDate();\n                       }\n                   } else if (startSlot && endSlot) {\n                       selection.start = startSlot.startDate();\n                       selection.end = endSlot.endDate();\n                   }\n\n                   selection.events = [];\n               }\n\n                return handled;\n            },\n\n            destroy: function() {\n                var that = this;\n\n                if (that.element) {\n                    that.element.off(NS);\n                }\n\n                if (that._currentTimeUpdateTimer) {\n                    clearInterval(that._currentTimeUpdateTimer);\n                }\n\n                SchedulerView.fn.destroy.call(this);\n\n                if (this._isMobile() && that.options.editable) {\n                    if (that.options.editable.create !== false) {\n                        that._addUserEvents.destroy();\n                    }\n\n                    if (that.options.editable.update !== false) {\n                        that._editUserEvents.destroy();\n                    }\n                }\n            },\n\n            _resourceBySlot: function(slot) {\n                var resources = this.groupedResources;\n                var result = {},\n                groupOptions = this.options.group;\n\n                if (resources.length && groupOptions.orientation === \"horizontal\" && groupOptions.date) {\n                    var resourceIndex = slot.groupIndex,\n                        levels = this.columnLevels,\n                        groupLevel = levels[levels.length - 1],\n                        resource = resources[resources.length - 1],\n                        groupLevelMember = groupLevel[resourceIndex],\n                        passedChildren, numberOfChildren, j, i;\n\n                    this._setResourceValue(groupLevelMember, resource, result);\n\n                    for (j = levels.length - 2; j >= 3; j--) {\n                        groupLevel = levels[j];\n                        resource = resources[j - 3];\n                        passedChildren = 0;\n\n                        for (i = 0; i < groupLevel.length; i++) {\n                            groupLevelMember = groupLevel[i];\n                            numberOfChildren = groupLevelMember.columns.length;\n\n                            if (numberOfChildren > resourceIndex - passedChildren) {\n                                this._setResourceValue(groupLevelMember, resource, result);\n\n                                i = groupLevel.length;\n                            } else {\n                                passedChildren += numberOfChildren;\n                            }\n                        }\n                    }\n\n                    return result;\n                } else {\n                    return SchedulerView.fn._resourceBySlot.call(this, slot);\n                }\n            }\n        });\n\n        extend(true, ui, {\n            TimelineView: TimelineView,\n            TimelineWeekView: TimelineView.extend({\n                options: {\n                    name: \"TimelineWeekView\",\n                    title: \"Timeline Week\",\n                    selectedDateFormat: \"{0:D} - {1:D}\",\n                    selectedShortDateFormat: \"{0:d} - {1:d}\",\n                    selectedMobileDateFormat: \"{0:MMM dd} - {1:dd}\",\n                    majorTick: 120\n                },\n                name: \"timelineWeek\",\n                calculateDateRange: function() {\n                    var selectedDate = this.options.date,\n                        start = kendo.date.dayOfWeek(selectedDate, this.calendarInfo().firstDay, -1),\n                        idx, length,\n                        dates = [];\n\n                    for (idx = 0, length = 7; idx < length; idx++) {\n                        dates.push(start);\n                        start = kendo.date.nextDay(start);\n                    }\n                    this._render(dates);\n                }\n            }),\n            TimelineWorkWeekView: TimelineView.extend({\n                options: {\n                    name: \"TimelineWorkWeekView\",\n                    title: \"Timeline Work Week\",\n                    selectedDateFormat: \"{0:D} - {1:D}\",\n                    selectedShortDateFormat: \"{0:d} - {1:d}\",\n                    selectedMobileDateFormat: \"{0:MMM dd} - {1:dd}\",\n                    majorTick: 120\n                },\n                name: \"timelineWorkWeek\",\n                nextDate: function() {\n                    var weekStart = kendo.date.dayOfWeek(kendo.date.nextDay(this.endDate()), this.calendarInfo().firstDay, 1);\n\n                    return kendo.date.addDays(weekStart, this._workDays[0]);\n                },\n                previousDate: function() {\n                    var weekStart = kendo.date.dayOfWeek(this.startDate(), this.calendarInfo().firstDay, -1);\n                    var workDays = this._workDays;\n\n                    return kendo.date.addDays(weekStart, workDays[workDays.length - 1] - 7);\n                },\n                calculateDateRange: function() {\n                    var options = this.options,\n                        selectedDate = options.date,\n                        dayOfWeek = kendo.date.dayOfWeek,\n                        weekStart = dayOfWeek(selectedDate, this.calendarInfo().firstDay, -1),\n                        start = dayOfWeek(weekStart, options.workWeekStart, 1),\n                        end = dayOfWeek(start, options.workWeekEnd, 1),\n                        dates = [],\n                        workDays = (options.workDays && options.workDays.length) ? options.workDays.map(function(day) {\n                            return dayOfWeek(weekStart, day, 1).getTime();\n                        }) : null;\n\n                    if (workDays) {\n                        start = weekStart;\n                        end = dayOfWeek(start, this.calendarInfo().firstDay + 6, 1);\n                    }\n\n                    while (start <= end) {\n                        if (workDays && workDays.indexOf(start.getTime()) > -1) {\n                            dates.push(start);\n                        } else if (!workDays) {\n                            dates.push(start);\n                        }\n\n                        start = kendo.date.nextDay(start);\n                    }\n\n                    this._render(dates);\n                }\n            }),\n            TimelineMonthView: TimelineView.extend({\n                options: {\n                    name: \"TimelineMonthView\",\n                    title: \"Timeline Month\",\n                    selectedDateFormat: \"{0:D} - {1:D}\",\n                    selectedShortDateFormat: \"{0:d} - {1:d}\",\n                    workDayStart: new Date(1980, 1, 1, 0, 0, 0),\n                    workDayEnd: new Date(1980, 1, 1, 23, 59, 59),\n                    footer: false,\n                    majorTick: 1440,\n                    minorTickCount: 1\n                },\n                name: \"timelineMonth\",\n                calculateDateRange: function() {\n                    var selectedDate = this.options.date,\n                        start = kendo.date.firstDayOfMonth(selectedDate),\n                        end = kendo.date.lastDayOfMonth(selectedDate),\n                        idx, length,\n                        dates = [];\n\n                    for (idx = 0, length = end.getDate(); idx < length; idx++) {\n                        dates.push(start);\n                        start = kendo.date.nextDay(start);\n                    }\n                    this._render(dates);\n                }\n            })\n        });\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}