{"version":3,"sources":["raw-js/kendo.mediaplayer.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendomediaplayer","js","this","$","undefined$1","kendo","window","END","PAUSE","PLAY","READY","TIMECHANGE","VOLUMECHANGE","FULLSCREEN_ENTER","FULLSCREEN_EXIT","MUTE","LOW_VOLUME","HIGH_VOLUME","VIDEO_QUALITY","STATE_PLAY","STATE_PAUSE","TITLEBAR","TOOLBAR","SLIDER","VOLUME_SLIDER","MEDIA","OVERLAY","YTPLAYER","DOT","STATE_PLAY_SELECTOR","FULLSCREEN_ENTER_SELECTOR","FULLSCREEN_EXIT_SELECTOR","MUTE_SELECTOR","LOW_VOLUME_SELECTOR","HIGH_VOLUME_SELECTOR","ui","ns","baseTime","Date","timeZoneSec","getTimezoneOffset","Widget","isArray","Array","timeFormats","template","keys","templates","htmlPlayer","titleBar","toolBar","youtubePlayer","toolBarTime","slider","volumeSlider","qualityDropDown","toolTip","value","toString","MediaPlayer","extend","init","element","options","wrapper","fn","call","addClass","_currentIndex","_createTitlebar","_createToolbar","_createDropDown","_createSlider","_createVolumeSlider","_timers","_aria","_navigatable","fullScreen","media","notify","events","name","autoPlay","autoRepeat","volume","mute","navigatable","forwardSeek","messages","pause","play","unmute","quality","fullscreen","_msToTime","ms","time","getTime","setSeconds","_timeToSec","_titleBar","find","length","append","sliderElement","_slider","_sliderDragChangeHandler","_sliderDragChange","bind","_sliderDraggingHandler","_sliderDragging","Slider","smallStep","tickPlacement","showButtons","change","slide","tooltip","dragHandleTitle","volumeSliderElement","_volumeSlider","_volumeDraggingHandler","_volumeDragging","_volumeChangeHandler","_volumeChange","width","min","max","enabled","_resetTime","_youTubeVideo","_ytmedia","seekTo","_media","currentTime","_mediaTimeUpdate","grep","_toolBar","items","e","_currentUrl","source","url","_isYouTubeUrl","match","_setPlayerUrl","oldPlayer","stop","toggle","initialized","_initializePlayer","_videoOverlay","hide","loadVideoById","_getMediaId","_playStateToggle","cueVideoById","show","remove","attr","toolBarElement","_toolbarClickHandler","_toolbarClick","ToolBar","click","resizable","type","attributes","class","icon","fillMode","off","before","_volumeButton","_fullscreenButton","_currentTimeElement","_durationElement","_playButton","_playButtonSpan","support","cssFlexbox","wrapAll","hdIcon","dropDownElement","data","_dropDownSelectHandler","_dropDownSelect","_dropDown","DropDownList","dataTextField","dataValueField","popup","position","origin","appendTo","animation","open","effects","duration","select","setDataSource","replaceWith","list","item","index","target","children","first","isPaused","is","_isInFullScreen","muted","_isDragging","that","sender","tzOffset","_sliderChangeFired","_seekBarLastPosition","setTimeout","trigger","_preventPlay","_changeVolumeButtonImage","volumeButton","volumeElement","getCurrentTime","timeInMs","text","_timeFormat","isPlaying","_mediaEnded","_mediaPlay","_mediaReady","_mediaDurationChange","durationTime","getDuration","getHours","setOptions","_isFirstRun","_createYoutubePlayer","_mediaTimeUpdateHandler","_mediaDurationChangeHandler","prepend","_ytPlayer","css","height","YT","Player","_configurePlayer","onYouTubeIframeAPIReadyRegister","getScript","onYouTubeIframeAPIReady","i","_youtubeApiReady","_poll","callback","interval","context","clearTimeout","callLater","vars","autoplay","wmode","controls","rel","showinfo","_onYouTubePlayerReady","onYouTubePlayerReady","_onPlayerStateChangeHandler","_onPlayerStateChange","onPlayerStateChange","videoId","playerVars","onReady","onStateChange","event","getIframe","style","_updateTitle","titlebar","title","_paused","setVolume","_uiDisplay","result","_mouseClick","_mouseMoveHandler","_mouseMove","_mouseInHandler","_mouseIn","_mouseOutHandler","_mouseOut","on","_createHtmlPlayer","_mouseClickHanlder","_mediaEndedHandler","_mediaCanPlayHandler","_mediaPlayHandler","after","ontimeupdate","ondurationchange","oncanplay","onplay","onended","loop","_mouseIdle","state","animationSpeed","uiElements","add","parent","fadeIn","fadeOut","destroy","_keyDownHandler","_fullscreenHandler","_youtubeApiReadyHandler","src","_mouseMoveTimer","seek","seconds","playVideo","mobileOS","stopVideo","pauseVideo","toolbar","dropdown","enterFullScreen","get","requestFullscreen","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","document","cancelFullscreen","webkitCancelFullScreen","mozCancelFullScreen","msCancelFullscreen","exitFullscreen","msExitFullscreen","removeClass","resize","_volume","currentState","isMuted","unMute","getVolume","isEnded","getPlayerState","ended","_mediaData","_fullscreen","_keyDown","isFullScreen","mozFullScreen","webkitIsFullScreen","fullscreenSpan","preventDefault","fsButton","keyCode","SPACEBAR","ENTER","ESC","_error","_progress","plugin","jQuery"],"mappings":"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","file":"kendo.mediaplayer.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.slider.js'), require('kendo.toolbar.js'), require('kendo.dropdownlist.js'), require('kendo.tooltip.js'), require('kendo.icons.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.slider', 'kendo.toolbar', 'kendo.dropdownlist', 'kendo.tooltip', 'kendo.icons'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendomediaplayer = global.kendomediaplayer || {}, global.kendomediaplayer.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n            id: \"mediaplayer\",\n            name: \"MediaPlayer\",\n            category: \"web\",\n            description: \"\",\n            depends: [\"slider\", \"toolbar\", \"dropdownlist\", \"tooltip\", \"icons\"]\n        };\n\n        (function($, undefined$1) {\n            var kendo = window.kendo,\n                END = \"end\",\n                PAUSE = \"pause\",\n                PLAY = \"play\",\n                READY = \"ready\",\n                TIMECHANGE = \"timeChange\",\n                VOLUMECHANGE = \"volumeChange\",\n                FULLSCREEN_ENTER = \"fullscreen\",\n                FULLSCREEN_EXIT = \"fullscreen-exit\",\n                MUTE = \"volume-mute\",\n                LOW_VOLUME = \"volume-down\",\n                HIGH_VOLUME = \"volume-up\",\n                VIDEO_QUALITY = \"k-mediaplayer-quality\",\n                STATE_PLAY = \"play\",\n                STATE_PAUSE = \"pause\",\n                TITLEBAR = \"k-mediaplayer-titlebar\",\n                TITLE = \"k-title\",\n                TOOLBARWRAP = \"k-mediaplayer-toolbar-wrap\",\n                TOOLBAR = \"k-mediaplayer-toolbar\",\n                SLIDER = \"k-mediaplayer-seekbar\",\n                VOLUME_SLIDER = \"k-mediaplayer-volume\",\n                MEDIA = \"k-mediaplayer-media\",\n                OVERLAY = \"k-mediaplayer-overlay\",\n                YTPLAYER = \"k-mediaplayer-yt\",\n                DOT = \".\",\n                STATE_PLAY_SELECTOR = 'span[class*=\"i-' + STATE_PLAY + '\"]',\n                STATE_PAUSE_SELECTOR = 'span[class*=\"i-' + STATE_PAUSE + '\"]',\n                FULLSCREEN_ENTER_SELECTOR = 'span[class*=\"i-' + FULLSCREEN_ENTER + '\"]',\n                FULLSCREEN_EXIT_SELECTOR = 'span[class*=\"i-' + FULLSCREEN_EXIT + '\"]',\n                MUTE_SELECTOR = 'span[class*=\"i-' + MUTE + '\"]',\n                LOW_VOLUME_SELECTOR = 'span[class*=\"i-' + LOW_VOLUME + '\"]',\n                HIGH_VOLUME_SELECTOR = 'span[class*=\"i-' + HIGH_VOLUME + '\"]',\n                ui = kendo.ui,\n                ns = \".kendoMediaPlayer\",\n                baseTime = new Date(1970, 0, 1),\n                timeZoneSec = baseTime.getTimezoneOffset() * 60,\n                Widget = kendo.ui.Widget,\n                isArray = Array.isArray,\n                timeFormats = {\n                    shortTime: \"mm:ss\",\n                    longTime: \"HH:mm:ss\"\n                },\n                template = kendo.template,\n                keys = kendo.keys,\n                templates = {\n                    htmlPlayer: () => \"<video class='\" + MEDIA + \"'> </video>\",\n                    titleBar: template(() => \"<div class='\" + TITLEBAR + \"'><span class='\" + TITLE + \"'>Video Title</span></div>\"),\n                    toolBar: () => \"<div class='\" + TOOLBARWRAP + \"'><div class='\" + TOOLBAR + \"'></div></div>\",\n                    youtubePlayer: () => \"<div class='\" + YTPLAYER + \"'> </div>\",\n                    toolBarTime: () => \"<span class='k-mediaplayer-currenttime'>00:00:00</span> / <span class='k-mediaplayer-duration'>00:00:00</span>\",\n                    slider: () => \"<input class='\" + SLIDER + \"' value='0' title='seekbar' />\",\n                    volumeSlider: () => \"<input class='\" + VOLUME_SLIDER + \"' title='volume'/>\",\n                    qualityDropDown: () => \"<input class='\" + VIDEO_QUALITY + \"' title='video quality' />\",\n                    toolTip: ({ value }) => `${kendo.toString(new Date(value), 'HH:mm:ss')}`\n                };\n\n            var MediaPlayer = Widget.extend({\n                init: function(element, options) {\n                    this.wrapper = $(element);\n\n                    Widget.fn.init.call(this, element, options);\n\n                    this.wrapper.addClass(\"k-mediaplayer k-widget\");\n\n                    options = this.options;\n\n                    this._currentIndex = 0;\n\n                    this._createTitlebar();\n\n                    this._createToolbar();\n\n                    this._createDropDown();\n\n                    this._createSlider();\n\n                    this._createVolumeSlider();\n\n                    this._timers = {};\n\n                    this._aria();\n\n                    this._navigatable();\n\n                    if (options.fullScreen) {\n                        this.fullScreen(true);\n                    }\n\n                    if (options.media) {\n                        this.media(this.options.media);\n                    }\n\n                    kendo.notify(this);\n                },\n\n                events: [\n                    END,\n                    PAUSE,\n                    PLAY,\n                    READY,\n                    TIMECHANGE,\n                    VOLUMECHANGE\n                ],\n\n                options: {\n                    name: \"MediaPlayer\",\n                    autoPlay: false,\n                    autoRepeat: false,\n                    volume: 100,\n                    fullScreen: false,\n                    mute: false,\n                    navigatable: false,\n                    forwardSeek: true,\n                    media: null,\n                    messages: {\n                        \"pause\": \"Pause\",\n                        \"play\": \"Play\",\n                        \"mute\": \"Mute\",\n                        \"unmute\": \"Unmute\",\n                        \"quality\": \"Quality\",\n                        \"fullscreen\": \"Full Screen\"\n                    }\n                },\n\n                _msToTime: function(ms) {\n                    var time = new Date(baseTime.getTime());\n                    time.setSeconds(ms);\n                    return time;\n                },\n\n                _timeToSec: function(time) {\n                    var curTime = new Date(time).getTime();\n                    return curTime / 1000;\n                },\n\n                _createTitlebar: function() {\n                    this._titleBar = this.wrapper.find(DOT + TITLEBAR);\n                    if (this._titleBar.length === 0) {\n                        this.wrapper.append(templates.titleBar);\n                        this._titleBar = this.wrapper.find(DOT + TITLEBAR);\n                    }\n                },\n\n                _createSlider: function() {\n                    var sliderElement = this.wrapper.find(DOT + SLIDER);\n                    if (!this._slider) {\n                        this._sliderDragChangeHandler = this._sliderDragChange.bind(this);\n                        this._sliderDraggingHandler = this._sliderDragging.bind(this);\n                        sliderElement = this.wrapper.find(DOT + SLIDER);\n\n                        this._slider = new ui.Slider(sliderElement[0], {\n                            smallStep: 1000,\n                            tickPlacement: \"none\",\n                            showButtons: false,\n                            change: this._sliderDragChangeHandler,\n                            slide: this._sliderDraggingHandler,\n                            tooltip: {\n                                template: templates.toolTip\n                            },\n                            dragHandleTitle: this.options.messages.time\n                        });\n                    }\n                },\n\n                _createVolumeSlider: function() {\n                    var volumeSliderElement = this.wrapper.find(DOT + VOLUME_SLIDER);\n                    if (!this._volumeSlider) {\n                        this._volumeDraggingHandler = this._volumeDragging.bind(this);\n                        this._volumeChangeHandler = this._volumeChange.bind(this);\n                        volumeSliderElement.width(87);\n                        this._volumeSlider = new ui.Slider(volumeSliderElement[0], {\n                            smallStep: 1,\n                            min: 0,\n                            max: 100,\n                            value: this.options.volume,\n                            slide: this._volumeDraggingHandler,\n                            change: this._volumeChangeHandler,\n                            tickPlacement: \"none\",\n                            showButtons: false,\n                            tooltip: { enabled: false },\n                            dragHandleTitle: this.options.messages.volume\n                        });\n                    }\n                },\n\n                _resetTime: function() {\n                    if (this._youTubeVideo) {\n                        this._ytmedia.seekTo(0, true);\n                    } else {\n                        this._media.currentTime = 0;\n                    }\n\n                    this._mediaTimeUpdate();\n                    $.grep(this._toolBar.options.items, function(e) { return !!e.template; }).template = templates.toolBarTime;\n                },\n\n                _currentUrl: function() {\n                    var media = this.media();\n                    return isArray(media.source) ? media.source[this._currentIndex].url : media.source;\n                },\n\n                _isYouTubeUrl: function() {\n                    return !!this._currentUrl().match(\"youtube.com/|youtu.be/\");\n                },\n\n                _setPlayerUrl: function() {\n                    var oldPlayer = this._youTubeVideo;\n                    this.stop();\n\n                    this._youTubeVideo = this._isYouTubeUrl();\n\n                    if (oldPlayer !== this._youTubeVideo) {\n                        this.wrapper.find(DOT + YTPLAYER).toggle();\n                        this.wrapper.find(DOT + MEDIA).toggle();\n                    }\n\n                    var initialized = this._media || this._ytmedia;\n\n                    this._initializePlayer();\n\n                    if (initialized) { //mute and volume settings should be persisted when switching between html and youtube players\n                        this.mute(this.mute());\n                        this.volume(this.volume());\n                    }\n\n                    if (!this._youTubeVideo) {\n                        this._videoOverlay.show();\n                        this.wrapper.find(DOT + MEDIA + \" > source\").remove();\n                        this.wrapper.find(DOT + MEDIA).attr(\"src\", this._currentUrl());\n\n                        if (this.options.autoPlay) {\n                            this.play();\n                        }\n                    }\n                    else if (this._ytmedia) {\n                        if (this._videoOverlay) {\n                            this._videoOverlay.hide();\n                        }\n                        if (this.options.autoPlay) {\n                            this._ytmedia.loadVideoById(this._getMediaId());\n                            this._playStateToggle(true);\n                        }\n                        else {\n                            this._ytmedia.cueVideoById(this._getMediaId());\n                            this._playStateToggle(true);\n                        }\n                    }\n                },\n\n                _createToolbar: function() {\n                    var toolBarElement = this.wrapper.find(DOT + TOOLBAR);\n                    if (toolBarElement.length === 0) {\n                        this._toolbarClickHandler = this._toolbarClick.bind(this);\n                        this.wrapper.append(templates.toolBar);\n                        toolBarElement = this.wrapper.find(DOT + TOOLBAR);\n                        toolBarElement.width(this.wrapper.find(DOT + MEDIA).width());\n                        this._toolBar = new ui.ToolBar(toolBarElement, {\n                            click: this._toolbarClickHandler,\n                            resizable: false,\n                            items: [\n                                {\n                                    type: \"button\",\n                                    attributes: { \"class\": \"k-play-button\" },\n                                    icon: \"play\",\n                                    fillMode: \"flat\"\n                                },\n                                {\n                                    template: templates.toolBarTime,\n                                    attributes: { \"class\": \"k-mediaplayer-currenttime-wrap\" }\n                                },\n                                {\n                                    type: \"spacer\"\n                                },\n                                {\n                                    type: \"button\",\n                                    attributes: { \"class\": \"k-volume-button\" },\n                                    icon: \"volume-up\",\n                                    fillMode: \"flat\"\n                                },\n                                {\n                                    template: templates.volumeSlider,\n                                    attributes: { \"class\": \"k-mediaplayer-volume-wrap\" }\n                                },\n                                {\n                                    template: templates.qualityDropDown,\n                                    attributes: { \"class\": \"k-mediaplayer-quality-wrap\" }\n                                },\n                                {\n                                    type: \"button\",\n                                    attributes: { \"class\": \"k-fullscreen-button\" },\n                                    icon: \"fullscreen\",\n                                    fillMode: \"flat\"\n                                }\n                            ]\n                        });\n\n                        this._toolBar.wrapper.off(\"keydown\");\n                        toolBarElement.before(templates.slider);\n\n                        this._volumeButton = toolBarElement.find(\".k-volume-button\");\n                        this._fullscreenButton = toolBarElement.find(\".k-fullscreen-button\");\n                        this._volumeButton.attr(\"title\", this.options.mute ? this.options.messages.unmute : this.options.messages.mute);\n                        this._volumeButton.attr(\"aria-label\", this.options.mute ? this.options.messages.unmute : this.options.messages.mute);\n                        this._fullscreenButton.attr(\"title\", this.options.messages.fullscreen);\n                        this._fullscreenButton.attr(\"aria-label\", this.options.messages.fullscreen);\n\n                        toolBarElement.width(\"auto\");\n                        this._currentTimeElement = toolBarElement.find(\".k-mediaplayer-currenttime\");\n                        this._durationElement = toolBarElement.find(\".k-mediaplayer-duration\");\n                        this._playButton = toolBarElement.find(\".k-play-button\");\n                        this._playButtonSpan = this._playButton.find(STATE_PLAY_SELECTOR);\n\n                        if (this.options.autoPlay) {\n                            this._playStateToggle(true);\n                        }\n\n                        if ( kendo.support.cssFlexbox === false ) {\n                            $([\n                                this._volumeButton[0],\n                                toolBarElement.find(\".k-mediaplayer-volume-wrap\")[0],\n                                toolBarElement.find(\".k-mediaplayer-quality-wrap\")[0],\n                                this._fullscreenButton[0]\n                            ]).wrapAll(\"<div class='k-align-right' />\");\n                        }\n                    }\n                },\n\n                _createDropDown: function() {\n                    var hdIcon = kendo.ui.icon(\"hd\");\n                    var dropDownElement = this.wrapper.find(DOT + VIDEO_QUALITY);\n                    var media = this.media();\n                    if (typeof dropDownElement.data(\"kendoDropDownList\") === \"undefined\") {\n                        this._dropDownSelectHandler = this._dropDownSelect.bind(this);\n                        this._dropDown = new ui.DropDownList(dropDownElement, {\n                            dataTextField: \"quality\",\n                            dataValueField: \"url\",\n                            popup: {\n                                position: \"bottom\",\n                                origin: \"top\",\n                                appendTo: this.wrapper\n                            },\n                            animation: {\n                                open: {\n                                    effects: \"slideIn:up\",\n                                    duration: 1\n                                }\n                            },\n                            select: this._dropDownSelectHandler\n                        });\n\n                        if (media && isArray(media.source)) {\n                            this._dropDown.setDataSource(media.source);\n                            this._dropDown.select(0);\n                        }\n\n                        this._dropDown.wrapper.addClass(\"k-button k-button-md k-rounded-md k-button-flat k-button-flat-base\");\n                        this._dropDown.wrapper.attr(\"title\", this.options.messages.quality).hide();\n                        this._dropDown.wrapper.find('span[class*=\"i-caret-alt-down\"]')\n                            .replaceWith(hdIcon);\n                        this._dropDown.list.addClass(\"k-quality-list\");\n                    }\n                },\n\n                _dropDownSelect: function(e) {\n                    if (this._currentIndex !== e.item.index()) {\n                        this._currentIndex = e.item.index();\n                        this._setPlayerUrl();\n                    }\n                },\n\n                _toolbarClick: function(e) {\n                    var target = $(e.target).children().first();\n                    var isPaused = target.is(STATE_PLAY_SELECTOR);\n\n                    if (!this.media()) {\n                        return;\n                    }\n\n                    if (target.is(STATE_PLAY_SELECTOR) || target.is(STATE_PAUSE_SELECTOR)) {\n                        if (isPaused) {\n                            this.play();\n                        }\n                        else {\n                            this.pause();\n                        }\n                    }\n\n                    if (target.is(FULLSCREEN_ENTER_SELECTOR) || target.is(FULLSCREEN_EXIT_SELECTOR)) {\n                        if (this._isInFullScreen) {\n                            kendo.ui.icon(target, { icon: FULLSCREEN_ENTER });\n                            this.fullScreen(false);\n                        } else {\n                            kendo.ui.icon(target, { icon: FULLSCREEN_EXIT });\n                            this.fullScreen(true);\n                        }\n                    }\n\n                    if (target.is(MUTE_SELECTOR) || target.is(LOW_VOLUME_SELECTOR) || target.is(HIGH_VOLUME_SELECTOR)) {\n                        var muted = this.mute();\n                        this.mute(!muted);\n                    }\n                },\n\n                _sliderDragging: function() {\n                    if (!this.media()) {\n                        return;\n                    }\n\n                    this._isDragging = true;\n                },\n\n                _sliderDragChange: function(e) {\n                    var that = this;\n                    var slider = e.sender;\n                    var tzOffset = timeZoneSec * 1000;\n\n                    if (!this.media()) {\n                        return;\n                    }\n\n                    that._sliderChangeFired = true;\n                    that._isDragging = false;\n\n                    if (!this.options.forwardSeek && slider.value() > this._seekBarLastPosition) {\n                        setTimeout(function() {\n                            slider.value(that._seekBarLastPosition);\n                        }, 1);\n                    } else if (this._youTubeVideo) {\n                        that._ytmedia.seekTo(that._timeToSec(e.value - tzOffset));\n                    } else {\n                        that._media.currentTime = that._timeToSec(e.value - tzOffset);\n                    }\n                    that.trigger(TIMECHANGE);\n                    that._preventPlay = true;\n                },\n\n                _changeVolumeButtonImage: function(volume) {\n                    var volumeButton = this._volumeButton;\n                    var volumeElement = volumeButton.find(\"span\");\n\n                    if (volume === 0) {\n                        kendo.ui.icon(volumeElement, { icon: MUTE });\n                        volumeButton.attr(\"title\", this.options.messages.unmute);\n                        volumeButton.attr(\"aria-label\", this.options.messages.unmute);\n                    } else if (volume > 0 && volume < 51) {\n                        kendo.ui.icon(volumeElement, { icon: LOW_VOLUME });\n                        volumeButton.attr(\"title\", this.options.messages.mute);\n                        volumeButton.attr(\"aria-label\", this.options.messages.mute);\n                    } else {\n                        kendo.ui.icon(volumeElement, { icon: HIGH_VOLUME });\n                        volumeButton.attr(\"title\", this.options.messages.mute);\n                        volumeButton.attr(\"aria-label\", this.options.messages.mute);\n                    }\n                },\n\n                _volumeDragging: function(e) {\n                    if (!this.media()) {\n                        return;\n                    }\n                    this.volume(e.value);\n                    this._changeVolumeButtonImage(e.value);\n                    this.trigger(VOLUMECHANGE);\n                },\n\n                _volumeChange: function(e) {\n                    if (!this.media()) {\n                        return;\n                    }\n                    this.volume(e.value);\n                    this._changeVolumeButtonImage(e.value);\n                    this.trigger(VOLUMECHANGE);\n                },\n\n                _mediaTimeUpdate: function() {\n                    var currentTime = (this._youTubeVideo) ? this._ytmedia.getCurrentTime() : this._media.currentTime;\n                    currentTime = currentTime ? currentTime : 0;\n                    var timeInMs = this._msToTime(currentTime);\n                    this._currentTimeElement.text(kendo.toString(timeInMs, this._timeFormat));\n                    if (!this._isDragging) {\n                        this._seekBarLastPosition = (currentTime + timeZoneSec) * 1000;\n                        this._slider.value(this._seekBarLastPosition);\n                    }\n\n                    return this.isPlaying();\n                },\n\n                _playStateToggle: function(play) {\n                    if (typeof play === \"undefined\") {\n                        play = this._playButtonSpan.is(STATE_PLAY_SELECTOR);\n                    }\n\n                    if (play) {\n                        kendo.ui.icon(this._playButtonSpan, { icon: STATE_PAUSE });\n                        this._playButton.attr(\"title\", this.options.messages.pause);\n                        this._playButton.attr(\"aria-label\", this.options.messages.pause);\n                    }\n                    else {\n                        kendo.ui.icon(this._playButtonSpan, { icon: STATE_PLAY });\n                        this._playButton.attr(\"title\", this.options.messages.play);\n                        this._playButton.attr(\"aria-label\", this.options.messages.play);\n                    }\n                },\n\n                _mediaEnded: function() {\n                    this._playStateToggle(false);\n                    this._currentTimeElement.text(kendo.toString(this._msToTime(0), this._timeFormat));\n                    this._slider.value((0 + timeZoneSec) * 1000);\n                    this.trigger(END);\n                },\n\n                _mediaPlay: function() {\n                    this.trigger(PLAY);\n                },\n\n                _mediaReady: function() {\n                    this.trigger(READY);\n                },\n\n                _mediaDurationChange: function() {\n                    var durationTime = this._msToTime((this._youTubeVideo) ? this._ytmedia.getDuration() : this._media.duration);\n\n                    this._timeFormat = durationTime.getHours() === 0 ? timeFormats.shortTime : timeFormats.longTime;\n\n                    this._durationElement.text(kendo.toString(durationTime, this._timeFormat));\n                    this._slider.setOptions({\n                        min: baseTime.getTime(),\n                        max: durationTime.getTime()\n                    });\n\n                    if (!this._isFirstRun) {\n                        this._resetTime();\n                        this._isFirstRun = true;\n                    }\n                },\n\n                _createYoutubePlayer: function() {\n                    this._mediaTimeUpdateHandler = this._mediaTimeUpdate.bind(this);\n                    this._mediaDurationChangeHandler = this._mediaDurationChange.bind(this);\n\n                    this.wrapper.prepend(templates.youtubePlayer);\n                    this._ytPlayer = this.wrapper.find(DOT + YTPLAYER)[0];\n                    $(this._ytPlayer)\n                        .css({\n                            width: this.wrapper.width(),\n                            height: this.wrapper.height()\n                        });\n\n                    if (!window.YT || !window.YT.Player) {\n                        if (!window.onYouTubeIframeAPIReadyRegister) {\n                            window.onYouTubeIframeAPIReadyRegister = [];\n                            $.getScript(\"https://www.youtube.com/iframe_api\");\n                            window.onYouTubeIframeAPIReady =\n                                function() {\n                                    if (window.onYouTubeIframeAPIReadyRegister) {\n                                        for (var i = 0; i < window.onYouTubeIframeAPIReadyRegister.length; i++) {\n                                            window.onYouTubeIframeAPIReadyRegister[i]._youtubeApiReady();\n                                        }\n                                    }\n                                    window.onYouTubeIframeAPIReadyRegister.length = 0;\n                                    window.onYouTubeIframeAPIReadyRegister = undefined$1;\n                                };\n                        }\n                        window.onYouTubeIframeAPIReadyRegister[window.onYouTubeIframeAPIReadyRegister.length] = this;\n                    }\n                    else {\n                        this._configurePlayer();\n                    }\n                },\n\n                _poll: function(name, callback, interval, context) {\n                    var that = this;\n\n                    if (that._timers[name] !== null) {\n                        clearTimeout(that._timers[name]);\n                    }\n\n                    that._timers[name] = setTimeout((function(context) {\n                        return function callLater() {\n                            if (callback.call(context)) {\n                                that._timers[name] = setTimeout(callLater, interval);\n                            }\n                        };\n                    })(context), interval);\n\n                    return that._timers[name];\n                },\n\n                _youtubeApiReady: function() {\n                    this._configurePlayer();\n                },\n\n                _configurePlayer: function() {\n                    var vars = {\n                        'autoplay': +this.options.autoPlay,\n                        'wmode': 'transparent',\n                        'controls': 0,\n                        'rel': 0,\n                        'showinfo': 0\n                    };\n\n                    this._onYouTubePlayerReady = this._onYouTubePlayerReady.bind(this);\n                    window.onYouTubePlayerReady = this._onYouTubePlayerReady;\n                    this._onPlayerStateChangeHandler = this._onPlayerStateChange.bind(this);\n                    window.onPlayerStateChange = this._onPlayerStateChange;\n\n\n                    var player = new window.YT.Player(this.wrapper.find(DOT + YTPLAYER)[0], {\n                        height: this.wrapper.height(),\n                        width: this.wrapper.width(),\n                        videoId: this._getMediaId(),\n                        playerVars: vars,\n                        events: {\n                            'onReady': this._onYouTubePlayerReady,\n                            'onStateChange': this._onPlayerStateChangeHandler\n                        }\n                    });\n                },\n\n                _onYouTubePlayerReady: function(event) {\n                    this._ytmedia = event.target;\n                    this._ytmedia.getIframe().style.width = \"100%\";\n                    this._ytmedia.getIframe().style.height = \"100%\";\n                    this._youTubeVideo = true;\n                    this._mediaDurationChangeHandler();\n\n                    if (this.options.autoPlay) {\n                        this._playStateToggle(true);\n                        this._ytmedia.loadVideoById(this._getMediaId());\n                    }\n                    else {\n                        this._ytmedia.cueVideoById(this._getMediaId());\n                    }\n\n                    if (this.options.mute) {\n                        this.mute(true);\n                    }\n\n                    this.trigger(READY);\n                },\n\n                _updateTitle: function() {\n                    this.titlebar().text(this.media().title || this.media().source);\n                },\n\n                _onPlayerStateChange: function(event) {\n\n                    if (event.data === 0) {\n                        this._slider.value(0);\n                        this._paused = false;\n                        this._playStateToggle(true);\n                        this.trigger(END);\n                        if (this.options.autoRepeat) {\n                            this.play();\n                        }\n                    }\n                    else if (event.data === 1) {\n                        this._mediaDurationChange();\n                        this._ytmedia.setVolume(this.volume());\n                        if (this._sliderChangeFired) {\n                            this._sliderChangeFired = false;\n                        } else {\n                            this._uiDisplay(false);\n                        }\n                        this.trigger(PLAY);\n                        this._playStateToggle(true);\n\n                        this._poll(\"progress\", this._mediaTimeUpdate, 500, this);\n                        this._paused = false;\n                    }\n                    else if (event.data === 2) {\n                        if (!this._paused) {\n                            this._uiDisplay(true);\n                            this._playStateToggle(false);\n                            this.trigger(PAUSE);\n                            this._paused = true;\n                        }\n                    }\n                },\n\n                _getMediaId: function() {\n                    var result = this._currentUrl();\n                    var regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#\\&\\?]*).*/;\n                    var match = result.match(regExp);\n\n                    if (match && match[7].length === 11) {\n                        result = match[7];\n                    }\n\n                    return result;\n                },\n\n                _mouseClick: function() {\n                    if (this.isPaused()) {\n                        this.play();\n                    } else {\n                        this.pause();\n                    }\n                },\n\n                _initializePlayer: function() {\n                    if (!this._mouseMoveHandler) {\n                        this._mouseMoveHandler = this._mouseMove.bind(this);\n                        this._mouseInHandler = this._mouseIn.bind(this);\n                        this._mouseOutHandler = this._mouseOut.bind(this);\n\n                        $(this.wrapper)\n                            .on(\"mouseenter\" + ns, this._mouseInHandler)\n                            .on(\"mouseleave\" + ns, this._mouseOutHandler)\n                            .on(\"mousemove\" + ns, this._mouseMoveHandler);\n                    }\n\n                    if (!this._ytmedia && this._youTubeVideo) {\n                        this._createYoutubePlayer();\n                    }\n                    else if (!this._media && !this._youTubeVideo) {\n                        this._createHtmlPlayer();\n                    }\n                },\n\n                _createHtmlPlayer: function() {\n                    if (!this._videoOverlay) {\n                        this._mouseClickHanlder = this._mouseClick.bind(this);\n                        this.wrapper.append(\"<div class='\" + OVERLAY + \"'></div>\");\n                        this._videoOverlay = this.wrapper.find(\".k-mediaplayer-overlay\")\n                            .on(\"click\" + ns, this._mouseClickHanlder);\n                    }\n\n                    this._mediaTimeUpdateHandler = this._mediaTimeUpdate.bind(this);\n                    this._mediaDurationChangeHandler = this._mediaDurationChange.bind(this);\n                    this._mediaEndedHandler = this._mediaEnded.bind(this);\n                    this._mediaCanPlayHandler = this._mediaReady.bind(this);\n                    this._mediaPlayHandler = this._mediaPlay.bind(this);\n                    this._videoOverlay.after(templates.htmlPlayer);\n                    this._media = this.wrapper.find(DOT + MEDIA)[0];\n                    $(this._media)\n                        .css({\n                            width: \"100%\",\n                            height: \"100%\"\n                        });\n\n                    if (this.options.mute) {\n                        this.mute(true);\n                    }\n\n                    this._media.ontimeupdate = this._mediaTimeUpdateHandler;\n                    this._media.ondurationchange = this._mediaDurationChangeHandler;\n                    this._media.oncanplay = this._mediaCanPlayHandler;\n                    this._media.onplay = this._mediaPlayHandler;\n                    this._media.onended = this._mediaEndedHandler;\n                    this._media.loop = this.options.autoRepeat;\n                },\n\n                _mouseIn: function() {\n                    this._uiDisplay(true);\n                },\n\n                _mouseOut: function() {\n                    this._poll(\"mouseIdle\", this._mouseIdle, 3000, this);\n                },\n\n                _mouseIdle: function() {\n                    this._uiDisplay(false);\n                    return false;\n                },\n\n                _mouseMove: function() {\n                    if (!(this._titleBar.is(':animated') || this._toolBar.element.is(':animated') || this._slider.wrapper.is(':animated'))) {\n                        this._uiDisplay(true);\n                    }\n                    this._poll(\"mouseIdle\", this._mouseIdle, 3000, this);\n                },\n\n                _uiDisplay: function(state) {\n                    var animationSpeed = 'slow';\n                    var uiElements = this._titleBar\n                        .add(this._toolBar.element.parent());\n\n                    if (state) {\n                        uiElements.fadeIn(animationSpeed);\n                    }\n                    else {\n                        uiElements.fadeOut(animationSpeed);\n                        if (this.options.navigatable) {\n                            this.wrapper.trigger(\"focus\");\n                        }\n                    }\n                },\n\n                setOptions: function(options) {\n                    Widget.fn.setOptions.call(this, options);\n                },\n\n                destroy: function() {\n                    Widget.fn.destroy.call(this);\n\n                    if (!this.isPaused()) {\n                        this.pause();\n                    }\n\n                    this.element.off(ns);\n                    this.element.find(DOT + OVERLAY).off(ns);\n                    this._timers = null;\n                    this._mouseMoveHandler = null;\n                    this._mouseOutHandler = null;\n                    this._mouseInHandler = null;\n                    this._mouseClickHanlder = null;\n                    this._keyDownHandler = null;\n                    this._fullscreenHandler = null;\n\n                    this._toolbarClickHandler = null;\n                    this._sliderDragChangeHandler = null;\n                    this._sliderDraggingHandler = null;\n                    this._volumeDraggingHandler = null;\n                    this._volumeChangeHandler = null;\n                    this._youtubeApiReadyHandler = null;\n                    this._onYouTubePlayerReady = null;\n                    this._onPlayerStateChangeHandler = null;\n                    this._dropDownSelectHandler = null;\n\n                    if (this._youTubeVideo) {\n                        this._ytmedia.destroy();\n                    }\n                    else {\n                        this._media.ontimeupdate = this._mediaTimeUpdateHandler = null;\n                        this._media.ondurationchange = this._mediaDurationChangeHandler = null;\n                        this._media.oncanplay = this._mediaCanPlayHandler = null;\n                        this._media.onplay = this._mediaPlayHandler = null;\n                        this._media.onended = this._mediaEndedHandler = null;\n                        this._media.src = \"\";\n                        this._media.remove();\n                    }\n\n                    this._mouseMoveTimer = null;\n                    clearTimeout(this._mouseMoveTimer);\n\n                    kendo.destroy(this.element);\n                },\n\n                seek: function(ms) {\n                    if (typeof ms === 'undefined') {\n                        return 1000 * (this._youTubeVideo) ? this._ytmedia.getCurrentTime() : (this._media ? this._media.currentTime : 0);\n                    }\n                    var seconds = ms / 1000;\n                    if (this._youTubeVideo) {\n                        if (seconds + 3 >= this._ytmedia.getDuration() | 0) {\n                            //avoid infinite bad request loop in youtube player.\n                            this._ytmedia.seekTo(this._ytmedia.getDuration() - 3 | 0, true);\n                        } else {\n                            this._ytmedia.seekTo(seconds, true);\n                        }\n                    } else {\n                        this._media.currentTime = seconds;\n                    }\n\n                    return this;\n                },\n\n                play: function() {\n                    if (this._youTubeVideo) {\n                        this._ytmedia.playVideo();\n                    } else {\n                        if (kendo.support.mobileOS) {\n                            this._uiDisplay(false);\n                        }\n                        this._media.play();\n                    }\n                    this._paused = false;\n\n                    this._playStateToggle(true);\n\n                    return this;\n                },\n\n                stop: function() {\n                    if (this._youTubeVideo && this._ytmedia) {\n                        this._ytmedia.stopVideo();\n                    } else if (this._media && !this._youTubeVideo) {\n                        if (kendo.support.mobileOS) {\n                            this._uiDisplay(true);\n                        }\n                        this._media.pause();\n                        this._media.currentTime = 0;\n                    }\n                    this._paused = true;\n\n                    this._playStateToggle(false);\n                    return this;\n                },\n\n                pause: function() {\n                    if (this._youTubeVideo) {\n                        this._ytmedia.pauseVideo();\n                    } else {\n                        if (kendo.support.mobileOS) {\n                            this._uiDisplay(true);\n                        }\n                        this._media.pause();\n                    }\n                    this._paused = true;\n                    this._playStateToggle(false);\n                    this.trigger(PAUSE);\n                    return this;\n                },\n\n                toolbar: function() {\n                    return this._toolBar;\n                },\n\n                dropdown: function() {\n                    return this._dropDown;\n                },\n\n                titlebar: function() {\n                    return this._titleBar;\n                },\n\n                fullScreen: function(enterFullScreen) {\n                    if (typeof enterFullScreen === 'undefined') {\n                        return this._isInFullScreen || false;\n                    }\n                    var element = this.element.get(0);\n                    if (enterFullScreen) {\n                        // Handles the case when the action is triggered by code and not by user iteraction\n                        this.element.addClass(\"k-mediaplayer-fullscreen\");\n                        if (element.requestFullscreen) {\n                            element.requestFullscreen();\n                        } else if (element.webkitRequestFullscreen) {\n                            element.webkitRequestFullscreen();\n                        } else if (element.mozRequestFullScreen) {\n                            element.mozRequestFullScreen();\n                        } else if (element.msRequestFullscreen) {\n                            element.msRequestFullscreen();\n                        }\n                        this._isInFullScreen = true;\n                    } else {\n\n                        if (document.cancelFullscreen) {\n                            document.cancelFullscreen();\n                        } else if (document.webkitCancelFullScreen) {\n                            document.webkitCancelFullScreen();\n                        } else if (document.mozCancelFullScreen) {\n                            document.mozCancelFullScreen();\n                        } else if (document.msCancelFullscreen) {\n                            document.msCancelFullscreen();\n                        } else if (document.exitFullscreen) {\n                            document.exitFullscreen();\n                        } else if (document.msExitFullscreen) {\n                            document.msExitFullscreen();\n                        }\n                        // Handles the case when the action is triggered by code and not by user iteraction\n                        this.element.removeClass(\"k-mediaplayer-fullscreen\");\n                        this._isInFullScreen = false;\n                    }\n                    this._slider.resize();\n                },\n\n                volume: function(value) {\n                    if (typeof value === 'undefined') {\n                        return (typeof this._volume !== 'undefined') ? this._volume : this._volume = this.options.volume;\n                    }\n                    this._volume = value;\n                    this.mute(value <= 0);\n\n                    if (this._youTubeVideo) {\n                        this._ytmedia.setVolume(this._volume);\n                    } else {\n                        this._media.volume = this._volume / 100;\n                    }\n\n                    this._volumeSlider.value(value);\n                },\n\n                mute: function(muted) {\n                    var currentState = this._youTubeVideo ? (this._ytmedia && this._ytmedia.isMuted()) : (this._media && this._media.muted);\n                    if (typeof muted === 'undefined' || muted === currentState) {\n                        return currentState;\n                    }\n                    if (this._youTubeVideo) {\n                        if (muted) {\n                            this._ytmedia.mute();\n                        }\n                        else {\n                            this._ytmedia.unMute();\n                        }\n                    }\n                    else {\n                        this._media.muted = muted;\n                    }\n\n                    if (muted) {\n                        this._volumeSlider.value(0);\n                    }\n                    else {\n                        this._volumeSlider.value((this._media && this._media.volume * 100) || (this._ytmedia && this._ytmedia.getVolume()));\n                    }\n                    this.trigger(VOLUMECHANGE);\n                    this._changeVolumeButtonImage(this._volumeSlider.value());\n                },\n\n                isEnded: function() {\n                    if (this._youTubeVideo) {\n                        return this._ytmedia.getPlayerState() === 0;\n                    } else {\n                        return this._media.ended;\n                    }\n                },\n\n                media: function(value) {\n                    var dropdown = this.dropdown();\n                    if (typeof value === 'undefined') {\n                        return (typeof this._mediaData !== 'undefined') ? this._mediaData : this._mediaData = this.options.media;\n                    }\n\n                    if (isArray(value.source)) {\n                        dropdown.setDataSource(value.source);\n                        dropdown.wrapper.show();\n                    }\n                    else {\n                        dropdown.wrapper.hide();\n                    }\n\n                    this._mediaData = value;\n\n                    this._updateTitle();\n\n                    this._setPlayerUrl();\n                },\n\n                isPaused: function() {\n                    return this._paused;\n                },\n\n                isPlaying: function() {\n                    return !this.isEnded() && !this._paused;\n                },\n\n                _aria: function() {\n                    this.wrapper.attr(\"role\", \"region\");\n                    //this.wrapper.attr(\"aria-labelledby\", \"mediaplayerTitleBar\");\n                    //add onfocus with aria active descendant\n                },\n\n                _navigatable: function() {\n                    this._fullscreenHandler = this._fullscreen.bind(this);\n                    $(document)\n                        .on(\"webkitfullscreenchange mozfullscreenchange fullscreenchange\" + ns, this._fullscreenHandler);\n\n                    if (this.options.navigatable) {\n                        this.wrapper.attr(\"tabIndex\", 0);\n                        this._keyDownHandler = this._keyDown.bind(this);\n                        this.wrapper\n                            .on(\"keydown\" + ns, this._keyDownHandler);\n                    }\n                },\n\n                _fullscreen: function() {\n                    var isFullScreen = document.fullScreen ||\n                        document.mozFullScreen ||\n                        document.webkitIsFullScreen,\n                        fullscreenSpan = this.wrapper.find(FULLSCREEN_ENTER_SELECTOR);\n\n                    this._uiDisplay(true);\n                    this._slider.resize();\n\n                    if (!isFullScreen) {\n                        kendo.ui.icon(fullscreenSpan, { icon: FULLSCREEN_ENTER });\n                        this.fullScreen(false);\n                    }\n                },\n\n                _keyDown: function(e) {\n                    e.preventDefault();\n                    var fsButton = this.wrapper.find(FULLSCREEN_ENTER_SELECTOR);\n\n                    if (e.keyCode === keys.SPACEBAR) {\n                        if (this.isPlaying()) {\n                            this.pause();\n                        }\n                        else {\n                            this.play();\n                        }\n                    }\n                    else if (e.keyCode === keys.ENTER && !this._isInFullScreen) {\n                        kendo.ui.icon(fsButton, { icon: FULLSCREEN_EXIT });\n                        this.fullScreen(true);\n                    }\n                    else if (e.keyCode === 77) {\n                        var muted = this.mute();\n                        this.mute(!muted);\n                    }\n                    else if (e.keyCode === keys.ESC && this._isInFullScreen) {\n                        kendo.ui.icon(fsButton, { icon: FULLSCREEN_ENTER });\n                        this.fullScreen(false);\n                    }\n                },\n\n                _error: function() {\n                },\n\n                _progress: function() {\n                }\n\n            });\n\n            ui.plugin(MediaPlayer);\n\n        })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}